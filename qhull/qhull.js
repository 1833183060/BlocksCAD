
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 62416;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([113,104,95,100,105,115,116,112,108,97,110,101,58,32,0,0,102,114,111,109,32,112,37,100,32,116,111,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,102,105,110,100,98,101,115,116,58,32,112,111,105,110,116,32,112,37,100,32,115,116,97,114,116,105,110,103,32,97,116,32,102,37,100,32,105,115,110,101,119,102,97,99,101,116,115,63,32,37,100,44,32,117,110,108,101,115,115,32,37,100,32,101,120,105,116,32,105,102,32,62,32,37,50,46,50,103,10,0,0,0,0,0,0,32,32,116,101,115,116,104,111,114,105,122,111,110,63,32,37,100,32,110,111,117,112,112,101,114,63,32,37,100,0,0,0,32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,119,97,115,32,112,37,100,46,0,0,0,0,0,32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,32,32,109,97,120,95,111,117,116,115,105,100,101,32,37,50,46,50,103,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,98,101,115,116,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,44,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,32,102,37,100,10,0,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,119,41,58,32,109,101,114,103,105,110,103,32,104,97,115,32,102,111,114,109,101,100,32,97,110,100,32,100,101,108,101,116,101,100,32,97,32,99,111,110,101,32,111,102,32,110,101,119,32,102,97,99,101,116,115,46,32,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,119,41,58,32,110,111,32,110,101,119,32,102,97,99,101,116,115,32,102,111,114,32,112,111,105,110,116,32,112,37,100,10,0,0,0,0,0,113,104,95,102,105,110,100,98,101,115,116,110,101,119,58,32,112,111,105,110,116,32,112,37,100,32,102,97,99,101,116,32,102,37,100,46,32,83,116,111,112,63,32,37,100,32,105,102,32,100,105,115,116,32,62,32,37,50,46,50,103,10,0,0,32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,112,37,100,32,118,105,115,105,116,105,100,32,37,100,46,0,0,0,0,0,0,32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,10,0,0,113,104,95,102,105,110,100,98,101,115,116,110,101,119,58,32,98,101,115,116,102,97,99,101,116,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,10,0,0,0,113,104,95,102,105,110,100,98,101,115,116,104,111,114,105,122,111,110,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,32,102,37,100,32,105,115,99,104,101,99,107,109,97,120,63,32,37,100,32,110,111,117,112,112,101,114,63,32,37,100,32,109,105,110,115,101,97,114,99,104,32,37,50,46,50,103,32,115,101,97,114,99,104,100,105,115,116,32,37,50,46,50,103,10,0,0,0,0,113,104,95,102,105,110,100,98,101,115,116,104,111,114,105,122,111,110,58,32,110,101,119,98,101,115,116,63,32,37,100,32,98,101,115,116,102,97,99,101,116,32,102,37,100,32,98,101,115,116,100,105,115,116,32,37,50,46,50,103,10,0,0,0,113,104,95,98,97,99,107,110,111,114,109,97,108,58,32,122,101,114,111,32,100,105,97,103,111,110,97,108,32,97,116,32,99,111,108,117,109,110,32,37,100,46,10,0,0,0,0,0,122,101,114,111,32,100,105,97,103,111,110,97,108,32,111,110,32,98,97,99,107,32,115,117,98,115,116,105,116,117,116,105,111,110,0,0,0,0,0,0,113,104,95,103,97,117,115,115,101,108,105,109,58,32,48,32,112,105,118,111,116,32,97,116,32,99,111,108,117,109,110,32,37,100,46,32,40,37,50,46,50,103,32,60,32,37,50,46,50,103,41,10,0,0,0,0,77,97,116,114,105,120,58,0,122,101,114,111,32,112,105,118,111,116,32,102,111,114,32,71,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0,0,0,0,0,113,104,95,103,97,117,115,115,101,108,101,109,58,32,114,101,115,117,108,116,0,0,0,0,113,104,95,103,101,116,97,110,103,108,101,58,32,37,50,46,50,103,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,103,101,116,99,101,110,116,101,114,41,58,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,100,32,112,111,105,110,116,115,10,0,113,104,95,103,101,116,99,101,110,116,114,117,109,58,32,102,111,114,32,102,37,100,44,32,37,100,32,118,101,114,116,105,99,101,115,32,100,105,115,116,61,32,37,50,46,50,103,10,0,0,0,0,0,0,0,0,113,104,95,110,111,114,109,97,108,105,122,101,58,32,110,111,114,109,61,37,50,46,50,103,32,116,111,111,32,115,109,97,108,108,32,100,117,114,105,110,103,32,112,37,100,10,0,0,113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,97,99,101,116,32,102,37,100,32,99,114,101,97,116,101,100,46,10,0,0,0,32,32,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,116,111,32,104,117,108,108,32,119,97,115,32,112,37,100,46,0,0,0,0,0,10,10,67,117,114,114,101,110,116,32,115,117,109,109,97,114,121,32,105,115,58,10,0,0,113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,108,105,112,112,101,100,32,111,114,105,101,110,116,97,116,105,111,110,32,97,102,116,101,114,32,116,101,115,116,105,110,103,32,105,110,116,101,114,105,111,114,95,112,111,105,110,116,32,100,117,114,105,110,103,32,112,37,100,10,0,0,113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,61,61,61,61,61,61,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,105,110,99,114,101,97,115,101,115,32,109,97,120,95,111,117,116,115,105,100,101,32,116,111,32,37,50,46,50,103,32,102,111,114,32,110,101,119,32,102,97,99,101,116,32,102,37,100,32,108,97,115,116,32,112,37,100,10,0,0,0,0,0,113,104,95,115,101,116,102,97,99,101,116,112,108,97,110,101,58,32,102,37,100,32,111,102,102,115,101,116,32,37,50,46,50,103,32,110,111,114,109,97,108,58,32,0,0,0,0,0,37,50,46,50,103,32,0,0,113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,100,101,116,58,32,100,101,103,101,110,101,114,97,116,101,32,110,111,114,109,32,100,117,114,105,110,103,32,112,37,100,46,10,0,0,0,0,0,0,113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,103,97,117,115,115,58,32,110,101,97,114,108,121,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,32,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,32,100,117,114,105,110,103,32,112,37,100,46,10,0,0,0,0,0,0,0,0,113,104,95,115,101,116,104,121,112,101,114,112,108,97,110,101,95,103,97,117,115,115,58,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,32,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,32,97,116,32,110,111,114,109,97,108,105,122,97,116,105,111,110,32,100,117,114,105,110,103,32,112,37,100,46,10,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,99,111,112,121,32,37,100,32,112,111,105,110,116,115,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,101,114,109,105,110,97,116,101,41,58,32,111,110,108,121,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,100,105,109,101,110,115,105,111,110,32,62,61,32,50,10,0,0,0,0,0,113,104,95,100,105,115,116,114,111,117,110,100,58,32,37,50,46,50,103,32,109,97,120,97,98,115,32,37,50,46,50,103,32,109,97,120,115,117,109,97,98,115,32,37,50,46,50,103,32,109,97,120,100,105,115,116,115,117,109,32,37,50,46,50,103,10,0,0,0,0,0,0,95,109,97,120,45,119,105,100,116,104,0,0,0,0,0,0,69,114,114,111,114,45,114,111,117,110,100,111,102,102,0,0,65,110,103,108,101,45,112,114,101,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0,0,0,0,0,0,65,110,103,108,101,45,112,111,115,116,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0,0,0,0,0,67,101,110,116,114,117,109,45,112,114,101,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0,0,0,0,67,101,110,116,114,117,109,45,112,111,115,116,109,101,114,103,101,45,119,105,116,104,45,114,97,110,100,111,109,0,0,0,95,111,110,101,45,109,101,114,103,101,0,0,0,0,0,0,95,110,101,97,114,45,105,110,115,105,100,101,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,58,32,116,104,101,32,106,111,103,103,108,101,32,102,111,114,32,39,81,74,110,39,44,32,37,46,50,103,44,32,105,115,32,98,101,108,111,119,32,114,111,117,110,100,111,102,102,32,102,111,114,32,100,105,115,116,97,110,99,101,32,99,111,109,112,117,116,97,116,105,111,110,115,44,32,37,46,50,103,10,0,0,0,0,0,86,105,115,105,98,108,101,45,100,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,85,45,99,111,112,108,97,110,97,114,45,100,105,115,116,97,110,99,101,0,0,0,0,0,87,105,100,116,104,45,111,117,116,115,105,100,101,0,0,0,95,119,105,100,101,45,102,97,99,101,116,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,109,105,110,105,109,117,109,32,118,105,115,105,98,105,108,105,116,121,32,86,37,46,50,103,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,10,109,105,110,105,109,117,109,32,111,117,116,115,105,100,101,32,87,37,46,50,103,46,32,32,70,108,105,112,112,101,100,32,102,97,99,101,116,115,32,97,114,101,32,108,105,107,101,108,121,46,10,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,115,105,109,112,108,101,120,41,58,32,35,112,111,105,110,116,115,32,37,100,32,60,32,100,105,109,101,110,115,105,111,110,32,37,100,10,0,0,0,0,0,0,0,0,113,104,95,100,101,116,115,105,109,112,108,101,120,58,32,100,101,116,61,37,50,46,50,103,32,102,111,114,32,112,111,105,110,116,32,112,37,100,44,32,100,105,109,32,37,100,44,32,110,101,97,114,122,101,114,111,63,32,37,100,10,0,0,0,113,104,95,102,97,99,101,116,97,114,101,97,58,32,102,37,100,32,97,114,101,97,32,37,50,46,50,103,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,97,114,101,97,95,115,105,109,112,108,101,120,41,58,32,35,112,111,105,110,116,115,32,37,100,32,33,61,32,100,105,109,32,37,100,32,45,49,10,0,0,0,113,104,95,102,97,99,101,116,97,114,101,97,95,115,105,109,112,108,101,120,58,32,97,114,101,97,61,37,50,46,50,103,32,102,111,114,32,112,111,105,110,116,32,112,37,100,44,32,116,111,112,111,114,105,101,110,116,32,37,100,44,32,110,101,97,114,122,101,114,111,63,32,37,100,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,41,58,10,32,32,110,101,101,100,32,97,116,32,108,101,97,115,116,32,37,100,32,112,111,105,110,116,115,32,116,111,32,99,111,110,115,116,114,117,99,116,32,97,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,10,0,0,0,0,0,0,113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,58,32,97,116,32,105,110,102,105,110,105,116,121,32,102,111,114,32,0,0,0,0,0,113,104,95,118,111,114,111,110,111,105,95,99,101,110,116,101,114,58,32,100,101,116,32,37,50,46,50,103,32,102,97,99,116,111,114,32,37,50,46,50,103,32,0,0,0,0,0,0,99,101,110,116,101,114,58,0,112,111,105,110,116,115,0,0,112,37,100,32,100,105,115,116,32,37,46,50,103,44,32,0,99,111,109,112,117,116,105,110,103,32,97,114,101,97,32,111,102,32,101,97,99,104,32,102,97,99,101,116,32,97,110,100,32,118,111,108,117,109,101,32,111,102,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,10,0,0,0,0,0,113,104,95,103,101,116,97,114,101,97,58,32,99,111,109,112,117,116,105,110,103,32,118,111,108,117,109,101,32,97,110,100,32,97,114,101,97,32,102,111,114,32,101,97,99,104,32,102,97,99,101,116,10,0,0,0,113,104,95,115,101,116,100,101,108,97,117,110,97,121,58,32,112,114,111,106,101,99,116,32,37,100,32,112,111,105,110,116,115,32,116,111,32,112,97,114,97,98,111,108,111,105,100,32,102,111,114,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,10,0,0,0,0,0,113,104,95,109,97,120,109,105,110,58,32,102,111,117,110,100,32,116,104,101,32,109,97,120,32,97,110,100,32,109,105,110,32,112,111,105,110,116,115,40,98,121,32,100,105,109,41,58,0,0,0,0,0,0,0,0,113,104,95,109,97,120,111,117,116,101,114,58,32,109,97,120,32,100,105,115,116,97,110,99,101,32,102,114,111,109,32,102,97,99,101,116,32,116,111,32,111,117,116,101,114,32,112,108,97,110,101,32,105,115,32,37,50,46,50,103,32,109,97,120,95,111,117,116,115,105,100,101,32,105,115,32,37,50,46,50,103,10,0,0,0,0,0,0,105,110,112,117,116,32,104,97,115,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,109,97,120,115,105,109,112,108,101,120,32,102,111,114,32,118,111,114,111,110,111,105,95,99,101,110,116,101,114,41,58,10,37,100,32,112,111,105,110,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,46,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,105,110,112,117,116,32,105,115,32,108,101,115,115,32,116,104,97,110,32,37,100,45,100,105,109,101,110,115,105,111,110,97,108,32,115,105,110,99,101,32,105,116,32,104,97,115,32,116,104,101,32,115,97,109,101,32,120,32,99,111,111,114,100,105,110,97,116,101,10,0,0,0,0,0,0,0,0,113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,97,114,99,104,105,110,103,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,37,100,45,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,46,10,0,0,113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,97,114,99,104,105,110,103,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,37,100,45,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,44,32,98,101,116,116,101,114,32,116,104,97,110,32,112,37,100,32,100,101,116,32,37,50,46,50,103,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,120,115,105,109,112,108,101,120,41,58,32,110,111,116,32,101,110,111,117,103,104,32,112,111,105,110,116,115,32,97,118,97,105,108,97,98,108,101,10,0,0,0,0,0,0,113,104,95,109,97,120,115,105,109,112,108,101,120,58,32,115,101,108,101,99,116,101,100,32,112,111,105,110,116,32,112,37,100,32,102,111,114,32,37,100,96,116,104,32,105,110,105,116,105,97,108,32,118,101,114,116,101,120,44,32,100,101,116,61,37,50,46,50,103,10,0,0,37,54,46,51,103,32,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,41,58,32,100,105,109,101,110,115,105,111,110,32,97,102,116,101,114,32,112,114,111,106,101,99,116,105,111,110,32,37,100,32,33,61,32,104,117,108,108,95,100,105,109,32,37,100,10,0,0,0,113,104,117,108,108,32,101,114,114,111,114,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,106,101,99,116,32,37,100,32,112,111,105,110,116,115,10,0,0,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,58,32,117,112,100,97,116,105,110,103,32,108,111,119,101,114,32,97,110,100,32,117,112,112,101,114,95,98,111,117,110,100,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,41,58,32,72,65,76,70,115,112,97,99,101,32,100,101,102,105,110,101,100,32,119,105,116,104,111,117,116,32,113,104,46,102,101,97,115,105,98,108,101,95,112,111,105,110,116,10,0,0,0,0,113,104,95,112,114,111,106,101,99,116,105,110,112,117,116,58,32,112,114,111,106,101,99,116,101,100,32,112,111,105,110,116,115,32,116,111,32,112,97,114,97,98,111,108,111,105,100,32,102,111,114,32,68,101,108,97,117,110,97,121,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,106,101,99,116,112,111,105,110,116,115,41,58,32,110,101,119,100,105,109,32,37,100,32,115,104,111,117,108,100,32,98,101,32,37,100,32,97,102,116,101,114,32,112,114,111,106,101,99,116,105,111,110,10,0,0,0,0,0,0,0,113,104,95,112,114,111,106,101,99,116,112,111,105,110,116,115,58,32,112,114,111,106,101,99,116,101,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,100,105,109,32,37,100,32,116,111,32,100,105,109,32,37,100,10,0,0,0,0,113,104,95,114,111,116,97,116,101,112,111,105,110,116,115,58,32,114,111,116,97,116,101,32,112,111,105,110,116,115,32,98,121,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,98,37,100,39,32,111,114,32,39,81,66,37,100,39,32,105,110,118,101,114,116,115,32,112,97,114,97,98,111,108,111,105,100,32,115,105,110,99,101,32,104,105,103,104,32,98,111,117,110,100,32,37,46,50,103,32,60,32,108,111,119,32,98,111,117,110,100,32,37,46,50,103,10,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,37,100,39,116,104,32,100,105,109,101,110,115,105,111,110,39,115,32,110,101,119,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,111,32,119,105,100,101,32,102,111,114,10,101,120,105,115,116,105,110,103,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,10,0,0,0,0,0,113,104,95,115,99,97,108,101,112,111,105,110,116,115,58,32,115,99,97,108,101,100,32,37,100,39,116,104,32,99,111,111,114,100,105,110,97,116,101,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,32,91,37,46,50,103,44,32,37,46,50,103,93,32,102,111,114,32,37,100,32,112,111,105,110,116,115,32,98,121,32,37,50,46,50,103,32,97,110,100,32,115,104,105,102,116,101,100,32,37,50,46,50,103,10,0,0,0,0,0,0,0,0,113,104,95,115,99,97,108,101,108,97,115,116,58,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,32,102,114,111,109,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,116,111,32,91,48,44,37,50,46,50,103,93,10,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,46,32,32,73,110,112,117,116,32,105,115,32,99,111,99,105,114,99,117,108,97,114,10,32,32,32,111,114,32,99,111,115,112,104,101,114,105,99,97,108,46,32,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,122,39,32,116,111,32,97,100,100,32,97,32,112,111,105,110,116,32,97,116,32,105,110,102,105,110,105,116,121,46,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,115,99,97,108,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,46,32,32,78,101,119,32,98,111,117,110,100,115,32,91,48,44,32,37,50,46,50,103,93,32,97,114,101,32,116,111,111,32,119,105,100,101,32,102,111,114,10,101,120,105,115,116,105,110,103,32,98,111,117,110,100,115,32,91,37,50,46,50,103,44,32,37,50,46,50,103,93,32,40,119,105,100,116,104,32,37,50,46,50,103,41,10,0,113,104,95,115,104,97,114,112,110,101,119,102,97,99,101,116,115,58,32,37,100,10,0,0,24,42], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,99,111,109,109,97,110,100,32,108,105,110,101,10,0,0,0,0,0,113,104,95,105,110,105,116,113,104,117,108,108,95,103,108,111,98,97,108,115,58,32,102,111,114,32,37,115,32,124,32,37,115,10,0,0,0,0,0,0,95,112,114,101,45,109,101,114,103,101,0,0,0,0,0,0,81,120,97,99,116,95,109,101,114,103,101,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,106,111,103,103,108,101,40,39,81,74,39,41,32,97,108,119,97,121,115,32,112,114,111,100,117,99,101,115,32,115,105,109,112,108,105,99,105,97,108,32,111,117,116,112,117,116,46,32,32,84,114,105,97,110,103,117,108,97,116,101,100,32,111,117,116,112,117,116,40,39,81,116,39,41,32,100,111,101,115,32,110,111,116,104,105,110,103,46,10,0,0,0,0,0,0,0,0,81,98,98,111,117,110,100,45,108,97,115,116,45,113,106,0,95,122,101,114,111,45,99,101,110,116,114,117,109,0,0,0,81,105,110,116,101,114,105,111,114,45,107,101,101,112,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,117,115,101,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,111,114,32,86,111,114,111,110,111,105,40,39,118,39,41,32,119,105,116,104,32,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,40,39,72,39,41,10,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,117,115,101,32,117,112,112,101,114,45,68,101,108,97,117,110,97,121,40,39,81,117,39,41,32,111,114,32,105,110,102,105,110,105,116,121,45,112,111,105,110,116,40,39,81,122,39,41,32,119,105,116,104,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,111,114,32,86,111,114,111,110,111,105,40,39,118,39,41,10,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,99,97,110,32,110,111,116,32,117,115,101,32,105,110,102,105,110,105,116,121,45,112,111,105,110,116,40,39,81,122,39,41,32,119,105,116,104,32,117,112,112,101,114,45,68,101,108,97,117,110,97,121,40,39,81,117,39,41,10,0,0,113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,111,112,116,105,111,110,32,39,81,98,98,39,32,40,115,99,97,108,101,45,108,97,115,116,45,99,111,111,114,100,105,110,97,116,101,41,32,105,115,32,110,111,114,109,97,108,108,121,32,117,115,101,100,32,119,105,116,104,32,39,100,39,32,111,114,32,39,118,39,10,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,116,101,115,116,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,40,39,81,118,39,41,32,110,101,101,100,115,32,97,32,109,101,114,103,101,32,111,112,116,105,111,110,10,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,109,117,115,116,32,98,101,32,62,32,49,10,0,0,113,104,95,105,110,105,116,113,104,117,108,108,95,103,108,111,98,97,108,115,58,32,105,110,105,116,105,97,108,105,122,101,32,103,108,111,98,97,108,115,46,32,32,100,105,109,32,37,100,32,110,117,109,112,111,105,110,116,115,32,37,100,32,109,97,108,108,111,99,63,32,37,100,32,112,114,111,106,101,99,116,101,100,32,37,100,32,116,111,32,104,117,108,108,95,100,105,109,32,37,100,10,0,0,81,51,45,110,111,45,109,101,114,103,101,45,118,101,114,116,105,99,101,115,45,100,105,109,45,104,105,103,104,0,0,0,81,82,97,110,100,111,109,45,115,101,101,100,0,0,0,0,81,82,111,116,97,116,101,45,114,97,110,100,111,109,0,0,113,104,117,108,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,101,114,114,111,114,32,40,113,104,95,82,65,78,68,79,77,109,97,120,32,105,110,32,117,115,101,114,46,104,41,58,10,32,32,32,114,97,110,100,111,109,32,105,110,116,101,103,101,114,32,37,100,32,62,32,113,104,95,82,65,78,68,79,77,109,97,120,40,37,46,56,103,41,10,0,0,113,104,117,108,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,119,97,114,110,105,110,103,32,40,113,104,95,82,65,78,68,79,77,109,97,120,32,105,110,32,117,115,101,114,46,104,41,58,10,32,32,32,97,118,101,114,97,103,101,32,111,102,32,49,48,48,48,32,114,97,110,100,111,109,32,105,110,116,101,103,101,114,115,32,40,37,46,50,103,41,32,105,115,32,109,117,99,104,32,100,105,102,102,101,114,101,110,116,32,116,104,97,110,32,101,120,112,101,99,116,101,100,32,40,37,46,50,103,41,46,10,32,32,32,73,115,32,113,104,95,82,65,78,68,79,77,109,97,120,32,40,37,46,50,103,41,32,119,114,111,110,103,63,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,110,111,116,32,101,110,111,117,103,104,32,112,111,105,110,116,115,40,37,100,41,32,116,111,32,99,111,110,115,116,114,117,99,116,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,32,40,110,101,101,100,32,37,100,41,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,100,105,109,101,110,115,105,111,110,32,103,105,118,101,110,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,39,37,99,39,32,97,116,58,32,37,115,46,32,32,73,103,110,111,114,101,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,39,37,99,39,32,105,115,32,62,61,32,37,100,46,32,32,73,103,110,111,114,101,100,10,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,118,97,108,117,101,32,37,50,46,52,103,32,102,111,114,32,80,114,105,110,116,32,111,112,116,105,111,110,32,37,99,32,105,115,32,62,32,43,49,32,111,114,32,60,32,45,49,46,32,32,73,103,110,111,114,101,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,100,105,109,101,110,115,105,111,110,32,103,105,118,101,110,32,102,111,114,32,81,104,117,108,108,32,111,112,116,105,111,110,32,37,99,46,32,32,73,103,110,111,114,101,100,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,100,105,109,101,110,115,105,111,110,32,37,100,32,102,111,114,32,81,104,117,108,108,32,111,112,116,105,111,110,32,37,99,32,105,115,32,62,61,32,37,100,46,32,32,73,103,110,111,114,101,100,10,0,0,0,0,0,32,32,37,115,0,0,0,0,32,37,50,46,50,103,0,0,113,104,95,105,110,105,116,113,104,117,108,108,95,111,117,116,112,117,116,102,108,97,103,115,58,32,37,115,10,0,0,0,80,103,111,111,100,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,116,114,97,110,115,112,97,114,101,110,116,32,68,101,108,97,117,110,97,121,40,39,71,116,39,41,32,110,101,101,100,115,32,51,45,100,32,68,101,108,97,117,110,97,121,40,39,100,39,41,32,119,47,111,32,39,71,68,110,39,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,112,39,32,105,115,32,111,110,108,121,32,117,115,101,100,32,102,111,114,32,10,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,40,39,72,110,44,110,44,110,39,41,46,10,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,116,39,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,111,114,32,104,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,10,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,111,112,116,105,111,110,32,39,70,67,39,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,40,39,118,39,41,10,0,0,0,0,0,0,70,118,111,114,111,110,111,105,0,0,0,0,0,0,0,0,70,118,101,114,116,105,99,101,115,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,39,81,74,39,32,40,106,111,103,103,108,101,41,32,119,105,108,108,32,117,115,117,97,108,108,121,32,112,114,101,118,101,110,116,32,99,111,105,110,99,105,100,101,110,116,32,105,110,112,117,116,32,115,105,116,101,115,32,102,111,114,32,111,112,116,105,111,110,115,32,39,70,99,39,32,97,110,100,32,39,70,80,39,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,77,97,116,104,101,109,97,116,105,99,97,32,97,110,100,32,77,97,112,108,101,32,111,117,116,112,117,116,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,50,45,100,32,97,110,100,32,51,45,100,32,99,111,110,118,101,120,32,104,117,108,108,115,32,97,110,100,32,50,45,100,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,115,10,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,71,101,111,109,118,105,101,119,32,111,117,116,112,117,116,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,50,45,100,44,32,51,45,100,32,97,110,100,32,52,45,100,10,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,110,111,32,111,117,116,112,117,116,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,71,101,111,109,118,105,101,119,10,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,71,101,111,109,118,105,101,119,32,111,117,116,112,117,116,32,102,111,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,115,32,111,110,108,121,32,102,111,114,32,50,45,100,10,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,99,111,112,108,97,110,97,114,115,44,32,118,101,114,116,105,99,101,115,44,32,97,110,100,32,99,101,110,116,114,117,109,115,32,111,117,116,112,117,116,32,110,111,116,10,97,118,97,105,108,97,98,108,101,32,102,111,114,32,52,45,100,32,111,117,116,112,117,116,40,105,103,110,111,114,101,100,41,46,32,32,67,111,117,108,100,32,117,115,101,32,39,71,68,110,39,32,105,110,115,116,101,97,100,46,10,0,113,104,117,108,108,32,111,117,116,112,117,116,32,119,97,114,110,105,110,103,58,32,105,103,110,111,114,105,110,103,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,44,32,111,112,116,105,111,110,32,39,81,99,39,32,119,97,115,32,110,111,116,32,115,101,116,32,102,111,114,32,116,104,101,32,102,105,114,115,116,32,114,117,110,32,111,102,32,113,104,117,108,108,46,10,0,0,0,0,81,99,111,112,108,97,110,97,114,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,119,97,114,110,105,110,103,58,32,100,114,111,112,32,100,105,109,101,110,115,105,111,110,32,39,71,68,37,100,39,32,105,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,51,45,100,47,52,45,100,32,71,101,111,109,118,105,101,119,10,0,0,0,0,0,0,114,117,110,45,105,100,0,0,113,104,117,108,108,0,0,0,50,48,49,50,46,49,32,50,48,49,50,47,48,50,47,49,56,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,100,117,99,101,95,111,117,116,112,117,116,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0,32,32,32,32,115,105,122,101,32,105,110,32,98,121,116,101,115,58,32,109,101,114,103,101,32,37,100,32,114,105,100,103,101,32,37,100,32,118,101,114,116,101,120,32,37,100,32,102,97,99,101,116,32,37,100,10,32,32,32,32,32,32,32,32,32,110,111,114,109,97,108,32,37,100,32,114,105,100,103,101,32,118,101,114,116,105,99,101,115,32,37,100,32,102,97,99,101,116,32,118,101,114,116,105,99,101,115,32,111,114,32,110,101,105,103,104,98,111,114,115,32,37,100,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,111,100,117,99,101,95,111,117,116,112,117,116,50,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,67,68,68,32,102,111,114,109,97,116,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,99,101,110,116,114,117,109,115,44,32,104,97,108,102,115,112,97,99,101,10,105,110,116,101,114,115,101,99,116,105,111,110,115,44,32,97,110,100,32,79,70,70,32,102,105,108,101,32,102,111,114,109,97,116,46,10,0,37,100,32,49,10,0,0,0,37,115,32,124,32,37,115,10,0,0,0,0,0,0,0,0,48,10,50,32,0,0,0,0,37,54,46,49,54,103,32,0,49,48,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,10,50,32,0,0,0,0,0,37,54,46,49,54,103,32,37,54,46,49,54,103,10,0,0,32,32,78,85,76,76,118,101,114,116,101,120,10,0,0,0,45,32,112,37,100,40,118,37,100,41,58,0,0,0,0,0,32,37,53,46,50,103,0,0,32,100,101,108,101,116,101,100,0,0,0,0,0,0,0,0,32,114,105,100,103,101,100,101,108,101,116,101,100,0,0,0,32,32,110,101,105,103,104,98,111,114,115,58,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,118,110,111,114,109,41,58,32,116,111,111,32,102,101,119,32,112,111,105,110,116,115,40,37,100,41,32,116,111,32,99,111,109,112,117,116,101,32,115,101,112,97,114,97,116,105,110,103,32,112,108,97,110,101,10,0,0,0,0,0,113,104,95,100,101,116,118,110,111,114,109,58,32,86,111,114,111,110,111,105,32,118,101,114,116,101,120,32,111,114,32,109,105,100,112,111,105,110,116,0,113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,109,105,100,112,111,105,110,116,32,100,105,115,116,32,37,50,46,50,103,10,0,0,113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,97,110,103,108,101,32,37,50,46,50,103,32,110,101,97,114,122,101,114,111,32,37,100,10,0,0,0,0,0,0,113,104,95,100,101,116,118,110,111,114,109,58,32,112,111,105,110,116,115,32,37,100,32,37,100,32,86,111,114,111,110,111,105,32,118,101,114,116,101,120,32,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,116,118,114,105,100,103,101,51,41,58,32,110,101,105,103,104,98,111,114,115,32,111,102,32,118,101,114,116,101,120,32,112,37,100,32,97,114,101,32,110,111,116,32,99,111,110,110,101,99,116,101,100,32,97,116,32,102,97,99,101,116,32,37,100,10,0,0,0,0,113,104,95,101,97,99,104,118,111,114,111,110,111,105,58,32,86,111,114,111,110,111,105,32,114,105,100,103,101,32,111,102,32,37,100,32,118,101,114,116,105,99,101,115,32,98,101,116,119,101,101,110,32,115,105,116,101,115,32,37,100,32,97,110,100,32,37,100,10,0,0,0,113,104,95,109,97,114,107,107,101,101,112,58,32,111,110,108,121,32,107,101,101,112,32,37,100,32,108,97,114,103,101,115,116,32,97,110,100,47,111,114,32,37,100,32,109,111,115,116,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,97,110,100,47,111,114,32,109,105,110,32,97,114,101,97,32,37,46,50,103,10,0,0,0,0,113,104,95,109,97,114,107,118,111,114,111,110,111,105,58,32,105,115,76,111,119,101,114,32,37,100,32,110,117,109,99,101,110,116,101,114,115,32,37,100,10,0,0,0,0,0,0,0,113,104,95,111,114,100,101,114,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,58,32,111,114,100,101,114,32,110,101,105,103,104,98,111,114,115,32,111,102,32,118,37,100,32,102,111,114,32,51,45,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,111,114,100,101,114,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,41,58,32,110,111,32,110,101,105,103,104,98,111,114,32,111,102,32,118,37,100,32,102,111,114,32,102,37,100,10,0,0,0,0,37,100,10,0,0,0,0,0,37,100,10,37,100,10,0,0,86,101,114,116,105,99,101,115,32,97,110,100,32,102,97,99,101,116,115,58,10,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,114,105,100,103,101,115,32,97,110,100,32,105,110,116,101,114,115,101,99,116,105,111,110,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,50,45,100,10,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,111,117,116,101,114,47,105,110,110,101,114,32,112,108,97,110,101,115,32,97,110,100,32,99,101,110,116,114,117,109,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,52,45,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,102,111,114,32,118,101,114,116,105,99,101,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,105,110,32,52,45,100,10,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,39,71,110,104,39,32,103,101,110,101,114,97,116,101,115,32,110,111,32,111,117,116,112,117,116,32,105,110,32,52,45,100,10,0,0,0,0,0,0,0,0,123,97,112,112,101,97,114,97,110,99,101,32,123,108,105,110,101,119,105,100,116,104,32,51,125,32,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0,0,0,0,0,0,0,123,97,112,112,101,97,114,97,110,99,101,32,123,43,101,100,103,101,32,45,101,118,101,114,116,32,108,105,110,101,119,105,100,116,104,32,50,125,32,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0,0,76,73,83,84,32,35,32,37,115,32,124,32,37,115,10,0,52,86,69,67,84,32,37,100,32,37,100,32,49,10,0,0,86,69,67,84,32,37,100,32,37,100,32,49,10,0,0,0,49,32,0,0,0,0,0,0,35,32,49,32,112,111,105,110,116,32,112,101,114,32,108,105,110,101,10,49,32,0,0,0,48,32,0,0,0,0,0,0,35,32,49,32,99,111,108,111,114,32,102,111,114,32,97,108,108,10,0,0,0,0,0,0,48,32,49,32,49,32,49,32,32,35,32,99,111,108,111,114,32,111,102,32,112,111,105,110,116,115,10,0,0,0,0,0,52,79,70,70,32,37,100,32,37,100,32,49,10,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,119,114,105,116,105,110,103,32,68,101,108,97,117,110,97,121,46,32,32,85,115,101,32,39,112,39,32,111,114,32,39,111,39,32,102,111,114,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,115,10,0,0,0,37,115,32,124,32,37,115,10,98,101,103,105,110,10,32,32,32,32,37,100,32,37,100,32,114,101,97,108,10,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,111,117,116,112,117,116,32,105,115,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,10,0,0,0,0,80,76,79,84,40,67,85,82,86,69,83,40,10,0,0,0,80,76,79,84,51,68,40,80,79,76,89,71,79,78,83,40,10,0,0,0,0,0,0,0,123,10,0,0,0,0,0,0,37,100,10,37,100,32,37,100,32,37,100,10,0,0,0,0,37,115,32,124,32,37,115,10,98,101,103,105,110,10,37,100,32,37,100,32,114,101,97,108,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,98,101,103,105,110,41,58,32,99,97,110,32,110,111,116,32,117,115,101,32,116,104,105,115,32,102,111,114,109,97,116,32,102,111,114,32,100,105,109,101,110,115,105,111,110,32,37,100,10,0,37,115,0,0,0,0,0,0,51,32,37,100,32,37,100,32,37,100,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,32,35,32,102,37,100,32,102,37,100,10,0,0,0,0,0,0,0,51,32,37,100,32,37,100,32,37,100,32,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,32,35,114,37,100,32,102,37,100,32,102,37,100,10,0,0,0,0,37,56,46,52,103,32,0,0,32,35,32,112,37,100,10,0,123,97,112,112,101,97,114,97,110,99,101,32,123,45,101,100,103,101,32,45,110,111,114,109,97,108,32,110,111,114,109,115,99,97,108,101,32,48,125,32,123,10,73,78,83,84,32,103,101,111,109,32,123,100,101,102,105,110,101,32,118,115,112,104,101,114,101,32,79,70,70,10,49,56,32,51,50,32,52,56,10,10,48,32,48,32,49,10,49,32,48,32,48,10,48,32,49,32,48,10,45,49,32,48,32,48,10,48,32,45,49,32,48,10,48,32,48,32,45,49,10,48,46,55,48,55,49,48,55,32,48,32,48,46,55,48,55,49,48,55,10,48,32,45,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,10,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,32,48,10,45,48,46,55,48,55,49,48,55,32,48,32,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,32,48,10,48,32,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,32,48,10,48,46,55,48,55,49,48,55,32,48,46,55,48,55,49,48,55,32,48,10,48,46,55,48,55,49,48,55,32,48,32,45,48,46,55,48,55,49,48,55,10,48,32,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,10,45,48,46,55,48,55,49,48,55,32,48,32,45,48,46,55,48,55,49,48,55,10,48,32,45,48,46,55,48,55,49,48,55,32,45,48,46,55,48,55,49,48,55,10,10,51,32,48,32,54,32,49,49,10,51,32,48,32,55,32,54,32,10,51,32,48,32,57,32,55,32,10,51,32,48,32,49,49,32,57,10,51,32,49,32,54,32,56,32,10,51,32,49,32,56,32,49,52,10,51,32,49,32,49,51,32,54,10,51,32,49,32,49,52,32,49,51,10,51,32,50,32,49,49,32,49,51,10,51,32,50,32,49,50,32,49,49,10,51,32,50,32,49,51,32,49,53,10,51,32,50,32,49,53,32,49,50,10,51,32,51,32,57,32,49,50,10,51,32,51,32,49,48,32,57,10,51,32,51,32,49,50,32,49,54,10,51,32,51,32,49,54,32,49,48,10,51,32,52,32,55,32,49,48,10,51,32,52,32,56,32,55,10,51,32,52,32,49,48,32,49,55,10,51,32,52,32,49,55,32,56,10,51,32,53,32,49,52,32,49,55,10,51,32,53,32,49,53,32,49,52,10,51,32,53,32,49,54,32,49,53,10,51,32,53,32,49,55,32,49,54,10,51,32,54,32,49,51,32,49,49,10,51,32,55,32,56,32,54,10,51,32,57,32,49,48,32,55,10,51,32,49,49,32,49,50,32,57,10,51,32,49,52,32,56,32,49,55,10,51,32,49,53,32,49,51,32,49,52,10,51,32,49,54,32,49,50,32,49,53,10,51,32,49,55,32,49,48,32,49,54,10,125,32,116,114,97,110,115,102,111,114,109,115,32,123,32,84,76,73,83,84,10,0,0,37,56,46,52,103,32,48,32,48,32,48,32,35,32,118,37,100,10,32,48,32,37,56,46,52,103,32,48,32,48,10,48,32,48,32,37,56,46,52,103,32,48,10,0,0,0,0,0,49,10,0,0,0,0,0,0,125,125,125,10,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,123,97,112,112,101,97,114,97,110,99,101,32,123,45,110,111,114,109,97,108,32,45,101,100,103,101,32,110,111,114,109,115,99,97,108,101,32,48,125,32,0,0,0,0,0,0,0,0,123,73,78,83,84,32,103,101,111,109,32,123,32,100,101,102,105,110,101,32,99,101,110,116,114,117,109,32,67,81,85,65,68,32,32,35,32,102,37,100,10,45,48,46,51,32,45,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,32,48,46,51,32,45,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,32,48,46,51,32,32,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,10,45,48,46,51,32,32,48,46,51,32,48,46,48,48,48,49,32,32,32,32,32,48,32,48,32,49,32,49,32,125,32,116,114,97,110,115,102,111,114,109,32,123,32,10,0,0,0,0,123,73,78,83,84,32,103,101,111,109,32,123,32,58,32,99,101,110,116,114,117,109,32,125,32,116,114,97,110,115,102,111,114,109,32,123,32,35,32,102,37,100,10,0,0,0,0,0,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,48,10,0,0,0,0,49,32,125,125,125,10,0,0,32,112,37,100,58,32,0,0,32,37,56,46,52,103,0,0,32,48,10,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,110,111,32,102,97,99,101,116,115,32,112,114,105,110,116,101,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,101,110,100,41,58,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,37,100,32,33,61,32,110,117,109,98,101,114,32,112,114,105,110,116,101,100,32,37,100,32,97,110,100,32,97,116,32,101,110,100,32,37,100,10,0,0,0,0,0,125,10,0,0,0,0,0,0,101,110,100,10,0,0,0,0,41,41,59,10,0,0,0,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,101,120,116,114,101,109,101,115,95,50,100,41,58,32,108,111,111,112,32,105,110,32,102,97,99,101,116,32,108,105,115,116,46,32,32,102,97,99,101,116,32,37,100,32,110,101,120,116,102,97,99,101,116,32,37,100,10,0,32,77,69,82,71,69,114,105,100,103,101,10,0,0,0,0,32,68,85,80,76,73,67,65,84,69,114,105,100,103,101,10,0,0,0,0,0,0,0,0,32,78,85,76,76,102,97,99,101,116,10,0,0,0,0,0,45,32,102,37,100,10,0,0,32,32,32,32,45,32,102,108,97,103,115,58,0,0,0,0,32,116,111,112,0,0,0,0,32,98,111,116,116,111,109,0,32,115,105,109,112,108,105,99,105,97,108,0,0,0,0,0,32,116,114,105,99,111,112,108,97,110,97,114,0,0,0,0,32,117,112,112,101,114,68,101,108,97,117,110,97,121,0,0,32,118,105,115,105,98,108,101,0,0,0,0,0,0,0,0,32,110,101,119,0,0,0,0,32,116,101,115,116,101,100,0,32,110,111,116,71,0,0,0,32,115,101,101,110,0,0,0,32,99,111,112,108,97,110,97,114,0,0,0,0,0,0,0,32,109,101,114,103,101,104,111,114,105,122,111,110,0,0,0,32,107,101,101,112,99,101,110,116,114,117,109,0,0,0,0,32,100,117,112,114,105,100,103,101,0,0,0,0,0,0,0,32,109,101,114,103,101,114,105,100,103,101,49,0,0,0,0,32,109,101,114,103,101,114,105,100,103,101,50,0,0,0,0,32,110,101,119,109,101,114,103,101,0,0,0,0,0,0,0,32,102,108,105,112,112,101,100,0,0,0,0,0,0,0,0,32,110,111,116,102,117,114,116,104,101,115,116,0,0,0,0,32,100,101,103,101,110,101,114,97,116,101,0,0,0,0,0,32,114,101,100,117,110,100,97,110,116,0,0,0,0,0,0,32,32,32,32,45,32,97,114,101,97,58,32,37,50,46,50,103,10,0,0,0,0,0,0,32,32,32,32,45,32,114,101,112,108,97,99,101,109,101,110,116,58,32,102,37,100,10,0,32,32,32,32,45,32,115,104,97,114,101,115,32,115,97,109,101,32,118,105,115,105,98,108,101,47,104,111,114,105,122,111,110,32,97,115,32,102,37,100,10,0,0,0,0,0,0,0,32,32,32,32,45,32,111,119,110,101,114,32,111,102,32,110,111,114,109,97,108,32,38,32,99,101,110,116,114,117,109,32,105,115,32,102,97,99,101,116,32,102,37,100,10,0,0,0,32,32,32,32,45,32,119,97,115,32,104,111,114,105,122,111,110,32,116,111,32,102,37,100,10,0,0,0,0,0,0,0,32,32,32,32,45,32,109,101,114,103,101,115,58,32,37,100,10,0,0,0,0,0,0,0,32,32,32,32,45,32,110,111,114,109,97,108,58,32,0,0,32,32,32,32,45,32,111,102,102,115,101,116,58,32,37,49,48,46,55,103,10,0,0,0,32,32,32,32,45,32,99,101,110,116,101,114,58,32,0,0,32,32,32,32,45,32,109,97,120,111,117,116,115,105,100,101,58,32,37,49,48,46,55,103,10,0,0,0,0,0,0,0,32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,40,102,117,114,116,104,101,115,116,32,112,37,100,41,58,10,0,0,0,0,0,0,0,32,32,32,32,32,0,0,0,32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,58,0,0,0,0,0,0,32,32,32,32,45,32,111,117,116,115,105,100,101,32,115,101,116,58,32,32,37,100,32,112,111,105,110,116,115,46,0,0,32,32,70,117,114,116,104,101,115,116,0,0,0,0,0,0,32,32,32,32,45,32,102,117,114,116,104,101,115,116,32,100,105,115,116,97,110,99,101,61,32,37,50,46,50,103,10,0,32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,40,102,117,114,116,104,101,115,116,32,112,37,100,41,58,10,0,0,0,0,0,0,32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,58,0,0,0,0,0,32,32,32,32,45,32,99,111,112,108,97,110,97,114,32,115,101,116,58,32,32,37,100,32,112,111,105,110,116,115,46,0,32,32,32,32,32,32,102,117,114,116,104,101,115,116,32,100,105,115,116,97,110,99,101,61,32,37,50,46,50,103,10,0,32,32,32,32,45,32,118,101,114,116,105,99,101,115,58,0,32,32,32,32,45,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,115,58,0,0,0,0,0,0,0,32,77,69,82,71,69,0,0,32,68,85,80,0,0,0,0,32,32,32,32,45,32,114,105,100,103,101,115,40,105,100,115,32,109,97,121,32,98,101,32,103,97,114,98,97,103,101,41,58,0,0,0,0,0,0,0,32,114,37,100,0,0,0,0,32,32,32,32,45,32,114,105,100,103,101,115,58,10,0,0,32,32,32,32,32,45,32,97,108,108,32,114,105,100,103,101,115,58,0,0,0,0,0,0,32,112,37,100,40,118,37,100,41,0,0,0,0,0,0,0,32,32,32,32,32,45,32,114,37,100,0,0,0,0,0,0,32,110,111,110,99,111,110,118,101,120,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,118,101,114,116,105,99,101,115,58,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0,37,100,0,0,0,0,0,0,49,32,37,100,10,0,0,0,48,10,0,0,0,0,0,0,123,97,112,112,101,97,114,97,110,99,101,32,123,43,101,100,103,101,32,45,102,97,99,101,125,32,79,70,70,32,37,100,32,37,100,32,49,32,35,32,86,111,114,111,110,111,105,32,99,101,110,116,101,114,115,32,97,110,100,32,99,101,108,108,115,10,0,0,0,0,0,0,37,100,10,37,100,32,37,100,32,49,10,0,0,0,0,0,32,48,32,35,32,105,110,102,105,110,105,116,121,32,110,111,116,32,117,115,101,100,10,0,35,32,37,100,32,102,37,100,10,0,0,0,0,0,0,0,32,35,32,112,37,100,40,118,37,100,41,10,0,0,0,0,32,35,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,111,114,32,105,115,111,108,97,116,101,100,10,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,112,114,105,110,116,118,100,105,97,103,114,97,109,41,58,32,117,110,107,110,111,119,110,32,112,114,105,110,116,32,102,111,114,109,97,116,32,37,100,46,10,0,0,0,0,0,0,86,69,67,84,32,49,32,50,32,49,32,50,32,49,10,0,86,69,67,84,32,49,32,49,32,49,32,49,32,49,10,0,37,56,46,52,103,32,37,56,46,52,103,32,37,56,46,52,103,32,49,10,0,0,0,0,37,100,32,37,100,32,37,100,0,0,0,0,0,0,0,0,37,100,32,37,100,32,37,100,32,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,113,104,117,108,108,41,58,32,116,101,109,112,111,114,97,114,121,32,115,101,116,115,32,110,111,116,32,101,109,112,116,121,40,37,100,41,10,0,0,81,104,117,108,108,58,32,97,108,103,111,114,105,116,104,109,32,99,111,109,112,108,101,116,101,100,10,0,0,0,0,0,113,104,95,98,117,105,108,100,104,117,108,108,58,32,115,116,97,114,116,32,98,117,105,108,100,32,104,117,108,108,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,118,105,115,105,98,108,101,32,111,114,32,110,101,119,32,102,97,99,101,116,32,102,37,100,32,105,110,32,102,97,99,101,116,32,108,105,115,116,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,110,101,119,32,118,101,114,116,101,120,32,102,37,100,32,105,110,32,118,101,114,116,101,120,32,108,105,115,116,10,0,0,0,0,0,113,104,95,98,117,105,108,100,104,117,108,108,58,32,115,116,111,112,32,112,111,105,110,116,32,111,114,32,99,111,110,101,32,80,37,100,32,105,110,32,105,110,105,116,105,97,108,32,104,117,108,108,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,98,117,105,108,100,104,117,108,108,41,58,32,37,100,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,119,101,114,101,32,110,101,118,101,114,32,112,114,111,99,101,115,115,101,100,46,10,0,0,0,113,104,95,98,117,105,108,100,104,117,108,108,58,32,99,111,109,112,108,101,116,101,100,32,116,104,101,32,104,117,108,108,32,99,111,110,115,116,114,117,99,116,105,111,110,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,97,100,100,112,111,105,110,116,41,58,32,78,85,76,76,32,102,97,99,101,116,46,32,32,78,101,101,100,32,116,111,32,99,97,108,108,32,113,104,95,102,105,110,100,98,101,115,116,102,97,99,101,116,32,102,105,114,115,116,10,0,0,0,113,104,95,97,100,100,112,111,105,110,116,58,32,97,100,100,101,100,32,112,37,100,32,110,101,119,32,102,97,99,101,116,115,32,37,100,32,110,101,119,32,98,97,108,97,110,99,101,32,37,50,46,50,103,32,112,111,105,110,116,32,98,97,108,97,110,99,101,32,37,50,46,50,103,10,0,0,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,109,111,114,101,32,116,104,97,110,32,110,101,97,114,45,105,110,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,105,110,100,98,101,115,116,110,101,119,32,37,100,10,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,105,110,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,105,110,100,98,101,115,116,110,101,119,32,37,100,10,0,0,113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,114,101,112,97,114,116,105,116,105,111,110,32,112,111,105,110,116,32,112,37,100,32,102,114,111,109,32,102,37,100,46,32,32,73,116,32,105,115,32,97,98,111,118,101,32,102,108,105,112,112,101,100,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0,0,0,0,0,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,61,61,61,61,61,61,32,112,37,100,32,102,114,111,109,32,102,37,100,32,105,110,99,114,101,97,115,101,115,32,109,97,120,95,111,117,116,115,105,100,101,32,116,111,32,37,50,46,50,103,32,111,102,32,102,37,100,32,108,97,115,116,32,112,37,100,10,0,0,0,0,0,0,0,68,73,83,84,65,78,84,0,113,104,95,112,97,114,116,105,116,105,111,110,99,111,112,108,97,110,97,114,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,102,97,99,101,116,32,102,37,100,40,111,114,32,105,110,115,105,100,101,41,32,100,105,115,116,32,37,50,46,50,103,10,0,0,0,0,0,0,0,10,65,116,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,99,114,101,97,116,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,109,101,114,103,101,100,32,37,100,46,10,32,84,104,101,32,99,117,114,114,101,110,116,32,104,117,108,108,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,76,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0,0,0,0,0,0,10,65,116,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,99,114,101,97,116,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,109,101,114,103,101,100,32,37,100,46,10,32,84,104,101,32,99,117,114,114,101,110,116,32,104,117,108,108,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,84,104,101,114,101,32,97,114,101,32,37,100,10,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,46,32,32,78,101,120,116,32,105,115,32,112,111,105,110,116,32,112,37,100,40,118,37,100,41,44,32,37,50,46,50,103,32,97,98,111,118,101,32,102,37,100,46,10,0,113,104,95,97,100,100,112,111,105,110,116,58,32,97,100,100,32,112,37,100,40,118,37,100,41,32,116,111,32,104,117,108,108,32,111,102,32,37,100,32,102,97,99,101,116,115,40,37,50,46,50,103,32,97,98,111,118,101,32,102,37,100,41,32,97,110,100,32,37,100,32,111,117,116,115,105,100,101,32,97,116,32,37,52,46,52,103,32,67,80,85,32,115,101,99,115,46,32,32,80,114,101,118,105,111,117,115,32,119,97,115,32,112,37,100,46,10,0,0,0,113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,102,105,110,100,32,104,111,114,105,122,111,110,32,102,111,114,32,112,111,105,110,116,32,112,37,100,32,102,97,99,101,116,32,102,37,100,10,0,0,0,118,105,115,105,98,108,101,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,104,111,114,105,122,111,110,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0,0,0,0,0,0,0,0,113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,116,111,32,104,111,114,105,122,111,110,32,102,37,100,44,32,100,105,115,116,61,37,50,46,55,103,32,60,32,113,104,32,77,73,78,118,105,115,105,98,108,101,40,37,50,46,55,103,41,10,0,0,0,0,0,0,0,0,104,111,114,105,122,111,110,0,101,109,112,116,121,32,104,111,114,105,122,111,110,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,104,111,114,105,122,111,110,41,58,32,101,109,112,116,121,32,104,111,114,105,122,111,110,10,81,104,117,108,108,80,111,105,110,116,32,112,37,100,32,119,97,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+7840);
/* memory initializer */ allocate([32,97,98,111,118,101,32,97,108,108,32,102,97,99,101,116,115,46,10,0,0,0,0,0,113,104,95,102,105,110,100,104,111,114,105,122,111,110,58,32,37,100,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,40,103,111,111,100,32,37,100,41,44,32,37,100,32,118,105,115,105,98,108,101,40,103,111,111,100,32,37,100,41,44,32,37,100,32,99,111,112,108,97,110,97,114,10,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,112,97,114,116,105,116,105,111,110,118,105,115,105,98,108,101,41,58,32,97,108,108,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,97,115,10,32,32,32,32,32,32,32,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,46,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,118,105,115,105,98,108,101,58,32,112,97,114,116,105,116,105,111,110,101,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,111,117,116,115,105,100,101,115,101,116,115,32,97,110,100,32,37,100,32,112,111,105,110,116,115,32,102,114,111,109,32,99,111,112,108,97,110,97,114,115,101,116,115,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,110,101,120,116,102,117,114,116,104,101,115,116,41,58,32,110,117,109,95,111,117,116,115,105,100,101,32,37,100,32,105,115,32,116,111,111,32,108,111,119,10,98,121,32,97,116,32,108,101,97,115,116,32,37,100,44,32,111,114,32,97,32,114,97,110,100,111,109,32,114,101,97,108,32,37,103,32,62,61,32,49,46,48,10,0,0,0,113,104,95,112,114,101,99,105,115,105,111,110,58,32,113,104,117,108,108,32,114,101,115,116,97,114,116,32,98,101,99,97,117,115,101,32,111,102,32,37,115,10,0,0,0,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,97,108,108,58,32,112,97,114,116,105,116,105,111,110,32,97,108,108,32,112,111,105,110,116,115,32,105,110,116,111,32,111,117,116,115,105,100,101,32,115,101,116,115,10,0,0,0,0,0,0,0,0,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,40,110,97,114,114,111,119,32,104,117,108,108,41,0,0,0,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,111,117,116,115,105,100,101,32,102,97,99,101,116,32,102,37,100,32,110,101,119,63,32,37,100,32,40,111,114,32,110,97,114,114,111,119,104,117,108,108,41,10,0,0,0,0,0,0,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,116,111,32,102,97,99,101,116,32,102,37,100,32,40,100,114,111,112,112,101,100,41,10,0,0,0,0,0,0,0,0,113,104,95,112,97,114,116,105,116,105,111,110,112,111,105,110,116,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,105,110,115,105,100,101,32,97,108,108,32,102,97,99,101,116,115,44,32,99,108,111,115,101,115,116,32,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0,0,0,10,65,116,32,97,32,112,114,101,109,97,116,117,114,101,32,101,120,105,116,32,100,117,101,32,116,111,32,39,84,86,110,39,44,32,39,84,67,110,39,44,32,39,84,82,110,39,44,32,111,114,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,119,105,116,104,32,39,81,74,110,39,46,0,10,70,117,114,116,104,101,115,116,45,115,105,116,101,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0,0,0,0,0,0,10,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0,0,0,0,0,32,97,110,100,32,97,116,45,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,86,111,114,111,110,111,105,32,114,101,103,105,111,110,115,37,115,58,32,37,100,10,0,0,0,0,0,0,32,32,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,101,108,101,116,101,100,32,112,111,105,110,116,115,32,100,117,101,32,116,111,32,109,101,114,103,105,110,103,58,32,37,100,10,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,115,58,32,37,100,10,0,32,32,84,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,110,101,97,114,108,121,32,105,110,99,105,100,101,110,116,32,112,111,105,110,116,115,58,32,37,100,10,0,0,0,32,39,103,111,111,100,39,0,32,32,78,117,109,98,101,114,32,111,102,37,115,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0,0,0,0,0,0,10,70,117,114,116,104,101,115,116,45,115,105,116,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0,0,0,0,0,0,0,0,10,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,105,110,112,117,116,32,115,105,116,101,115,37,115,58,32,37,100,10,0,0,32,32,78,117,109,98,101,114,32,111,102,37,115,32,68,101,108,97,117,110,97,121,32,114,101,103,105,111,110,115,58,32,37,100,10,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,68,101,108,97,117,110,97,121,32,114,101,103,105,111,110,115,58,32,37,100,10,0,0,0,0,0,0,10,72,97,108,102,115,112,97,99,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,98,121,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,110,111,110,45,114,101,100,117,110,100,97,110,116,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0,0,0,0,0,0,0,114,101,100,117,110,100,97,110,116,0,0,0,0,0,0,0,115,105,109,105,108,97,114,0,115,105,109,105,108,97,114,32,97,110,100,32,114,101,100,117,110,100,97,110,116,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,37,115,32,104,97,108,102,115,112,97,99,101,115,58,32,37,100,10,0,0,32,32,78,117,109,98,101,114,32,111,102,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,39,103,111,111,100,39,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,105,110,116,101,114,115,101,99,116,105,111,110,32,112,111,105,110,116,115,58,32,37,100,10,0,0,0,10,67,111,110,118,101,120,32,104,117,108,108,32,111,102,32,37,100,32,112,111,105,110,116,115,32,105,110,32,37,100,45,100,58,10,10,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,58,32,37,100,10,0,0,0,0,0,0,0,105,110,116,101,114,105,111,114,0,0,0,0,0,0,0,0,99,111,112,108,97,110,97,114,0,0,0,0,0,0,0,0,99,111,112,108,97,110,97,114,32,97,110,100,32,105,110,116,101,114,105,111,114,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,37,115,32,112,111,105,110,116,115,58,32,37,100,10,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,58,32,37,100,10,0,32,32,78,117,109,98,101,114,32,111,102,32,39,103,111,111,100,39,32,102,97,99,101,116,115,58,32,37,100,10,0,0,32,32,78,117,109,98,101,114,32,111,102,37,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,58,32,37,100,10,0,0,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,116,114,105,97,110,103,117,108,97,116,101,100,32,102,97,99,101,116,115,58,32,37,100,10,0,0,0,0,10,83,116,97,116,105,115,116,105,99,115,32,102,111,114,58,32,37,115,32,124,32,37,115,0,0,0,0,0,0,0,0,32,81,82,37,100,10,10,0,32,32,78,117,109,98,101,114,32,111,102,32,112,111,105,110,116,115,32,112,114,111,99,101,115,115,101,100,58,32,37,100,10,0,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,104,121,112,101,114,112,108,97,110,101,115,32,99,114,101,97,116,101,100,58,32,37,100,10,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,110,32,104,117,108,108,58,32,37,100,10,0,32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,113,104,117,108,108,58,32,37,100,10,0,0,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,109,101,114,103,105,110,103,58,32,37,100,10,0,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,58,32,37,100,10,0,0,0,0,32,32,78,117,109,98,101,114,32,111,102,32,109,101,114,103,101,100,32,102,97,99,101,116,115,58,32,37,100,10,0,0,32,32,67,80,85,32,115,101,99,111,110,100,115,32,116,111,32,99,111,109,112,117,116,101,32,104,117,108,108,32,40,97,102,116,101,114,32,105,110,112,117,116,41,58,32,37,50,46,52,103,10,0,0,0,0,0,32,32,80,101,114,99,101,110,116,97,103,101,32,111,102,32,114,117,110,115,32,119,105,116,104,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,58,32,37,52,46,49,102,10,0,0,0,0,0,0,32,32,65,102,116,101,114,32,37,100,32,114,101,116,114,105,101,115,44,32,105,110,112,117,116,32,106,111,103,103,108,101,100,32,98,121,58,32,37,50,46,50,103,10,0,0,0,0,32,32,73,110,112,117,116,32,106,111,103,103,108,101,100,32,98,121,58,32,37,50,46,50,103,10,0,0,0,0,0,0,65,112,112,114,111,120,105,109,97,116,101,0,0,0,0,0,84,111,116,97,108,0,0,0,32,32,37,115,32,102,97,99,101,116,32,97,114,101,97,58,32,32,32,37,50,46,56,103,10,0,0,0,0,0,0,0,32,32,37,115,32,118,111,108,117,109,101,58,32,32,32,32,32,32,32,37,50,46,56,103,10,0,0,0,0,0,0,0,109,101,114,103,101,100,32,0,32,32,77,97,120,105,109,117,109,32,100,105,115,116,97,110,99,101,32,111,102,32,37,115,112,111,105,110,116,32,97,98,111,118,101,32,102,97,99,101,116,58,32,37,50,46,50,103,0,0,0,0,0,0,0,0,32,40,37,46,49,102,120,41,10,0,0,0,0,0,0,0,32,32,77,97,120,105,109,117,109,32,100,105,115,116,97,110,99,101,32,111,102,32,37,115,118,101,114,116,101,120,32,98,101,108,111,119,32,102,97,99,101,116,58,32,37,50,46,50,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,110,101,103,97,116,105,118,101,32,114,101,113,117,101,115,116,32,115,105,122,101,32,40,37,100,41,46,32,32,68,105,100,32,105,110,116,32,111,118,101,114,102,108,111,119,32,100,117,101,32,116,111,32,104,105,103,104,45,68,63,10,0,0,0,0,0,0,0,0,113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,113,117,105,99,107,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,32,40,37,100,32,98,121,116,101,115,41,10,0,0,0,0,0,0,113,104,95,109,101,109,97,108,108,111,99,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,115,104,111,114,116,32,116,111,116,98,117,102,102,101,114,32,37,100,32,33,61,32,116,111,116,115,104,111,114,116,43,116,111,116,102,114,101,101,46,46,46,32,37,100,10,0,0,0,0,0,0,0,113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,115,104,111,114,116,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,113,104,109,101,109,32,104,97,115,32,110,111,116,32,98,101,101,110,32,105,110,105,116,105,97,108,105,122,101,100,46,10,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,97,108,108,111,99,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,97,108,108,111,99,97,116,101,32,37,100,32,98,121,116,101,115,10,0,0,0,0,113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,97,108,108,111,99,32,108,111,110,103,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0,0,0,113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,102,114,101,101,32,115,104,111,114,116,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0,0,0,113,104,95,109,101,109,32,37,112,32,110,32,37,56,100,32,102,114,101,101,32,108,111,110,103,58,32,37,100,32,98,121,116,101,115,32,40,116,111,116,32,37,100,32,99,110,116,32,37,100,41,10,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,105,110,105,116,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0,0,113,104,95,109,101,109,105,110,105,116,98,117,102,102,101,114,115,58,32,109,101,109,111,114,121,32,105,110,105,116,105,97,108,105,122,101,100,32,119,105,116,104,32,97,108,105,103,110,109,101,110,116,32,37,100,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,101,116,117,112,41,58,32,108,97,114,103,101,115,116,32,109,101,109,32,115,105,122,101,32,37,100,32,105,115,32,62,61,32,98,117,102,102,101,114,32,115,105,122,101,32,37,100,32,111,114,32,105,110,105,116,105,97,108,32,98,117,102,102,101,114,32,115,105,122,101,32,37,100,10,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,101,116,117,112,41,58,32,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,109,101,109,115,105,122,101,41,58,32,99,97,108,108,101,100,32,97,102,116,101,114,32,113,104,109,101,109,95,115,101,116,117,112,10,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,32,40,109,101,109,115,105,122,101,41,58,32,102,114,101,101,32,108,105,115,116,32,116,97,98,108,101,32,104,97,115,32,114,111,111,109,32,102,111,114,32,111,110,108,121,32,37,100,32,115,105,122,101,115,10,0,0,0,0,113,104,95,109,101,109,115,116,97,116,105,115,116,105,99,115,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,116,111,116,102,114,101,101,32,37,100,32,110,111,116,32,101,113,117,97,108,32,116,111,32,102,114,101,101,108,105,115,116,32,116,111,116,97,108,32,37,100,10,0,0,0,0,0,10,109,101,109,111,114,121,32,115,116,97,116,105,115,116,105,99,115,58,10,37,55,100,32,113,117,105,99,107,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,115,104,111,114,116,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,108,111,110,103,32,97,108,108,111,99,97,116,105,111,110,115,10,37,55,100,32,115,104,111,114,116,32,102,114,101,101,115,10,37,55,100,32,108,111,110,103,32,102,114,101,101,115,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,105,110,32,117,115,101,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,105,110,32,102,114,101,101,108,105,115,116,115,10,37,55,100,32,98,121,116,101,115,32,111,102,32,100,114,111,112,112,101,100,32,115,104,111,114,116,32,109,101,109,111,114,121,10,37,55,100,32,98,121,116,101,115,32,111,102,32,117,110,117,115,101,100,32,115,104,111,114,116,32,109,101,109,111,114,121,32,40,101,115,116,105,109,97,116,101,100,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,108,111,110,103,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,101,100,32,40,109,97,120,44,32,101,120,99,101,112,116,32,102,111,114,32,105,110,112,117,116,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,108,111,110,103,32,109,101,109,111,114,121,32,105,110,32,117,115,101,32,40,105,110,32,37,100,32,112,105,101,99,101,115,41,10,37,55,100,32,98,121,116,101,115,32,111,102,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,115,32,40,109,105,110,117,115,32,108,105,110,107,115,41,10,37,55,100,32,98,121,116,101,115,32,112,101,114,32,115,104,111,114,116,32,109,101,109,111,114,121,32,98,117,102,102,101,114,32,40,105,110,105,116,105,97,108,108,121,32,37,100,32,98,121,116,101,115,41,10,0,0,0,0,37,55,100,32,99,97,108,108,115,32,116,111,32,113,104,95,115,101,116,108,97,114,103,101,114,10,37,55,46,50,103,32,32,32,32,32,97,118,101,114,97,103,101,32,99,111,112,121,32,115,105,122,101,10,0,0,32,32,102,114,101,101,108,105,115,116,115,40,98,121,116,101,115,45,62,99,111,117,110,116,41,58,0,0,0,0,0,0,32,37,100,45,62,37,100,0,113,104,95,112,114,101,109,101,114,103,101,58,32,112,114,101,109,101,114,103,101,32,99,101,110,116,114,117,109,32,37,50,46,50,103,32,97,110,103,108,101,32,37,50,46,50,103,32,102,111,114,32,97,112,101,120,32,118,37,100,32,102,97,99,101,116,108,105,115,116,32,102,37,100,10,0,0,0,0,0,113,104,95,99,104,101,99,107,122,101,114,111,58,32,115,107,105,112,32,99,111,110,118,101,120,105,116,121,32,99,104,101,99,107,32,117,110,116,105,108,32,102,105,114,115,116,32,112,114,101,45,109,101,114,103,101,10,0,0,0,0,0,0,0,99,108,101,97,114,108,121,32,99,111,110,118,101,120,0,0,110,111,116,32,99,111,110,99,97,118,101,44,32,102,108,105,112,112,101,100,44,32,111,114,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,100,0,0,0,0,0,0,0,113,104,95,99,104,101,99,107,122,101,114,111,58,32,116,101,115,116,97,108,108,32,37,100,44,32,102,97,99,101,116,115,32,97,114,101,32,37,115,10,0,0,0,0,0,0,0,0,113,104,95,99,104,101,99,107,122,101,114,111,58,32,102,97,99,101,116,32,102,37,100,32,110,101,101,100,115,32,112,114,101,45,109,101,114,103,105,110,103,10,0,0,0,0,0,0,113,104,95,99,104,101,99,107,122,101,114,111,58,32,102,97,99,101,116,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,110,111,116,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,46,32,32,118,37,100,32,100,105,115,116,32,37,46,50,103,10,0,113,104,95,109,97,114,107,95,100,117,112,114,105,100,103,101,115,58,32,105,100,101,110,116,105,102,121,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,115,10,0,0,0,113,104,95,109,97,114,107,95,100,117,112,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,10,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,58,32,98,101,103,105,110,10,0,0,0,0,0,0,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,41,58,32,102,37,100,32,119,105,116,104,111,117,116,32,110,111,114,109,97,108,10,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,97,108,108,58,32,109,101,114,103,101,100,32,37,100,32,115,97,109,101,32,99,121,99,108,101,115,32,111,114,32,102,97,99,101,116,115,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,115,10,0,0,0,0,0,0,113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,98,101,103,105,110,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,41,58,32,102,37,100,32,97,110,100,32,102,37,100,32,104,97,100,32,97,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,98,117,116,32,97,115,32,102,37,100,32,97,110,100,32,102,37,100,32,116,104,101,121,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,110,101,105,103,104,98,111,114,115,10,0,0,0,0,0,0,113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,44,32,100,105,115,116,32,37,50,46,50,103,32,97,110,100,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,50,46,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,0,0,113,104,95,102,111,114,99,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,97,99,114,111,115,115,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,10,0,0,0,0,0,0,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,116,101,115,116,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,119,105,116,104,32,100,101,108,102,97,99,101,116,32,102,37,100,10,0,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,32,119,105,116,104,32,37,100,32,110,101,105,103,104,98,111,114,115,46,10,0,0,0,0,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,46,32,32,109,101,114,103,101,10,0,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,32,119,105,116,104,32,37,100,32,110,101,105,103,104,98,111,114,115,46,32,32,78,101,105,103,104,98,111,114,32,111,102,32,102,37,100,46,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,97,110,116,41,58,32,102,37,100,32,114,101,100,117,110,100,97,110,116,32,98,117,116,32,102,37,100,32,104,97,115,32,110,111,32,114,101,112,108,97,99,101,109,101,110,116,10,0,0,0,0,0,0,0,0,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,44,32,119,105,108,108,32,109,101,114,103,101,10,0,0,0,0,0,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,110,111,32,110,101,105,103,104,98,111,114,115,46,32,32,68,101,108,101,116,101,100,10,0,0,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,100,101,108,101,116,101,100,32,118,37,100,32,98,101,99,97,117,115,101,32,102,37,100,32,104,97,115,32,110,111,32,110,101,105,103,104,98,111,114,115,10,0,0,0,0,0,0,113,104,95,109,101,114,103,101,95,100,101,103,101,110,114,101,100,117,110,100,97,110,116,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,37,100,32,110,101,105,103,104,98,111,114,115,44,32,109,101,114,103,101,32,105,110,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,10,0,113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,98,101,103,105,110,10,0,0,0,0,0,0,0,0,113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,32,102,108,105,112,112,101,100,32,102,37,100,32,105,110,116,111,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,0,0,113,104,95,102,108,105,112,112,101,100,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,105,110,116,111,32,97,32,103,111,111,100,32,110,101,105,103,104,98,111,114,10,0,0,0,0,0,0,0,0,113,104,95,103,101,116,109,101,114,103,101,115,101,116,95,105,110,105,116,105,97,108,58,32,37,100,32,109,101,114,103,101,115,32,102,111,117,110,100,10,0,0,0,0,0,0,0,0,113,104,95,97,108,108,95,109,101,114,103,101,115,58,32,115,116,97,114,116,105,110,103,32,116,111,32,109,101,114,103,101,32,102,97,99,101,116,115,32,98,101,103,105,110,110,105,110,103,32,102,114,111,109,32,102,37,100,10,0,0,0,0,0,113,104,95,97,108,108,95,109,101,114,103,101,115,58,32,109,101,114,103,101,100,32,37,100,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,37,100,32,99,111,110,99,97,118,101,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,100,101,103,101,110,32,111,114,32,114,101,100,117,110,100,97,110,116,32,102,97,99,101,116,115,46,10,0,0,0,113,104,95,114,101,100,117,99,101,118,101,114,116,105,99,101,115,58,32,114,101,110,97,109,101,100,32,37,100,32,115,104,97,114,101,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,46,32,68,101,103,101,110,63,32,37,100,10,0,0,0,0,0,113,104,95,109,101,114,103,101,95,110,111,110,99,111,110,118,101,120,58,32,109,101,114,103,101,32,35,37,100,32,102,111,114,32,102,37,100,32,97,110,100,32,102,37,100,32,116,121,112,101,32,37,100,10,0,0,113,104,95,109,101,114,103,101,95,110,111,110,99,111,110,118,101,120,58,32,97,118,111,105,100,32,109,101,114,103,105,110,103,32,111,108,100,32,102,97,99,101,116,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,46,32,32,85,115,101,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,105,110,115,116,101,97,100,10,0,0,0,0,0,0,0,0,113,104,95,103,101,116,109,101,114,103,101,115,101,116,58,32,115,116,97,114,116,101,100,46,10,0,0,0,0,0,0,0,113,104,95,103,101,116,109,101,114,103,101,115,101,116,58,32,37,100,32,109,101,114,103,101,115,32,102,111,117,110,100,10,0,0,0,0,0,0,0,0,113,104,95,116,101,115,116,95,118,110,101,105,103,104,98,111,114,115,58,32,116,101,115,116,105,110,103,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,99,111,110,118,101,120,105,116,121,10,0,0,0,0,0,113,104,95,116,101,115,116,95,118,110,101,105,103,104,98,111,114,115,58,32,102,111,117,110,100,32,37,100,32,110,111,110,45,99,111,110,118,101,120,44,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,10,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,97,112,112,101,110,100,109,101,114,103,101,115,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,111,114,32,102,37,100,32,105,115,32,97,108,114,101,97,100,121,32,97,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,10,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,97,112,112,101,110,100,109,101,114,103,101,115,101,116,41,58,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,100,111,32,110,111,116,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,10,0,0,0,0,0,113,104,95,98,97,115,101,118,101,114,116,105,99,101,115,58,32,102,111,117,110,100,32,37,100,32,118,101,114,116,105,99,101,115,10,0,0,0,0,0,113,104,95,99,111,112,121,110,111,110,99,111,110,118,101,120,58,32,109,111,118,101,100,32,110,111,110,99,111,110,118,101,120,32,102,108,97,103,32,102,114,111,109,32,114,37,100,32,116,111,32,114,37,100,10,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,102,97,99,101,116,58,32,116,101,115,116,32,102,97,99,101,116,32,102,37,100,32,102,111,114,32,100,101,103,101,110,47,114,101,100,117,110,100,97,110,116,10,0,0,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,102,97,99,101,116,58,32,102,37,100,32,105,115,32,99,111,110,116,97,105,110,101,100,32,105,110,32,102,37,100,46,32,32,109,101,114,103,101,10,0,0,0,0,0,0,113,104,95,100,101,103,101,110,95,114,101,100,117,110,100,97,110,116,95,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,102,105,110,100,32,110,101,119,32,118,101,114,116,101,120,32,102,111,114,32,118,37,100,32,102,114,111,109,32,0,0,0,0,0,0,0,0,114,37,100,32,0,0,0,0,113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,118,101,114,116,105,99,101,115,32,110,111,116,32,105,110,32,114,105,100,103,101,115,32,102,111,114,32,118,37,100,10,0,0,0,0,0,0,113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,102,111,117,110,100,32,118,37,100,32,102,111,114,32,111,108,100,32,118,37,100,32,102,114,111,109,32,37,100,32,118,101,114,116,105,99,101,115,32,97,110,100,32,37,100,32,114,105,100,103,101,115,46,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,95,110,101,119,118,101,114,116,101,120,58,32,110,111,32,118,101,114,116,101,120,32,102,111,114,32,114,101,110,97,109,105,110,103,32,118,37,100,40,97,108,108,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,41,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,0,0,0,0,0,113,104,95,118,101,114,116,101,120,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,114,105,100,103,101,115,32,102,111,114,32,118,37,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,110,101,105,103,104,98,111,114,41,58,32,110,111,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,102,37,100,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,98,101,115,116,110,101,105,103,104,98,111,114,58,32,102,37,100,32,105,115,32,98,101,115,116,32,110,101,105,103,104,98,111,114,32,102,111,114,32,102,37,100,32,116,101,115,116,99,101,110,116,114,117,109,63,32,37,100,32,110,111,110,99,111,110,118,101,120,63,32,37,100,32,100,105,115,116,32,37,50,46,50,103,32,109,105,110,32,37,50,46,50,103,32,109,97,120,32,37,50,46,50,103,10,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,102,97,99,101,116,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0,0,113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,119,105,100,101,32,109,101,114,103,101,32,35,37,100,40,37,50,46,50,103,41,32,102,111,114,32,102,37,100,32,105,110,116,111,32,102,37,100,44,32,108,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0,0,0,0,0,0,113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,109,101,114,103,101,32,35,37,100,32,105,110,118,111,108,118,105,110,103,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,105,115,32,112,37,100,10,0,0,0,0,0,0,0,0,113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,35,37,100,32,109,101,114,103,101,32,102,37,100,32,105,110,116,111,32,102,37,100,44,32,109,105,110,100,105,115,116,61,32,37,50,46,50,103,44,32,109,97,120,100,105,115,116,61,32,37,50,46,50,103,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,102,97,99,101,116,41,58,32,101,105,116,104,101,114,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,116,104,101,32,115,97,109,101,32,111,114,32,111,110,101,32,105,115,32,97,32,118,105,115,105,98,108,101,32,102,97,99,101,116,10,0,0,0,0,0,0,0,0,10,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,79,110,108,121,32,37,100,32,102,97,99,101,116,115,32,114,101,109,97,105,110,46,32,32,67,97,110,32,110,111,116,32,109,101,114,103,101,32,97,110,111,116,104,101,114,10,112,97,105,114,46,32,32,84,104,101,32,105,110,112,117,116,32,105,115,32,116,111,111,32,100,101,103,101,110,101,114,97,116,101,32,111,114,32,116,104,101,32,99,111,110,118,101,120,105,116,121,32,99,111,110,115,116,114,97,105,110,116,115,32,97,114,101,10,116,111,111,32,115,116,114,111,110,103,46,10,0,0,79,112,116,105,111,110,32,39,81,120,39,32,109,97,121,32,97,118,111,105,100,32,116,104,105,115,32,112,114,111,98,108,101,109,46,10,0,0,0,0,77,69,82,71,73,78,71,0,113,104,95,109,101,114,103,101,102,97,99,101,116,58,32,101,110,100,32,111,102,32,119,105,100,101,32,116,114,97,99,105,110,103,10,0,0,0,0,0,113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,112,108,97,110,97,114,32,97,110,103,108,101,32,37,52,46,52,103,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,110,99,97,118,101,32,102,37,100,32,116,111,32,102,37,100,32,100,105,115,116,32,37,52,46,52,103,32,97,110,100,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,52,46,52,103,32,97,110,103,108,101,32,37,52,46,52,103,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,0,0,0,0,113,104,95,116,101,115,116,95,97,112,112,101,110,100,109,101,114,103,101,58,32,99,111,112,108,97,110,97,114,32,102,37,100,32,116,111,32,102,37,100,32,100,105,115,116,32,37,52,46,52,103,44,32,114,101,118,101,114,115,101,32,100,105,115,116,32,37,52,46,52,103,32,97,110,103,108,101,32,37,52,46,52,103,10,0,0,0,0,113,104,95,109,97,107,101,114,105,100,103,101,115,58,32,109,97,107,101,32,114,105,100,103,101,115,32,102,111,114,32,102,37,100,10,0,0,0,0,0,113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,58,32,116,101,115,116,32,102,37,100,32,102,111,114,32,110,111,32,114,105,100,103,101,115,32,116,111,32,97,32,110,101,105,103,104,98,111,114,10,0,0,0,0,0,0,0,113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,58,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,97,114,101,32,110,111,32,108,111,110,103,101,114,32,110,101,105,103,104,98,111,114,115,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,0,0,0,113,104,95,109,97,121,100,114,111,112,110,101,105,103,104,98,111,114,115,58,32,102,37,100,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,0,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,41,58,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,46,32,32,85,115,101,32,111,112,116,105,111,110,32,39,81,49,49,39,10,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,109,101,114,103,101,32,35,37,100,32,102,111,114,32,102,97,99,101,116,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,32,102,37,100,10,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,61,61,61,61,61,61,61,61,61,32,116,114,97,99,101,32,109,101,114,103,101,32,37,100,32,111,102,32,115,97,109,101,99,121,99,108,101,32,37,100,32,105,110,116,111,32,116,114,97,99,101,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,105,115,32,112,37,100,10,0,0,0,0,0,0,0,0,32,32,115,97,109,101,32,99,121,99,108,101,58,0,0,0,32,102,37,100,0,0,0,0,77,69,82,71,73,78,71,32,67,89,67,76,69,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,58,32,101,110,100,32,111,102,32,116,114,97,99,101,32,102,97,99,101,116,10,0,0,0,0,0,0,10,65,116,32,37,100,58,37,100,58,37,100,32,38,32,37,50,46,53,103,32,67,80,85,32,115,101,99,115,44,32,113,104,117,108,108,32,104,97,115,32,109,101,114,103,101,100,32,37,100,32,102,97,99,101,116,115,46,32,32,84,104,101,32,104,117,108,108,10,32,32,99,111,110,116,97,105,110,115,32,37,100,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,46,10,0,0,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,32,115,104,97,114,101,100,32,110,101,105,103,104,98,111,114,115,32,102,114,111,109,32,110,101,119,102,97,99,101,116,10,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,117,112,100,97,116,101,32,110,101,105,103,104,98,111,114,115,10,0,0,0,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,100,32,37,100,32,110,101,105,103,104,98,111,114,115,32,97,110,100,32,97,100,100,101,100,32,37,100,10,0,0,0,0,0,113,104,95,109,101,114,103,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18080);
/* memory initializer */ allocate([99,121,99,108,101,95,114,105,100,103,101,115,58,32,100,101,108,101,116,101,32,115,104,97,114,101,100,32,114,105,100,103,101,115,32,102,114,111,109,32,110,101,119,102,97,99,101,116,10,0,0,0,0,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,97,100,100,32,114,105,100,103,101,115,32,116,111,32,110,101,119,102,97,99,101,116,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,41,58,32,98,97,100,32,114,105,100,103,101,32,114,37,100,10,0,0,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,114,105,100,103,101,115,58,32,102,111,117,110,100,32,37,100,32,111,108,100,32,114,105,100,103,101,115,32,97,110,100,32,37,100,32,110,101,119,32,111,110,101,115,10,0,0,0,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,117,112,100,97,116,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,110,101,119,102,97,99,101,116,10,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,100,101,108,101,116,101,100,32,118,37,100,32,119,104,101,110,32,109,101,114,103,105,110,103,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,118,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,100,32,118,101,114,116,105,99,101,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0,0,0,0,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,102,97,99,101,116,115,58,32,109,97,107,101,32,110,101,119,102,97,99,101,116,32,110,101,119,32,97,110,100,32,115,97,109,101,99,121,99,108,101,32,100,101,108,101,116,101,100,10,0,0,113,104,95,109,101,114,103,101,99,121,99,108,101,95,102,97,99,101,116,115,58,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,102,114,111,109,32,99,121,99,108,101,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0,0,0,0,77,69,82,71,69,68,0,0,113,104,95,116,114,97,99,101,109,101,114,103,101,58,32,116,114,97,99,101,32,102,97,99,101,116,32,97,110,100,32,118,101,114,116,101,120,32,97,102,116,101,114,32,109,101,114,103,101,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,44,32,102,117,114,116,104,101,115,116,32,112,37,100,10,0,84,82,65,67,69,0,0,0,113,104,95,116,114,97,99,101,109,101,114,103,101,58,32,116,114,97,99,101,32,118,101,114,116,101,120,32,100,101,108,101,116,101,100,32,97,116,32,102,117,114,116,104,101,115,116,32,112,37,100,10,0,0,0,0,113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,32,97,112,101,120,32,118,37,100,32,111,102,32,102,37,100,32,105,110,116,111,32,102,97,99,101,116,32,102,37,100,10,0,0,113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,117,112,100,97,116,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,32,114,105,100,103,101,115,32,97,110,100,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0,0,0,0,113,104,95,109,101,114,103,101,115,105,109,112,108,101,120,58,32,109,101,114,103,101,100,32,115,105,109,112,108,101,120,32,102,37,100,32,97,112,101,120,32,118,37,100,32,105,110,116,111,32,102,97,99,101,116,32,102,37,100,10,0,0,0,0,113,104,95,109,101,114,103,101,102,97,99,101,116,50,100,58,32,109,101,114,103,101,100,32,118,37,100,32,97,110,100,32,110,101,105,103,104,98,111,114,32,102,37,100,32,111,102,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0,0,0,113,104,95,109,101,114,103,101,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,101,114,103,101,118,101,114,116,105,99,101,115,41,58,32,102,97,99,101,116,115,32,100,105,100,32,110,111,116,32,115,104,97,114,101,32,97,32,114,105,100,103,101,10,0,0,113,104,95,109,101,114,103,101,114,105,100,103,101,115,58,32,109,101,114,103,101,32,114,105,100,103,101,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,0,113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,110,101,105,103,104,98,111,114,115,58,32,109,101,114,103,101,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,110,101,105,103,104,98,111,114,115,58,32,111,102,32,102,37,100,32,97,110,100,32,102,37,100,32,97,116,32,102,117,114,116,104,101,115,116,32,112,37,100,32,102,48,61,32,37,112,10,0,0,0,0,0,0,0,0,113,104,95,109,101,114,103,101,118,101,114,116,101,120,95,100,101,108,58,32,100,101,108,101,116,101,100,32,118,37,100,32,119,104,101,110,32,109,101,114,103,105,110,103,32,102,37,100,32,105,110,116,111,32,102,37,100,10,0,0,0,0,0,0,113,104,95,110,101,105,103,104,98,111,114,95,105,110,116,101,114,115,101,99,116,105,111,110,115,58,32,37,100,32,118,101,114,116,105,99,101,115,32,105,110,32,110,101,105,103,104,98,111,114,32,105,110,116,101,114,115,101,99,116,105,111,110,32,111,102,32,118,37,100,10,0,113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,116,101,115,116,32,102,37,100,32,102,111,114,32,101,120,116,114,97,32,118,101,114,116,105,99,101,115,10,0,0,0,113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,118,37,100,32,100,101,108,101,116,101,100,32,98,101,99,97,117,115,101,32,105,116,39,115,32,108,111,115,116,32,97,108,108,32,114,105,100,103,101,115,10,0,0,0,0,0,0,113,104,95,114,101,109,111,118,101,95,101,120,116,114,97,118,101,114,116,105,99,101,115,58,32,118,37,100,32,114,101,109,111,118,101,100,32,102,114,111,109,32,102,37,100,32,98,101,99,97,117,115,101,32,105,116,39,115,32,108,111,115,116,32,97,108,108,32,114,105,100,103,101,115,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,114,101,110,97,109,101,95,115,104,97,114,101,100,118,101,114,116,101,120,41,58,32,118,37,100,39,115,32,110,101,105,103,104,98,111,114,115,32,110,111,116,32,105,110,32,102,37,100,10,0,0,0,0,0,0,113,104,95,114,101,110,97,109,101,95,115,104,97,114,101,100,118,101,114,116,101,120,58,32,112,37,100,40,118,37,100,41,32,105,115,32,115,104,97,114,101,100,32,98,121,32,102,37,100,40,37,100,32,114,105,100,103,101,115,41,32,97,110,100,32,102,37,100,10,0,0,0,113,104,95,114,101,100,117,110,100,97,110,116,95,118,101,114,116,101,120,58,32,99,104,101,99,107,32,105,102,32,118,37,100,32,99,97,110,32,98,101,32,114,101,110,97,109,101,100,10,0,0,0,0,0,0,0,113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,118,37,100,32,116,111,32,118,37,100,32,105,110,32,115,101,118,101,114,97,108,32,102,97,99,101,116,115,10,0,0,113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,118,37,100,32,116,111,32,118,37,100,32,105,110,32,111,108,100,102,97,99,101,116,32,102,37,100,10,0,0,0,0,113,104,95,114,101,110,97,109,101,118,101,114,116,101,120,58,32,114,101,110,97,109,101,100,32,112,105,110,99,104,101,100,32,118,37,100,32,116,111,32,118,37,100,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,114,101,110,97,109,101,114,105,100,103,101,118,101,114,116,101,120,58,32,114,105,100,103,101,32,114,37,100,32,100,101,108,101,116,101,100,46,32,32,73,116,32,99,111,110,116,97,105,110,101,100,32,98,111,116,104,32,118,37,100,32,97,110,100,32,118,37,100,10,0,0,0,0,0,0,0,0,113,104,95,114,101,110,97,109,101,114,105,100,103,101,118,101,114,116,101,120,58,32,115,119,97,112,112,101,100,32,116,104,101,32,116,111,112,32,97,110,100,32,98,111,116,116,111,109,32,111,102,32,114,105,100,103,101,32,114,37,100,10,0,0,113,104,95,97,112,112,101,110,100,102,97,99,101,116,58,32,97,112,112,101,110,100,32,102,37,100,32,116,111,32,102,97,99,101,116,95,108,105,115,116,10,0,0,0,0,0,0,0,113,104,95,97,112,112,101,110,100,118,101,114,116,101,120,58,32,97,112,112,101,110,100,32,118,37,100,32,116,111,32,118,101,114,116,101,120,95,108,105,115,116,10,0,0,0,0,0,113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,58,32,100,101,108,101,116,101,32,105,110,116,101,114,105,111,114,32,114,105,100,103,101,115,10,0,0,0,0,0,113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,58,32,97,116,116,97,99,104,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,116,111,32,110,101,119,32,102,97,99,101,116,115,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,97,116,116,97,99,104,110,101,119,102,97,99,101,116,115,41,58,32,99,111,117,108,100,110,39,116,32,102,105,110,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,32,102,111,114,32,104,111,114,105,122,111,110,32,102,37,100,32,111,102,32,110,101,119,102,97,99,101,116,32,102,37,100,10,0,113,104,95,99,104,101,99,107,102,108,105,112,112,101,100,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,44,32,100,105,115,116,97,110,99,101,61,32,37,54,46,49,50,103,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,0,0,113,104,95,100,101,108,102,97,99,101,116,58,32,100,101,108,101,116,101,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,114,101,109,111,118,101,102,97,99,101,116,58,32,114,101,109,111,118,101,32,102,37,100,32,102,114,111,109,32,102,97,99,101,116,95,108,105,115,116,10,0,0,0,0,0,113,104,95,100,101,108,101,116,101,118,105,115,105,98,108,101,58,32,100,101,108,101,116,101,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,97,110,100,32,37,100,32,118,101,114,116,105,99,101,115,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,100,101,108,101,116,101,118,105,115,105,98,108,101,41,58,32,113,104,32,110,117,109,95,118,105,115,105,98,108,101,32,37,100,32,105,115,32,110,111,116,32,110,117,109,98,101,114,32,111,102,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,37,100,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,105,110,116,101,114,115,101,99,116,41,58,32,102,37,100,32,111,114,32,102,37,100,32,110,111,116,32,105,110,32,111,116,104,101,114,115,32,110,101,105,103,104,98,111,114,115,10,0,0,0,113,104,95,102,97,99,101,116,105,110,116,101,114,115,101,99,116,58,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,115,32,102,37,100,32,115,107,105,112,32,37,100,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,110,101,103,97,116,105,118,101,32,104,97,115,104,115,105,122,101,32,37,100,32,112,97,115,115,101,100,32,116,111,32,113,104,95,103,101,116,104,97,115,104,32,91,112,111,108,121,46,99,93,10,0,0,0,0,0,0,0,113,104,95,114,101,109,111,118,101,118,101,114,116,101,120,58,32,114,101,109,111,118,101,32,118,37,100,32,102,114,111,109,32,118,101,114,116,101,120,95,108,105,115,116,10,0,0,0,113,104,95,110,101,119,102,97,99,101,116,58,32,99,114,101,97,116,101,100,32,102,97,99,101,116,32,102,37,100,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,107,101,110,101,119,95,110,111,110,115,105,109,112,108,105,99,105,97,108,41,58,32,115,105,109,112,108,105,99,105,97,108,32,102,37,100,32,115,104,97,114,105,110,103,32,116,119,111,32,114,105,100,103,101,115,32,119,105,116,104,32,102,37,100,10,0,0,0,0,113,104,95,109,97,107,101,110,101,119,95,110,111,110,115,105,109,112,108,105,99,105,97,108,58,32,99,114,101,97,116,101,100,32,102,97,99,101,116,32,102,37,100,32,102,114,111,109,32,118,37,100,32,97,110,100,32,114,37,100,32,111,102,32,104,111,114,105,122,111,110,32,102,37,100,10,0,0,0,0,113,104,95,109,97,107,101,110,101,119,95,115,105,109,112,108,105,99,105,97,108,58,32,99,114,101,97,116,101,32,102,97,99,101,116,32,102,37,100,32,116,111,112,32,37,100,32,102,114,111,109,32,118,37,100,32,97,110,100,32,104,111,114,105,122,111,110,32,102,37,100,32,115,107,105,112,32,37,100,32,116,111,112,32,37,100,32,97,110,100,32,118,105,115,105,98,108,101,32,102,37,100,32,115,107,105,112,32,37,100,44,32,102,108,105,112,63,32,37,100,10,0,0,0,0,0,0,0,113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,101,119,102,97,99,101,116,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,32,104,97,115,104,99,111,117,110,116,32,37,100,10,0,0,0,0,116,119,111,32,102,97,99,101,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,0,0,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,86,101,114,116,101,120,32,115,101,116,115,32,97,114,101,32,116,104,101,32,115,97,109,101,32,102,111,114,32,102,37,100,32,97,110,100,32,102,37,100,46,32,32,67,97,110,32,110,111,116,32,102,111,114,99,101,32,111,117,116,112,117,116,46,10,0,0,0,0,0,0,0,0,113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,10,0,0,0,0,0,97,32,114,105,100,103,101,32,119,105,116,104,32,109,111,114,101,32,116,104,97,110,32,116,119,111,32,110,101,105,103,104,98,111,114,115,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,97,99,101,116,115,32,102,37,100,44,32,102,37,100,32,97,110,100,32,102,37,100,32,109,101,101,116,32,97,116,32,97,32,114,105,100,103,101,32,119,105,116,104,32,109,111,114,101,32,116,104,97,110,32,50,32,110,101,105,103,104,98,111,114,115,46,32,32,67,97,110,32,110,111,116,32,99,111,110,116,105,110,117,101,46,10,0,0,113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,100,117,112,108,105,99,97,116,101,115,32,114,105,100,103,101,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,105,110,103,32,102,37,100,32,105,115,109,97,116,99,104,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0,0,113,104,95,109,97,116,99,104,110,101,105,103,104,98,111,114,58,32,110,111,32,109,97,116,99,104,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0,0,113,104,95,109,97,116,99,104,118,101,114,116,105,99,101,115,58,32,109,97,116,99,104,101,100,32,98,121,32,115,107,105,112,32,37,100,40,118,37,100,41,32,97,110,100,32,115,107,105,112,32,37,100,40,118,37,100,41,32,115,97,109,101,63,32,37,100,10,0,0,0,0,113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,58,32,109,97,116,99,104,32,110,101,105,103,104,98,111,114,115,32,102,111,114,32,110,101,119,32,102,97,99,101,116,115,46,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,41,58,32,37,100,32,110,101,105,103,104,98,111,114,115,32,100,105,100,32,110,111,116,32,109,97,116,99,104,32,117,112,10,0,0,0,0,0,0,0,0,113,104,95,109,97,116,99,104,110,101,119,102,97,99,101,116,115,58,32,37,100,32,110,101,119,32,102,97,99,101,116,115,44,32,37,100,32,117,110,117,115,101,100,32,104,97,115,104,32,101,110,116,114,105,101,115,32,46,32,32,104,97,115,104,115,105,122,101,32,37,100,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,114,105,100,103,101,115,46,32,32,73,68,32,102,105,101,108,100,32,111,118,101,114,102,108,111,119,115,32,97,110,100,32,116,119,111,32,114,105,100,103,101,115,10,109,97,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,101,110,116,105,102,105,101,114,46,32,32,79,116,104,101,114,119,105,115,101,32,111,117,116,112,117,116,32,111,107,46,10,0,0,0,0,0,113,104,95,110,101,119,114,105,100,103,101,58,32,99,114,101,97,116,101,100,32,114,105,100,103,101,32,114,37,100,10,0,113,104,95,117,112,100,97,116,101,118,101,114,116,105,99,101,115,58,32,100,101,108,101,116,101,32,105,110,116,101,114,105,111,114,32,118,101,114,116,105,99,101,115,32,97,110,100,32,117,112,100,97,116,101,32,118,101,114,116,101,120,45,62,110,101,105,103,104,98,111,114,115,10,0,0,0,0,0,0,0,113,104,95,117,112,100,97,116,101,118,101,114,116,105,99,101,115,58,32,100,101,108,101,116,101,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,105,110,32,102,37,100,10,0,0,0,0,0,0,0,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,58,32,99,104,101,99,107,32,97,108,108,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,102,37,100,32,104,97,115,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,98,101,102,111,114,101,32,113,104,32,102,97,99,101,116,95,110,101,120,116,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,118,105,115,105,98,108,101,32,108,105,115,116,32,102,37,100,32,110,111,32,108,111,110,103,101,114,32,111,110,32,102,97,99,101,116,32,108,105,115,116,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,37,112,32,102,111,114,32,118,101,114,116,101,120,32,118,37,100,32,102,105,114,115,116,95,112,111,105,110,116,32,37,112,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,97,99,116,117,97,108,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,115,32,37,100,44,32,99,117,109,117,108,97,116,105,118,101,32,102,97,99,101,116,32,99,111,117,110,116,32,105,115,32,37,100,32,45,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,10,0,0,0,0,0,0,0,0,110,101,105,103,104,98,111,114,115,32,102,111,114,32,118,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,32,105,110,99,111,110,115,105,115,116,101,110,116,46,32,32,84,111,116,118,110,101,105,103,104,98,111,114,115,32,37,100,44,32,116,111,116,118,101,114,116,105,99,101,115,32,37,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,97,99,116,117,97,108,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,115,32,37,100,44,32,99,117,109,117,108,97,116,105,118,101,32,118,101,114,116,101,120,32,99,111,117,110,116,32,105,115,32,37,100,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,112,111,108,121,103,111,110,41,58,32,35,118,101,114,116,105,99,101,115,32,37,100,32,33,61,32,35,102,97,99,101,116,115,32,37,100,10,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,35,118,101,114,116,105,99,101,115,32,37,100,32,43,32,35,102,97,99,101,116,115,32,37,100,32,45,32,35,101,100,103,101,115,32,37,100,32,33,61,32,50,10,32,32,32,32,32,32,32,32,65,32,118,101,114,116,101,120,32,97,112,112,101,97,114,115,32,116,119,105,99,101,32,105,110,32,97,32,101,100,103,101,32,108,105,115,116,46,32,32,77,97,121,32,111,99,99,117,114,32,100,117,114,105,110,103,32,109,101,114,103,105,110,103,46,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,44,32,100,105,115,116,97,110,99,101,61,32,37,54,46,49,50,103,10,0,0,10,65,32,102,108,105,112,112,101,100,32,102,97,99,101,116,32,111,99,99,117,114,115,32,119,104,101,110,32,105,116,115,32,100,105,115,116,97,110,99,101,32,116,111,32,116,104,101,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,32,105,115,10,103,114,101,97,116,101,114,32,116,104,97,110,32,37,50,46,50,103,44,32,116,104,101,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,46,10,0,0,0,0,0,113,104,95,99,104,101,99,107,99,111,110,118,101,120,58,32,99,104,101,99,107,32,97,108,108,32,114,105,100,103,101,115,32,97,114,101,32,99,111,110,118,101,120,10,0,0,0,0,102,108,105,112,112,101,100,32,102,97,99,101,116,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,102,108,105,112,112,101,100,40,105,110,116,101,114,105,111,114,32,112,111,105,110,116,32,105,115,32,111,117,116,115,105,100,101,41,10,0,0,0,0,0,0,0,99,111,112,108,97,110,97,114,32,111,114,32,99,111,110,99,97,118,101,32,114,105,100,103,101,0,0,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,32,105,115,32,110,111,116,32,99,111,110,118,101,120,46,32,68,105,115,116,97,110,99,101,61,37,46,50,103,10,0,0,0,0,99,111,110,99,97,118,101,32,114,105,100,103,101,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,10,0,0,0,0,99,111,112,108,97,110,97,114,32,114,105,100,103,101,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,108,101,97,114,108,121,32,110,111,116,32,99,111,110,118,101,120,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,10,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,109,97,121,32,98,101,32,99,111,112,108,97,110,97,114,32,116,111,32,102,37,100,44,32,115,105,110,99,101,32,112,37,100,40,118,37,100,41,32,105,115,32,119,105,116,104,105,110,32,37,54,46,52,103,32,100,117,114,105,110,103,32,112,37,100,10,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,114,101,99,111,109,112,117,116,105,110,103,32,99,101,110,116,114,117,109,115,32,102,111,114,32,99,111,110,118,101,120,105,116,121,32,116,101,115,116,46,32,32,84,104,105,115,32,109,97,121,32,108,101,97,100,32,116,111,32,102,97,108,115,101,44,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,46,10,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,46,32,32,67,101,110,116,114,117,109,32,111,102,32,102,37,100,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,32,102,37,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,102,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,111,114,32,99,111,110,99,97,118,101,32,116,111,32,102,37,100,46,32,32,67,101,110,116,114,117,109,32,111,102,32,102,37,100,32,105,115,32,37,54,46,52,103,32,97,98,111,118,101,32,102,37,100,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,105,115,32,111,110,32,116,104,101,32,118,105,115,105,98,108,101,95,108,105,115,116,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,32,97,32,110,111,114,109,97,108,10,0,0,0,0,0,0,0,0,118,101,114,116,105,99,101,115,32,102,111,114,32,102,0,0,114,105,100,103,101,115,32,102,111,114,32,102,0,0,0,0,111,117,116,115,105,100,101,115,101,116,32,102,111,114,32,102,0,0,0,0,0,0,0,0,99,111,112,108,97,110,97,114,115,101,116,32,102,111,114,32,102,0,0,0,0,0,0,0,110,101,105,103,104,98,111,114,115,32,102,111,114,32,102,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,100,101,108,101,116,101,100,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,105,99,101,115,32,111,102,32,102,37,100,32,97,114,101,32,110,111,116,32,105,110,32,100,101,115,99,101,110,100,105,110,103,32,105,100,32,111,114,100,101,114,32,97,116,32,118,37,100,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,44,32,35,118,101,114,116,105,99,101,115,32,37,100,32,43,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,33,61,32,50,42,113,104,32,104,117,108,108,95,100,105,109,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,35,118,101,114,116,105,99,101,115,32,37,100,32,111,114,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,60,32,113,104,32,104,117,108,108,95,100,105,109,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,35,114,105,100,103,101,115,32,37,100,32,60,32,35,110,101,105,103,104,98,111,114,115,32,37,100,32,111,114,40,51,45,100,41,32,62,32,35,118,101,114,116,105,99,101,115,32,37,100,32,111,114,40,50,45,100,41,32,110,111,116,32,97,108,108,32,50,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,115,116,105,108,108,32,104,97,115,32,97,32,77,69,82,71,69,32,111,114,32,68,85,80,32,110,101,105,103,104,98,111,114,10,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,110,101,105,103,104,98,111,114,32,102,37,100,44,32,98,117,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,97,32,100,117,112,108,105,99,97,116,101,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0,0,0,118,101,114,116,105,99,101,115,32,102,111,114,32,114,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,104,97,115,32,97,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,32,114,37,100,10,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,114,105,100,103,101,32,98,101,116,119,101,101,110,32,102,37,100,32,97,110,100,32,102,37,100,32,104,97,115,32,37,100,32,118,101,114,116,105,99,101,115,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,111,114,32,102,97,99,101,116,32,102,37,100,44,32,110,101,105,103,104,98,111,114,32,102,37,100,32,111,102,32,114,105,100,103,101,32,114,37,100,32,110,111,116,32,105,110,32,102,97,99,101,116,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,114,105,100,103,101,32,102,111,114,32,110,101,105,103,104,98,111,114,32,102,37,100,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,114,37,100,32,110,111,116,32,105,110,32,102,37,100,32,105,110,116,101,114,115,101,99,116,32,102,37,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,118,101,114,116,101,120,32,118,37,100,32,105,110,32,102,37,100,32,105,110,116,101,114,115,101,99,116,32,102,37,100,32,98,117,116,10,32,110,111,116,32,105,110,32,97,32,114,105,100,103,101,46,32,32,84,104,105,115,32,105,115,32,111,107,32,117,110,100,101,114,32,109,101,114,103,105,110,103,46,32,32,76,97,115,116,32,112,111,105,110,116,32,119,97,115,32,112,37,100,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,102,97,99,101,116,32,102,37,100,32,115,107,105,112,32,37,100,32,97,110,100,32,110,101,105,103,104,98,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,100,111,32,110,111,116,32,109,97,116,99,104,32,10,0,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,102,97,99,101,116,41,58,32,114,105,100,103,101,115,32,114,37,100,32,97,110,100,32,114,37,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,118,101,114,116,105,99,101,115,10,0,0,0,0,0,0,0,0,113,104,95,112,114,105,110,116,108,105,115,116,115,58,32,102,97,99,101,116,115,58,0,0,10,32,32,32,32,32,0,0,32,37,100,0,0,0,0,0,10,32,32,110,101,119,32,102,97,99,101,116,115,32,37,100,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,37,100,32,110,101,120,116,32,102,97,99,101,116,32,102,111,114,32,113,104,95,97,100,100,112,111,105,110,116,32,37,100,10,32,32,118,101,114,116,105,99,101,115,40,110,101,119,32,37,100,41,58,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,105,100,32,37,112,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,117,110,107,110,111,119,110,32,118,101,114,116,101,120,32,105,100,32,37,100,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,99,104,101,99,107,118,101,114,116,101,120,41,58,32,110,101,105,103,104,98,111,114,32,102,37,100,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,118,37,100,10,0,0,0,0,0,0,0,113,104,95,99,108,101,97,114,99,101,110,116,101,114,115,58,32,115,119,105,116,99,104,101,100,32,116,111,32,99,101,110,116,101,114,32,116,121,112,101,32,37,100,10,0,0,0,0,113,104,95,99,114,101,97,116,101,115,105,109,112,108,101,120,58,32,99,114,101,97,116,101,100,32,115,105,109,112,108,101,120,10,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,58,32,109,111,114,101,32,116,104,97,110,32,37,100,32,118,101,114,116,105,99,101,115,46,32,32,73,68,32,102,105,101,108,100,32,111,118,101,114,102,108,111,119,115,32,97,110,100,32,116,119,111,32,118,101,114,116,105,99,101,115,10,109,97,121,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,105,100,101,110,116,105,102,105,101,114,46,32,32,86,101,114,116,105,99,101,115,32,119,105,108,108,32,110,111,116,32,98,101,32,115,111,114,116,101,100,32,99,111,114,114,101,99,116,108,121,46,10,0,113,104,95,110,101,119,118,101,114,116,101,120,58,32,118,101,114,116,101,120,32,112,37,100,40,118,37,100,41,32,99,114,101,97,116,101,100,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,97,99,101,116,51,118,101,114,116,101,120,41,58,32,114,105,100,103,101,115,32,102,111,114,32,102,97,99,101,116,32,37,100,32,100,111,110,39,116,32,109,97,116,99,104,32,117,112,46,32,32,103,111,116,32,97,116,32,108,101,97,115,116,32,37,100,10,0,0,0,10,81,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,102,105,110,100,98,101,115,116,108,111,119,101,114,41,58,32,97,108,108,32,110,101,105,103,104,98,111,114,115,32,111,102,32,102,97,99,101,116,32,37,100,32,97,114,101,32,102,108,105,112,112,101,100,32,111,114,32,117,112,112,101,114,32,68,101,108,97,117,110,97,121,46,10,80,108,101,97,115,101,32,114,101,112,111,114,116,32,116,104,105,115,32,101,114,114,111,114,32,116,111,32,113,104,117,108,108,95,98,117,103,64,113,104,117,108,108,46,111,114,103,32,119,105,116,104,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,111,117,116,112,117,116,46,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,98,101,115,116,108,111,119,101,114,58,32,102,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,111,114,32,102,37,100,32,112,37,100,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,110,101,97,114,118,101,114,116,101,120,41,58,32,113,104,46,86,69,82,84,69,88,110,101,105,103,104,98,111,114,115,32,97,110,100,32,102,97,99,101,116,45,62,99,101,110,116,101,114,32,114,101,113,117,105,114,101,100,32,102,111,114,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,10,0,0,0,0,0,113,104,95,110,101,97,114,118,101,114,116,101,120,58,32,118,37,100,32,100,105,115,116,32,37,50,46,50,103,32,102,111,114,32,102,37,100,32,112,37,100,10,0,0,0,0,0,0,113,104,95,118,101,114,116,101,120,110,101,105,103,104,98,111,114,115,58,32,100,101,116,101,114,109,105,110,103,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,115,32,102,111,114,32,101,97,99,104,32,118,101,114,116,101,120,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,103,111,111,100,58,32,102,37,100,32,105,115,32,99,108,111,115,101,115,116,40,37,50,46,50,103,41,32,116,111,32,116,104,114,101,115,104,111,108,100,115,10,0,0,0,0,0,0,0,113,104,95,102,105,110,100,103,111,111,100,58,32,102,111,117,110,100,32,37,100,32,103,111,111,100,32,102,97,99,101,116,115,32,119,105,116,104,32,37,100,32,103,111,111,100,32,104,111,114,105,122,111,110,10,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,103,111,111,100,32,118,101,114,116,101,120,32,112,37,100,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,108,97,115,116,32,103,111,111,100,32,102,97,99,101,116,32,102,37,100,46,32,32,73,103,110,111,114,101,100,46,10,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,110,111,116,32,97,32,118,101,114,116,101,120,40,39,81,86,37,100,39,41,46,10,0,0,0,0,0,0,113,104,117,108,108,32,119,97,114,110,105,110,103,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,97,32,118,101,114,116,101,120,32,102,111,114,32,101,118,101,114,121,32,102,97,99,101,116,40,39,81,86,45,37,100,39,41,46,10,0,113,104,95,102,105,110,100,103,111,111,100,95,97,108,108,58,32,102,37,100,32,105,115,32,99,108,111,115,101,115,116,40,37,50,46,50,103,41,32,116,111,32,116,104,114,101,115,104,111,108,100,115,10,0,0,0,113,104,95,102,105,110,100,103,111,111,100,95,97,108,108,58,32,37,100,32,103,111,111,100,32,102,97,99,101,116,115,32,114,101,109,97,105,110,32,111,117,116,32,111,102,32,37,100,32,102,97,99,101,116,115,10,0,0,0,0,0,0,0,0,113,104,95,102,117,114,116,104,101,115,116,110,101,120,116,58,32,109,97,100,101,32,102,37,100,32,110,101,120,116,32,102,97,99,101,116,40,100,105,115,116,32,37,46,50,103,41,10,0,0,0,0,0,0,0,0,113,104,95,112,114,101,112,101,110,100,102,97,99,101,116,58,32,112,114,101,112,101,110,100,32,102,37,100,32,98,101,102,111,114,101,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,102,117,114,116,104,101,115,116,111,117,116,58,32,112,37,100,32,105,115,32,102,117,114,116,104,101,115,116,32,111,117,116,115,105,100,101,32,112,111,105,110,116,32,111,102,32,102,37,100,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,105,110,102,105,110,105,116,101,108,111,111,112,41,58,32,112,111,116,101,110,116,105,97,108,32,105,110,102,105,110,105,116,101,32,108,111,111,112,32,100,101,116,101,99,116,101,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,101,105,116,104,101,114,32,81,71,110,32,111,114,32,81,86,110,32,112,111,105,110,116,32,105,115,32,62,32,112,37,100,10,0,0,0,0,10,84,114,97,99,101,32,108,101,118,101,108,32,37,100,32,102,111,114,32,37,115,32,124], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+28320);
/* memory initializer */ allocate([32,37,115,10,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,103,32,81,86,110,39,32,40,111,110,108,121,32,103,111,111,100,32,118,101,114,116,101,120,41,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,119,105,116,104,32,109,101,114,103,105,110,103,46,10,85,115,101,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,111,114,32,39,81,48,39,32,116,111,32,116,117,114,110,32,111,102,102,32,109,101,114,103,105,110,103,46,10,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,39,81,103,39,32,40,79,78,76,89,103,111,111,100,41,32,110,101,101,100,115,32,97,32,103,111,111,100,32,116,104,114,101,115,104,111,108,100,40,39,80,100,48,68,48,39,41,44,32,97,10,103,111,111,100,32,112,111,105,110,116,40,81,71,110,32,111,114,32,81,71,45,110,41,44,32,111,114,32,97,32,103,111,111,100,32,118,101,114,116,101,120,32,119,105,116,104,32,39,81,74,39,32,111,114,32,39,81,48,39,32,40,81,86,110,41,46,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,112,111,105,110,116,32,102,111,114,32,81,86,37,100,32,105,115,32,105,110,115,105,100,101,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,46,32,32,73,116,32,99,97,110,32,110,111,116,32,98,101,32,109,97,100,101,32,97,32,118,101,114,116,101,120,46,10,0,0,0,0,0,113,104,95,105,110,105,116,98,117,105,108,100,58,32,105,110,105,116,105,97,108,32,104,117,108,108,32,99,114,101,97,116,101,100,32,97,110,100,32,112,111,105,110,116,115,32,112,97,114,116,105,116,105,111,110,101,100,10,0,0,0,0,0,0,113,104,95,105,110,105,116,105,97,108,104,117,108,108,58,32,105,110,105,116,105,97,108,32,111,114,105,101,110,116,97,116,105,111,110,32,105,110,99,111,114,114,101,99,116,46,32,32,67,111,114,114,101,99,116,32,97,108,108,32,102,97,99,101,116,115,10,0,0,0,0,0,81,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,67,97,110,32,110,111,116,32,99,111,109,112,117,116,101,32,116,104,101,32,117,112,112,101,114,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,114,32,117,112,112,101,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,111,102,32,99,111,99,105,114,99,117,108,97,114,47,99,111,115,112,104,101,114,105,99,97,108,32,112,111,105,110,116,115,46,10,0,81,104,117,108,108,32,105,110,112,117,116,32,101,114,114,111,114,58,32,85,115,101,32,111,112,116,105,111,110,32,39,81,122,39,32,102,111,114,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,114,32,86,111,114,111,110,111,105,32,100,105,97,103,114,97,109,32,111,102,32,99,111,99,105,114,99,117,108,97,114,47,99,111,115,112,104,101,114,105,99,97,108,32,112,111,105,110,116,115,46,32,32,79,112,116,105,111,110,32,39,81,122,39,32,97,100,100,115,32,97,32,112,111,105,110,116,32,34,97,116,32,105,110,102,105,110,105,116,121,34,32,40,97,98,111,118,101,32,116,104,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,112,97,114,97,98,111,108,111,105,100,41,46,10,0,0,0,105,110,105,116,105,97,108,32,102,97,99,101,116,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,58,32,105,110,105,116,105,97,108,32,102,97,99,101,116,32,37,100,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,116,104,101,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,10,0,0,0,0,95,110,97,114,114,111,119,45,104,117,108,108,0,0,0,0,113,104,95,105,110,105,116,105,97,108,104,117,108,108,58,32,115,105,109,112,108,101,120,32,99,111,110,115,116,114,117,99,116,101,100,44,32,105,110,116,101,114,105,111,114,32,112,111,105,110,116,58,0,0,0,0,32,37,54,46,52,103,0,0,113,104,95,109,97,107,101,110,101,119,102,97,99,101,116,115,58,32,99,114,101,97,116,101,100,32,37,100,32,110,101,119,32,102,97,99,101,116,115,32,102,114,111,109,32,112,111,105,110,116,32,112,37,100,32,116,111,32,104,111,114,105,122,111,110,10,0,0,0,0,0,0,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,102,105,110,100,32,100,117,112,108,105,99,97,116,101,32,109,97,116,99,104,101,115,32,102,111,114,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,32,104,97,115,104,99,111,117,110,116,32,37,100,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,109,105,115,115,105,110,103,32,100,117,112,114,105,100,103,101,32,97,116,32,102,37,100,32,115,107,105,112,32,37,100,32,102,111,114,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,104,97,115,104,32,37,100,10,0,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,109,101,114,103,101,10,0,0,0,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,100,105,115,116,32,37,50,46,50,103,44,32,109,97,120,32,105,115,32,110,111,119,32,102,37,100,32,102,37,100,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,41,58,32,110,111,32,109,97,120,105,109,117,109,32,109,97,116,99,104,32,97,116,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,97,116,32,104,97,115,104,32,37,100,10,0,0,0,0,0,0,0,0,113,104,95,109,97,116,99,104,100,117,112,108,105,99,97,116,101,115,58,32,100,117,112,108,105,99,97,116,101,32,102,37,100,32,115,107,105,112,32,37,100,32,109,97,116,99,104,101,100,32,119,105,116,104,32,110,101,119,32,102,37,100,32,115,107,105,112,32,37,100,32,107,101,101,112,10,0,0,0,0,114,105,100,103,101,32,119,105,116,104,32,109,117,108,116,105,112,108,101,32,110,101,105,103,104,98,111,114,115,0,0,0,68,85,80,76,73,67,65,84,69,68,47,77,65,84,67,72,0,0,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,110,101,119,104,97,115,104,116,97,98,108,101,41,58,32,110,101,103,97,116,105,118,101,32,114,101,113,117,101,115,116,32,40,37,100,41,32,111,114,32,115,105,122,101,32,40,37,100,41,46,32,32,68,105,100,32,105,110,116,32,111,118,101,114,102,108,111,119,32,100,117,101,32,116,111,32,104,105,103,104,45,68,63,10,0,0,0,0,113,104,95,111,117,116,99,111,112,108,97,110,97,114,58,32,109,111,118,101,32,111,117,116,115,105,100,101,115,101,116,32,116,111,32,99,111,112,108,97,110,97,114,115,101,116,32,102,111,114,32,113,104,32,78,65,82,82,79,87,104,117,108,108,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,119,97,114,110,105,110,103,32,40,112,111,105,110,116,95,97,100,100,41,58,32,117,110,107,110,111,119,110,32,112,111,105,110,116,32,37,112,32,105,100,32,37,100,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,114,111,114,40,112,111,105,110,116,95,97,100,100,41,58,32,112,111,105,110,116,32,112,37,100,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,40,37,100,41,10,0,0,0,0,0,0,0,104,97,115,104,32,37,100,32,102,37,100,32,0,0,0,0,118,37,100,32,0,0,0,0,10,32,110,101,105,103,104,98,111,114,115,58,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,116,114,105,97,110,103,117,108,97,116,101,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,10,0,0,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,110,117,108,108,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,32,45,45,32,97,112,101,120,32,115,97,109,101,32,97,115,32,115,101,99,111,110,100,32,118,101,114,116,101,120,10,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,41,58,32,114,105,100,103,101,115,32,115,116,105,108,108,32,100,101,102,105,110,101,100,32,102,111,114,32,102,37,100,10,0,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,37,100,32,111,114,32,109,111,114,101,32,109,105,114,114,111,114,32,102,97,99,101,116,115,32,45,45,32,115,97,109,101,32,118,101,114,116,105,99,101,115,32,97,110,100,32,110,101,105,103,104,98,111,114,115,10,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,117,112,100,97,116,101,32,110,101,105,103,104,98,111,114,32,108,105,115,116,115,32,102,111,114,32,118,101,114,116,105,99,101,115,32,102,114,111,109,32,118,37,100,10,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,105,100,101,110,116,105,102,121,32,100,101,103,101,110,101,114,97,116,101,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,102,114,111,109,32,102,37,100,10,0,0,0,0,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,110,100,32,114,101,112,108,97,99,101,32,102,97,99,101,116,45,62,102,46,116,114,105,111,119,110,101,114,32,119,105,116,104,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,116,104,97,116,32,111,119,110,32,99,101,110,116,101,114,44,32,110,111,114,109,97,108,44,32,101,116,99,46,10,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,100,101,108,101,116,101,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,45,45,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,44,32,110,117,108,108,44,32,97,110,100,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,10,0,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,108,108,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,100,101,103,101,110,101,114,97,116,101,32,102,111,114,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,41,58,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,32,102,37,100,32,110,111,116,32,111,119,110,101,100,32,98,121,32,105,116,115,32,118,105,115,105,98,108,101,44,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,58,32,97,108,108,32,116,114,105,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,100,101,103,101,110,101,114,97,116,101,32,102,111,114,32,108,97,115,116,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,32,102,37,100,10,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,102,97,99,101,116,58,32,116,114,105,97,110,103,117,108,97,116,101,32,102,97,99,101,116,32,102,37,100,10,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,110,117,108,108,58,32,100,101,108,101,116,101,32,110,117,108,108,32,102,97,99,101,116,32,102,37,100,10,0,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,109,105,114,114,111,114,58,32,100,101,108,101,116,101,32,109,105,114,114,111,114,101,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,0,0,0,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,108,105,110,107,58,32,114,101,108,105,110,107,32,111,108,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,98,101,116,119,101,101,110,32,110,101,105,103,104,98,111,114,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,116,114,105,97,110,103,117,108,97,116,101,95,108,105,110,107,41,58,32,109,105,114,114,111,114,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,32,100,111,32,110,111,116,32,109,97,116,99,104,32,102,111,114,32,111,108,100,32,102,97,99,101,116,115,32,102,37,100,32,97,110,100,32,102,37,100,10,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,97,100,100,110,116,104,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0,0,37,115,32,115,101,116,32,105,115,32,110,117,108,108,10,0,37,115,32,115,101,116,61,37,112,32,109,97,120,115,105,122,101,61,37,100,32,115,105,122,101,61,37,100,32,101,108,101,109,115,61,0,0,0,0,0,32,37,112,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,99,104,101,99,107,41,58,32,97,99,116,117,97,108,32,115,105,122,101,32,37,100,32,111,102,32,37,115,37,100,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,109,97,120,32,115,105,122,101,32,37,100,10,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,99,104,101,99,107,41,58,32,37,115,37,100,40,115,105,122,101,32,37,100,32,109,97,120,32,37,100,41,32,105,115,32,110,111,116,32,110,117,108,108,32,116,101,114,109,105,110,97,116,101,100,46,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,114,117,110,99,97,116,101,41,58,32,115,105,122,101,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,100,101,108,110,116,104,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,100,101,108,110,116,104,115,111,114,116,101,100,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,115,105,122,101,41,58,32,99,117,114,114,101,110,116,32,115,101,116,32,115,105,122,101,32,37,100,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,109,97,120,105,109,117,109,32,115,105,122,101,32,37,100,10,0,115,101,116,58,32,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,110,101,119,95,100,101,108,110,116,104,115,111,114,116,101,100,41,58,32,110,116,104,32,37,100,32,105,115,32,111,117,116,45,111,102,45,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,114,101,112,108,97,99,101,41,58,32,101,108,101,109,32,37,112,32,110,111,116,32,102,111,117,110,100,32,105,110,32,115,101,116,10,0,113,104,95,115,101,116,116,101,109,112,58,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,44,32,100,101,112,116,104,32,37,100,10,0,0,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,102,114,101,101,41,58,32,115,101,116,32,37,112,40,115,105,122,101,32,37,100,41,32,119,97,115,32,110,111,116,32,108,97,115,116,32,116,101,109,112,111,114,97,114,121,32,97,108,108,111,99,97,116,101,100,40,100,101,112,116,104,32,37,100,44,32,115,101,116,32,37,112,44,32,115,105,122,101,32,37,100,41,10,0,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,112,111,112,41,58,32,112,111,112,32,102,114,111,109,32,101,109,112,116,121,32,116,101,109,112,111,114,97,114,121,32,115,116,97,99,107,10,0,0,0,113,104,95,115,101,116,116,101,109,112,112,111,112,58,32,100,101,112,116,104,32,37,100,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,10,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,116,101,109,112,112,117,115,104,41,58,32,99,97,110,32,110,111,116,32,112,117,115,104,32,97,32,78,85,76,76,32,116,101,109,112,10,0,113,104,95,115,101,116,116,101,109,112,112,117,115,104,58,32,100,101,112,116,104,32,37,100,32,116,101,109,112,32,115,101,116,32,37,112,32,111,102,32,37,100,32,101,108,101,109,101,110,116,115,10,0,0,0,0,113,104,117,108,108,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,113,104,95,115,101,116,122,101,114,111,41,58,32,105,110,100,101,120,32,37,100,32,111,114,32,115,105,122,101,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,115,101,116,58,10,0,0,1,0,0,0,0,0,0,0,46,69,88,69,0,0,0,0,46,101,120,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+38560);
/* memory initializer */ allocate([112,114,101,99,105,115,105,111,110,32,115,116,97,116,105,115,116,105,99,115,0,0,0,0,97,118,101,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,32,110,101,119,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,40,33,48,115,41,0,0,0,109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,32,110,101,119,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0,0,0,0,0,0,0,0,109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,110,32,111,117,116,112,117,116,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0,0,0,0,109,105,110,46,32,100,105,115,116,97,110,99,101,32,111,102,32,97,110,32,111,117,116,112,117,116,32,118,101,114,116,101,120,32,116,111,32,97,32,102,97,99,101,116,0,0,0,0,109,105,110,46,32,100,101,110,111,109,105,110,97,116,111,114,32,105,110,32,104,121,112,101,114,112,108,97,110,101,32,99,111,109,112,117,116,97,116,105,111,110,0,0,0,0,0,0,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,32,40,99,111,114,114,101,99,116,101,100,32,117,110,108,101,115,115,32,39,81,48,39,32,111,114,32,97,110,32,101,114,114,111,114,41,0,0,99,111,112,108,97,110,97,114,32,104,97,108,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0,0,99,111,110,99,97,118,101,32,104,97,108,102,32,114,105,100,103,101,115,32,105,110,32,111,117,116,112,117,116,0,0,0,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0,0,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,102,111,114,32,110,101,119,32,118,101,114,116,105,99,101,115,0,0,0,0,0,0,0,0,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,100,117,114,105,110,103,32,112,97,114,116,105,116,105,111,110,105,110,103,0,0,0,0,0,100,101,103,101,110,101,114,97,116,101,32,104,121,112,101,114,112,108,97,110,101,115,32,114,101,99,111,109,112,117,116,101,100,32,119,105,116,104,32,103,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0,0,0,0,0,110,101,97,114,108,121,32,115,105,110,103,117,108,97,114,32,111,114,32,97,120,105,115,45,112,97,114,97,108,108,101,108,32,104,121,112,101,114,112,108,97,110,101,115,0,0,0,0,122,101,114,111,32,100,105,118,105,115,111,114,115,32,100,117,114,105,110,103,32,98,97,99,107,32,115,117,98,115,116,105,116,117,116,101,0,0,0,0,122,101,114,111,32,100,105,118,105,115,111,114,115,32,100,117,114,105,110,103,32,103,97,117,115,115,105,97,110,32,101,108,105,109,105,110,97,116,105,111,110,0,0,0,0,0,0,0,114,105,100,103,101,115,32,119,105,116,104,32,109,117,108,116,105,112,108,101,32,110,101,105,103,104,98,111,114,115,0,0,115,117,109,109,97,114,121,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,105,110,32,111,117,116,112,117,116,0,0,0,0,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,0,0,0,0,0,0,110,117,109,98,101,114,32,111,102,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,0,0,0,0,0,0,0,110,117,109,98,101,114,32,111,102,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,116,104,97,116,32,119,101,114,101,32,109,101,114,103,101,100,0,0,0,0,97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,102,97,99,101,116,0,0,0,0,0,0,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,0,0,0,0,0,0,0,0,97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,32,112,101,114,32,102,97,99,101,116,0,0,0,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,0,0,0,0,0,97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,32,112,101,114,32,102,97,99,101,116,0,0,0,0,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,118,101,114,116,105,99,101,115,0,0,0,0,0,0,97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,110,101,105,103,104,98,111,114,115,32,112,101,114,32,118,101,114,116,101,120,0,0,99,112,117,32,115,101,99,111,110,100,115,32,102,111,114,32,113,104,117,108,108,32,97,102,116,101,114,32,105,110,112,117,116,0,0,0,0,0,0,0,118,101,114,116,105,99,101,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0,0,0,0,0,102,97,99,101,116,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0,0,0,0,0,0,0,114,105,100,103,101,115,32,99,114,101,97,116,101,100,32,97,108,116,111,103,101,116,104,101,114,0,0,0,0,0,0,0,102,97,99,101,116,115,32,98,101,102,111,114,101,32,112,111,115,116,32,109,101,114,103,101,0,0,0,0,0,0,0,0,97,118,101,114,97,103,101,32,109,101,114,103,101,115,32,112,101,114,32,102,97,99,101,116,40,97,116,32,109,111,115,116,32,53,49,49,41,0,0,0,32,32,109,97,120,105,109,117,109,32,109,101,114,103,101,115,32,102,111,114,32,97,32,102,97,99,101,116,40,97,116,32,109,111,115,116,32,53,49,49,41,0,0,0,0,0,0,0,97,118,101,114,97,103,101,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,102,111,114,32,97,108,108,32,114,105,100,103,101,115,0,0,0,32,32,109,97,120,105,109,117,109,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,97,99,114,111,115,115,32,97,32,114,105,100,103,101,0,32,32,109,105,110,105,109,117,109,32,97,110,103,108,101,40,99,111,115,105,110,101,41,32,111,102,32,102,97,99,101,116,32,110,111,114,109,97,108,115,32,97,99,114,111,115,115,32,97,32,114,105,100,103,101,0,116,111,116,97,108,32,97,114,101,97,32,111,102,32,102,97,99,101,116,115,0,0,0,0,32,32,109,97,120,105,109,117,109,32,102,97,99,101,116,32,97,114,101,97,0,0,0,0,32,32,109,105,110,105,109,117,109,32,102,97,99,101,116,32,97,114,101,97,0,0,0,0,98,117,105,108,100,32,104,117,108,108,32,115,116,97,116,105,115,116,105,99,115,0,0,0,112,111,105,110,116,115,32,112,114,111,99,101,115,115,101,100,0,0,0,0,0,0,0,0,114,101,116,114,105,101,115,32,100,117,101,32,116,111,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,0,0,0,0,0,0,0,32,32,109,97,120,46,32,114,97,110,100,111,109,32,106,111,103,103,108,101,0,0,0,0,109,97,120,46,32,118,101,114,116,105,99,101,115,32,97,116,32,97,110,121,32,111,110,101,32,116,105,109,101,0,0,0,97,118,101,46,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,0,0,0,32,32,97,118,101,46,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,119,105,116,104,111,117,116,32,97,110,32,104,111,114,105,122,111,110,32,110,101,105,103,104,98,111,114,0,0,0,0,0,0,0,32,32,97,118,101,46,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,0,32,32,32,32,109,97,120,105,109,117,109,0,0,0,0,0,97,118,101,46,32,118,105,115,105,98,108,101,32,118,101,114,116,105,99,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,0,97,118,101,46,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,0,0,0,97,118,101,46,32,110,101,119,32,111,114,32,109,101,114,103,101,100,32,102,97,99,101,116,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,32,32,32,32,109,97,120,105,109,117,109,40,105,110,99,108,117,100,101,115,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,41,0,0,0,97,118,101,114,97,103,101,32,110,101,119,32,102,97,99,101,116,32,98,97,108,97,110,99,101,0,0,0,0,0,0,0,32,32,115,116,97,110,100,97,114,100,32,100,101,118,105,97,116,105,111,110,0,0,0,0,97,118,101,114,97,103,101,32,112,97,114,116,105,116,105,111,110,32,98,97,108,97,110,99,101,0,0,0,0,0,0,0,32,32,110,117,109,98,101,114,32,111,102,32,116,114,105,97,108,115,0,0,0,0,0,0,115,101,97,114,99,104,101,115,32,111,102,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,0,0,0,0,0,0,100,101,116,101,114,109,105,110,97,110,116,115,32,99,111,109,112,117,116,101,100,40,97,114,101,97,32,38,32,105,110,105,116,105,97,108,32,104,117,108,108,41,0,0,0,0,0,0,100,101,116,101,114,109,105,110,97,110,116,115,32,110,111,116,32,99,111,109,112,117,116,101,100,32,98,101,99,97,117,115,101,32,118,101,114,116,101,120,32,116,111,111,32,108,111,119,0,0,0,0,0,0,0,0,112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,33,97,98,111,118,101,32,109,97,120,95,111,117,116,115,105,100,101,41,0,0,0,0,0,0,112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,33,97,98,111,118,101,32,97,32,103,111,111,100,32,102,97,99,101,116,41,0,0,0,0,0,112,111,105,110,116,115,32,105,103,110,111,114,101,100,40,100,105,100,110,39,116,32,99,114,101,97,116,101,32,97,32,103,111,111,100,32,110,101,119,32,102,97,99,101,116,41,0,0,103,111,111,100,32,102,97,99,101,116,115,32,102,111,117,110,100,0,0,0,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,102,97,99,101,116,32,118,105,115,105,98,105,108,105,116,121,0,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,116,111,32,114,101,112,111,114,116,32,109,105,110,105,109,117,109,32,118,101,114,116,101,120,0,112,111,105,110,116,115,32,99,104,101,99,107,101,100,32,102,111,114,32,102,97,99,101,116,115,39,32,111,117,116,101,114,32,112,108,97,110,101,115,0,32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,112,101,114,32,99,104,101,99,107,0,114,101,115,101,116,115,32,111,102,32,118,105,115,105,116,95,105,100,0,0,0,0,0,0,32,32,114,101,115,101,116,115,32,111,102,32,118,101,114,116,101,120,95,118,105,115,105,116,0,0,0,0,0,0,0,0,32,32,109,97,120,32,118,105,115,105,116,95,105,100,47,50,0,0,0,0,0,0,0,0,32,32,109,97,120,32,118,101,114,116,101,120,95,118,105,115,105,116,47,50,0,0,0,0,112,97,114,116,105,116,105,111,110,105,110,103,32,115,116,97,116,105,115,116,105,99,115,40,115,101,101,32,112,114,101,118,105,111,117,115,32,102,111,114,32,111,117,116,101,114,32,112,108,97,110,101,115,41,0,0,116,111,116,97,108,32,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,0,0,32,32,32,32,109,97,120,105,109,117,109,32,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,0,0,99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,0,0,0,0,0,0,0,32,97,118,101,46,32,102,97,99,101,116,115,32,116,101,115,116,101,100,0,0,0,0,0,32,109,97,120,46,32,102,97,99,101,116,115,32,116,101,115,116,101,100,0,0,0,0,0,32,97,118,101,46,32,99,111,112,108,97,110,97,114,32,115,101,97,114,99,104,0,0,0,99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,110,101,119,0,0,0,0,32,97,118,101,46,32,99,108,101,97,114,108,121,32,98,101,116,116,101,114,0,0,0,0,32,99,97,108,108,115,32,100,117,101,32,116,111,32,113,104,95,115,104,97,114,112,110,101,119,102,97,99,101,116,115,0,99,97,108,108,115,32,116,111,32,102,105,110,100,104,111,114,105,122,111,110,0,0,0,0,32,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,98,101,116,116,101,114,32,116,104,97,110,32,98,101,115,116,102,97,99,101,116,0,0,0,97,110,103,108,101,32,116,101,115,116,115,32,102,111,114,32,114,101,112,97,114,116,105,116,105,111,110,101,100,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,0,0,0,32,32,114,101,112,97,114,116,105,116,105,111,110,101,100,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,102,111,114,32,102,108,105,112,112,101,100,32,111,114,105,101,110,116,97,116,105,111,110,0,105,110,115,105,100,101,32,112,111,105,110,116,115,0,0,0,32,32,105,110,115,105,100,101,32,112,111,105,110,116,115,32,107,101,112,116,32,119,105,116,104,32,97,32,102,97,99,101,116,0,0,0,0,0,0,0,32,32,105,110,115,105,100,101,32,112,111,105,110,116,115,32,116,104,97,116,32,119,101,114,101,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,97,32,102,97,99,101,116,0,99,97,108,108,115,32,116,111,32,102,105,110,100,98,101,115,116,108,111,119,101,114,0,0,32,32,119,105,116,104,32,115,101,97,114,99,104,32,111,102,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0,0,0,0,0,0,0,100,105,102,102,101,114,101,110,99,101,32,105,110,32,109,97,120,95,111,117,116,115,105,100,101,32,97,116,32,102,105,110,97,108,32,99,104,101,99,107,0,0,0,0,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,105,110,105,116,105,97,108,32,112,97,114,116,105,116,105,111,110,0,0,0,0,112,97,114,116,105,116,105,111,110,115,32,111,102,32,97,32,112,111,105,110,116,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,112,97,114,116,105,116,105,111,110,105,110,103,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0,0,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,99,111,110,118,101,120,105,116,121,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,103,111,111,100,32,112,111,105,110,116,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,111,117,116,112,117,116,0,0,0,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,115,116,97,116,105,115,116,105,99,115,0,0,0,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,0,0,112,97,114,116,105,116,105,111,110,115,32,111,102,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,115,32,111,114,32,100,101,108,101,116,101,100,32,118,101,114,116,105,99,101,115,0,0,0,0,0,0,0,32,32,32,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,116,104,101,115,101,32,112,97,114,116,105,116,105,111,110,115,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,111,109,112,117,116,105,110,103,32,102,117,114,116,104,101,115,116,0,0,0,115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,109,97,116,99,104,105,110,103,32,114,105,100,103,101,115,0,0,116,111,116,97,108,32,108,111,111,107,117,112,115,32,102,111,114,32,109,97,116,99,104,105,110,103,32,114,105,100,103,101,115,32,111,102,32,110,101,119,32,102,97,99,101,116,115,0,97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,116,101,115,116,115,32,116,111,32,109,97,116,99,104,32,97,32,114,105,100,103,101,0,0,0,0,0,0,0,0,116,111,116,97,108,32,108,111,111,107,117,112,115,32,111,102,32,115,117,98,114,105,100,103,101,115,40,100,117,112,108,105,99,97,116,101,115,32,97,110,100,32,98,111,117,110,100,97,114,121,41,0,0,0,0,0,97,118,101,114,97,103,101,32,110,117,109,98,101,114,32,111,102,32,116,101,115,116,115,32,112,101,114,32,115,117,98,114,105,100,103,101,0,0,0,0,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,32,105,110,32,115,97,109,101,32,109,101,114,103,101,32,99,121,99,108,101,0,0,0,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0,0,0,115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,100,101,116,101,114,109,105,110,105,110,103,32,109,101,114,103,101,115,0,0,0,0,0,0,0,97,110,103,108,101,115,32,99,111,109,112,117,116,101,100,32,102,111,114,32,114,105,100,103,101,32,99,111,110,118,101,120,105,116,121,0,0,0,0,0,98,101,115,116,32,109,101,114,103,101,115,32,117,115,101,100,32,99,101,110,116,114,117,109,32,105,110,115,116,101,97,100,32,111,102,32,118,101,114,116,105,99,101,115,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,98,101,115,116,32,109,101,114,103,101,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,101,110,116,114,117,109,32,99,111,110,118,101,120,105,116,121,0,0,0,0,100,105,115,116,97,110,99,101,32,116,101,115,116,115,32,102,111,114,32,99,104,101,99,107,105,110,103,32,115,105,109,112,108,105,99,105,97,108,32,99,111,110,118,101,120,105,116,121,0,0,0,0,0,0,0,0,99,111,112,108,97,110,97,114,32,97,110,103,108,101,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0,0,99,111,112,108,97,110,97,114,32,99,101,110,116,114,117,109,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0,0,0,0,0,0,0,0,99,111,110,99,97,118,101,32,114,105,100,103,101,115,32,105,110,32,103,101,116,109,101,114,103,101,115,101,116,0,0,0,115,116,97,116,105,115,116,105,99,115,32,102,111,114,32,109,101,114,103,105,110,103,0,0,109,101,114,103,101,32,105,116,101,114,97,116,105,111,110,115,0,0,0,0,0,0,0,0,97,118,101,46,32,105,110,105,116,105,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,32,32,109,97,120,105,109,117,109,0,0,0,0,0,0,0,32,32,97,118,101,46,32,97,100,100,105,116,105,111,110,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,112,101,114,32,105,116,101,114,97,116,105,111,110,0,0,0,0,0,0,0,32,32,109,97,120,105,109,117,109,32,97,100,100,105,116,105,111,110,97,108,32,105,110,32,111,110,101,32,112,97,115,115,0,0,0,0,0,0,0,0,105,110,105,116,105,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,32,102,111,114,32,112,111,115,116,32,109,101,114,103,105,110,103,0,0,0,0,0,0,32,32,97,100,100,105,116,105,111,110,97,108,32,110,111,110,45,99,111,110,118,101,120,32,114,105,100,103,101,115,0,0,109,97,120,32,100,105,115,116,97,110,99,101,32,111,102,32,118,101,114,116,101,120,32,111,114,32,99,111,112,108,97,110,97,114,32,112,111,105,110,116,32,97,98,111,118,101,32,102,97,99,101,116,40,119,47,114,111,117,110,100,111,102,102,41,0,0,0,0,0,0,0,0,109,97,120,32,100,105,115,116,97,110,99,101,32,111,102,32,109,101,114,103,101,100,32,118,101,114,116,101,120,32,98,101,108,111,119,32,102,97,99,101,116,40,111,114,32,114,111,117,110,100,111,102,102,41,0,0,99,101,110,116,114,117,109,115,32,102,114,111,122,101,110,32,100,117,101,32,116,111,32,97,32,119,105,100,101,32,109,101,114,103,101,0,0,0,0,0,99,101,110,116,114,117,109,115,32,102,114,111,122,101,110,32,100,117,101,32,116,111,32,101,120,116,114,97,32,118,101,114,116,105,99,101,115,0,0,0,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,102,97,99,101,116,115,32,111,114,32,99,121,99,108,101,115,32,111,102,32,102,97,99,101,116,115,32,109,101,114,103,101,100,0,0,0,0,0,0,0,109,101,114,103,101,100,32,97,32,115,105,109,112,108,101,120,0,0,0,0,0,0,0,0,115,105,109,112,108,105,99,101,115,32,109,101,114,103,101,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0,0,99,121,99,108,101,115,32,111,102,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0,0,0,32,32,97,118,101,46,32,102,97,99,101,116,115,32,112,101,114,32,99,121,99,108,101,0,32,32,109,97,120,46,32,102,97,99,101,116,115,0,0,0,110,101,119,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,104,111,114,105,122,111,110,0,0,110,101,119,32,102,97,99,101,116,115,32,109,101,114,103,101,100,0,0,0,0,0,0,0,104,111,114,105,122,111,110,32,102,97,99,101,116,115,32,109,101,114,103,101,100,32,105,110,116,111,32,110,101,119,32,102,97,99,101,116,115,0,0,0,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,109,101,114,103,105,110,103,0,0,0,0,0,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,109,101,114,103,105,110,103,32,105,110,116,111,32,99,111,112,108,97,110,97,114,32,104,111,114,105,122,111,110,0,0,0,0,0,0,0,118,101,114,116,105,99,101,115,32,100,101,108,101,116,101,100,32,98,121,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,0,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,32,105,110,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,0,0,0,0,0,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,114,101,100,117,110,100,97,110,116,32,110,101,105,103,104,98,111,114,115,0,0,0,0,0,0,0,110,111,110,45,99,111,110,118,101,120,32,118,101,114,116,101,120,32,110,101,105,103,104,98,111,114,115,0,0,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,97,110,103,108,101,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,0,0,0,0,0,32,32,97,118,101,114,97,103,101,32,109,101,114,103,101,32,100,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,32,32,109,97,120,105,109,117,109,32,109,101,114,103,101,32,100,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,99,111,110,99,97,118,101,32,102,97,99,101,116,115,0,0,0,0,99,111,112,108,97,110,97,114,47,99,111,110,99,97,118,101,32,109,101,114,103,101,115,32,100,117,101,32,116,111,32,97,118,111,105,100,105,110,103,32,111,108,100,32,109,101,114,103,101,0,0,0,0,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,114,101,109,111,118,105,110,103,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,0,0,0,109,101,114,103,101,115,32,100,117,101,32,116,111,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,0,114,101,110,97,109,101,100,32,118,101,114,116,101,120,32,115,116,97,116,105,115,116,105,99,115,0,0,0,0,0,0,0,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,115,104,97,114,101,100,32,98,121,32,116,119,111,32,102,97,99,101,116,115,0,0,0,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,105,110,32,97,32,112,105,110,99,104,101,100,32,102,97,99,101,116,0,0,0,0,0,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,32,115,104,97,114,101,100,32,98,121,32,109,117,108,116,105,112,108,101,32,102,97,99,101,116,115,0,0,0,0,0,0,114,101,110,97,109,101,32,102,97,105,108,117,114,101,115,32,100,117,101,32,116,111,32,100,117,112,108,105,99,97,116,101,100,32,114,105,100,103,101,115,0,0,0,0,0,0,0,0,32,32,100,117,112,108,105,99,97,116,101,32,114,105,100,103,101,115,32,100,101,116,101,99,116,101,100,0,0,0,0,0,100,101,108,101,116,101,100,32,114,105,100,103,101,115,32,100,117,101,32,116,111,32,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,0,0,100,114,111,112,112,101,100,32,110,101,105,103,104,98,111,114,115,32,100,117,101,32,116,111,32,114,101,110,97,109,101,100,32,118,101,114,116,105,99,101,115,0,0,0,0,0,0,0,100,101,103,101,110,101,114,97,116,101,32,102,97,99,101,116,115,32,100,117,101,32,116,111,32,100,114,111,112,112,101,100,32,110,101,105,103,104,98,111,114,115,0,0,0,0,0,0,32,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,32,98,101,99,97,117,115,101,32,111,102,32,110,111,32,110,101,105,103,104,98,111,114,115,0,0,0,0,0,0,0,0,118,101,114,116,105,99,101,115,32,114,101,109,111,118,101,100,32,102,114,111,109,32,102,97,99,101,116,115,32,100,117,101,32,116,111,32,110,111,32,114,105,100,103,101,115,0,0,0,32,32,100,101,108,101,116,101,100,0,0,0,0,0,0,0,118,101,114,116,101,120,32,105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,111,114,32,108,111,99,97,116,105,110,103,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,0,0,0,0,105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,97,105,108,101,100,32,116,111,32,102,105,110,100,32,97,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,101,120,0,105,110,116,101,114,115,101,99,116,105,111,110,115,32,102,111,117,110,100,32,114,101,100,117,110,100,97,110,116,32,118,101,114,116,105,99,101,115,0,0,32,32,32,97,118,101,46,32,110,117,109,98,101,114,32,102,111,117,110,100,32,112,101,114,32,118,101,114,116,101,120,0,32,32,32,109,97,120,46,32,102,111,117,110,100,32,102,111,114,32,97,32,118,101,114,116,101,120,0,0,0,0,0,0,32,32,97,118,101,46,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,116,101,115,116,101,100,32,118,101,114,116,101,120,0,0,0,0,0,0,0,32,32,109,97,120,46,32,110,117,109,98,101,114,32,111,102,32,114,105,100,103,101,115,32,112,101,114,32,116,101,115,116,101,100,32,118,101,114,116,101,120,0,0,0,0,0,0,0,109,101,109,111,114,121,32,117,115,97,103,101,32,115,116,97,116,105,115,116,105,99,115,40,105,110,32,98,121,116,101,115,41,0,0,0,0,0,0,0,102,111,114,32,102,97,99,101,116,115,32,97,110,100,32,116,104,101,105,114,32,110,111,114,109,97,108,115,44,32,110,101,105,103,104,98,111,114,32,97,110,100,32,118,101,114,116,101,120,32,115,101,116,115,0,0,102,111,114,32,118,101,114,116,105,99,101,115,32,97,110,100,32,116,104,101,105,114,32,110,101,105,103,104,98,111,114,32,115,101,116,115,0,0,0,0,102,111,114,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,111,117,116,115,105,100,101,32,97,110,100,32,99,111,112,108,97,110,97,114,32,115,101,116,115,0,0,102,111,114,32,114,105,100,103,101,115,32,97,110,100,32,116,104,101,105,114,32,118,101,114,116,101,120,32,115,101,116,115,0,0,0,0,0,0,0,0,86,111,114,111,110,111,105,32,114,105,100,103,101,32,115,116,97,116,105,115,116,105,99,115,0,0,0,0,0,0,0,0,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,86,111,114,111,110,111,105,32,118,101,114,116,105,99,101,115,32,102,111,114,32,97,108,108,32,114,105,100,103,101,115,0,0,32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,116,111,32,114,105,100,103,101,0,0,0,0,0,0,0,0,32,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,116,111,32,114,105,100,103,101,0,0,0,0,0,0,0,0,98,111,117,110,100,101,100,32,114,105,100,103,101,115,0,0,32,32,97,118,101,46,32,100,105,115,116,97,110,99,101,32,111,102,32,109,105,100,112,111,105,110,116,32,116,111,32,114,105,100,103,101,0,0,0,0,32,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,111,102,32,109,105,100,112,111,105,110,116,32,116,111,32,114,105,100,103,101,0,0,0,0,98,111,117,110,100,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,111,107,32,110,111,114,109,97,108,0,0,0,32,32,97,118,101,46,32,97,110,103,108,101,32,116,111,32,114,105,100,103,101,0,0,0,32,32,109,97,120,46,32,97,110,103,108,101,32,116,111,32,114,105,100,103,101,0,0,0,98,111,117,110,100,101,100,32,114,105,100,103,101,115,32,119,105,116,104,32,110,101,97,114,45,122,101,114,111,32,110,111,114,109,97,108,0,0,0,0,84,114,105,97,110,103,117,108,97,116,105,111,110,32,115,116,97,116,105,115,116,105,99,115,40,81,116,41,0,0,0,0,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,116,114,105,97,110,103,117,108,97,116,101,100,0,0,0,0,0,0,32,32,97,118,101,46,32,110,101,119,32,102,97,99,101,116,115,32,99,114,101,97,116,101,100,40,109,97,121,32,98,101,32,100,101,108,101,116,101,100,41,0,0,0,0,0,0,0,32,32,109,97,120,46,32,110,101,119,32,102,97,99,101,116,115,32,99,114,101,97,116,101,100,0,0,0,0,0,0,0,110,117,108,108,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,40,100,117,112,108,105,99,97,116,101,100,32,118,101,114,116,101,120,41,0,0,0,0,0,0,109,105,114,114,111,114,101,100,32,112,97,105,114,115,32,111,102,32,110,101,119,32,102,97,99,101,116,115,32,100,101,108,101,116,101,100,40,115,97,109,101,32,118,101,114,116,105,99,101,115,41,0,0,0,0,0,100,101,103,101,110,101,114,97,116,101,32,110,101,119,32,102,97,99,101,116,115,32,105,110,32,111,117,116,112,117,116,40,115,97,109,101,32,114,105,100,103,101,41,0,0,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,40,113,104,95,105,110,105,116,115,116,97,116,105,115,116,105,99,115,41,58,32,105,110,99,114,101,97,115,101,32,115,105,122,101,32,111,102,32,113,104,115,116,97,116,46,105,100,91,93,46,10,32,32,32,32,32,32,113,104,115,116,97,116,46,110,101,120,116,32,37,100,32,115,104,111,117,108,100,32,98,101,32,60,61,32,115,105,122,101,111,102,40,113,104,115,116,97,116,32,105,100,41,32,37,100,10,0,0,10,37,115,10,32,113,104,117,108,108,32,105,110,118,111,107,101,100,32,98,121,58,32,37,115,32,124,32,37,115,10,37,115,32,119,105,116,104,32,111,112,116,105,111,110,115,58,10,37,115,10,0,0,0,0,0,10,112,114,101,99,105,115,105,111,110,32,99,111,110,115,116,97,110,116,115,58,10,32,37,54,46,50,103,32,109,97,120,46,32,97,98,115,46,32,99,111,111,114,100,105,110,97,116,101,32,105,110,32,116,104,101,32,40,116,114,97,110,115,102,111,114,109,101,100,41,32,105,110,112,117,116,40,39,81,98,100,58,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,100,105,115,116,97,110,99,101,32,99,111,109,112,117,116,97,116,105,111,110,40,39,69,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,97,110,103,108,101,32,99,111,109,112,117,116,97,116,105,111,110,115,10,32,37,54,46,50,103,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,111,117,116,115,105,100,101,32,112,111,105,110,116,115,32,40,39,87,110,39,41,10,32,37,54,46,50,103,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,118,105,115,105,98,108,101,32,102,97,99,101,116,115,32,40,39,86,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,99,111,112,108,97,110,97,114,32,102,97,99,101,116,115,32,40,39,85,110,39,41,10,32,37,54,46,50,103,32,109,97,120,46,32,102,97,99,101,116,32,119,105,100,116,104,32,102,111,114,32,114,101,99,111,109,112,117,116,105,110,103,32,99,101,110,116,114,117,109,32,97,110,100,32,97,114,101,97,10,0,0,0,0,0,0,0,32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,110,101,97,114,45,105,110,115,105,100,101,32,112,111,105,110,116,115,10,0,0,0,0,32,37,54,46,50,103,32,109,97,120,46,32,99,111,115,105,110,101,32,102,111,114,32,112,114,101,45,109,101,114,103,101,32,97,110,103,108,101,10,0,32,37,54,46,50,103,32,114,97,100,105,117,115,32,111,102,32,112,114,101,45,109,101,114,103,101,32,99,101,110,116,114,117,109,10,0,0,0,0,0,32,37,54,46,50,103,32,109,97,120,46,32,99,111,115,105,110,101,32,102,111,114,32,112,111,115,116,45,109,101,114,103,101,32,97,110,103,108,101,10,0,0,0,0,0,0,0,0,32,37,54,46,50,103,32,114,97,100,105,117,115,32,111,102,32,112,111,115,116,45,109,101,114,103,101,32,99,101,110,116,114,117,109,10,0,0,0,0,32,37,54,46,50,103,32,109,97,120,46,32,100,105,115,116,97,110,99,101,32,102,111,114,32,109,101,114,103,105,110,103,32,116,119,111,32,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,10,32,37,54,46,50,103,32,109,97,120,46,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,102,111,114,32,97,114,105,116,104,109,101,116,105,99,32,111,112,101,114,97,116,105,111,110,115,10,32,37,54,46,50,103,32,109,105,110,46,32,100,101,110,111,109,105,110,97,116,111,114,32,102,111,114,32,100,105,118,105,115,105,111,110,115,10,32,32,122,101,114,111,32,100,105,97,103,111,110,97,108,32,102,111,114,32,71,97,117,115,115,58,32,0,0,0,37,54,46,50,101,32,0,0,10,10,0,0,0,0,0,0,37,115,10,0,0,0,0,0,32,42,48,32,99,110,116,42,0,0,0,0,0,0,0,0,37,55,46,50,103,0,0,0,37,55,100,0,0,0,0,0,37,55,46,51,103,0,0,0,32,37,115,10,0,0,0,0,10,113,104,117,108,108,32,101,114,114,111,114,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,114,101,118,105,111,117,115,32,101,114,114,111,114,46,32,32,69,120,105,116,32,112,114,111,103,114,97,109,10,0,0,0,0,69,82,82,79,78,69,79,85,83,0,0,0,0,0,0,0,10,87,104,105,108,101,32,101,120,101,99,117,116,105,110,103,58,32,37,115,32,124,32,37,115,10,0,0,0,0,0,0,79,112,116,105,111,110,115,32,115,101,108,101,99,116,101,100,32,102,111,114,32,81,104,117,108,108,32,37,115,58,10,37,115,10,0,0,0,0,0,0,76,97,115,116,32,112,111,105,110,116,32,97,100,100,101,100,32,116,111,32,104,117,108,108,32,119,97,115,32,112,37,100,46,0,0,0,0,0,0,0,32,32,76,97,115,116,32,109,101,114,103,101,32,119,97,115,32,35,37,100,46,0,0,0,10,81,104,117,108,108,32,104,97,115,32,102,105,110,105,115,104,101,100,32,99,111,110,115,116,114,117,99,116,105,110,103,32,116,104,101,32,104,117,108,108,46,0,0,0,0,0,0,10,81,104,117,108,108,32,104,97,115,32,115,116,97,114,116,101,100,32,112,111,115,116,45,109,101,114,103,105,110,103,46,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,10,65,116,32,101,114,114,111,114,32,101,120,105,116,58,10,0,0,0,0,0,0,0,0,97,116,32,101,114,114,111,114,32,101,120,105,116,0,0,0,113,104,117,108,108,32,101,114,114,111,114,32,119,104,105,108,101,32,101,110,100,105,110,103,32,112,114,111,103,114,97,109,46,32,32,69,120,105,116,32,112,114,111,103,114,97,109,10,0,0,0,0,0,0,0,0,37,115,32,70,65,67,69,84,58,10,0,0,0,0,0,0,37,115,32,79,84,72,69,82,32,70,65,67,69,84,58,10,0,0,0,0,0,0,0,0,37,115,32,82,73,68,71,69,58,10,0,0,0,0,0,0,37,115,32,86,69,82,84,69,88,58,10,0,0,0,0,0,69,82,82,79,78,69,79,85,83,32,97,110,100,32,78,69,73,71,72,66,79,82,73,78,71,32,70,65,67,69,84,83,32,116,111,32,111,117,116,112,117,116,10,0,0,0,0,0,10,84,104,101,32,105,110,112,117,116,32,116,111,32,113,104,117,108,108,32,97,112,112,101,97,114,115,32,116,111,32,98,101,32,108,101,115,115,32,116,104,97,110,32,37,100,32,100,105,109,101,110,115,105,111,110,97,108,44,32,111,114,32,97,10,99,111,109,112,117,116,97,116,105,111,110,32,104,97,115,32,111,118,101,114,102,108,111,119,101,100,46,10,10,81,104,117,108,108,32,99,111,117,108,100,32,110,111,116,32,99,111,110,115,116,114,117,99,116,32,97,32,99,108,101,97,114,108,121,32,99,111,110,118,101,120,32,115,105,109,112,108,101,120,32,102,114,111,109,32,112,111,105,110,116,115,58,10,0,0,0,0,0,0,0,0,0,0,10,84,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,32,105,115,32,99,111,112,108,97,110,97,114,32,119,105,116,104,32,97,32,102,97,99,101,116,44,32,111,114,32,97,32,118,101,114,116,101,120,32,105,115,32,99,111,112,108,97,110,97,114,10,119,105,116,104,32,97,32,110,101,105,103,104,98,111,114,105,110,103,32,102,97,99,101,116,46,32,32,84,104,101,32,109,97,120,105,109,117,109,32,114,111,117,110,100,32,111,102,102,32,101,114,114,111,114,32,102,111,114,10,99,111,109,112,117,116,105,110,103,32,100,105,115,116,97,110,99,101,115,32,105,115,32,37,50,46,50,103,46,32,32,84,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,44,32,102,97,99,101,116,115,32,97,110,100,32,100,105,115,116,97,110,99,101,115,10,116,111,32,116,104,101,32,99,101,110,116,101,114,32,112,111,105,110,116,32,97,114,101,32,97,115,32,102,111,108,108,111,119,115,58,10,10,0,0,0,0,0,0,99,101,110,116,101,114,32,112,111,105,110,116,0,0,0,0,102,97,99,101,116,0,0,0,32,112,37,100,0,0,0,0,32,100,105,115,116,97,110,99,101,61,32,37,52,46,50,103,10,0,0,0,0,0,0,0,10,84,104,101,115,101,32,112,111,105,110,116,115,32,97,114,101,32,116,104,101,32,100,117,97,108,32,111,102,32,116,104,101,32,103,105,118,101,110,32,104,97,108,102,115,112,97,99,101,115,46,32,32,84,104,101,121,32,105,110,100,105,99,97,116,101,32,116,104,97,116,10,116,104,101,32,105,110,116,101,114,115,101,99,116,105,111,110,32,105,115,32,100,101,103,101,110,101,114,97,116,101,46,10,0,0,0,0,0,0,0,0,10,84,104,101,115,101,32,112,111,105,110,116,115,32,101,105,116,104,101,114,32,104,97,118,101,32,97,32,109,97,120,105,109,117,109,32,111,114,32,109,105,110,105,109,117,109,32,120,45,99,111,111,114,100,105,110,97,116,101,44,32,111,114,10,116,104,101,121,32,109,97,120,105,109,105,122,101,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,102,111,114,32,107,32,99,111,111,114,100,105,110,97,116,101,115,46,32,32,84,114,105,97,108,32,112,111,105,110,116,115,10,97,114,101,32,102,105,114,115,116,32,115,101,108,101,99,116,101,100,32,102,114,111,109,32,112,111,105,110,116,115,32,116,104,97,116,32,109,97,120,105,109,105,122,101,32,97,32,99,111,111,114,100,105,110,97,116,101,46,10,0,0,0,0,0,0,10,66,101,99,97,117,115,101,32,111,102,32,116,104,101,32,104,105,103,104,32,100,105,109,101,110,115,105,111,110,44,32,116,104,101,32,109,105,110,32,120,45,99,111,111,114,100,105,110,97,116,101,32,97,110,100,32,109,97,120,45,99,111,111,114,100,105,110,97,116,101,10,112,111,105,110,116,115,32,97,114,101,32,117,115,101,100,32,105,102,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,105,115,32,110,111,110,45,122,101,114,111,46,32,32,79,112,116,105,111,110,32,39,81,115,39,32,119,105,108,108,10,100,111,32,97,32,98,101,116,116,101,114,44,32,116,104,111,117,103,104,32,109,117,99,104,32,115,108,111,119,101,114,44,32,106,111,98,46,32,32,73,110,115,116,101,97,100,32,111,102,32,39,81,115,39,44,32,121,111,117,32,99,97,110,32,99,104,97,110,103,101,10,116,104,101,32,112,111,105,110,116,115,32,98,121,32,114,97,110,100,111,109,108,121,32,114,111,116,97,116,105,110,103,32,116,104,101,32,105,110,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+47120);
/* memory initializer */ allocate([117,116,32,119,105,116,104,32,39,81,82,48,39,46,10,0,10,84,104,101,32,109,105,110,32,97,110,100,32,109,97,120,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,101,97,99,104,32,100,105,109,101,110,115,105,111,110,32,97,114,101,58,10,0,0,0,32,32,37,100,58,32,32,37,56,46,52,103,32,32,37,56,46,52,103,32,32,100,105,102,102,101,114,101,110,99,101,61,32,37,52,46,52,103,10,0,10,73,102,32,116,104,101,32,105,110,112,117,116,32,115,104,111,117,108,100,32,98,101,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,44,32,121,111,117,32,104,97,118,101,32,115,101,118,101,114,97,108,32,111,112,116,105,111,110,115,32,116,104,97,116,10,109,97,121,32,100,101,116,101,114,109,105,110,101,32,97,110,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,58,10,32,32,45,32,117,115,101,32,39,81,74,39,32,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,109,97,107,101,32,105,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,10,32,32,45,32,117,115,101,32,39,81,98,66,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,112,111,105,110,116,115,32,116,111,32,116,104,101,32,117,110,105,116,32,99,117,98,101,10,32,32,45,32,117,115,101,32,39,81,82,48,39,32,116,111,32,114,97,110,100,111,109,108,121,32,114,111,116,97,116,101,32,116,104,101,32,105,110,112,117,116,32,102,111,114,32,100,105,102,102,101,114,101,110,116,32,109,97,120,105,109,117,109,32,112,111,105,110,116,115,10,32,32,45,32,117,115,101,32,39,81,115,39,32,32,116,111,32,115,101,97,114,99,104,32,97,108,108,32,112,111,105,110,116,115,32,102,111,114,32,116,104,101,32,105,110,105,116,105,97,108,32,115,105,109,112,108,101,120,10,32,32,45,32,117,115,101,32,39,69,110,39,32,32,116,111,32,115,112,101,99,105,102,121,32,97,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,108,101,115,115,32,116,104,97,110,32,37,50,46,50,103,46,10,32,32,45,32,116,114,97,99,101,32,101,120,101,99,117,116,105,111,110,32,119,105,116,104,32,39,84,51,39,32,116,111,32,115,101,101,32,116,104,101,32,100,101,116,101,114,109,105,110,97,110,116,32,102,111,114,32,101,97,99,104,32,112,111,105,110,116,46,10,0,10,73,102,32,116,104,101,32,105,110,112,117,116,32,105,115,32,108,111,119,101,114,32,100,105,109,101,110,115,105,111,110,97,108,58,10,32,32,45,32,117,115,101,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,109,97,107,101,32,105,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,10,32,32,45,32,117,115,101,32,39,81,98,107,58,48,66,107,58,48,39,32,116,111,32,100,101,108,101,116,101,32,99,111,111,114,100,105,110,97,116,101,32,107,32,102,114,111,109,32,116,104,101,32,105,110,112,117,116,46,32,32,89,111,117,32,115,104,111,117,108,100,10,32,32,32,32,112,105,99,107,32,116,104,101,32,99,111,111,114,100,105,110,97,116,101,32,119,105,116,104,32,116,104,101,32,108,101,97,115,116,32,114,97,110,103,101,46,32,32,84,104,101,32,104,117,108,108,32,119,105,108,108,32,104,97,118,101,32,116,104,101,10,32,32,32,32,99,111,114,114,101,99,116,32,116,111,112,111,108,111,103,121,46,10,32,32,45,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,102,108,97,116,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,112,111,105,110,116,115,44,32,114,111,116,97,116,101,32,116,104,101,32,112,111,105,110,116,115,10,32,32,32,32,105,110,116,111,32,97,32,99,111,111,114,100,105,110,97,116,101,32,112,108,97,110,101,44,32,97,110,100,32,100,101,108,101,116,101,32,116,104,101,32,111,116,104,101,114,32,99,111,111,114,100,105,110,97,116,101,115,46,10,32,32,45,32,97,100,100,32,111,110,101,32,111,114,32,109,111,114,101,32,112,111,105,110,116,115,32,116,111,32,109,97,107,101,32,116,104,101,32,105,110,112,117,116,32,102,117,108,108,32,100,105,109,101,110,115,105,111,110,97,108,46,10,0,0,0,0,0,10,65,32,81,104,117,108,108,32,101,114,114,111,114,32,104,97,115,32,111,99,99,117,114,114,101,100,46,32,32,81,104,117,108,108,32,115,104,111,117,108,100,32,104,97,118,101,32,99,111,114,114,101,99,116,101,100,32,116,104,101,32,97,98,111,118,101,10,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,46,32,32,80,108,101,97,115,101,32,115,101,110,100,32,116,104,101,32,105,110,112,117,116,32,97,110,100,32,97,108,108,32,111,102,32,116,104,101,32,111,117,116,112,117,116,32,116,111,10,113,104,117,108,108,95,98,117,103,64,113,104,117,108,108,46,111,114,103,10,0,0,0,0,0,0,0,10,80,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,32,119,101,114,101,32,100,101,116,101,99,116,101,100,32,100,117,114,105,110,103,32,99,111,110,115,116,114,117,99,116,105,111,110,32,111,102,32,116,104,101,32,99,111,110,118,101,120,32,104,117,108,108,46,10,84,104,105,115,32,111,99,99,117,114,115,32,98,101,99,97,117,115,101,32,99,111,110,118,101,120,32,104,117,108,108,32,97,108,103,111,114,105,116,104,109,115,32,97,115,115,117,109,101,32,116,104,97,116,32,99,97,108,99,117,108,97,116,105,111,110,115,32,97,114,101,10,101,120,97,99,116,44,32,98,117,116,32,102,108,111,97,116,105,110,103,45,112,111,105,110,116,32,97,114,105,116,104,109,101,116,105,99,32,104,97,115,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,115,46,10,10,84,111,32,99,111,114,114,101,99,116,32,102,111,114,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,44,32,100,111,32,110,111,116,32,117,115,101,32,39,81,48,39,46,32,32,66,121,32,100,101,102,97,117,108,116,44,32,81,104,117,108,108,10,115,101,108,101,99,116,115,32,39,67,45,48,39,32,111,114,32,39,81,120,39,32,97,110,100,32,109,101,114,103,101,115,32,110,111,110,45,99,111,110,118,101,120,32,102,97,99,101,116,115,46,32,32,87,105,116,104,32,111,112,116,105,111,110,32,39,81,74,39,44,10,81,104,117,108,108,32,106,111,103,103,108,101,115,32,116,104,101,32,105,110,112,117,116,32,116,111,32,112,114,101,118,101,110,116,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,46,32,32,83,101,101,32,34,73,109,112,114,101,99,105,115,105,111,110,10,105,110,32,81,104,117,108,108,34,32,40,113,104,45,105,109,112,114,101,46,104,116,109,41,46,10,10,73,102,32,121,111,117,32,117,115,101,32,39,81,48,39,44,32,116,104,101,32,111,117,116,112,117,116,32,109,97,121,32,105,110,99,108,117,100,101,10,99,111,112,108,97,110,97,114,32,114,105,100,103,101,115,44,32,99,111,110,99,97,118,101,32,114,105,100,103,101,115,44,32,97,110,100,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,46,32,32,73,110,32,52,45,100,32,97,110,100,32,104,105,103,104,101,114,44,10,81,104,117,108,108,32,109,97,121,32,112,114,111,100,117,99,101,32,97,32,114,105,100,103,101,32,119,105,116,104,32,102,111,117,114,32,110,101,105,103,104,98,111,114,115,32,111,114,32,116,119,111,32,102,97,99,101,116,115,32,119,105,116,104,32,116,104,101,32,115,97,109,101,32,10,118,101,114,116,105,99,101,115,46,32,32,81,104,117,108,108,32,114,101,112,111,114,116,115,32,116,104,101,115,101,32,101,118,101,110,116,115,32,119,104,101,110,32,116,104,101,121,32,111,99,99,117,114,46,32,32,73,116,32,115,116,111,112,115,32,119,104,101,110,32,97,10,99,111,110,99,97,118,101,32,114,105,100,103,101,44,32,102,108,105,112,112,101,100,32,102,97,99,101,116,44,32,111,114,32,100,117,112,108,105,99,97,116,101,32,102,97,99,101,116,32,111,99,99,117,114,115,46,10,0,0,0,0,10,87,104,101,110,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,32,111,102,32,99,111,111,114,100,105,110,97,116,101,115,32,62,32,49,46,48,44,10,32,32,45,32,117,115,101,32,39,81,98,98,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,32,116,111,32,91,48,44,109,93,32,40,109,97,120,32,112,114,101,118,105,111,117,115,32,99,111,111,114,100,105,110,97,116,101,41,10,0,87,104,101,110,32,99,111,109,112,117,116,105,110,103,32,116,104,101,32,68,101,108,97,117,110,97,121,32,116,114,105,97,110,103,117,108,97,116,105,111,110,58,10,32,32,45,32,117,115,101,32,39,81,122,39,32,116,111,32,97,100,100,32,97,32,112,111,105,110,116,32,97,116,45,105,110,102,105,110,105,116,121,46,32,32,84,104,105,115,32,114,101,100,117,99,101,115,32,112,114,101,99,105,115,105,111,110,32,112,114,111,98,108,101,109,115,46,10,0,0,10,73,102,32,121,111,117,32,110,101,101,100,32,116,114,105,97,110,103,117,108,97,114,32,111,117,116,112,117,116,58,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,114,101,109,111,118,101,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,70,116,39,46,32,32,73,116,32,116,114,105,97,110,103,117,108,97,116,101,115,32,110,111,110,45,115,105,109,112,108,105,99,105,97,108,32,102,97,99,101,116,115,32,119,105,116,104,32,97,100,100,101,100,32,112,111,105,110,116,115,46,10,10,73,102,32,121,111,117,32,109,117,115,116,32,117,115,101,32,39,81,48,39,44,10,116,114,121,32,111,110,101,32,111,114,32,109,111,114,101,32,111,102,32,116,104,101,32,102,111,108,108,111,119,105,110,103,32,111,112,116,105,111,110,115,46,32,32,84,104,101,121,32,99,97,110,32,110,111,116,32,103,117,97,114,97,110,116,101,101,32,97,110,32,111,117,116,112,117,116,46,10,32,32,45,32,117,115,101,32,39,81,98,66,39,32,116,111,32,115,99,97,108,101,32,116,104,101,32,105,110,112,117,116,32,116,111,32,97,32,99,117,98,101,46,10,32,32,45,32,117,115,101,32,39,80,111,39,32,116,111,32,112,114,111,100,117,99,101,32,111,117,116,112,117,116,32,97,110,100,32,112,114,101,118,101,110,116,32,112,97,114,116,105,116,105,111,110,105,110,103,32,102,111,114,32,102,108,105,112,112,101,100,32,102,97,99,101,116,115,10,32,32,45,32,117,115,101,32,39,86,48,39,32,116,111,32,115,101,116,32,109,105,110,46,32,100,105,115,116,97,110,99,101,32,116,111,32,118,105,115,105,98,108,101,32,102,97,99,101,116,32,97,115,32,48,32,105,110,115,116,101,97,100,32,111,102,32,114,111,117,110,100,111,102,102,10,32,32,45,32,117,115,101,32,39,69,110,39,32,116,111,32,115,112,101,99,105,102,121,32,97,32,109,97,120,105,109,117,109,32,114,111,117,110,100,111,102,102,32,101,114,114,111,114,32,108,101,115,115,32,116,104,97,110,32,37,50,46,50,103,46,10,32,32,45,32,111,112,116,105,111,110,115,32,39,81,102,39,44,32,39,81,98,98,39,44,32,97,110,100,32,39,81,82,48,39,32,109,97,121,32,97,108,115,111,32,104,101,108,112,10,0,0,0,0,0,0,10,84,111,32,103,117,97,114,97,110,116,101,101,32,115,105,109,112,108,105,99,105,97,108,32,111,117,116,112,117,116,58,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,81,74,39,32,116,111,32,106,111,103,103,108,101,32,116,104,101,32,105,110,112,117,116,32,112,111,105,110,116,115,32,97,110,100,32,114,101,109,111,118,101,32,112,114,101,99,105,115,105,111,110,32,101,114,114,111,114,115,10,32,32,45,32,117,115,101,32,111,112,116,105,111,110,32,39,70,116,39,32,116,111,32,116,114,105,97,110,103,117,108,97,116,101,32,116,104,101,32,111,117,116,112,117,116,32,98,121,32,97,100,100,105,110,103,32,112,111,105,110,116,115,10,32,32,45,32,117,115,101,32,101,120,97,99,116,32,97,114,105,116,104,109,101,116,105,99,32,40,115,101,101,32,34,73,109,112,114,101,99,105,115,105,111,110,32,105,110,32,81,104,117,108,108,34,44,32,113,104,45,105,109,112,114,101,46,104,116,109,41,10,0,0,0,113,104,117,108,108,32,112,114,101,99,105,115,105,111,110,32,119,97,114,110,105,110,103,58,32,10,84,104,101,32,105,110,105,116,105,97,108,32,104,117,108,108,32,105,115,32,110,97,114,114,111,119,32,40,99,111,115,105,110,101,32,111,102,32,109,105,110,46,32,97,110,103,108,101,32,105,115,32,37,46,49,54,102,41,46,10,73,115,32,116,104,101,32,105,110,112,117,116,32,108,111,119,101,114,32,100,105,109,101,110,115,105,111,110,97,108,32,40,101,46,103,46,44,32,111,110,32,97,32,112,108,97,110,101,32,105,110,32,51,45,100,41,63,32,32,81,104,117,108,108,32,109,97,121,10,112,114,111,100,117,99,101,32,97,32,119,105,100,101,32,102,97,99,101,116,46,32,32,79,112,116,105,111,110,115,32,39,81,98,66,39,32,40,115,99,97,108,101,32,116,111,32,117,110,105,116,32,98,111,120,41,32,111,114,32,39,81,98,98,39,32,40,115,99,97,108,101,10,108,97,115,116,32,99,111,111,114,100,105,110,97,116,101,41,32,109,97,121,32,114,101,109,111,118,101,32,116,104,105,115,32,119,97,114,110,105,110,103,46,32,32,85,115,101,32,39,80,112,39,32,116,111,32,115,107,105,112,32,116,104,105,115,32,119,97,114,110,105,110,103,46,10,83,101,101,32,39,76,105,109,105,116,97,116,105,111,110,115,39,32,105,110,32,113,104,45,105,109,112,114,101,46,104,116,109,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+57360);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  
  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    } 
  Module["_saveSetjmp"] = _saveSetjmp;
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }




   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  var _floor=Math_floor;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  var _sqrt=Math_sqrt;

   
  Module["_strcpy"] = _strcpy;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_iii": invoke_iii, "_fabs": _fabs, "_send": _send, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_vfprintf": _vfprintf, "_floor": _floor, "_longjmp": _longjmp, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_clock": _clock, "_realloc": _realloc, "_mkport": _mkport, "_write": _write, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "__exit": __exit, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_sqrt": _sqrt, "_localtime": _localtime, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _send=env._send;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _vfprintf=env._vfprintf;
  var _floor=env._floor;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _clock=env._clock;
  var _realloc=env._realloc;
  var _mkport=env._mkport;
  var _write=env._write;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _sqrt=env._sqrt;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _qh_distplane($point,$facet,$dist) {
 $point = $point|0;
 $facet = $facet|0;
 $dist = $dist|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0;
 var $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0;
 var $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0;
 var $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0;
 var $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $coordp$02 = 0, $k$04 = 0, $normal$03 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = ((($facet)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[(5828)>>2]|0;
 switch ($2|0) {
 case 2:  {
  $3 = ((($facet)) + 16|0);
  $4 = +HEAPF64[$3>>3];
  $5 = +HEAPF64[$point>>3];
  $6 = +HEAPF64[$1>>3];
  $7 = $5 * $6;
  $8 = $4 + $7;
  $9 = ((($point)) + 8|0);
  $10 = +HEAPF64[$9>>3];
  $11 = ((($1)) + 8|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $10 * $12;
  $14 = $8 + $13;
  HEAPF64[$dist>>3] = $14;
  break;
 }
 case 3:  {
  $15 = ((($facet)) + 16|0);
  $16 = +HEAPF64[$15>>3];
  $17 = +HEAPF64[$point>>3];
  $18 = +HEAPF64[$1>>3];
  $19 = $17 * $18;
  $20 = $16 + $19;
  $21 = ((($point)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = ((($1)) + 8|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $22 * $24;
  $26 = $20 + $25;
  $27 = ((($point)) + 16|0);
  $28 = +HEAPF64[$27>>3];
  $29 = ((($1)) + 16|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $28 * $30;
  $32 = $26 + $31;
  HEAPF64[$dist>>3] = $32;
  break;
 }
 case 4:  {
  $33 = ((($facet)) + 16|0);
  $34 = +HEAPF64[$33>>3];
  $35 = +HEAPF64[$point>>3];
  $36 = +HEAPF64[$1>>3];
  $37 = $35 * $36;
  $38 = $34 + $37;
  $39 = ((($point)) + 8|0);
  $40 = +HEAPF64[$39>>3];
  $41 = ((($1)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $40 * $42;
  $44 = $38 + $43;
  $45 = ((($point)) + 16|0);
  $46 = +HEAPF64[$45>>3];
  $47 = ((($1)) + 16|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $46 * $48;
  $50 = $44 + $49;
  $51 = ((($point)) + 24|0);
  $52 = +HEAPF64[$51>>3];
  $53 = ((($1)) + 24|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $52 * $54;
  $56 = $50 + $55;
  HEAPF64[$dist>>3] = $56;
  break;
 }
 case 8:  {
  $165 = ((($facet)) + 16|0);
  $166 = +HEAPF64[$165>>3];
  $167 = +HEAPF64[$point>>3];
  $168 = +HEAPF64[$1>>3];
  $169 = $167 * $168;
  $170 = $166 + $169;
  $171 = ((($point)) + 8|0);
  $172 = +HEAPF64[$171>>3];
  $173 = ((($1)) + 8|0);
  $174 = +HEAPF64[$173>>3];
  $175 = $172 * $174;
  $176 = $170 + $175;
  $177 = ((($point)) + 16|0);
  $178 = +HEAPF64[$177>>3];
  $179 = ((($1)) + 16|0);
  $180 = +HEAPF64[$179>>3];
  $181 = $178 * $180;
  $182 = $176 + $181;
  $183 = ((($point)) + 24|0);
  $184 = +HEAPF64[$183>>3];
  $185 = ((($1)) + 24|0);
  $186 = +HEAPF64[$185>>3];
  $187 = $184 * $186;
  $188 = $182 + $187;
  $189 = ((($point)) + 32|0);
  $190 = +HEAPF64[$189>>3];
  $191 = ((($1)) + 32|0);
  $192 = +HEAPF64[$191>>3];
  $193 = $190 * $192;
  $194 = $188 + $193;
  $195 = ((($point)) + 40|0);
  $196 = +HEAPF64[$195>>3];
  $197 = ((($1)) + 40|0);
  $198 = +HEAPF64[$197>>3];
  $199 = $196 * $198;
  $200 = $194 + $199;
  $201 = ((($point)) + 48|0);
  $202 = +HEAPF64[$201>>3];
  $203 = ((($1)) + 48|0);
  $204 = +HEAPF64[$203>>3];
  $205 = $202 * $204;
  $206 = $200 + $205;
  $207 = ((($point)) + 56|0);
  $208 = +HEAPF64[$207>>3];
  $209 = ((($1)) + 56|0);
  $210 = +HEAPF64[$209>>3];
  $211 = $208 * $210;
  $212 = $206 + $211;
  HEAPF64[$dist>>3] = $212;
  break;
 }
 case 5:  {
  $57 = ((($facet)) + 16|0);
  $58 = +HEAPF64[$57>>3];
  $59 = +HEAPF64[$point>>3];
  $60 = +HEAPF64[$1>>3];
  $61 = $59 * $60;
  $62 = $58 + $61;
  $63 = ((($point)) + 8|0);
  $64 = +HEAPF64[$63>>3];
  $65 = ((($1)) + 8|0);
  $66 = +HEAPF64[$65>>3];
  $67 = $64 * $66;
  $68 = $62 + $67;
  $69 = ((($point)) + 16|0);
  $70 = +HEAPF64[$69>>3];
  $71 = ((($1)) + 16|0);
  $72 = +HEAPF64[$71>>3];
  $73 = $70 * $72;
  $74 = $68 + $73;
  $75 = ((($point)) + 24|0);
  $76 = +HEAPF64[$75>>3];
  $77 = ((($1)) + 24|0);
  $78 = +HEAPF64[$77>>3];
  $79 = $76 * $78;
  $80 = $74 + $79;
  $81 = ((($point)) + 32|0);
  $82 = +HEAPF64[$81>>3];
  $83 = ((($1)) + 32|0);
  $84 = +HEAPF64[$83>>3];
  $85 = $82 * $84;
  $86 = $80 + $85;
  HEAPF64[$dist>>3] = $86;
  break;
 }
 case 6:  {
  $87 = ((($facet)) + 16|0);
  $88 = +HEAPF64[$87>>3];
  $89 = +HEAPF64[$point>>3];
  $90 = +HEAPF64[$1>>3];
  $91 = $89 * $90;
  $92 = $88 + $91;
  $93 = ((($point)) + 8|0);
  $94 = +HEAPF64[$93>>3];
  $95 = ((($1)) + 8|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $94 * $96;
  $98 = $92 + $97;
  $99 = ((($point)) + 16|0);
  $100 = +HEAPF64[$99>>3];
  $101 = ((($1)) + 16|0);
  $102 = +HEAPF64[$101>>3];
  $103 = $100 * $102;
  $104 = $98 + $103;
  $105 = ((($point)) + 24|0);
  $106 = +HEAPF64[$105>>3];
  $107 = ((($1)) + 24|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $106 * $108;
  $110 = $104 + $109;
  $111 = ((($point)) + 32|0);
  $112 = +HEAPF64[$111>>3];
  $113 = ((($1)) + 32|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $112 * $114;
  $116 = $110 + $115;
  $117 = ((($point)) + 40|0);
  $118 = +HEAPF64[$117>>3];
  $119 = ((($1)) + 40|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $118 * $120;
  $122 = $116 + $121;
  HEAPF64[$dist>>3] = $122;
  break;
 }
 case 7:  {
  $123 = ((($facet)) + 16|0);
  $124 = +HEAPF64[$123>>3];
  $125 = +HEAPF64[$point>>3];
  $126 = +HEAPF64[$1>>3];
  $127 = $125 * $126;
  $128 = $124 + $127;
  $129 = ((($point)) + 8|0);
  $130 = +HEAPF64[$129>>3];
  $131 = ((($1)) + 8|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $130 * $132;
  $134 = $128 + $133;
  $135 = ((($point)) + 16|0);
  $136 = +HEAPF64[$135>>3];
  $137 = ((($1)) + 16|0);
  $138 = +HEAPF64[$137>>3];
  $139 = $136 * $138;
  $140 = $134 + $139;
  $141 = ((($point)) + 24|0);
  $142 = +HEAPF64[$141>>3];
  $143 = ((($1)) + 24|0);
  $144 = +HEAPF64[$143>>3];
  $145 = $142 * $144;
  $146 = $140 + $145;
  $147 = ((($point)) + 32|0);
  $148 = +HEAPF64[$147>>3];
  $149 = ((($1)) + 32|0);
  $150 = +HEAPF64[$149>>3];
  $151 = $148 * $150;
  $152 = $146 + $151;
  $153 = ((($point)) + 40|0);
  $154 = +HEAPF64[$153>>3];
  $155 = ((($1)) + 40|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $154 * $156;
  $158 = $152 + $157;
  $159 = ((($point)) + 48|0);
  $160 = +HEAPF64[$159>>3];
  $161 = ((($1)) + 48|0);
  $162 = +HEAPF64[$161>>3];
  $163 = $160 * $162;
  $164 = $158 + $163;
  HEAPF64[$dist>>3] = $164;
  break;
 }
 default: {
  $213 = ((($facet)) + 16|0);
  $214 = +HEAPF64[$213>>3];
  HEAPF64[$dist>>3] = $214;
  $215 = HEAP32[(5828)>>2]|0;
  $216 = ($215|0)==(0);
  if (!($216)) {
   $coordp$02 = $point;$k$04 = $215;$normal$03 = $1;
   while(1) {
    $217 = (($k$04) + -1)|0;
    $218 = ((($coordp$02)) + 8|0);
    $219 = +HEAPF64[$coordp$02>>3];
    $220 = ((($normal$03)) + 8|0);
    $221 = +HEAPF64[$normal$03>>3];
    $222 = $219 * $221;
    $223 = +HEAPF64[$dist>>3];
    $224 = $223 + $222;
    HEAPF64[$dist>>3] = $224;
    $225 = ($217|0)==(0);
    if ($225) {
     break;
    } else {
     $coordp$02 = $218;$k$04 = $217;$normal$03 = $220;
    }
   }
  }
 }
 }
 $226 = HEAP32[(43624)>>2]|0;
 $227 = (($226) + 1)|0;
 HEAP32[(43624)>>2] = $227;
 $228 = HEAP32[(5656)>>2]|0;
 $229 = ($228|0)==(0);
 $230 = HEAP32[(5344)>>2]|0;
 $231 = ($230|0)<(4);
 $or$cond = $229 & $231;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 if (!($229)) {
  $232 = (_qh_rand()|0);
  $233 = (+($232|0));
  $234 = $233 * 2.0;
  $235 = $234 / 2147483646.0;
  $236 = $235 + -1.0;
  $237 = +HEAPF64[(5664)>>3];
  $238 = $236 * $237;
  $239 = +HEAPF64[(6960)>>3];
  $240 = $238 * $239;
  $241 = +HEAPF64[$dist>>3];
  $242 = $241 + $240;
  HEAPF64[$dist>>3] = $242;
 }
 $243 = HEAP32[(5344)>>2]|0;
 $244 = ($243|0)>(3);
 if (!($244)) {
  STACKTOP = sp;return;
 }
 $245 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($245,8001,8,$vararg_buffer);
 $246 = HEAP32[(7480)>>2]|0;
 $247 = +HEAPF64[$dist>>3];
 HEAPF64[$vararg_buffer1>>3] = $247;
 _qh_fprintf($246,8002,11216,$vararg_buffer1);
 $248 = HEAP32[(7480)>>2]|0;
 $249 = (_qh_pointid($point)|0);
 $250 = ((($facet)) + 76|0);
 $251 = HEAP32[$250>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $249;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $251;
 _qh_fprintf($248,8003,24,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _qh_findbest($point,$startfacet,$bestoutside,$isnewfacets,$noupper,$dist,$isoutside,$numpart) {
 $point = $point|0;
 $startfacet = $startfacet|0;
 $bestoutside = $bestoutside|0;
 $isnewfacets = $isnewfacets|0;
 $noupper = $noupper|0;
 $dist = $dist|0;
 $isoutside = $isoutside|0;
 $numpart = $numpart|0;
 var $$lcssa85 = 0, $$lcssa87 = 0, $$mux = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestdist = 0, $bestfacet$0 = 0, $bestfacet$1$ph31 = 0, $bestfacet$1$ph3193 = 0, $bestfacet$3 = 0, $bestfacet$4 = 0, $bestfacet$412 = 0, $bestfacet$5 = 0, $bestfacet$6 = 0, $brmerge = 0;
 var $facet$0$ph32 = 0, $facet$0$ph3290 = 0, $numpartnew = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $startfacet$ = 0, $storemerge = 0.0, $testhorizon$0 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr20 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer12 = sp;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $bestdist = sp + 56|0;
 $numpartnew = sp + 88|0;
 HEAPF64[$bestdist>>3] = -8.9884656743115785E+307;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = HEAP32[(7720)>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[(7720)>>2] = $2;
 HEAP32[$numpartnew>>2] = 0;
 $3 = HEAP32[(43848)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(43848)>>2] = $4;
 $5 = HEAP32[(5344)>>2]|0;
 $6 = ($5|0)>(2);
 if ($6) {
  label = 4;
 } else {
  $7 = HEAP32[(5748)>>2]|0;
  $8 = ($7|0)!=(0);
  $9 = HEAP32[(5756)>>2]|0;
  $10 = ($9|0)>(-1);
  $or$cond = $8 & $10;
  if ($or$cond) {
   $11 = (_qh_pointid($point)|0);
   $12 = ($9|0)==($11|0);
   if ($12) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $13 = HEAP32[(5748)>>2]|0;
  $14 = HEAP32[(5344)>>2]|0;
  $15 = ($13|0)>($14|0);
  if ($15) {
   HEAP32[(5344)>>2] = $13;
  }
  $16 = HEAP32[(7480)>>2]|0;
  $17 = (_qh_pointid($point)|0);
  $18 = ((($startfacet)) + 76|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = +HEAPF64[(5248)>>3];
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $19;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $isnewfacets;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $bestoutside;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr4>>3] = $20;
  _qh_fprintf($16,8004,48,$vararg_buffer);
  $21 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer5>>2] = 1;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $noupper;
  _qh_fprintf($21,8005,136,$vararg_buffer5);
  $22 = HEAP32[(7480)>>2]|0;
  $23 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $23;
  _qh_fprintf($22,8006,168,$vararg_buffer9);
  $24 = HEAP32[(7480)>>2]|0;
  $25 = HEAP32[(44768)>>2]|0;
  $26 = +HEAPF64[(7632)>>3];
  HEAP32[$vararg_buffer12>>2] = $25;
  $vararg_ptr15 = ((($vararg_buffer12)) + 8|0);
  HEAPF64[$vararg_ptr15>>3] = $26;
  _qh_fprintf($24,8007,200,$vararg_buffer12);
 }
 $27 = ($isoutside|0)!=(0|0);
 if ($27) {
  HEAP32[$isoutside>>2] = 1;
 }
 $28 = ((($startfacet)) + 80|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 & 65536;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   HEAP32[$numpart>>2] = 1;
   _qh_distplane($point,$startfacet,$dist);
   $32 = ($bestoutside|0)==(0);
   if ($32) {
    $33 = +HEAPF64[$dist>>3];
    $34 = +HEAPF64[(5248)>>3];
    $35 = !($33 >= $34);
    if (!($35)) {
     $36 = HEAP32[$28>>2]|0;
     $37 = $36 & 131072;
     $38 = ($37|0)!=(0);
     $39 = ($noupper|0)!=(0);
     $or$cond3 = $39 & $38;
     if (!($or$cond3)) {
      $bestfacet$6 = $startfacet;
      break;
     }
    }
   }
   $40 = +HEAPF64[$dist>>3];
   HEAPF64[$bestdist>>3] = $40;
   $41 = HEAP32[$28>>2]|0;
   $42 = $41 & 131072;
   $43 = ($42|0)==(0);
   $startfacet$ = $43 ? $startfacet : 0;
   $bestfacet$0 = $startfacet$;
   label = 15;
  } else {
   HEAP32[$numpart>>2] = 0;
   $bestfacet$0 = 0;
   label = 15;
  }
 } while(0);
 L20: do {
  if ((label|0) == 15) {
   $44 = ((($startfacet)) + 72|0);
   HEAP32[$44>>2] = $2;
   $45 = ($isnewfacets|0)!=(0);
   $46 = ($bestoutside|0)!=(0);
   $47 = ($noupper|0)!=(0);
   $bestfacet$1$ph31 = $bestfacet$0;$facet$0$ph32 = $startfacet;
   L22: while(1) {
    $48 = ((($bestfacet$1$ph31)) + 76|0);
    $49 = ($bestfacet$1$ph31|0)==(0|0);
    $50 = HEAP32[(5344)>>2]|0;
    $51 = ($50|0)>(3);
    if ($51) {
     $52 = ($bestfacet$1$ph31|0)==(0|0);
     $53 = HEAP32[(7480)>>2]|0;
     $54 = ((($facet$0$ph32)) + 76|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = +HEAPF64[$bestdist>>3];
     if ($52) {
      $58 = -1;
     } else {
      $57 = HEAP32[$48>>2]|0;
      $58 = $57;
     }
     HEAP32[$vararg_buffer16>>2] = $55;
     $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
     HEAPF64[$vararg_ptr19>>3] = $56;
     $vararg_ptr20 = ((($vararg_buffer16)) + 16|0);
     HEAP32[$vararg_ptr20>>2] = $58;
     _qh_fprintf($53,4001,248,$vararg_buffer16);
    }
    $59 = ((($facet$0$ph32)) + 60|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     $bestfacet$1$ph3193 = $bestfacet$1$ph31;$facet$0$ph3290 = $facet$0$ph32;
     break;
    }
    $62 = ((($60)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0|0);
    if ($64) {
     $bestfacet$1$ph3193 = $bestfacet$1$ph31;$facet$0$ph3290 = $facet$0$ph32;
     break;
    }
    $65 = ((($62)) + 4|0);
    $67 = $63;$72 = $65;
    while(1) {
     $66 = ((($67)) + 80|0);
     $68 = HEAP32[$66>>2]|0;
     $69 = $68 & 1024;
     $70 = ($69|0)==(0);
     $or$cond5 = $45 & $70;
     if (!($or$cond5)) {
      $75 = ((($67)) + 72|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==($2|0);
      if (!($77)) {
       HEAP32[$75>>2] = $2;
       $78 = HEAP32[$66>>2]|0;
       $79 = $78 & 65536;
       $80 = ($79|0)==(0);
       if ($80) {
        $81 = HEAP32[$numpart>>2]|0;
        $82 = (($81) + 1)|0;
        HEAP32[$numpart>>2] = $82;
        _qh_distplane($point,$67,$dist);
        $83 = +HEAPF64[$dist>>3];
        $84 = +HEAPF64[$bestdist>>3];
        $85 = $83 > $84;
        if ($85) {
         $86 = +HEAPF64[(5248)>>3];
         $87 = !($83 >= $86);
         $or$cond9 = $46 | $87;
         if (!($or$cond9)) {
          $88 = HEAP32[$66>>2]|0;
          $89 = $88 & 131072;
          $90 = ($89|0)!=(0);
          $or$cond7 = $47 & $90;
          if (!($or$cond7)) {
           $bestfacet$6 = $67;
           break L20;
          }
         }
         $91 = HEAP32[$66>>2]|0;
         $92 = $91 & 131072;
         $93 = ($92|0)==(0);
         $brmerge = $93 | $49;
         if ($brmerge) {
          $$lcssa85 = $67;$$lcssa87 = $93;
          break;
         }
        }
       }
      }
     }
     $71 = ((($72)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(0|0);
     if ($74) {
      $bestfacet$1$ph3193 = $bestfacet$1$ph31;$facet$0$ph3290 = $facet$0$ph32;
      break L22;
     } else {
      $67 = $73;$72 = $71;
     }
    }
    $$mux = $$lcssa87 ? $$lcssa85 : 0;
    $storemerge = +HEAPF64[$dist>>3];
    HEAPF64[$bestdist>>3] = $storemerge;
    $bestfacet$1$ph31 = $$mux;$facet$0$ph32 = $$lcssa85;
   }
   $94 = ($isnewfacets|0)==(0);
   do {
    if ($94) {
     $bestfacet$3 = $bestfacet$1$ph3193;$testhorizon$0 = 1;
     label = 40;
    } else {
     $95 = ($bestfacet$1$ph3193|0)==(0|0);
     if ($95) {
      HEAPF64[$bestdist>>3] = -8.9884656743115785E+307;
      $96 = ((($startfacet)) + 48|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (_qh_findbestnew($point,$97,$bestdist,$bestoutside,$isoutside,$numpartnew)|0);
      $bestfacet$3 = $98;$testhorizon$0 = 0;
      label = 40;
      break;
     }
     $99 = HEAP32[(7664)>>2]|0;
     $100 = ($99|0)==(0);
     if ($100) {
      $101 = +HEAPF64[$bestdist>>3];
      $102 = +HEAPF64[(6952)>>3];
      $103 = -$102;
      $104 = $101 < $103;
      if ($104) {
       $105 = (_qh_sharpnewfacets()|0);
       $106 = ($105|0)==(0);
       if ($106) {
        HEAP32[(7664)>>2] = 1;
        $bestfacet$412 = $bestfacet$1$ph3193;
        label = 43;
        break;
       } else {
        $107 = HEAP32[(43952)>>2]|0;
        $108 = (($107) + 1)|0;
        HEAP32[(43952)>>2] = $108;
        $109 = (_qh_findbestnew($point,$bestfacet$1$ph3193,$bestdist,$bestoutside,$isoutside,$numpartnew)|0);
        HEAP32[(7660)>>2] = 1;
        $bestfacet$3 = $109;$testhorizon$0 = 0;
        label = 40;
        break;
       }
      } else {
       $bestfacet$412 = $bestfacet$1$ph3193;
       label = 43;
      }
     } else {
      $bestfacet$412 = $bestfacet$1$ph3193;
      label = 43;
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $110 = ($bestfacet$3|0)==(0|0);
    if ($110) {
     $111 = (_qh_findbestlower($facet$0$ph3290,$point,$bestdist,$numpart)|0);
     $bestfacet$4 = $111;
    } else {
     $bestfacet$4 = $bestfacet$3;
    }
    $112 = ($testhorizon$0|0)==(0);
    if ($112) {
     $bestfacet$5 = $bestfacet$4;
    } else {
     $bestfacet$412 = $bestfacet$4;
     label = 43;
    }
   }
   if ((label|0) == 43) {
    $113 = (_qh_findbesthorizon(0,$point,$bestfacet$412,$noupper,$bestdist,$numpartnew)|0);
    $bestfacet$5 = $113;
   }
   $114 = +HEAPF64[$bestdist>>3];
   HEAPF64[$dist>>3] = $114;
   if ($27) {
    $115 = +HEAPF64[$bestdist>>3];
    $116 = +HEAPF64[(5248)>>3];
    $117 = $115 < $116;
    if ($117) {
     HEAP32[$isoutside>>2] = 0;
     $bestfacet$6 = $bestfacet$5;
    } else {
     $bestfacet$6 = $bestfacet$5;
    }
   } else {
    $bestfacet$6 = $bestfacet$5;
   }
  }
 } while(0);
 $118 = HEAP32[$numpart>>2]|0;
 $119 = HEAP32[(43864)>>2]|0;
 $120 = (($119) + ($118))|0;
 HEAP32[(43864)>>2] = $120;
 $121 = HEAP32[(43856)>>2]|0;
 $122 = HEAP32[$numpart>>2]|0;
 $123 = ($121|0)<($122|0);
 if (!($123)) {
  $124 = HEAP32[$numpartnew>>2]|0;
  $125 = HEAP32[$numpart>>2]|0;
  $126 = (($125) + ($124))|0;
  HEAP32[$numpart>>2] = $126;
  HEAP32[(5344)>>2] = $0;
  STACKTOP = sp;return ($bestfacet$6|0);
 }
 HEAP32[(43856)>>2] = $122;
 $124 = HEAP32[$numpartnew>>2]|0;
 $125 = HEAP32[$numpart>>2]|0;
 $126 = (($125) + ($124))|0;
 HEAP32[$numpart>>2] = $126;
 HEAP32[(5344)>>2] = $0;
 STACKTOP = sp;return ($bestfacet$6|0);
}
function _qh_findbestnew($point,$startfacet,$dist,$bestoutside,$isoutside,$numpart) {
 $point = $point|0;
 $startfacet = $startfacet|0;
 $dist = $dist|0;
 $bestoutside = $bestoutside|0;
 $isoutside = $isoutside|0;
 $numpart = $numpart|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0;
 var $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $bestdist = 0, $bestfacet$117 = 0, $bestfacet$117$1 = 0;
 var $bestfacet$2 = 0, $bestfacet$2$1 = 0, $bestfacet$3 = 0, $bestfacet$3$1 = 0, $bestfacet$5 = 0, $distoutside$0 = 0.0, $facet$116 = 0, $facet$116$1 = 0, $isdistoutside$0 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond11$1 = 0, $or$cond3 = 0, $or$cond34 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr19 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer13 = sp;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 48|0;
 $bestdist = sp + 56|0;
 HEAPF64[$bestdist>>3] = -8.9884656743115785E+307;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = HEAP32[(7720)>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[(7720)>>2] = $2;
 $3 = ($startfacet|0)==(0|0);
 if ($3) {
  $4 = HEAP32[(5392)>>2]|0;
  $5 = ($4|0)==(0);
  $6 = HEAP32[(7480)>>2]|0;
  if ($5) {
   $7 = HEAP32[(7596)>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $7;
   _qh_fprintf($6,6002,424,$vararg_buffer1);
   _qh_errexit(5,0,0);
   // unreachable;
  } else {
   _qh_fprintf($6,6001,304,$vararg_buffer);
   _qh_errexit(5,0,0);
   // unreachable;
  }
 }
 $8 = HEAP32[(43920)>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[(43920)>>2] = $9;
 $10 = HEAP32[(5268)>>2]|0;
 $11 = $10 | $bestoutside;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[(44768)>>2]|0;
  $14 = ($13|0)>(50);
  $15 = $14 ? 2.0 : 1.0;
  $16 = HEAP32[(5392)>>2]|0;
  $17 = ($16|0)!=(0);
  $18 = $17 ? 2.0 : 1.0;
  $19 = +HEAPF64[(5248)>>3];
  $20 = $19 * $18;
  $21 = +HEAPF64[(7632)>>3];
  $22 = $20 < $21;
  $$ = $22 ? $21 : $20;
  $23 = $15 * $$;
  $distoutside$0 = $23;$isdistoutside$0 = 1;
 } else {
  $distoutside$0 = 0.0;$isdistoutside$0 = 0;
 }
 $24 = ($isoutside|0)!=(0|0);
 if ($24) {
  HEAP32[$isoutside>>2] = 1;
 }
 HEAP32[$numpart>>2] = 0;
 $25 = HEAP32[(5344)>>2]|0;
 $26 = ($25|0)>(2);
 do {
  if ($26) {
   label = 13;
  } else {
   $27 = HEAP32[(5748)>>2]|0;
   $28 = ($27|0)!=(0);
   $29 = HEAP32[(5756)>>2]|0;
   $30 = ($29|0)>(-1);
   $or$cond3 = $28 & $30;
   if ($or$cond3) {
    $31 = (_qh_pointid($point)|0);
    $32 = ($29|0)==($31|0);
    if ($32) {
     label = 13;
     break;
    }
   }
   $45 = ($isdistoutside$0|0)==(0);
   $46 = ($startfacet|0)==(0|0);
   if ($46) {
    $106 = $45;$bestfacet$3 = 0;
    label = 25;
   } else {
    $66 = $45;
    label = 17;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $33 = HEAP32[(5748)>>2]|0;
  $34 = HEAP32[(5344)>>2]|0;
  $35 = ($33|0)>($34|0);
  if ($35) {
   HEAP32[(5344)>>2] = $33;
  }
  $36 = HEAP32[(7480)>>2]|0;
  $37 = (_qh_pointid($point)|0);
  $38 = ((($startfacet)) + 76|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $37;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $39;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $isdistoutside$0;
  $vararg_ptr8 = ((($vararg_buffer3)) + 16|0);
  HEAPF64[$vararg_ptr8>>3] = $distoutside$0;
  _qh_fprintf($36,8008,496,$vararg_buffer3);
  $40 = HEAP32[(7480)>>2]|0;
  $41 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $41;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $2;
  _qh_fprintf($40,8009,560,$vararg_buffer9);
  $42 = HEAP32[(7480)>>2]|0;
  $43 = HEAP32[(44768)>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $43;
  _qh_fprintf($42,8010,600,$vararg_buffer13);
  $44 = ($isdistoutside$0|0)==(0);
  $66 = $44;
  label = 17;
 }
 L25: do {
  if ((label|0) == 17) {
   $bestfacet$117 = 0;$facet$116 = $startfacet;
   while(1) {
    $47 = ((($facet$116)) + 48|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     $106 = $66;$bestfacet$3 = $bestfacet$117;
     label = 25;
     break L25;
    }
    $50 = ((($facet$116)) + 72|0);
    HEAP32[$50>>2] = $2;
    $51 = ((($facet$116)) + 80|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & 65536;
    $54 = ($53|0)==(0);
    if ($54) {
     _qh_distplane($point,$facet$116,$dist);
     $55 = HEAP32[$numpart>>2]|0;
     $56 = (($55) + 1)|0;
     HEAP32[$numpart>>2] = $56;
     $57 = +HEAPF64[$dist>>3];
     $58 = +HEAPF64[$bestdist>>3];
     $59 = $57 > $58;
     if ($59) {
      $60 = HEAP32[$51>>2]|0;
      $61 = $60 & 131072;
      $62 = ($61|0)!=(0);
      $63 = +HEAPF64[(5248)>>3];
      $64 = !($57 >= $63);
      $or$cond = $62 & $64;
      if ($or$cond) {
       $bestfacet$2 = $bestfacet$117;
      } else {
       $65 = !($57 >= $distoutside$0);
       $or$cond11 = $66 | $65;
       if (!($or$cond11)) {
        $bestfacet$5 = $facet$116;
        break L25;
       }
       $67 = +HEAPF64[$dist>>3];
       HEAPF64[$bestdist>>3] = $67;
       $bestfacet$2 = $facet$116;
      }
     } else {
      $bestfacet$2 = $bestfacet$117;
     }
    } else {
     $bestfacet$2 = $bestfacet$117;
    }
    $68 = HEAP32[$47>>2]|0;
    $69 = ($68|0)==(0|0);
    if ($69) {
     $106 = $66;$bestfacet$3 = $bestfacet$2;
     label = 25;
     break;
    } else {
     $bestfacet$117 = $bestfacet$2;$facet$116 = $68;
    }
   }
  }
 } while(0);
 L36: do {
  if ((label|0) == 25) {
   $70 = HEAP32[(7512)>>2]|0;
   $71 = ($70|0)==(0|0);
   L38: do {
    if ($71) {
     $bestfacet$3$1 = $bestfacet$3;
    } else {
     $bestfacet$117$1 = $bestfacet$3;$facet$116$1 = $70;
     while(1) {
      $86 = ((($facet$116$1)) + 48|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87|0)==(0|0);
      $89 = ($facet$116$1|0)==($startfacet|0);
      $or$cond34 = $88 | $89;
      if ($or$cond34) {
       $bestfacet$3$1 = $bestfacet$117$1;
       break L38;
      }
      $90 = ((($facet$116$1)) + 72|0);
      HEAP32[$90>>2] = $2;
      $91 = ((($facet$116$1)) + 80|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92 & 65536;
      $94 = ($93|0)==(0);
      if ($94) {
       _qh_distplane($point,$facet$116$1,$dist);
       $95 = HEAP32[$numpart>>2]|0;
       $96 = (($95) + 1)|0;
       HEAP32[$numpart>>2] = $96;
       $97 = +HEAPF64[$dist>>3];
       $98 = +HEAPF64[$bestdist>>3];
       $99 = $97 > $98;
       if ($99) {
        $100 = HEAP32[$91>>2]|0;
        $101 = $100 & 131072;
        $102 = ($101|0)!=(0);
        $103 = +HEAPF64[(5248)>>3];
        $104 = !($97 >= $103);
        $or$cond$1 = $102 & $104;
        if ($or$cond$1) {
         $bestfacet$2$1 = $bestfacet$117$1;
        } else {
         $105 = !($97 >= $distoutside$0);
         $or$cond11$1 = $106 | $105;
         if (!($or$cond11$1)) {
          $bestfacet$5 = $facet$116$1;
          break L36;
         }
         $107 = +HEAPF64[$dist>>3];
         HEAPF64[$bestdist>>3] = $107;
         $bestfacet$2$1 = $facet$116$1;
        }
       } else {
        $bestfacet$2$1 = $bestfacet$117$1;
       }
      } else {
       $bestfacet$2$1 = $bestfacet$117$1;
      }
      $108 = HEAP32[$86>>2]|0;
      $109 = ($108|0)==(0|0);
      if ($109) {
       $bestfacet$3$1 = $bestfacet$2$1;
       break;
      } else {
       $bestfacet$117$1 = $bestfacet$2$1;$facet$116$1 = $108;
      }
     }
    }
   } while(0);
   $110 = ($bestfacet$3$1|0)!=(0|0);
   $111 = $110 ? $bestfacet$3$1 : $startfacet;
   $112 = (_qh_findbesthorizon(0,$point,$111,0,$bestdist,$numpart)|0);
   $113 = +HEAPF64[$bestdist>>3];
   HEAPF64[$dist>>3] = $113;
   $114 = +HEAPF64[(5248)>>3];
   $115 = $113 < $114;
   $or$cond10 = $24 & $115;
   if ($or$cond10) {
    HEAP32[$isoutside>>2] = 0;
    $bestfacet$5 = $112;
   } else {
    $bestfacet$5 = $112;
   }
  }
 } while(0);
 $72 = HEAP32[$numpart>>2]|0;
 $73 = HEAP32[(43936)>>2]|0;
 $74 = (($73) + ($72))|0;
 HEAP32[(43936)>>2] = $74;
 $75 = HEAP32[(43928)>>2]|0;
 $76 = HEAP32[$numpart>>2]|0;
 $77 = ($75|0)<($76|0);
 if ($77) {
  HEAP32[(43928)>>2] = $76;
 }
 $78 = HEAP32[(5344)>>2]|0;
 $79 = ($78|0)>(3);
 if (!($79)) {
  HEAP32[(5344)>>2] = $0;
  STACKTOP = sp;return ($bestfacet$5|0);
 }
 $80 = HEAP32[(7480)>>2]|0;
 $81 = ($bestfacet$5|0)==(0|0);
 if ($81) {
  $85 = -1;
 } else {
  $82 = ((($bestfacet$5)) + 76|0);
  $83 = HEAP32[$82>>2]|0;
  $85 = $83;
 }
 $84 = +HEAPF64[$dist>>3];
 HEAP32[$vararg_buffer16>>2] = $85;
 $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
 HEAPF64[$vararg_ptr19>>3] = $84;
 _qh_fprintf($80,4004,624,$vararg_buffer16);
 HEAP32[(5344)>>2] = $0;
 STACKTOP = sp;return ($bestfacet$5|0);
}
function _qh_findbesthorizon($ischeckmax,$point,$startfacet,$noupper,$bestdist,$numpart) {
 $ischeckmax = $ischeckmax|0;
 $point = $point|0;
 $startfacet = $startfacet|0;
 $noupper = $noupper|0;
 $bestdist = $bestdist|0;
 $numpart = $numpart|0;
 var $$lcssa123 = 0, $$lcssa127 = 0, $$lcssa131 = 0, $$lcssa133 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bestfacet$0 = 0, $bestfacet$1$ph34 = 0, $bestfacet$28 = 0, $bestfacet$3 = 0, $bestfacet$4 = 0, $bestfacet$465 = 0, $bestfacet$465$lcssa = 0, $coplanarfacetset_size$0 = 0, $coplanarfacetset_size$1$ph$be = 0, $coplanarfacetset_size$1$ph31 = 0, $coplanarfacetset_size$3 = 0, $coplanarfacetset_size$5 = 0, $coplanarfacetset_size$558 = 0, $dist = 0, $facet$0 = 0, $minsearch$1 = 0.0, $minsearch$1$ph = 0.0, $minsearch$2$ph33 = 0.0, $minsearch$4 = 0.0;
 var $minsearch$5 = 0.0, $minsearch$563 = 0.0, $newbest$0 = 0, $newbest$1$ph32 = 0, $newbest$26 = 0, $newbest$3 = 0, $newbest$4 = 0, $newbest$460 = 0, $newbest$460$lcssa = 0, $newbest$461 = 0, $nextfacet$1$ph30 = 0, $nextfacet$2 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer = sp;
 $dist = sp + 48|0;
 $0 = HEAP32[$numpart>>2]|0;
 $1 = HEAP32[(7720)>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[(7720)>>2] = $2;
 $3 = ($ischeckmax|0)!=(0);
 do {
  if ($3) {
   $6 = HEAP32[(5444)>>2]|0;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = ((($startfacet)) + 80|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 524288;
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
   }
   $12 = +HEAPF64[$bestdist>>3];
   $13 = ((($startfacet)) + 8|0);
   $14 = +HEAPF64[$13>>3];
   $15 = $12 > $14;
   if ($15) {
    HEAPF64[$13>>3] = $12;
   }
  } else {
   $4 = HEAP32[(43888)>>2]|0;
   $5 = (($4) + 1)|0;
   HEAP32[(43888)>>2] = $5;
  }
 } while(0);
 $16 = HEAP32[(44768)>>2]|0;
 $17 = ($16|0)>(50);
 $18 = $17 ? 2.0 : 1.0;
 $19 = +HEAPF64[(7632)>>3];
 $20 = +HEAPF64[(6952)>>3];
 $21 = $20 * 2.0;
 $22 = $19 + $21;
 $23 = +HEAPF64[(5424)>>3];
 $24 = +HEAPF64[(5376)>>3];
 $25 = $23 < $24;
 $26 = $25 ? $24 : $23;
 $27 = $22 + $26;
 $28 = $18 * $27;
 $29 = +HEAPF64[$bestdist>>3];
 $30 = $29 - $28;
 if ($3) {
  $31 = -$28;
  $32 = $30 > $31;
  if ($32) {
   $minsearch$1$ph = $31;
  } else {
   $minsearch$1$ph = $30;
  }
 } else {
  $minsearch$1$ph = $30;
 }
 $33 = ($noupper|0)!=(0);
 $bestfacet$0 = $startfacet;$coplanarfacetset_size$0 = 0;$facet$0 = $startfacet;$minsearch$1 = $minsearch$1$ph;$newbest$0 = 0;
 while(1) {
  $34 = HEAP32[(5344)>>2]|0;
  $35 = ($34|0)>(3);
  if ($35) {
   $36 = HEAP32[(7480)>>2]|0;
   $37 = ((($facet$0)) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = +HEAPF64[$bestdist>>3];
   $40 = ($bestfacet$0|0)==(0|0);
   if ($40) {
    $43 = -1;
   } else {
    $41 = ((($bestfacet$0)) + 76|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42;
   }
   HEAP32[$vararg_buffer>>2] = $38;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   HEAPF64[$vararg_ptr1>>3] = $39;
   $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr2>>2] = $43;
   $vararg_ptr3 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr3>>2] = $ischeckmax;
   $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
   HEAP32[$vararg_ptr4>>2] = $noupper;
   $vararg_ptr5 = ((($vararg_buffer)) + 32|0);
   HEAPF64[$vararg_ptr5>>3] = $minsearch$1;
   $vararg_ptr6 = ((($vararg_buffer)) + 40|0);
   HEAPF64[$vararg_ptr6>>3] = $28;
   _qh_fprintf($36,4002,672,$vararg_buffer);
  }
  $44 = ((($facet$0)) + 60|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   $bestfacet$465 = $bestfacet$0;$coplanarfacetset_size$558 = $coplanarfacetset_size$0;$minsearch$563 = $minsearch$1;$newbest$460 = $newbest$0;
  } else {
   $47 = ((($45)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0|0);
   if ($49) {
    $bestfacet$465 = $bestfacet$0;$coplanarfacetset_size$558 = $coplanarfacetset_size$0;$minsearch$563 = $minsearch$1;$newbest$460 = $newbest$0;
   } else {
    $50 = ((($47)) + 4|0);
    $131 = $48;$132 = $50;$bestfacet$1$ph34 = $bestfacet$0;$coplanarfacetset_size$1$ph31 = $coplanarfacetset_size$0;$minsearch$2$ph33 = $minsearch$1;$newbest$1$ph32 = $newbest$0;$nextfacet$1$ph30 = 0;
    L24: while(1) {
     $52 = $131;$56 = $132;
     while(1) {
      $51 = ((($52)) + 72|0);
      $53 = HEAP32[$51>>2]|0;
      $54 = ($53|0)==($2|0);
      if (!($54)) {
       HEAP32[$51>>2] = $2;
       $59 = ((($52)) + 80|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = $60 & 65536;
       $62 = ($61|0)==(0);
       if (!($62)) {
        $133 = $52;$88 = $56;$bestfacet$3 = $bestfacet$1$ph34;$coplanarfacetset_size$3 = $coplanarfacetset_size$1$ph31;$minsearch$4 = $minsearch$2$ph33;$newbest$3 = $newbest$1$ph32;
        break;
       }
       _qh_distplane($point,$52,$dist);
       $63 = HEAP32[$numpart>>2]|0;
       $64 = (($63) + 1)|0;
       HEAP32[$numpart>>2] = $64;
       $65 = +HEAPF64[$dist>>3];
       $66 = +HEAPF64[$bestdist>>3];
       $67 = $65 > $66;
       if ($67) {
        $$lcssa123 = $52;$$lcssa127 = $56;$$lcssa131 = $59;$$lcssa133 = $65;
        label = 23;
        break;
       }
       $80 = $65 < $minsearch$2$ph33;
       if (!($80)) {
        $134 = $56;$135 = $52;
        label = 29;
        break;
       }
      }
      $55 = ((($56)) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $bestfacet$4 = $bestfacet$1$ph34;$coplanarfacetset_size$5 = $coplanarfacetset_size$1$ph31;$minsearch$5 = $minsearch$2$ph33;$newbest$4 = $newbest$1$ph32;$nextfacet$2 = $nextfacet$1$ph30;
       break L24;
      } else {
       $52 = $57;$56 = $55;
      }
     }
     do {
      if ((label|0) == 23) {
       label = 0;
       $68 = HEAP32[$$lcssa131>>2]|0;
       $69 = $68 & 131072;
       $70 = ($69|0)==(0);
       $or$cond = $3 | $70;
       if (!($or$cond)) {
        $71 = +HEAPF64[(5248)>>3];
        $72 = !($$lcssa133 >= $71);
        $or$cond3 = $33 | $72;
        if ($or$cond3) {
         $134 = $$lcssa127;$135 = $$lcssa123;
         label = 29;
         break;
        }
       }
       $73 = +HEAPF64[$dist>>3];
       HEAPF64[$bestdist>>3] = $73;
       if ($3) {
        $136 = $$lcssa127;$83 = $$lcssa123;$bestfacet$28 = $$lcssa123;$newbest$26 = 1;
        label = 30;
       } else {
        $74 = +HEAPF64[$dist>>3];
        $75 = $74 - $28;
        $76 = $28 + $73;
        $77 = $74 > $76;
        if ($77) {
         $78 = HEAP32[(43912)>>2]|0;
         $79 = (($78) + 1)|0;
         HEAP32[(43912)>>2] = $79;
         $133 = $$lcssa123;$88 = $$lcssa127;$bestfacet$3 = $$lcssa123;$coplanarfacetset_size$3 = 0;$minsearch$4 = $75;$newbest$3 = 1;
        } else {
         $133 = $$lcssa123;$88 = $$lcssa127;$bestfacet$3 = $$lcssa123;$coplanarfacetset_size$3 = $coplanarfacetset_size$1$ph31;$minsearch$4 = $75;$newbest$3 = 1;
        }
       }
      }
     } while(0);
     if ((label|0) == 29) {
      label = 0;
      if ($3) {
       $136 = $134;$83 = $135;$bestfacet$28 = $bestfacet$1$ph34;$newbest$26 = $newbest$1$ph32;
       label = 30;
      } else {
       $133 = $135;$88 = $134;$bestfacet$3 = $bestfacet$1$ph34;$coplanarfacetset_size$3 = $coplanarfacetset_size$1$ph31;$minsearch$4 = $minsearch$2$ph33;$newbest$3 = $newbest$1$ph32;
      }
     }
     if ((label|0) == 30) {
      label = 0;
      $81 = +HEAPF64[$dist>>3];
      $82 = ((($83)) + 8|0);
      $84 = +HEAPF64[$82>>3];
      $85 = $81 > $84;
      if ($85) {
       HEAPF64[$82>>3] = $81;
       $133 = $83;$88 = $136;$bestfacet$3 = $bestfacet$28;$coplanarfacetset_size$3 = $coplanarfacetset_size$1$ph31;$minsearch$4 = $minsearch$2$ph33;$newbest$3 = $newbest$26;
      } else {
       $133 = $83;$88 = $136;$bestfacet$3 = $bestfacet$28;$coplanarfacetset_size$3 = $coplanarfacetset_size$1$ph31;$minsearch$4 = $minsearch$2$ph33;$newbest$3 = $newbest$26;
      }
     }
     $86 = ($nextfacet$1$ph30|0)==(0|0);
     do {
      if ($86) {
       $coplanarfacetset_size$1$ph$be = $coplanarfacetset_size$3;
      } else {
       $91 = (($coplanarfacetset_size$3) + 1)|0;
       $92 = ($coplanarfacetset_size$3|0)==(0);
       if ($92) {
        $93 = HEAP32[(7792)>>2]|0;
        $94 = ((($93)) + 4|0);
        HEAP32[$94>>2] = $nextfacet$1$ph30;
        $95 = HEAP32[(7792)>>2]|0;
        $96 = HEAP32[$95>>2]|0;
        $97 = (((($95)) + 4|0) + ($96<<2)|0);
        HEAP32[$97>>2] = 2;
        $98 = HEAP32[(7792)>>2]|0;
        $99 = ((($98)) + 8|0);
        HEAP32[$99>>2] = 0;
        $coplanarfacetset_size$1$ph$be = $91;
        break;
       } else {
        _qh_setappend((7792),$nextfacet$1$ph30);
        $coplanarfacetset_size$1$ph$be = $91;
        break;
       }
      }
     } while(0);
     $87 = ((($88)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==(0|0);
     if ($90) {
      $bestfacet$4 = $bestfacet$3;$coplanarfacetset_size$5 = $coplanarfacetset_size$1$ph$be;$minsearch$5 = $minsearch$4;$newbest$4 = $newbest$3;$nextfacet$2 = $133;
      break;
     } else {
      $131 = $89;$132 = $87;$bestfacet$1$ph34 = $bestfacet$3;$coplanarfacetset_size$1$ph31 = $coplanarfacetset_size$1$ph$be;$minsearch$2$ph33 = $minsearch$4;$newbest$1$ph32 = $newbest$3;$nextfacet$1$ph30 = $133;
     }
    }
    $100 = ($nextfacet$2|0)==(0|0);
    if ($100) {
     $bestfacet$465 = $bestfacet$4;$coplanarfacetset_size$558 = $coplanarfacetset_size$5;$minsearch$563 = $minsearch$5;$newbest$460 = $newbest$4;
    } else {
     $bestfacet$0 = $bestfacet$4;$coplanarfacetset_size$0 = $coplanarfacetset_size$5;$facet$0 = $nextfacet$2;$minsearch$1 = $minsearch$5;$newbest$0 = $newbest$4;
     continue;
    }
   }
  }
  $101 = ($coplanarfacetset_size$558|0)==(0);
  if ($101) {
   $bestfacet$465$lcssa = $bestfacet$465;$newbest$460$lcssa = $newbest$460;
   break;
  }
  $102 = (($coplanarfacetset_size$558) + -1)|0;
  $103 = ($102|0)==(0);
  $104 = HEAP32[(7792)>>2]|0;
  if ($103) {
   $105 = ((($104)) + 4|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = HEAP32[$104>>2]|0;
   $108 = (((($104)) + 4|0) + ($107<<2)|0);
   HEAP32[$108>>2] = 1;
   $109 = HEAP32[(7792)>>2]|0;
   $110 = ((($109)) + 4|0);
   HEAP32[$110>>2] = 0;
   $bestfacet$0 = $bestfacet$465;$coplanarfacetset_size$0 = 0;$facet$0 = $106;$minsearch$1 = $minsearch$563;$newbest$0 = $newbest$460;
   continue;
  } else {
   $111 = (_qh_setdellast($104)|0);
   $bestfacet$0 = $bestfacet$465;$coplanarfacetset_size$0 = $102;$facet$0 = $111;$minsearch$1 = $minsearch$563;$newbest$0 = $newbest$460;
   continue;
  }
 }
 if ($3) {
  $newbest$461 = $newbest$460$lcssa;
 } else {
  $112 = HEAP32[$numpart>>2]|0;
  $113 = (($112) - ($0))|0;
  $114 = HEAP32[(43904)>>2]|0;
  $115 = (($113) + ($114))|0;
  HEAP32[(43904)>>2] = $115;
  $116 = HEAP32[(43896)>>2]|0;
  $117 = HEAP32[$numpart>>2]|0;
  $118 = (($117) - ($0))|0;
  $119 = ($116|0)<($118|0);
  if ($119) {
   HEAP32[(43896)>>2] = $118;
  }
  $120 = ($newbest$460$lcssa|0)==(0);
  if ($120) {
   $newbest$461 = 0;
  } else {
   $121 = HEAP32[(44488)>>2]|0;
   $122 = (($121) + 1)|0;
   HEAP32[(44488)>>2] = $122;
   $newbest$461 = $newbest$460$lcssa;
  }
 }
 $123 = HEAP32[(5344)>>2]|0;
 $124 = ($123|0)>(3);
 if (!($124)) {
  STACKTOP = sp;return ($bestfacet$465$lcssa|0);
 }
 $125 = HEAP32[(7480)>>2]|0;
 $126 = ($bestfacet$465$lcssa|0)==(0|0);
 if ($126) {
  $130 = -1;
 } else {
  $127 = ((($bestfacet$465$lcssa)) + 76|0);
  $128 = HEAP32[$127>>2]|0;
  $130 = $128;
 }
 $129 = +HEAPF64[$bestdist>>3];
 HEAP32[$vararg_buffer7>>2] = $newbest$461;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $130;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAPF64[$vararg_ptr11>>3] = $129;
 _qh_fprintf($125,4003,792,$vararg_buffer7);
 STACKTOP = sp;return ($bestfacet$465$lcssa|0);
}
function _qh_backnormal($rows,$numrow,$numcol,$sign,$normal,$nearzero) {
 $rows = $rows|0;
 $numrow = $numrow|0;
 $numcol = $numcol|0;
 $sign = $sign|0;
 $normal = $normal|0;
 $nearzero = $nearzero|0;
 var $$lcssa = 0, $$lcssa41 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ai$09 = 0, $ak$010 = 0, $exitcond = 0;
 var $i$0$ph23 = 0, $i$012 = 0, $i$012$phi = 0, $j$08 = 0, $normal_tail$018 = 0, $normalp$0$be = 0, $normalp$0$ph22 = 0, $normalp$011 = 0, $normalp$011$lcssa = 0, $normalp$011$lcssa37 = 0, $normalp$011$pn = 0, $scevgep = 0, $scevgep35 = 0, $scevgep38 = 0, $scevgep3839 = 0, $uglygep$sum = 0, $vararg_buffer = 0, $waszero = 0, $zerocol$0$ph24 = 0, $zerocol$0$ph24$lcssa64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $waszero = sp + 4|0;
 $0 = (($normal) + ($numcol<<3)|0);
 $$sum = (($numcol) + -1)|0;
 $1 = (($normal) + ($$sum<<3)|0);
 $2 = ($sign|0)!=(0);
 $3 = $2 ? -1.0 : 1.0;
 HEAPF64[$1>>3] = $3;
 $4 = ($numrow|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($numrow) + -1)|0;
 $$sum1 = (($numcol) + -2)|0;
 $6 = (($normal) + ($$sum1<<3)|0);
 $7 = (($numcol) + -1)|0;
 $scevgep35 = (($normal) + ($7<<3)|0);
 $50 = $5;$i$0$ph23 = $numrow;$normalp$0$ph22 = $6;$zerocol$0$ph24 = -1;
 L4: while(1) {
  $13 = $50;$i$012 = $i$0$ph23;$normalp$011 = $normalp$0$ph22;
  while(1) {
   HEAPF64[$normalp$011>>3] = 0.0;
   $12 = (($rows) + ($13<<2)|0);
   $14 = ($i$012|0)<($numcol|0);
   if ($14) {
    $15 = HEAP32[$12>>2]|0;
    $16 = (($15) + ($i$012<<3)|0);
    $ai$09 = $16;$j$08 = $i$012;$normalp$011$pn = $normalp$011;
    while(1) {
     $ak$010 = ((($normalp$011$pn)) + 8|0);
     $17 = ((($ai$09)) + 8|0);
     $18 = +HEAPF64[$ai$09>>3];
     $19 = +HEAPF64[$ak$010>>3];
     $20 = $18 * $19;
     $21 = +HEAPF64[$normalp$011>>3];
     $22 = $21 - $20;
     HEAPF64[$normalp$011>>3] = $22;
     $23 = (($j$08) + 1)|0;
     $exitcond = ($23|0)==($numcol|0);
     if ($exitcond) {
      break;
     } else {
      $ai$09 = $17;$j$08 = $23;$normalp$011$pn = $ak$010;
     }
    }
   }
   $24 = HEAP32[$12>>2]|0;
   $25 = (($24) + ($13<<3)|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 < 0.0;
   $28 = -$26;
   $29 = $27 ? $28 : $26;
   $30 = +HEAPF64[(7016)>>3];
   $31 = $29 > $30;
   if ($31) {
    $32 = ((($normalp$011)) + -8|0);
    $33 = +HEAPF64[$normalp$011>>3];
    $34 = $33 / $26;
    HEAPF64[$normalp$011>>3] = $34;
    $normalp$0$be = $32;
   } else {
    HEAP32[$waszero>>2] = 0;
    $37 = +HEAPF64[$normalp$011>>3];
    $38 = +HEAPF64[(7008)>>3];
    $39 = (+_qh_divzero($37,$26,$38,$waszero));
    HEAPF64[$normalp$011>>3] = $39;
    $40 = HEAP32[$waszero>>2]|0;
    $41 = ($40|0)==(0);
    $42 = ((($normalp$011)) + -8|0);
    if ($41) {
     $normalp$0$be = $42;
    } else {
     $$lcssa = $13;$$lcssa62 = $42;$normalp$011$lcssa = $normalp$011;
     break;
    }
   }
   $35 = (($13) + -1)|0;
   $36 = ($13|0)==(0);
   if ($36) {
    $$lcssa63 = $35;$zerocol$0$ph24$lcssa64 = $zerocol$0$ph24;
    label = 14;
    break L4;
   } else {
    $i$012$phi = $13;$13 = $35;$normalp$011 = $normalp$0$be;$i$012 = $i$012$phi;
   }
  }
  HEAPF64[$normalp$011$lcssa>>3] = $3;
  $normal_tail$018 = ((($normalp$011$lcssa)) + 8|0);
  $43 = ($normal_tail$018>>>0)<($0>>>0);
  if ($43) {
   $normalp$011$lcssa37 = $normalp$011$lcssa;
   $scevgep = ((($normalp$011$lcssa)) + 8|0);
   $uglygep$sum = $normalp$011$lcssa37 ^ -1;
   $scevgep38 = (($scevgep35) + ($uglygep$sum)|0);
   $scevgep3839 = $scevgep38;
   $8 = (($scevgep3839) + 8)|0;
   $9 = $8 & -8;
   _memset(($scevgep|0),0,($9|0))|0;
  }
  $10 = (($$lcssa) + -1)|0;
  $11 = ($$lcssa|0)==(0);
  if ($11) {
   $$lcssa41 = $10;
   break;
  } else {
   $50 = $10;$i$0$ph23 = $$lcssa;$normalp$0$ph22 = $$lcssa62;$zerocol$0$ph24 = $$lcssa;
  }
 }
 if ((label|0) == 14) {
  $44 = ($zerocol$0$ph24$lcssa64|0)==(-1);
  if ($44) {
   STACKTOP = sp;return;
  } else {
   $$lcssa41 = $$lcssa63;
  }
 }
 $45 = HEAP32[(43304)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(43304)>>2] = $46;
 HEAP32[$nearzero>>2] = 1;
 $47 = HEAP32[(5344)>>2]|0;
 $48 = ($47|0)>(3);
 if ($48) {
  $49 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $$lcssa41;
  _qh_fprintf($49,4005,856,$vararg_buffer);
 }
 _qh_precision(904);
 STACKTOP = sp;return;
}
function _qh_gausselim($rows,$numrow,$numcol,$sign,$nearzero) {
 $rows = $rows|0;
 $numrow = $numrow|0;
 $numcol = $numcol|0;
 $sign = $sign|0;
 $nearzero = $nearzero|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0.0, $8 = 0, $9 = 0, $ai$07 = 0, $ak$06 = 0, $exitcond = 0, $exitcond21 = 0, $exitcond22 = 0, $i$03 = 0, $i$112 = 0, $j$08 = 0, $k$015 = 0, $pivot_abs$0$lcssa = 0.0, $pivot_abs$1$lcssa23 = 0.0, $pivot_abs$12 = 0.0, $pivot_abs$2 = 0.0, $pivot_abs$2$lcssa = 0.0, $pivoti$04 = 0;
 var $pivoti$1 = 0, $pivoti$1$lcssa = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$nearzero>>2] = 0;
 $0 = ($numrow|0)>(0);
 if ($0) {
  $k$015 = 0;
  while(1) {
   $1 = (($rows) + ($k$015<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($2) + ($k$015<<3)|0);
   $4 = +HEAPF64[$3>>3];
   $5 = $4 < 0.0;
   $6 = -$4;
   $7 = $5 ? $6 : $4;
   $8 = (($k$015) + 1)|0;
   $9 = ($8|0)<($numrow|0);
   if ($9) {
    $i$03 = $8;$pivot_abs$12 = $7;$pivoti$04 = $k$015;
    while(1) {
     $10 = (($rows) + ($i$03<<2)|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($k$015<<3)|0);
     $13 = +HEAPF64[$12>>3];
     $14 = $13 < 0.0;
     $15 = -$13;
     $16 = $14 ? $15 : $13;
     $17 = $16 > $pivot_abs$12;
     $pivot_abs$2 = $17 ? $16 : $pivot_abs$12;
     $pivoti$1 = $17 ? $i$03 : $pivoti$04;
     $18 = (($i$03) + 1)|0;
     $exitcond = ($18|0)==($numrow|0);
     if ($exitcond) {
      $pivot_abs$2$lcssa = $pivot_abs$2;$pivoti$1$lcssa = $pivoti$1;
      break;
     } else {
      $i$03 = $18;$pivot_abs$12 = $pivot_abs$2;$pivoti$04 = $pivoti$1;
     }
    }
    $19 = ($pivoti$1$lcssa|0)==($k$015|0);
    if ($19) {
     $pivot_abs$1$lcssa23 = $pivot_abs$2$lcssa;
    } else {
     $20 = (($rows) + ($pivoti$1$lcssa<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$1>>2]|0;
     HEAP32[$20>>2] = $22;
     HEAP32[$1>>2] = $21;
     $23 = HEAP32[$sign>>2]|0;
     $24 = $23 ^ 1;
     HEAP32[$sign>>2] = $24;
     $pivot_abs$1$lcssa23 = $pivot_abs$2$lcssa;
    }
   } else {
    $pivot_abs$1$lcssa23 = $7;
   }
   $25 = HEAP32[(7036)>>2]|0;
   $26 = (($25) + ($k$015<<3)|0);
   $27 = +HEAPF64[$26>>3];
   $28 = !($pivot_abs$1$lcssa23 <= $27);
   if ($28) {
    label = 12;
   } else {
    HEAP32[$nearzero>>2] = 1;
    $29 = $pivot_abs$1$lcssa23 == 0.0;
    if ($29) {
     $30 = HEAP32[(5344)>>2]|0;
     $31 = ($30|0)>(3);
     if ($31) {
      $32 = HEAP32[(7480)>>2]|0;
      $33 = +HEAPF64[(6952)>>3];
      HEAP32[$vararg_buffer>>2] = $k$015;
      $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
      HEAPF64[$vararg_ptr1>>3] = $pivot_abs$1$lcssa23;
      $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
      HEAPF64[$vararg_ptr2>>3] = $33;
      _qh_fprintf($32,8011,944,$vararg_buffer);
      $34 = HEAP32[(7480)>>2]|0;
      _qh_printmatrix($34,1000,$rows,$numrow,$numcol);
     }
     $35 = HEAP32[(43960)>>2]|0;
     $36 = (($35) + 1)|0;
     HEAP32[(43960)>>2] = $36;
     _qh_precision(1008);
    } else {
     label = 12;
    }
   }
   if ((label|0) == 12) {
    label = 0;
    $37 = HEAP32[$1>>2]|0;
    $38 = (($37) + ($k$015<<3)|0);
    $$sum = (($k$015) + 1)|0;
    $39 = (($37) + ($$sum<<3)|0);
    $40 = +HEAPF64[$38>>3];
    $41 = ($8|0)<($numrow|0);
    if ($41) {
     $42 = (($numcol) - ($8))|0;
     $43 = ($8|0)==($numcol|0);
     $i$112 = $8;
     while(1) {
      $44 = (($rows) + ($i$112<<2)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($45) + ($k$015<<3)|0);
      $47 = +HEAPF64[$46>>3];
      $48 = $47 / $40;
      if (!($43)) {
       $49 = (($45) + ($$sum<<3)|0);
       $ai$07 = $49;$ak$06 = $39;$j$08 = $42;
       while(1) {
        $50 = (($j$08) + -1)|0;
        $51 = ((($ak$06)) + 8|0);
        $52 = +HEAPF64[$ak$06>>3];
        $53 = $48 * $52;
        $54 = ((($ai$07)) + 8|0);
        $55 = +HEAPF64[$ai$07>>3];
        $56 = $55 - $53;
        HEAPF64[$ai$07>>3] = $56;
        $57 = ($50|0)==(0);
        if ($57) {
         break;
        } else {
         $ai$07 = $54;$ak$06 = $51;$j$08 = $50;
        }
       }
      }
      $58 = (($i$112) + 1)|0;
      $exitcond21 = ($58|0)==($numrow|0);
      if ($exitcond21) {
       break;
      } else {
       $i$112 = $58;
      }
     }
    }
   }
   $exitcond22 = ($8|0)==($numrow|0);
   if ($exitcond22) {
    $pivot_abs$0$lcssa = $pivot_abs$1$lcssa23;
    break;
   } else {
    $k$015 = $8;
   }
  }
 } else {
  $pivot_abs$0$lcssa = 0.0;
 }
 $59 = +HEAPF64[(44240)>>3];
 $60 = $59 > $pivot_abs$0$lcssa;
 if ($60) {
  HEAPF64[(44240)>>3] = $pivot_abs$0$lcssa;
 }
 $61 = HEAP32[(5344)>>2]|0;
 $62 = ($61|0)>(4);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = HEAP32[(7480)>>2]|0;
 _qh_printmatrix($63,1048,$rows,$numrow,$numcol);
 STACKTOP = sp;return;
}
function _qh_getangle($vect1,$vect2) {
 $vect1 = $vect1|0;
 $vect2 = $vect2|0;
 var $$012 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0.0;
 var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $angle$0$lcssa = 0.0, $angle$03 = 0.0, $angle$1 = 0.0, $k$05 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $angle$0$lcssa = 0.0;
 } else {
  $$012 = $vect2;$$04 = $vect1;$angle$03 = 0.0;$k$05 = $0;
  while(1) {
   $2 = (($k$05) + -1)|0;
   $3 = ((($$04)) + 8|0);
   $4 = +HEAPF64[$$04>>3];
   $5 = ((($$012)) + 8|0);
   $6 = +HEAPF64[$$012>>3];
   $7 = $4 * $6;
   $8 = $angle$03 + $7;
   $9 = ($2|0)==(0);
   if ($9) {
    $angle$0$lcssa = $8;
    break;
   } else {
    $$012 = $5;$$04 = $3;$angle$03 = $8;$k$05 = $2;
   }
  }
 }
 $10 = HEAP32[(5656)>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $angle$1 = $angle$0$lcssa;
 } else {
  $12 = (_qh_rand()|0);
  $13 = (+($12|0));
  $14 = $13 * 2.0;
  $15 = $14 / 2147483646.0;
  $16 = $15 + -1.0;
  $17 = +HEAPF64[(5664)>>3];
  $18 = $16 * $17;
  $19 = $angle$0$lcssa + $18;
  $angle$1 = $19;
 }
 $20 = HEAP32[(5344)>>2]|0;
 $21 = ($20|0)>(3);
 if (!($21)) {
  STACKTOP = sp;return (+$angle$1);
 }
 $22 = HEAP32[(7480)>>2]|0;
 HEAPF64[$vararg_buffer>>3] = $angle$1;
 _qh_fprintf($22,4006,1072,$vararg_buffer);
 STACKTOP = sp;return (+$angle$1);
}
function _qh_getcenter($vertices) {
 $vertices = $vertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $k$02 = 0, $vararg_buffer = 0, $vertexp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_qh_setsize($vertices)|0);
 $1 = ($0|0)<(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  _qh_fprintf($2,6003,1096,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $3 = HEAP32[(7488)>>2]|0;
 $4 = (_qh_memalloc($3)|0);
 $5 = HEAP32[(5828)>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return ($4|0);
 }
 $7 = ($vertices|0)==(0|0);
 $8 = (+($0|0));
 $9 = HEAP32[(5828)>>2]|0;
 $10 = ((($vertices)) + 4|0);
 $k$02 = 0;
 while(1) {
  $11 = (($4) + ($k$02<<3)|0);
  HEAPF64[$11>>3] = 0.0;
  if (!($7)) {
   $12 = HEAP32[$10>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $16 = $12;$vertexp$01 = $10;
    while(1) {
     $14 = ((($vertexp$01)) + 4|0);
     $15 = ((($16)) + 8|0);
     $17 = HEAP32[$15>>2]|0;
     $18 = (($17) + ($k$02<<3)|0);
     $19 = +HEAPF64[$18>>3];
     $20 = +HEAPF64[$11>>3];
     $21 = $19 + $20;
     HEAPF64[$11>>3] = $21;
     $22 = HEAP32[$14>>2]|0;
     $23 = ($22|0)==(0|0);
     if ($23) {
      break;
     } else {
      $16 = $22;$vertexp$01 = $14;
     }
    }
   }
  }
  $24 = +HEAPF64[$11>>3];
  $25 = $24 / $8;
  HEAPF64[$11>>3] = $25;
  $26 = (($k$02) + 1)|0;
  $27 = ($26|0)<($9|0);
  if ($27) {
   $k$02 = $26;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($4|0);
}
function _qh_getcentrum($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $dist = sp;
 $0 = ((($facet)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_qh_getcenter($1)|0);
 $3 = HEAP32[(43344)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(43344)>>2] = $4;
 _qh_distplane($2,$facet,$dist);
 $5 = +HEAPF64[$dist>>3];
 $6 = (_qh_projectpoint($2,$facet,$5)|0);
 $7 = HEAP32[(7488)>>2]|0;
 _qh_memfree($2,$7);
 $8 = HEAP32[(5344)>>2]|0;
 $9 = ($8|0)>(3);
 if (!($9)) {
  STACKTOP = sp;return ($6|0);
 }
 $10 = HEAP32[(7480)>>2]|0;
 $11 = ((($facet)) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (_qh_setsize($13)|0);
 $15 = +HEAPF64[$dist>>3];
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr2>>3] = $15;
 _qh_fprintf($10,4007,1160,$vararg_buffer);
 STACKTOP = sp;return ($6|0);
}
function _qh_projectpoint($point,$facet,$dist) {
 $point = $point|0;
 $facet = $facet|0;
 $dist = +$dist;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $k$03 = 0, $normal$01 = 0, $np$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(7488)>>2]|0;
 $1 = (_qh_memalloc($0)|0);
 $2 = HEAP32[(5828)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return ($1|0);
 }
 $4 = ((($facet)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $$04 = $point;$k$03 = $2;$normal$01 = $5;$np$02 = $1;
 while(1) {
  $6 = (($k$03) + -1)|0;
  $7 = ((($$04)) + 8|0);
  $8 = +HEAPF64[$$04>>3];
  $9 = ((($normal$01)) + 8|0);
  $10 = +HEAPF64[$normal$01>>3];
  $11 = $10 * $dist;
  $12 = $8 - $11;
  $13 = ((($np$02)) + 8|0);
  HEAPF64[$np$02>>3] = $12;
  $14 = ($6|0)==(0);
  if ($14) {
   break;
  } else {
   $$04 = $7;$k$03 = $6;$normal$01 = $9;$np$02 = $13;
  }
 }
 return ($1|0);
}
function _qh_getdistance($facet,$neighbor,$mindist,$maxdist) {
 $facet = $facet|0;
 $neighbor = $neighbor|0;
 $mindist = $mindist|0;
 $maxdist = $maxdist|0;
 var $$lcssa = 0, $$lcssa64 = 0, $$lcssa66 = 0.0, $$lcssa67 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $dist = 0, $maxd$0$ph18 = 0.0, $maxd$1 = 0.0, $maxd$1$ = 0.0, $mind$0$ph19 = 0.0, $mind$0$ph313 = 0.0, $mind$0$ph313$lcssa = 0.0, $mind$1 = 0.0, $vertexp$024 = 0, $vertexp$122 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dist = sp;
 $0 = ((($facet)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $8 = $4;$vertexp$024 = $3;
   while(1) {
    $6 = ((($vertexp$024)) + 4|0);
    $7 = ((($8)) + 16|0);
    $9 = $7;
    $10 = $9;
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 4)|0;
    $13 = $12;
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & -268435457;
    $16 = $7;
    $17 = $16;
    HEAP32[$17>>2] = $11;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $15;
    $20 = HEAP32[$6>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     break;
    } else {
     $8 = $20;$vertexp$024 = $6;
    }
   }
  }
 }
 $22 = ((($neighbor)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = ((($23)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $30 = $26;$vertexp$122 = $25;
   while(1) {
    $28 = ((($vertexp$122)) + 4|0);
    $29 = ((($30)) + 16|0);
    $31 = $29;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31) + 4)|0;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = $36 | 268435456;
    $38 = $29;
    $39 = $38;
    HEAP32[$39>>2] = $33;
    $40 = (($38) + 4)|0;
    $41 = $40;
    HEAP32[$41>>2] = $37;
    $42 = HEAP32[$28>>2]|0;
    $43 = ($42|0)==(0|0);
    if ($43) {
     break;
    } else {
     $30 = $42;$vertexp$122 = $28;
    }
   }
  }
 }
 $44 = HEAP32[$0>>2]|0;
 $45 = ($44|0)==(0|0);
 L11: do {
  if ($45) {
   $maxd$1 = 0.0;$mind$1 = 0.0;
  } else {
   $46 = ((($44)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $maxd$1 = 0.0;$mind$1 = 0.0;
   } else {
    $49 = ((($46)) + 4|0);
    $81 = $47;$82 = $49;$maxd$0$ph18 = 0.0;$mind$0$ph19 = 0.0;
    while(1) {
     $83 = $81;$84 = $82;$mind$0$ph313 = $mind$0$ph19;
     L16: while(1) {
      $54 = $83;$73 = $84;
      while(1) {
       $53 = ((($54)) + 16|0);
       $55 = $53;
       $56 = $55;
       $57 = HEAP32[$56>>2]|0;
       $58 = (($55) + 4)|0;
       $59 = $58;
       $60 = HEAP32[$59>>2]|0;
       $61 = $60 & 268435456;
       $62 = (0)==(0);
       $63 = ($61|0)==(0);
       $64 = $62 & $63;
       if ($64) {
        $65 = HEAP32[(43320)>>2]|0;
        $66 = (($65) + 1)|0;
        HEAP32[(43320)>>2] = $66;
        $67 = ((($54)) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        _qh_distplane($68,$neighbor,$dist);
        $69 = +HEAPF64[$dist>>3];
        $70 = $69 < $mind$0$ph313;
        if ($70) {
         $$lcssa = $73;$$lcssa66 = $69;
         break;
        }
        $71 = $69 > $maxd$0$ph18;
        if ($71) {
         $$lcssa64 = $73;$$lcssa67 = $69;$mind$0$ph313$lcssa = $mind$0$ph313;
         break L16;
        }
       }
       $72 = ((($73)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(0|0);
       if ($75) {
        $maxd$1 = $maxd$0$ph18;$mind$1 = $mind$0$ph313;
        break L11;
       } else {
        $54 = $74;$73 = $72;
       }
      }
      $50 = ((($$lcssa)) + 4|0);
      $51 = HEAP32[$$lcssa>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       $maxd$1 = $maxd$0$ph18;$mind$1 = $$lcssa66;
       break L11;
      } else {
       $83 = $51;$84 = $50;$mind$0$ph313 = $$lcssa66;
      }
     }
     $76 = ((($$lcssa64)) + 4|0);
     $77 = HEAP32[$$lcssa64>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $maxd$1 = $$lcssa67;$mind$1 = $mind$0$ph313$lcssa;
      break;
     } else {
      $81 = $77;$82 = $76;$maxd$0$ph18 = $$lcssa67;$mind$0$ph19 = $mind$0$ph313$lcssa;
     }
    }
   }
  }
 } while(0);
 HEAPF64[$mindist>>3] = $mind$1;
 HEAPF64[$maxdist>>3] = $maxd$1;
 $79 = -$mind$1;
 $80 = $maxd$1 > $79;
 $maxd$1$ = $80 ? $maxd$1 : $79;
 STACKTOP = sp;return (+$maxd$1$);
}
function _qh_normalize($normal,$dim,$toporient) {
 $normal = $normal|0;
 $dim = $dim|0;
 $toporient = $toporient|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _qh_normalize2($normal,$dim,$toporient,0,0);
 return;
}
function _qh_normalize2($normal,$dim,$toporient,$minnorm,$ismin) {
 $normal = $normal|0;
 $dim = $dim|0;
 $toporient = $toporient|0;
 $minnorm = $minnorm|0;
 $ismin = $ismin|0;
 var $$in = 0, $$norm$1 = 0.0, $$norm$11 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $colp$016 = 0, $colp$14 = 0, $colp$26 = 0, $colp$312 = 0, $k$017 = 0, $k$15 = 0, $k$27 = 0, $norm$0$lcssa = 0.0, $norm$015 = 0.0, $norm$1 = 0.0, $vararg_buffer = 0, $vararg_ptr1 = 0, $zerodiv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $zerodiv = sp + 16|0;
 $0 = ((($normal)) + 8|0);
 $1 = ((($normal)) + 16|0);
 $2 = ((($normal)) + 24|0);
 $3 = ($dim|0)==(2);
 do {
  if ($3) {
   $4 = +HEAPF64[$normal>>3];
   $5 = $4 * $4;
   $6 = +HEAPF64[$0>>3];
   $7 = $6 * $6;
   $8 = $5 + $7;
   $9 = (+Math_sqrt((+$8)));
   $norm$1 = $9;
  } else {
   if ((($dim|0) == 3)) {
    $10 = +HEAPF64[$normal>>3];
    $11 = $10 * $10;
    $12 = +HEAPF64[$0>>3];
    $13 = $12 * $12;
    $14 = $11 + $13;
    $15 = +HEAPF64[$1>>3];
    $16 = $15 * $15;
    $17 = $14 + $16;
    $18 = (+Math_sqrt((+$17)));
    $norm$1 = $18;
    break;
   } else if ((($dim|0) == 4)) {
    $19 = +HEAPF64[$normal>>3];
    $20 = $19 * $19;
    $21 = +HEAPF64[$0>>3];
    $22 = $21 * $21;
    $23 = $20 + $22;
    $24 = +HEAPF64[$1>>3];
    $25 = $24 * $24;
    $26 = $23 + $25;
    $27 = +HEAPF64[$2>>3];
    $28 = $27 * $27;
    $29 = $26 + $28;
    $30 = (+Math_sqrt((+$29)));
    $norm$1 = $30;
    break;
   } else {
    $31 = ($dim|0)>(4);
    if (!($31)) {
     $norm$1 = 0.0;
     break;
    }
    $32 = +HEAPF64[$normal>>3];
    $33 = $32 * $32;
    $34 = +HEAPF64[$0>>3];
    $35 = $34 * $34;
    $36 = $33 + $35;
    $37 = +HEAPF64[$1>>3];
    $38 = $37 * $37;
    $39 = $36 + $38;
    $40 = +HEAPF64[$2>>3];
    $41 = $40 * $40;
    $42 = $39 + $41;
    $43 = (($dim) + -4)|0;
    $44 = ($43|0)==(0);
    if ($44) {
     $norm$0$lcssa = $42;
    } else {
     $45 = ((($normal)) + 32|0);
     $colp$016 = $45;$k$017 = $43;$norm$015 = $42;
     while(1) {
      $46 = (($k$017) + -1)|0;
      $47 = +HEAPF64[$colp$016>>3];
      $48 = $47 * $47;
      $49 = $norm$015 + $48;
      $50 = ((($colp$016)) + 8|0);
      $51 = ($46|0)==(0);
      if ($51) {
       $norm$0$lcssa = $49;
       break;
      } else {
       $colp$016 = $50;$k$017 = $46;$norm$015 = $49;
      }
     }
    }
    $52 = (+Math_sqrt((+$norm$0$lcssa)));
    $norm$1 = $52;
    break;
   }
  }
 } while(0);
 $53 = ($minnorm|0)==(0|0);
 do {
  if (!($53)) {
   $54 = +HEAPF64[$minnorm>>3];
   $55 = $norm$1 < $54;
   if ($55) {
    HEAP32[$ismin>>2] = 1;
    break;
   } else {
    HEAP32[$ismin>>2] = 0;
    break;
   }
  }
 } while(0);
 $56 = +HEAPF64[(44240)>>3];
 $57 = $56 > $norm$1;
 if ($57) {
  HEAPF64[(44240)>>3] = $norm$1;
 }
 $58 = +HEAPF64[(7000)>>3];
 $59 = $norm$1 > $58;
 if ($59) {
  $60 = ($toporient|0)==(0);
  $61 = -$norm$1;
  $$norm$1 = $60 ? $61 : $norm$1;
  $62 = +HEAPF64[$normal>>3];
  $63 = $62 / $$norm$1;
  HEAPF64[$normal>>3] = $63;
  $64 = +HEAPF64[$0>>3];
  $65 = $64 / $$norm$1;
  HEAPF64[$0>>3] = $65;
  if ($3) {
   STACKTOP = sp;return;
  }
  if ((($dim|0) == 4)) {
   $68 = +HEAPF64[$1>>3];
   $69 = $68 / $$norm$1;
   HEAPF64[$1>>3] = $69;
   $70 = +HEAPF64[$2>>3];
   $71 = $70 / $$norm$1;
   HEAPF64[$2>>3] = $71;
   STACKTOP = sp;return;
  } else if ((($dim|0) == 3)) {
   $66 = +HEAPF64[$1>>3];
   $67 = $66 / $$norm$1;
   HEAPF64[$1>>3] = $67;
   STACKTOP = sp;return;
  } else {
   $72 = ($dim|0)>(4);
   if (!($72)) {
    STACKTOP = sp;return;
   }
   $73 = +HEAPF64[$1>>3];
   $74 = $73 / $$norm$1;
   HEAPF64[$1>>3] = $74;
   $75 = +HEAPF64[$2>>3];
   $76 = $75 / $$norm$1;
   HEAPF64[$2>>3] = $76;
   $77 = (($dim) + -4)|0;
   $78 = ($77|0)==(0);
   if ($78) {
    STACKTOP = sp;return;
   }
   $79 = ((($normal)) + 32|0);
   $colp$14 = $79;$k$15 = $77;
   while(1) {
    $80 = (($k$15) + -1)|0;
    $81 = ((($colp$14)) + 8|0);
    $82 = +HEAPF64[$colp$14>>3];
    $83 = $82 / $$norm$1;
    HEAPF64[$colp$14>>3] = $83;
    $84 = ($80|0)==(0);
    if ($84) {
     break;
    } else {
     $colp$14 = $81;$k$15 = $80;
    }
   }
   STACKTOP = sp;return;
  }
 }
 $85 = $norm$1 == 0.0;
 if ($85) {
  $86 = (+($dim|0));
  $87 = 1.0 / $86;
  $88 = (+Math_sqrt((+$87)));
  $89 = ($dim|0)==(0);
  if ($89) {
   STACKTOP = sp;return;
  } else {
   $colp$26 = $normal;$k$27 = $dim;
  }
  while(1) {
   $90 = (($k$27) + -1)|0;
   $91 = ((($colp$26)) + 8|0);
   HEAPF64[$colp$26>>3] = $88;
   $92 = ($90|0)==(0);
   if ($92) {
    break;
   } else {
    $colp$26 = $91;$k$27 = $90;
   }
  }
  STACKTOP = sp;return;
 }
 $93 = ($toporient|0)==(0);
 $94 = -$norm$1;
 $$norm$11 = $93 ? $94 : $norm$1;
 $95 = ($dim|0)==(0);
 if ($95) {
  STACKTOP = sp;return;
 } else {
  $$in = $dim;$colp$312 = $normal;
 }
 while(1) {
  $96 = (($$in) + -1)|0;
  $97 = +HEAPF64[$colp$312>>3];
  $98 = +HEAPF64[(6992)>>3];
  $99 = (+_qh_divzero($97,$$norm$11,$98,$zerodiv));
  $100 = HEAP32[$zerodiv>>2]|0;
  $101 = ($100|0)==(0);
  if (!($101)) {
   break;
  }
  HEAPF64[$colp$312>>3] = $99;
  $102 = ((($colp$312)) + 8|0);
  $103 = ($96|0)==(0);
  if ($103) {
   label = 36;
   break;
  } else {
   $$in = $96;$colp$312 = $102;
  }
 }
 if ((label|0) == 36) {
  STACKTOP = sp;return;
 }
 $104 = (_qh_maxabsval($normal,$dim)|0);
 $105 = +HEAPF64[$104>>3];
 $106 = $$norm$11 * $105;
 $107 = $106 >= 0.0;
 $108 = $107 ? 1.0 : -1.0;
 $109 = ($dim|0)==(0);
 if (!($109)) {
  $110 = $dim << 3;
  _memset(($normal|0),0,($110|0))|0;
 }
 HEAPF64[$104>>3] = $108;
 $111 = HEAP32[(44272)>>2]|0;
 $112 = (($111) + 1)|0;
 HEAP32[(44272)>>2] = $112;
 $113 = HEAP32[(5344)>>2]|0;
 $114 = ($113|0)==(0);
 if ($114) {
  STACKTOP = sp;return;
 }
 $115 = HEAP32[(7480)>>2]|0;
 $116 = HEAP32[(7596)>>2]|0;
 HEAPF64[$vararg_buffer>>3] = $$norm$11;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr1>>2] = $116;
 _qh_fprintf($115,1,1216,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_setfacetplane($facet) {
 $facet = $facet|0;
 var $$lcssa = 0, $$lcssa89 = 0, $$lcssa89$lcssa = 0, $$lcssa90 = 0, $$lcssa90$lcssa = 0, $$lcssa92 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0;
 var $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coord$048 = 0, $coord$137 = 0, $dist = 0, $gmcoord$054 = 0, $gmcoord$1$lcssa = 0, $gmcoord$149 = 0, $gmcoord$2$ph$ph = 0, $gmcoord$338 = 0, $gmcoord$4 = 0, $gmcoord$532 = 0, $gmcoord$6$lcssa = 0, $gmcoord$627 = 0;
 var $i$053 = 0, $i$144 = 0, $i$2$ph = 0, $i$2$ph$ph = 0, $i$3 = 0, $i$4 = 0, $i$431 = 0, $i$433 = 0, $k$047 = 0, $k$136 = 0, $k$226 = 0, $k$323 = 0, $nearzero = 0, $oldtrace$0 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond9 = 0, $point$039 = 0, $scevgep = 0, $scevgep64 = 0;
 var $scevgep65 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vertexp$143 = 0, $vertexp$2 = 0, $vertexp$2$ph = 0, $vertexp$2$ph$ph = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 40|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $dist = sp;
 $nearzero = sp + 104|0;
 $0 = HEAP32[(7488)>>2]|0;
 $1 = ((($facet)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$nearzero>>2] = 0;
 $7 = HEAP32[(44736)>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[(44736)>>2] = $8;
 $9 = ((($facet)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = (_qh_memalloc($0)|0);
  HEAP32[$9>>2] = $12;
 }
 $13 = HEAP32[(7528)>>2]|0;
 $14 = ($13|0)==($facet|0);
 if ($14) {
  $15 = HEAP32[(5344)>>2]|0;
  HEAP32[(5344)>>2] = 5;
  $16 = HEAP32[(7480)>>2]|0;
  $17 = ((($facet)) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer>>2] = $18;
  _qh_fprintf($16,8012,1264,$vararg_buffer);
  $19 = HEAP32[(7480)>>2]|0;
  $20 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  _qh_fprintf($19,8013,1304,$vararg_buffer1);
  $21 = HEAP32[(44768)>>2]|0;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $23 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $21;
   _qh_fprintf($23,8014,56016,$vararg_buffer4);
  }
  $24 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($24,8015,1344,$vararg_buffer7);
  $25 = HEAP32[(7480)>>2]|0;
  _qh_printsummary($25);
  $oldtrace$0 = $15;
 } else {
  $oldtrace$0 = 0;
 }
 $26 = HEAP32[(5828)>>2]|0;
 $27 = ($26|0)<(5);
 if ($27) {
  $28 = HEAP32[(5656)>>2]|0;
  $29 = ($28|0)==(0);
  $30 = HEAP32[$1>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($29) {
   if (!($31)) {
    $58 = ((($30)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(0|0);
    if (!($60)) {
     $63 = $59;$i$144 = 0;$vertexp$143 = $58;
     while(1) {
      $61 = ((($vertexp$143)) + 4|0);
      $62 = ((($63)) + 8|0);
      $64 = HEAP32[$62>>2]|0;
      $65 = (($i$144) + 1)|0;
      $66 = HEAP32[(7760)>>2]|0;
      $67 = (($66) + ($i$144<<2)|0);
      HEAP32[$67>>2] = $64;
      $68 = HEAP32[$61>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       break;
      } else {
       $63 = $68;$i$144 = $65;$vertexp$143 = $61;
      }
     }
    }
   }
  } else {
   if (!($31)) {
    $32 = ((($30)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $35 = ((($32)) + 4|0);
     $36 = HEAP32[(7756)>>2]|0;
     $39 = $35;$47 = $33;$gmcoord$054 = $36;$i$053 = 0;
     while(1) {
      $42 = (($i$053) + 1)|0;
      $43 = HEAP32[(7760)>>2]|0;
      $44 = (($43) + ($i$053<<2)|0);
      HEAP32[$44>>2] = $gmcoord$054;
      $37 = HEAP32[(5828)>>2]|0;
      $45 = ($37|0)==(0);
      if ($45) {
       $gmcoord$1$lcssa = $gmcoord$054;
      } else {
       $46 = ((($47)) + 8|0);
       $48 = HEAP32[$46>>2]|0;
       $coord$048 = $48;$gmcoord$149 = $gmcoord$054;$k$047 = $37;
       while(1) {
        $49 = (($k$047) + -1)|0;
        $50 = ((($coord$048)) + 8|0);
        $51 = +HEAPF64[$coord$048>>3];
        $52 = +HEAPF64[(5672)>>3];
        $53 = +HEAPF64[(5680)>>3];
        $54 = (+_qh_randomfactor($52,$53));
        $55 = $51 * $54;
        $56 = ((($gmcoord$149)) + 8|0);
        HEAPF64[$gmcoord$149>>3] = $55;
        $57 = ($49|0)==(0);
        if ($57) {
         break;
        } else {
         $coord$048 = $50;$gmcoord$149 = $56;$k$047 = $49;
        }
       }
       $scevgep65 = (($gmcoord$054) + ($37<<3)|0);
       $gmcoord$1$lcssa = $scevgep65;
      }
      $38 = ((($39)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       break;
      } else {
       $39 = $38;$47 = $40;$gmcoord$054 = $gmcoord$1$lcssa;$i$053 = $42;
      }
     }
    }
   }
  }
  $70 = HEAP32[(5828)>>2]|0;
  $71 = HEAP32[(7760)>>2]|0;
  $72 = ((($facet)) + 80|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 >>> 12;
  $75 = $74 & 1;
  $76 = HEAP32[$9>>2]|0;
  $77 = ((($facet)) + 16|0);
  _qh_sethyperplane_det($70,$71,$6,$75,$76,$77,$nearzero);
 }
 $78 = HEAP32[(5828)>>2]|0;
 $79 = ($78|0)>(4);
 $80 = HEAP32[$nearzero>>2]|0;
 $81 = ($80|0)!=(0);
 $or$cond = $79 | $81;
 if ($or$cond) {
  $82 = HEAP32[(7756)>>2]|0;
  $83 = HEAP32[$1>>2]|0;
  $84 = ($83|0)==(0|0);
  L32: do {
   if ($84) {
    $gmcoord$4 = $82;$i$3 = 0;
   } else {
    $85 = ((($83)) + 4|0);
    $86 = HEAP32[(5828)>>2]|0;
    $87 = ($86|0)==(0);
    $gmcoord$2$ph$ph = $82;$i$2$ph$ph = 0;$vertexp$2$ph$ph = $85;
    while(1) {
     $i$2$ph = $i$2$ph$ph;$vertexp$2$ph = $vertexp$2$ph$ph;
     while(1) {
      $vertexp$2 = $vertexp$2$ph;
      while(1) {
       $88 = ((($vertexp$2)) + 4|0);
       $89 = HEAP32[$vertexp$2>>2]|0;
       $90 = ($89|0)==(0|0);
       if ($90) {
        $gmcoord$4 = $gmcoord$2$ph$ph;$i$3 = $i$2$ph;
        break L32;
       }
       $91 = ((($89)) + 8|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($92|0)==($6|0);
       if ($93) {
        $vertexp$2 = $88;
       } else {
        $$lcssa89 = $88;$$lcssa90 = $91;
        break;
       }
      }
      $94 = (($i$2$ph) + 1)|0;
      $95 = HEAP32[(7760)>>2]|0;
      $96 = (($95) + ($i$2$ph<<2)|0);
      HEAP32[$96>>2] = $gmcoord$2$ph$ph;
      if ($87) {
       $i$2$ph = $94;$vertexp$2$ph = $$lcssa89;
      } else {
       $$lcssa89$lcssa = $$lcssa89;$$lcssa90$lcssa = $$lcssa90;$$lcssa92 = $94;
       break;
      }
     }
     $97 = HEAP32[$$lcssa90$lcssa>>2]|0;
     $coord$137 = $97;$gmcoord$338 = $gmcoord$2$ph$ph;$k$136 = $86;$point$039 = $6;
     while(1) {
      $98 = (($k$136) + -1)|0;
      $99 = ((($coord$137)) + 8|0);
      $100 = +HEAPF64[$coord$137>>3];
      $101 = ((($point$039)) + 8|0);
      $102 = +HEAPF64[$point$039>>3];
      $103 = $100 - $102;
      $104 = ((($gmcoord$338)) + 8|0);
      HEAPF64[$gmcoord$338>>3] = $103;
      $105 = ($98|0)==(0);
      if ($105) {
       break;
      } else {
       $coord$137 = $99;$gmcoord$338 = $104;$k$136 = $98;$point$039 = $101;
      }
     }
     $scevgep64 = (($gmcoord$2$ph$ph) + ($86<<3)|0);
     $gmcoord$2$ph$ph = $scevgep64;$i$2$ph$ph = $$lcssa92;$vertexp$2$ph$ph = $$lcssa89$lcssa;
    }
   }
  } while(0);
  $106 = HEAP32[(7760)>>2]|0;
  $107 = (($106) + ($i$3<<2)|0);
  HEAP32[$107>>2] = $gmcoord$4;
  $108 = HEAP32[(5656)>>2]|0;
  $109 = ($108|0)==(0);
  if (!($109)) {
   $110 = HEAP32[(5828)>>2]|0;
   $i$431 = (($110) + -1)|0;
   $111 = ($i$431|0)==(0);
   if (!($111)) {
    $112 = HEAP32[(7756)>>2]|0;
    $gmcoord$532 = $112;$i$433 = $i$431;
    while(1) {
     $113 = HEAP32[(5828)>>2]|0;
     $115 = ($113|0)==(0);
     if ($115) {
      $gmcoord$6$lcssa = $gmcoord$532;
     } else {
      $gmcoord$627 = $gmcoord$532;$k$226 = $113;
      while(1) {
       $116 = (($k$226) + -1)|0;
       $117 = +HEAPF64[(5672)>>3];
       $118 = +HEAPF64[(5680)>>3];
       $119 = (+_qh_randomfactor($117,$118));
       $120 = ((($gmcoord$627)) + 8|0);
       $121 = +HEAPF64[$gmcoord$627>>3];
       $122 = $119 * $121;
       HEAPF64[$gmcoord$627>>3] = $122;
       $123 = ($116|0)==(0);
       if ($123) {
        break;
       } else {
        $gmcoord$627 = $120;$k$226 = $116;
       }
      }
      $scevgep = (($gmcoord$532) + ($113<<3)|0);
      $gmcoord$6$lcssa = $scevgep;
     }
     $i$4 = (($i$433) + -1)|0;
     $114 = ($i$4|0)==(0);
     if ($114) {
      break;
     } else {
      $gmcoord$532 = $gmcoord$6$lcssa;$i$433 = $i$4;
     }
    }
   }
  }
  $124 = HEAP32[(5828)>>2]|0;
  $125 = HEAP32[(7760)>>2]|0;
  $126 = ((($facet)) + 80|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $127 >>> 12;
  $129 = $128 & 1;
  $130 = HEAP32[$9>>2]|0;
  $131 = ((($facet)) + 16|0);
  _qh_sethyperplane_gauss($124,$125,$6,$129,$130,$131,$nearzero);
  $132 = HEAP32[$nearzero>>2]|0;
  $133 = ($132|0)==(0);
  if (!($133)) {
   $134 = (_qh_orientoutside($facet)|0);
   $135 = ($134|0)!=(0);
   $136 = HEAP32[(5344)>>2]|0;
   $137 = ($136|0)!=(0);
   $or$cond9 = $135 & $137;
   if ($or$cond9) {
    $138 = HEAP32[(7480)>>2]|0;
    $139 = HEAP32[(7596)>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $139;
    _qh_fprintf($138,2,1368,$vararg_buffer9);
   }
  }
 }
 $140 = ((($facet)) + 80|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141 & -131073;
 HEAP32[$140>>2] = $142;
 $143 = HEAP32[(5304)>>2]|0;
 $144 = ($143|0)==(0);
 do {
  if (!($144)) {
   $145 = HEAP32[(5780)>>2]|0;
   $146 = ($145|0)==(0);
   $147 = HEAP32[(5828)>>2]|0;
   $148 = (($147) + -1)|0;
   $149 = HEAP32[$9>>2]|0;
   $150 = (($149) + ($148<<3)|0);
   $151 = +HEAPF64[$150>>3];
   $152 = +HEAPF64[(6928)>>3];
   if ($146) {
    $156 = $152 * -2.0;
    $157 = $151 > $156;
    if (!($157)) {
     break;
    }
    $158 = $141 | 131072;
    HEAP32[$140>>2] = $158;
    break;
   } else {
    $153 = $152 * 2.0;
    $154 = !($151 >= $153);
    if ($154) {
     break;
    }
    $155 = $141 | 131072;
    HEAP32[$140>>2] = $155;
    break;
   }
  }
 } while(0);
 $159 = HEAP32[(5632)>>2]|0;
 $160 = HEAP32[(5344)>>2]|0;
 $161 = $160 | $159;
 $162 = HEAP32[(5748)>>2]|0;
 $163 = $161 | $162;
 $164 = ($163|0)!=(0);
 $165 = +HEAPF64[(7616)>>3];
 $166 = $165 < 1.7976931348623157E+308;
 $or$cond7 = $164 | $166;
 if ($or$cond7) {
  $167 = HEAP32[(5656)>>2]|0;
  HEAP32[(7788)>>2] = $167;
  HEAP32[(5656)>>2] = 0;
  $168 = HEAP32[$1>>2]|0;
  $169 = ($168|0)==(0|0);
  if (!($169)) {
   $170 = ((($168)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)==(0|0);
   if (!($172)) {
    $173 = ((($170)) + 4|0);
    $174 = ((($facet)) + 76|0);
    $176 = $171;$218 = $173;
    while(1) {
     $175 = ((($176)) + 8|0);
     $177 = HEAP32[$175>>2]|0;
     $178 = ($177|0)==($6|0);
     do {
      if (!($178)) {
       $179 = HEAP32[(43632)>>2]|0;
       $180 = (($179) + 1)|0;
       HEAP32[(43632)>>2] = $180;
       $181 = HEAP32[$175>>2]|0;
       _qh_distplane($181,$facet,$dist);
       $182 = +HEAPF64[$dist>>3];
       $183 = $182 < 0.0;
       $184 = -$182;
       $185 = $183 ? $184 : $182;
       HEAPF64[$dist>>3] = $185;
       $186 = HEAP32[(44320)>>2]|0;
       $187 = (($186) + 1)|0;
       HEAP32[(44320)>>2] = $187;
       $188 = +HEAPF64[$dist>>3];
       $189 = +HEAPF64[(44328)>>3];
       $190 = $188 + $189;
       HEAPF64[(44328)>>3] = $190;
       $191 = +HEAPF64[$dist>>3];
       $192 = +HEAPF64[(44336)>>3];
       $193 = $191 > $192;
       if ($193) {
        HEAPF64[(44336)>>3] = $191;
        $194 = +HEAPF64[$dist>>3];
        $195 = +HEAPF64[(7632)>>3];
        $196 = $194 > $195;
        if (!($196)) {
         break;
        }
        HEAPF64[(7632)>>3] = $194;
        $197 = +HEAPF64[$dist>>3];
        $198 = +HEAPF64[(5760)>>3];
        $199 = $197 > $198;
        if (!($199)) {
         break;
        }
       } else {
        $200 = -$191;
        $201 = +HEAPF64[(5760)>>3];
        $202 = $201 < $200;
        if (!($202)) {
         break;
        }
       }
       $203 = HEAP32[(7480)>>2]|0;
       $204 = HEAP32[$175>>2]|0;
       $205 = (_qh_pointid($204)|0);
       $206 = ((($176)) + 16|0);
       $207 = $206;
       $208 = $207;
       $209 = HEAP32[$208>>2]|0;
       $210 = (($207) + 4)|0;
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $213 = $212 & 16777215;
       $214 = +HEAPF64[$dist>>3];
       $215 = HEAP32[$174>>2]|0;
       $216 = HEAP32[(7596)>>2]|0;
       HEAP32[$vararg_buffer12>>2] = $205;
       $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
       HEAP32[$vararg_ptr15>>2] = $213;
       $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
       HEAPF64[$vararg_ptr16>>3] = $214;
       $vararg_ptr17 = ((($vararg_buffer12)) + 16|0);
       HEAP32[$vararg_ptr17>>2] = $215;
       $vararg_ptr18 = ((($vararg_buffer12)) + 20|0);
       HEAP32[$vararg_ptr18>>2] = $216;
       _qh_fprintf($203,8016,1448,$vararg_buffer12);
       _qh_errprint(17128,$facet,0,0,0);
      }
     } while(0);
     $217 = ((($218)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if ($220) {
      break;
     } else {
      $176 = $219;$218 = $217;
     }
    }
   }
  }
  $221 = HEAP32[(7788)>>2]|0;
  HEAP32[(5656)>>2] = $221;
 }
 $222 = HEAP32[(5344)>>2]|0;
 $223 = ($222|0)>(2);
 if ($223) {
  $224 = HEAP32[(7480)>>2]|0;
  $225 = ((($facet)) + 76|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ((($facet)) + 16|0);
  $228 = +HEAPF64[$227>>3];
  HEAP32[$vararg_buffer19>>2] = $226;
  $vararg_ptr22 = ((($vararg_buffer19)) + 8|0);
  HEAPF64[$vararg_ptr22>>3] = $228;
  _qh_fprintf($224,8017,1552,$vararg_buffer19);
  $229 = HEAP32[(5828)>>2]|0;
  $230 = ($229|0)>(0);
  $231 = HEAP32[(7480)>>2]|0;
  if ($230) {
   $235 = $231;$k$323 = 0;
   while(1) {
    $232 = HEAP32[$9>>2]|0;
    $233 = (($232) + ($k$323<<3)|0);
    $234 = +HEAPF64[$233>>3];
    HEAPF64[$vararg_buffer23>>3] = $234;
    _qh_fprintf($235,8018,1600,$vararg_buffer23);
    $236 = (($k$323) + 1)|0;
    $237 = HEAP32[(5828)>>2]|0;
    $238 = ($236|0)<($237|0);
    $239 = HEAP32[(7480)>>2]|0;
    if ($238) {
     $235 = $239;$k$323 = $236;
    } else {
     $$lcssa = $239;
     break;
    }
   }
  } else {
   $$lcssa = $231;
  }
  _qh_fprintf($$lcssa,8019,56128,$vararg_buffer26);
 }
 $240 = HEAP32[(7528)>>2]|0;
 $241 = ($240|0)==($facet|0);
 if (!($241)) {
  STACKTOP = sp;return;
 }
 HEAP32[(5344)>>2] = $oldtrace$0;
 STACKTOP = sp;return;
}
function _qh_sethyperplane_det($dim,$rows,$point0,$toporient,$normal,$offset,$nearzero) {
 $dim = $dim|0;
 $rows = $rows|0;
 $point0 = $point0|0;
 $toporient = $toporient|0;
 $normal = $normal|0;
 $offset = $offset|0;
 $nearzero = $nearzero|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0;
 var $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0;
 var $188 = 0.0, $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0;
 var $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0;
 var $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0;
 var $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0;
 var $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0;
 var $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0;
 var $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0;
 var $386 = 0.0, $387 = 0.0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0.0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0;
 var $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0;
 var $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $or$cond3 = 0, $or$cond3$1 = 0, $or$cond3$2 = 0, $or$cond3$3 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 L1: do {
  if ((($dim|0) == 4)) {
   $126 = ((($rows)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($127)) + 8|0);
   $129 = +HEAPF64[$128>>3];
   $130 = HEAP32[$rows>>2]|0;
   $131 = ((($130)) + 8|0);
   $132 = +HEAPF64[$131>>3];
   $133 = $129 - $132;
   $134 = ((($rows)) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ((($135)) + 16|0);
   $137 = +HEAPF64[$136>>3];
   $138 = ((($130)) + 16|0);
   $139 = +HEAPF64[$138>>3];
   $140 = $137 - $139;
   $141 = ((($rows)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($142)) + 24|0);
   $144 = +HEAPF64[$143>>3];
   $145 = ((($130)) + 24|0);
   $146 = +HEAPF64[$145>>3];
   $147 = $144 - $146;
   $148 = $140 * $147;
   $149 = ((($135)) + 24|0);
   $150 = +HEAPF64[$149>>3];
   $151 = $150 - $146;
   $152 = ((($142)) + 16|0);
   $153 = +HEAPF64[$152>>3];
   $154 = $153 - $139;
   $155 = $151 * $154;
   $156 = $148 - $155;
   $157 = $133 * $156;
   $158 = ((($135)) + 8|0);
   $159 = +HEAPF64[$158>>3];
   $160 = $159 - $132;
   $161 = ((($127)) + 16|0);
   $162 = +HEAPF64[$161>>3];
   $163 = $162 - $139;
   $164 = $147 * $163;
   $165 = ((($127)) + 24|0);
   $166 = +HEAPF64[$165>>3];
   $167 = $166 - $146;
   $168 = $154 * $167;
   $169 = $164 - $168;
   $170 = $160 * $169;
   $171 = $157 - $170;
   $172 = ((($142)) + 8|0);
   $173 = +HEAPF64[$172>>3];
   $174 = $173 - $132;
   $175 = $151 * $163;
   $176 = $140 * $167;
   $177 = $175 - $176;
   $178 = $174 * $177;
   $179 = $178 + $171;
   $180 = -$179;
   HEAPF64[$normal>>3] = $180;
   $181 = HEAP32[$126>>2]|0;
   $182 = +HEAPF64[$181>>3];
   $183 = HEAP32[$rows>>2]|0;
   $184 = +HEAPF64[$183>>3];
   $185 = $182 - $184;
   $186 = HEAP32[$134>>2]|0;
   $187 = ((($186)) + 16|0);
   $188 = +HEAPF64[$187>>3];
   $189 = ((($183)) + 16|0);
   $190 = +HEAPF64[$189>>3];
   $191 = $188 - $190;
   $192 = HEAP32[$141>>2]|0;
   $193 = ((($192)) + 24|0);
   $194 = +HEAPF64[$193>>3];
   $195 = ((($183)) + 24|0);
   $196 = +HEAPF64[$195>>3];
   $197 = $194 - $196;
   $198 = $191 * $197;
   $199 = ((($186)) + 24|0);
   $200 = +HEAPF64[$199>>3];
   $201 = $200 - $196;
   $202 = ((($192)) + 16|0);
   $203 = +HEAPF64[$202>>3];
   $204 = $203 - $190;
   $205 = $201 * $204;
   $206 = $198 - $205;
   $207 = $185 * $206;
   $208 = +HEAPF64[$186>>3];
   $209 = $208 - $184;
   $210 = ((($181)) + 16|0);
   $211 = +HEAPF64[$210>>3];
   $212 = $211 - $190;
   $213 = $197 * $212;
   $214 = ((($181)) + 24|0);
   $215 = +HEAPF64[$214>>3];
   $216 = $215 - $196;
   $217 = $204 * $216;
   $218 = $213 - $217;
   $219 = $209 * $218;
   $220 = $207 - $219;
   $221 = +HEAPF64[$192>>3];
   $222 = $221 - $184;
   $223 = $201 * $212;
   $224 = $191 * $216;
   $225 = $223 - $224;
   $226 = $222 * $225;
   $227 = $226 + $220;
   $228 = ((($normal)) + 8|0);
   HEAPF64[$228>>3] = $227;
   $229 = HEAP32[$126>>2]|0;
   $230 = +HEAPF64[$229>>3];
   $231 = HEAP32[$rows>>2]|0;
   $232 = +HEAPF64[$231>>3];
   $233 = $230 - $232;
   $234 = HEAP32[$134>>2]|0;
   $235 = ((($234)) + 8|0);
   $236 = +HEAPF64[$235>>3];
   $237 = ((($231)) + 8|0);
   $238 = +HEAPF64[$237>>3];
   $239 = $236 - $238;
   $240 = HEAP32[$141>>2]|0;
   $241 = ((($240)) + 24|0);
   $242 = +HEAPF64[$241>>3];
   $243 = ((($231)) + 24|0);
   $244 = +HEAPF64[$243>>3];
   $245 = $242 - $244;
   $246 = $239 * $245;
   $247 = ((($234)) + 24|0);
   $248 = +HEAPF64[$247>>3];
   $249 = $248 - $244;
   $250 = ((($240)) + 8|0);
   $251 = +HEAPF64[$250>>3];
   $252 = $251 - $238;
   $253 = $249 * $252;
   $254 = $246 - $253;
   $255 = $233 * $254;
   $256 = +HEAPF64[$234>>3];
   $257 = $256 - $232;
   $258 = ((($229)) + 8|0);
   $259 = +HEAPF64[$258>>3];
   $260 = $259 - $238;
   $261 = $245 * $260;
   $262 = ((($229)) + 24|0);
   $263 = +HEAPF64[$262>>3];
   $264 = $263 - $244;
   $265 = $252 * $264;
   $266 = $261 - $265;
   $267 = $257 * $266;
   $268 = $255 - $267;
   $269 = +HEAPF64[$240>>3];
   $270 = $269 - $232;
   $271 = $249 * $260;
   $272 = $239 * $264;
   $273 = $271 - $272;
   $274 = $270 * $273;
   $275 = $274 + $268;
   $276 = -$275;
   $277 = ((($normal)) + 16|0);
   HEAPF64[$277>>3] = $276;
   $278 = HEAP32[$126>>2]|0;
   $279 = +HEAPF64[$278>>3];
   $280 = HEAP32[$rows>>2]|0;
   $281 = +HEAPF64[$280>>3];
   $282 = $279 - $281;
   $283 = HEAP32[$134>>2]|0;
   $284 = ((($283)) + 8|0);
   $285 = +HEAPF64[$284>>3];
   $286 = ((($280)) + 8|0);
   $287 = +HEAPF64[$286>>3];
   $288 = $285 - $287;
   $289 = HEAP32[$141>>2]|0;
   $290 = ((($289)) + 16|0);
   $291 = +HEAPF64[$290>>3];
   $292 = ((($280)) + 16|0);
   $293 = +HEAPF64[$292>>3];
   $294 = $291 - $293;
   $295 = $288 * $294;
   $296 = ((($283)) + 16|0);
   $297 = +HEAPF64[$296>>3];
   $298 = $297 - $293;
   $299 = ((($289)) + 8|0);
   $300 = +HEAPF64[$299>>3];
   $301 = $300 - $287;
   $302 = $298 * $301;
   $303 = $295 - $302;
   $304 = $282 * $303;
   $305 = +HEAPF64[$283>>3];
   $306 = $305 - $281;
   $307 = ((($278)) + 8|0);
   $308 = +HEAPF64[$307>>3];
   $309 = $308 - $287;
   $310 = $294 * $309;
   $311 = ((($278)) + 16|0);
   $312 = +HEAPF64[$311>>3];
   $313 = $312 - $293;
   $314 = $301 * $313;
   $315 = $310 - $314;
   $316 = $306 * $315;
   $317 = $304 - $316;
   $318 = +HEAPF64[$289>>3];
   $319 = $318 - $281;
   $320 = $298 * $309;
   $321 = $288 * $313;
   $322 = $320 - $321;
   $323 = $319 * $322;
   $324 = $323 + $317;
   $325 = ((($normal)) + 24|0);
   HEAPF64[$325>>3] = $324;
   _qh_normalize2($normal,$dim,$toporient,0,0);
   $326 = +HEAPF64[$point0>>3];
   $327 = +HEAPF64[$normal>>3];
   $328 = $326 * $327;
   $329 = ((($point0)) + 8|0);
   $330 = +HEAPF64[$329>>3];
   $331 = +HEAPF64[$228>>3];
   $332 = $330 * $331;
   $333 = $328 + $332;
   $334 = ((($point0)) + 16|0);
   $335 = +HEAPF64[$334>>3];
   $336 = +HEAPF64[$277>>3];
   $337 = $335 * $336;
   $338 = $333 + $337;
   $339 = ((($point0)) + 24|0);
   $340 = +HEAPF64[$339>>3];
   $341 = +HEAPF64[$325>>3];
   $342 = $340 * $341;
   $343 = $338 + $342;
   $344 = -$343;
   HEAPF64[$offset>>3] = $344;
   $345 = +HEAPF64[(6952)>>3];
   $346 = -$345;
   $347 = ((($rows)) + 12|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = ($348|0)==($point0|0);
   if ($349) {
    label = 8;
   } else {
    $353 = +HEAPF64[$offset>>3];
    $354 = +HEAPF64[$348>>3];
    $355 = +HEAPF64[$normal>>3];
    $356 = $354 * $355;
    $357 = ((($348)) + 8|0);
    $358 = +HEAPF64[$357>>3];
    $359 = +HEAPF64[$228>>3];
    $360 = $358 * $359;
    $361 = $356 + $360;
    $362 = ((($348)) + 16|0);
    $363 = +HEAPF64[$362>>3];
    $364 = +HEAPF64[$277>>3];
    $365 = $363 * $364;
    $366 = $361 + $365;
    $367 = ((($348)) + 24|0);
    $368 = +HEAPF64[$367>>3];
    $369 = +HEAPF64[$325>>3];
    $370 = $368 * $369;
    $371 = $366 + $370;
    $372 = $353 + $371;
    $373 = $372 > $345;
    $374 = $372 < $346;
    $or$cond3 = $373 | $374;
    if (!($or$cond3)) {
     label = 8;
    }
   }
   do {
    if ((label|0) == 8) {
     $350 = ((($rows)) + 8|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = ($351|0)==($point0|0);
     if (!($352)) {
      $420 = +HEAPF64[$offset>>3];
      $421 = +HEAPF64[$351>>3];
      $422 = +HEAPF64[$normal>>3];
      $423 = $421 * $422;
      $424 = ((($351)) + 8|0);
      $425 = +HEAPF64[$424>>3];
      $426 = +HEAPF64[$228>>3];
      $427 = $425 * $426;
      $428 = $423 + $427;
      $429 = ((($351)) + 16|0);
      $430 = +HEAPF64[$429>>3];
      $431 = +HEAPF64[$277>>3];
      $432 = $430 * $431;
      $433 = $428 + $432;
      $434 = ((($351)) + 24|0);
      $435 = +HEAPF64[$434>>3];
      $436 = +HEAPF64[$325>>3];
      $437 = $435 * $436;
      $438 = $433 + $437;
      $439 = $420 + $438;
      $440 = $439 > $345;
      $441 = $439 < $346;
      $or$cond3$1 = $440 | $441;
      if ($or$cond3$1) {
       break;
      }
     }
     $442 = ((($rows)) + 4|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = ($443|0)==($point0|0);
     if (!($444)) {
      $445 = +HEAPF64[$offset>>3];
      $446 = +HEAPF64[$443>>3];
      $447 = +HEAPF64[$normal>>3];
      $448 = $446 * $447;
      $449 = ((($443)) + 8|0);
      $450 = +HEAPF64[$449>>3];
      $451 = +HEAPF64[$228>>3];
      $452 = $450 * $451;
      $453 = $448 + $452;
      $454 = ((($443)) + 16|0);
      $455 = +HEAPF64[$454>>3];
      $456 = +HEAPF64[$277>>3];
      $457 = $455 * $456;
      $458 = $453 + $457;
      $459 = ((($443)) + 24|0);
      $460 = +HEAPF64[$459>>3];
      $461 = +HEAPF64[$325>>3];
      $462 = $460 * $461;
      $463 = $458 + $462;
      $464 = $445 + $463;
      $465 = $464 > $345;
      $466 = $464 < $346;
      $or$cond3$2 = $465 | $466;
      if ($or$cond3$2) {
       break;
      }
     }
     $467 = HEAP32[$rows>>2]|0;
     $468 = ($467|0)==($point0|0);
     if ($468) {
      label = 11;
      break L1;
     }
     $469 = +HEAPF64[$offset>>3];
     $470 = +HEAPF64[$467>>3];
     $471 = +HEAPF64[$normal>>3];
     $472 = $470 * $471;
     $473 = ((($467)) + 8|0);
     $474 = +HEAPF64[$473>>3];
     $475 = +HEAPF64[$228>>3];
     $476 = $474 * $475;
     $477 = $472 + $476;
     $478 = ((($467)) + 16|0);
     $479 = +HEAPF64[$478>>3];
     $480 = +HEAPF64[$277>>3];
     $481 = $479 * $480;
     $482 = $477 + $481;
     $483 = ((($467)) + 24|0);
     $484 = +HEAPF64[$483>>3];
     $485 = +HEAPF64[$325>>3];
     $486 = $484 * $485;
     $487 = $482 + $486;
     $488 = $469 + $487;
     $489 = $488 > $345;
     $490 = $488 < $346;
     $or$cond3$3 = $489 | $490;
     if (!($or$cond3$3)) {
      label = 11;
      break L1;
     }
    }
   } while(0);
   HEAP32[$nearzero>>2] = 1;
  } else if ((($dim|0) == 3)) {
   $23 = ((($rows)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = +HEAPF64[$25>>3];
   $27 = HEAP32[$rows>>2]|0;
   $28 = ((($27)) + 8|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $26 - $29;
   $31 = ((($rows)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 16|0);
   $34 = +HEAPF64[$33>>3];
   $35 = ((($27)) + 16|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $34 - $36;
   $38 = $30 * $37;
   $39 = ((($24)) + 16|0);
   $40 = +HEAPF64[$39>>3];
   $41 = $40 - $36;
   $42 = ((($32)) + 8|0);
   $43 = +HEAPF64[$42>>3];
   $44 = $43 - $29;
   $45 = $41 * $44;
   $46 = $38 - $45;
   HEAPF64[$normal>>3] = $46;
   $47 = HEAP32[$31>>2]|0;
   $48 = +HEAPF64[$47>>3];
   $49 = HEAP32[$rows>>2]|0;
   $50 = +HEAPF64[$49>>3];
   $51 = $48 - $50;
   $52 = HEAP32[$23>>2]|0;
   $53 = ((($52)) + 16|0);
   $54 = +HEAPF64[$53>>3];
   $55 = ((($49)) + 16|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $54 - $56;
   $58 = $51 * $57;
   $59 = ((($47)) + 16|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $60 - $56;
   $62 = +HEAPF64[$52>>3];
   $63 = $62 - $50;
   $64 = $61 * $63;
   $65 = $58 - $64;
   $66 = ((($normal)) + 8|0);
   HEAPF64[$66>>3] = $65;
   $67 = HEAP32[$23>>2]|0;
   $68 = +HEAPF64[$67>>3];
   $69 = HEAP32[$rows>>2]|0;
   $70 = +HEAPF64[$69>>3];
   $71 = $68 - $70;
   $72 = HEAP32[$31>>2]|0;
   $73 = ((($72)) + 8|0);
   $74 = +HEAPF64[$73>>3];
   $75 = ((($69)) + 8|0);
   $76 = +HEAPF64[$75>>3];
   $77 = $74 - $76;
   $78 = $71 * $77;
   $79 = ((($67)) + 8|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $80 - $76;
   $82 = +HEAPF64[$72>>3];
   $83 = $82 - $70;
   $84 = $81 * $83;
   $85 = $78 - $84;
   $86 = ((($normal)) + 16|0);
   HEAPF64[$86>>3] = $85;
   _qh_normalize2($normal,$dim,$toporient,0,0);
   $87 = +HEAPF64[$point0>>3];
   $88 = +HEAPF64[$normal>>3];
   $89 = $87 * $88;
   $90 = ((($point0)) + 8|0);
   $91 = +HEAPF64[$90>>3];
   $92 = +HEAPF64[$66>>3];
   $93 = $91 * $92;
   $94 = $89 + $93;
   $95 = ((($point0)) + 16|0);
   $96 = +HEAPF64[$95>>3];
   $97 = +HEAPF64[$86>>3];
   $98 = $96 * $97;
   $99 = $94 + $98;
   $100 = -$99;
   HEAPF64[$offset>>3] = $100;
   $101 = +HEAPF64[(6952)>>3];
   $102 = -$101;
   $103 = ((($rows)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)==($point0|0);
   if ($105) {
    label = 4;
   } else {
    $109 = +HEAPF64[$offset>>3];
    $110 = +HEAPF64[$104>>3];
    $111 = +HEAPF64[$normal>>3];
    $112 = $110 * $111;
    $113 = ((($104)) + 8|0);
    $114 = +HEAPF64[$113>>3];
    $115 = +HEAPF64[$66>>3];
    $116 = $114 * $115;
    $117 = $112 + $116;
    $118 = ((($104)) + 16|0);
    $119 = +HEAPF64[$118>>3];
    $120 = +HEAPF64[$86>>3];
    $121 = $119 * $120;
    $122 = $117 + $121;
    $123 = $109 + $122;
    $124 = $123 > $101;
    $125 = $123 < $102;
    $or$cond = $124 | $125;
    if (!($or$cond)) {
     label = 4;
    }
   }
   do {
    if ((label|0) == 4) {
     $106 = ((($rows)) + 4|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($point0|0);
     if (!($108)) {
      $384 = +HEAPF64[$offset>>3];
      $385 = +HEAPF64[$107>>3];
      $386 = +HEAPF64[$normal>>3];
      $387 = $385 * $386;
      $388 = ((($107)) + 8|0);
      $389 = +HEAPF64[$388>>3];
      $390 = +HEAPF64[$66>>3];
      $391 = $389 * $390;
      $392 = $387 + $391;
      $393 = ((($107)) + 16|0);
      $394 = +HEAPF64[$393>>3];
      $395 = +HEAPF64[$86>>3];
      $396 = $394 * $395;
      $397 = $392 + $396;
      $398 = $384 + $397;
      $399 = $398 > $101;
      $400 = $398 < $102;
      $or$cond$1 = $399 | $400;
      if ($or$cond$1) {
       break;
      }
     }
     $401 = HEAP32[$rows>>2]|0;
     $402 = ($401|0)==($point0|0);
     if ($402) {
      label = 11;
      break L1;
     }
     $403 = +HEAPF64[$offset>>3];
     $404 = +HEAPF64[$401>>3];
     $405 = +HEAPF64[$normal>>3];
     $406 = $404 * $405;
     $407 = ((($401)) + 8|0);
     $408 = +HEAPF64[$407>>3];
     $409 = +HEAPF64[$66>>3];
     $410 = $408 * $409;
     $411 = $406 + $410;
     $412 = ((($401)) + 16|0);
     $413 = +HEAPF64[$412>>3];
     $414 = +HEAPF64[$86>>3];
     $415 = $413 * $414;
     $416 = $411 + $415;
     $417 = $403 + $416;
     $418 = $417 > $101;
     $419 = $417 < $102;
     $or$cond$2 = $418 | $419;
     if (!($or$cond$2)) {
      label = 11;
      break L1;
     }
    }
   } while(0);
   HEAP32[$nearzero>>2] = 1;
  } else if ((($dim|0) == 2)) {
   $0 = ((($rows)) + 4|0);
   $1 = HEAP32[$0>>2]|0;
   $2 = ((($1)) + 8|0);
   $3 = +HEAPF64[$2>>3];
   $4 = HEAP32[$rows>>2]|0;
   $5 = ((($4)) + 8|0);
   $6 = +HEAPF64[$5>>3];
   $7 = $3 - $6;
   HEAPF64[$normal>>3] = $7;
   $8 = HEAP32[$rows>>2]|0;
   $9 = +HEAPF64[$8>>3];
   $10 = HEAP32[$0>>2]|0;
   $11 = +HEAPF64[$10>>3];
   $12 = $9 - $11;
   $13 = ((($normal)) + 8|0);
   HEAPF64[$13>>3] = $12;
   _qh_normalize2($normal,$dim,$toporient,0,0);
   $14 = +HEAPF64[$point0>>3];
   $15 = +HEAPF64[$normal>>3];
   $16 = $14 * $15;
   $17 = ((($point0)) + 8|0);
   $18 = +HEAPF64[$17>>3];
   $19 = +HEAPF64[$13>>3];
   $20 = $18 * $19;
   $21 = $16 + $20;
   $22 = -$21;
   HEAPF64[$offset>>3] = $22;
   HEAP32[$nearzero>>2] = 0;
   STACKTOP = sp;return;
  } else {
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $$pr = HEAP32[$nearzero>>2]|0;
  $375 = ($$pr|0)==(0);
  if ($375) {
   STACKTOP = sp;return;
  }
 }
 $376 = HEAP32[(44256)>>2]|0;
 $377 = (($376) + 1)|0;
 HEAP32[(44256)>>2] = $377;
 $378 = HEAP32[(5344)>>2]|0;
 $379 = ($378|0)==(0);
 if (!($379)) {
  $380 = HEAP32[(7480)>>2]|0;
  $381 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $381;
  _qh_fprintf($380,3,1608,$vararg_buffer);
 }
 $382 = HEAP32[(44272)>>2]|0;
 $383 = (($382) + 1)|0;
 HEAP32[(44272)>>2] = $383;
 STACKTOP = sp;return;
}
function _qh_sethyperplane_gauss($dim,$rows,$point0,$toporient,$normal,$offset,$nearzero) {
 $dim = $dim|0;
 $rows = $rows|0;
 $point0 = $point0|0;
 $toporient = $toporient|0;
 $normal = $normal|0;
 $offset = $offset|0;
 $nearzero = $nearzero|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $k$14 = 0, $nearzero2 = 0, $normal$pn = 0, $normalcoef$05 = 0, $point0$pn = 0, $pointcoord$06 = 0, $sign = 0, $storemerge3 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $sign = sp + 16|0;
 $nearzero2 = sp + 12|0;
 HEAP32[$sign>>2] = $toporient;
 HEAP32[$nearzero2>>2] = 0;
 $0 = (($dim) + -1)|0;
 _qh_gausselim($rows,$0,$dim,$sign,$nearzero);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (($dim) + -2)|0;
  $4 = $2;
  while(1) {
   $3 = (($rows) + ($4<<2)|0);
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + ($4<<3)|0);
   $7 = +HEAPF64[$6>>3];
   $8 = $7 < 0.0;
   if ($8) {
    $9 = HEAP32[$sign>>2]|0;
    $10 = $9 ^ 1;
    HEAP32[$sign>>2] = $10;
   }
   $11 = (($4) + -1)|0;
   $12 = ($4|0)==(0);
   if ($12) {
    break;
   } else {
    $4 = $11;
   }
  }
 }
 $13 = HEAP32[$nearzero>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $22 = HEAP32[$sign>>2]|0;
  _qh_backnormal($rows,$0,$dim,$22,$normal,$nearzero2);
  $23 = HEAP32[$nearzero2>>2]|0;
  $24 = ($23|0)==(0);
  if (!($24)) {
   $25 = HEAP32[(44272)>>2]|0;
   $26 = (($25) + 1)|0;
   HEAP32[(44272)>>2] = $26;
   $27 = HEAP32[(5344)>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    label = 13;
   } else {
    $29 = HEAP32[(7480)>>2]|0;
    $30 = HEAP32[(7596)>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $30;
    _qh_fprintf($29,5,1752,$vararg_buffer1);
    label = 13;
   }
  }
 } else {
  $15 = HEAP32[(44272)>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[(44272)>>2] = $16;
  $17 = HEAP32[(5344)>>2]|0;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = HEAP32[(7480)>>2]|0;
   $20 = HEAP32[(7596)>>2]|0;
   HEAP32[$vararg_buffer>>2] = $20;
   _qh_fprintf($19,4,1664,$vararg_buffer);
  }
  $21 = HEAP32[$sign>>2]|0;
  _qh_backnormal($rows,$0,$dim,$21,$normal,$nearzero2);
  label = 13;
 }
 if ((label|0) == 13) {
  $$pr = HEAP32[$nearzero2>>2]|0;
  $31 = ($$pr|0)==(0);
  if (!($31)) {
   HEAP32[$nearzero>>2] = 1;
  }
 }
 _qh_normalize2($normal,$dim,1,0,0);
 $32 = +HEAPF64[$point0>>3];
 $33 = +HEAPF64[$normal>>3];
 $34 = $32 * $33;
 $35 = -$34;
 HEAPF64[$offset>>3] = $35;
 $36 = ($0|0)==(0);
 if ($36) {
  STACKTOP = sp;return;
 } else {
  $k$14 = $0;$normal$pn = $normal;$point0$pn = $point0;$storemerge3 = $35;
 }
 while(1) {
  $normalcoef$05 = ((($normal$pn)) + 8|0);
  $pointcoord$06 = ((($point0$pn)) + 8|0);
  $37 = (($k$14) + -1)|0;
  $38 = +HEAPF64[$pointcoord$06>>3];
  $39 = +HEAPF64[$normalcoef$05>>3];
  $40 = $38 * $39;
  $41 = $storemerge3 - $40;
  HEAPF64[$offset>>3] = $41;
  $42 = ($37|0)==(0);
  if ($42) {
   break;
  } else {
   $k$14 = $37;$normal$pn = $normalcoef$05;$point0$pn = $pointcoord$06;$storemerge3 = $41;
  }
 }
 STACKTOP = sp;return;
}
function _qh_copypoints($points,$numpoints,$dimension) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dimension = $dimension|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $numpoints << 3;
 $1 = Math_imul($0, $dimension)|0;
 $2 = (_qh_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $numpoints;
  _qh_fprintf($4,6004,1848,$vararg_buffer);
  _qh_errexit(4,0,0);
  // unreachable;
 } else {
  _memcpy(($2|0),($points|0),($1|0))|0;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _qh_crossproduct($dim,$vecA,$vecB,$vecC) {
 $dim = $dim|0;
 $vecA = $vecA|0;
 $vecB = $vecB|0;
 $vecC = $vecC|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)==(3);
 if (!($0)) {
  return;
 }
 $1 = ((($vecA)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 $3 = ((($vecB)) + 16|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $2 * $4;
 $6 = ((($vecA)) + 16|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($vecB)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $11 = $5 - $10;
 HEAPF64[$vecC>>3] = $11;
 $12 = +HEAPF64[$vecA>>3];
 $13 = +HEAPF64[$3>>3];
 $14 = $12 * $13;
 $15 = +HEAPF64[$6>>3];
 $16 = +HEAPF64[$vecB>>3];
 $17 = $15 * $16;
 $18 = $14 - $17;
 $19 = -$18;
 $20 = ((($vecC)) + 8|0);
 HEAPF64[$20>>3] = $19;
 $21 = +HEAPF64[$vecA>>3];
 $22 = +HEAPF64[$8>>3];
 $23 = $21 * $22;
 $24 = +HEAPF64[$1>>3];
 $25 = +HEAPF64[$vecB>>3];
 $26 = $24 * $25;
 $27 = $23 - $26;
 $28 = ((($vecC)) + 16|0);
 HEAPF64[$28>>3] = $27;
 return;
}
function _qh_determinant($rows,$dim,$nearzero) {
 $rows = $rows|0;
 $dim = $dim|0;
 $nearzero = $nearzero|0;
 var $$in = 0, $$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $8 = 0.0, $9 = 0, $det$0$ = 0.0, $det$01 = 0.0, $det$1 = 0.0, $sign = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $sign = sp + 4|0;
 HEAP32[$sign>>2] = 0;
 HEAP32[$nearzero>>2] = 0;
 $0 = ($dim|0)<(2);
 if ($0) {
  $1 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($1,6005,1904,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 if ((($dim|0) == 3)) {
  $21 = HEAP32[$rows>>2]|0;
  $22 = +HEAPF64[$21>>3];
  $23 = ((($rows)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 8|0);
  $26 = +HEAPF64[$25>>3];
  $27 = ((($rows)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 16|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $26 * $30;
  $32 = ((($24)) + 16|0);
  $33 = +HEAPF64[$32>>3];
  $34 = ((($28)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $33 * $35;
  $37 = $31 - $36;
  $38 = $22 * $37;
  $39 = +HEAPF64[$24>>3];
  $40 = ((($21)) + 8|0);
  $41 = +HEAPF64[$40>>3];
  $42 = $30 * $41;
  $43 = ((($21)) + 16|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $35 * $44;
  $46 = $42 - $45;
  $47 = $39 * $46;
  $48 = $38 - $47;
  $49 = +HEAPF64[$28>>3];
  $50 = $33 * $41;
  $51 = $26 * $44;
  $52 = $50 - $51;
  $53 = $49 * $52;
  $54 = $53 + $48;
  $55 = $54 < 0.0;
  $56 = -$54;
  $57 = $55 ? $56 : $54;
  $58 = HEAP32[(7036)>>2]|0;
  $59 = ((($58)) + 16|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $57 < $60;
  if (!($61)) {
   $det$1 = $54;
   STACKTOP = sp;return (+$det$1);
  }
  HEAP32[$nearzero>>2] = 1;
  $det$1 = $54;
  STACKTOP = sp;return (+$det$1);
 } else if ((($dim|0) == 2)) {
  $2 = HEAP32[$rows>>2]|0;
  $3 = +HEAPF64[$2>>3];
  $4 = ((($rows)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = +HEAPF64[$6>>3];
  $8 = $3 * $7;
  $9 = ((($2)) + 8|0);
  $10 = +HEAPF64[$9>>3];
  $11 = +HEAPF64[$5>>3];
  $12 = $10 * $11;
  $13 = $8 - $12;
  $14 = $13 < 0.0;
  $15 = -$13;
  $16 = $14 ? $15 : $13;
  $17 = HEAP32[(7036)>>2]|0;
  $18 = ((($17)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $16 < $19;
  if (!($20)) {
   $det$1 = $13;
   STACKTOP = sp;return (+$det$1);
  }
  HEAP32[$nearzero>>2] = 1;
  $det$1 = $13;
  STACKTOP = sp;return (+$det$1);
 } else {
  _qh_gausselim($rows,$dim,$dim,$sign,$nearzero);
  $$in = $dim;$det$01 = 1.0;
  while(1) {
   $62 = (($$in) + -1)|0;
   $63 = (($rows) + ($62<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($62<<3)|0);
   $66 = +HEAPF64[$65>>3];
   $67 = $det$01 * $66;
   $68 = ($62|0)==(0);
   if ($68) {
    $$lcssa = $67;
    break;
   } else {
    $$in = $62;$det$01 = $67;
   }
  }
  $69 = HEAP32[$sign>>2]|0;
  $70 = ($69|0)==(0);
  $71 = -$$lcssa;
  $det$0$ = $70 ? $$lcssa : $71;
  STACKTOP = sp;return (+$det$0$);
 }
 return +(0.0);
}
function _qh_distround($dimension,$maxabs,$maxsumabs) {
 $dimension = $dimension|0;
 $maxabs = +$maxabs;
 $maxsumabs = +$maxsumabs;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $maxdistsum$0 = 0.0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (+($dimension|0));
 $1 = (+Math_sqrt((+$0)));
 $2 = $1 * $maxabs;
 $3 = $2 > $maxsumabs;
 $maxdistsum$0 = $3 ? $maxsumabs : $2;
 $4 = $0 * $maxdistsum$0;
 $5 = $4 * 1.01;
 $6 = $5 + $maxabs;
 $7 = $6 * 2.2204460492503131E-16;
 $8 = HEAP32[(5344)>>2]|0;
 $9 = ($8|0)>(3);
 if (!($9)) {
  STACKTOP = sp;return (+$7);
 }
 $10 = HEAP32[(7480)>>2]|0;
 HEAPF64[$vararg_buffer>>3] = $7;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $maxabs;
 $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr2>>3] = $maxsumabs;
 $vararg_ptr3 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr3>>3] = $maxdistsum$0;
 _qh_fprintf($10,4008,1984,$vararg_buffer);
 STACKTOP = sp;return (+$7);
}
function _qh_detroundoff() {
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $maxangle$0 = 0.0, $maxangle$1 = 0.0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 _qh_option(2056,0,(6984));
 $0 = HEAP32[(5716)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[(5828)>>2]|0;
  $3 = +HEAPF64[(6960)>>3];
  $4 = +HEAPF64[(6976)>>3];
  $5 = (+_qh_distround($2,$3,$4));
  HEAPF64[(6952)>>3] = $5;
  $6 = HEAP32[(5656)>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = +HEAPF64[(5664)>>3];
   $9 = +HEAPF64[(6960)>>3];
   $10 = $8 * $9;
   $11 = $5 + $10;
   HEAPF64[(6952)>>3] = $11;
  }
  _qh_option(2072,0,(6952));
 }
 $12 = +HEAPF64[(6992)>>3];
 $13 = +HEAPF64[(6960)>>3];
 $14 = $12 * $13;
 HEAPF64[(7000)>>3] = $14;
 $15 = +HEAPF64[(6992)>>3];
 $16 = HEAP32[(5828)>>2]|0;
 $17 = (+($16|0));
 $18 = $15 * $17;
 $19 = (+Math_sqrt((+$18)));
 HEAPF64[(7008)>>3] = $19;
 $20 = +HEAPF64[(6960)>>3];
 $21 = $19 * $20;
 HEAPF64[(7016)>>3] = $21;
 $22 = HEAP32[(5828)>>2]|0;
 $23 = (+($22|0));
 $24 = $23 * 1.01;
 $25 = $24 * 2.2204460492503131E-16;
 HEAPF64[(6928)>>3] = $25;
 $26 = HEAP32[(5656)>>2]|0;
 $27 = ($26|0)==(0);
 if (!($27)) {
  $28 = +HEAPF64[(5664)>>3];
  $29 = $25 + $28;
  HEAPF64[(6928)>>3] = $29;
 }
 $30 = +HEAPF64[(5288)>>3];
 $31 = $30 < 8.9884656743115785E+307;
 if ($31) {
  $32 = +HEAPF64[(6928)>>3];
  $33 = $30 - $32;
  HEAPF64[(5288)>>3] = $33;
  $34 = HEAP32[(5656)>>2]|0;
  $35 = ($34|0)==(0);
  if (!($35)) {
   _qh_option(2088,0,(5288));
  }
 }
 $36 = +HEAPF64[(5296)>>3];
 $37 = $36 < 8.9884656743115785E+307;
 if ($37) {
  $38 = +HEAPF64[(6928)>>3];
  $39 = $36 - $38;
  HEAPF64[(5296)>>3] = $39;
  $40 = HEAP32[(5656)>>2]|0;
  $41 = ($40|0)==(0);
  if (!($41)) {
   _qh_option(2120,0,(5296));
  }
 }
 $42 = +HEAPF64[(6952)>>3];
 $43 = $42 * 2.0;
 $44 = +HEAPF64[(5400)>>3];
 $45 = $44 + $43;
 HEAPF64[(5400)>>3] = $45;
 $46 = +HEAPF64[(6952)>>3];
 $47 = $46 * 2.0;
 $48 = +HEAPF64[(5408)>>3];
 $49 = $48 + $47;
 HEAPF64[(5408)>>3] = $49;
 $50 = HEAP32[(5656)>>2]|0;
 $51 = ($50|0)==(0);
 if (!($51)) {
  $52 = HEAP32[(5384)>>2]|0;
  $53 = HEAP32[(5460)>>2]|0;
  $54 = $53 | $52;
  $55 = ($54|0)==(0);
  if (!($55)) {
   _qh_option(2152,0,(5400));
  }
 }
 $56 = HEAP32[(5656)>>2]|0;
 $57 = ($56|0)!=(0);
 $58 = HEAP32[(5456)>>2]|0;
 $59 = ($58|0)!=(0);
 $or$cond3 = $57 & $59;
 if ($or$cond3) {
  _qh_option(2184,0,(5408));
 }
 $60 = +HEAPF64[(5288)>>3];
 $61 = $60 < 1.0;
 $maxangle$0 = $61 ? $60 : 1.0;
 $62 = +HEAPF64[(5296)>>3];
 $63 = $maxangle$0 > $62;
 $maxangle$1 = $63 ? $62 : $maxangle$0;
 $64 = HEAP32[(5828)>>2]|0;
 $65 = (+($64|0));
 $66 = (+Math_sqrt((+$65)));
 $67 = +HEAPF64[(6984)>>3];
 $68 = $66 * $67;
 $69 = $maxangle$1 * $maxangle$1;
 $70 = 1.0 - $69;
 $71 = (+Math_sqrt((+$70)));
 $72 = $68 * $71;
 $73 = +HEAPF64[(6952)>>3];
 $74 = $72 + $73;
 HEAPF64[(7048)>>3] = $74;
 $75 = HEAP32[(5828)>>2]|0;
 $76 = (+($75|0));
 $77 = +HEAPF64[(5400)>>3];
 $78 = $76 * $77;
 $79 = +HEAPF64[(6952)>>3];
 $80 = $78 + $79;
 $81 = $74 < $80;
 if ($81) {
  HEAPF64[(7048)>>3] = $80;
 }
 $82 = HEAP32[(5828)>>2]|0;
 $83 = (+($82|0));
 $84 = +HEAPF64[(5408)>>3];
 $85 = $83 * $84;
 $86 = +HEAPF64[(6952)>>3];
 $87 = $85 + $86;
 $88 = +HEAPF64[(7048)>>3];
 $89 = $88 < $87;
 if ($89) {
  HEAPF64[(7048)>>3] = $87;
 }
 $90 = HEAP32[(5392)>>2]|0;
 $91 = ($90|0)==(0);
 if (!($91)) {
  _qh_option(2216,0,(7048));
 }
 $92 = +HEAPF64[(7048)>>3];
 $93 = $92 * 5.0;
 HEAPF64[(7040)>>3] = $93;
 $94 = +HEAPF64[(7616)>>3];
 $95 = $94 < 8.9884656743115785E+307;
 if ($95) {
  $96 = HEAP32[(5352)>>2]|0;
  $97 = HEAP32[(5356)>>2]|0;
  $98 = $97 | $96;
  $99 = ($98|0)==(0);
  if (!($99)) {
   HEAP32[(5824)>>2] = 1;
   $100 = HEAP32[(5828)>>2]|0;
   $101 = (+($100|0));
   $102 = (+Math_sqrt((+$101)));
   $103 = +HEAPF64[(7616)>>3];
   $104 = $102 * $103;
   $105 = +HEAPF64[(6952)>>3];
   $106 = $104 + $105;
   $107 = $106 * 2.0;
   $108 = +HEAPF64[(7040)>>3];
   $109 = $108 < $107;
   if ($109) {
    HEAPF64[(7040)>>3] = $107;
   }
  }
 }
 $110 = HEAP32[(5824)>>2]|0;
 $111 = ($110|0)==(0);
 if (!($111)) {
  _qh_option(2232,0,(7040));
 }
 $112 = +HEAPF64[(7616)>>3];
 $113 = +HEAPF64[(6952)>>3];
 $114 = $112 < $113;
 if ($114) {
  $115 = HEAP32[(7480)>>2]|0;
  HEAPF64[$vararg_buffer>>3] = $112;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $113;
  _qh_fprintf($115,6006,2248,$vararg_buffer);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $116 = +HEAPF64[(5424)>>3];
 $117 = $116 > 8.9884656743115785E+307;
 if ($117) {
  $118 = HEAP32[(5392)>>2]|0;
  $119 = ($118|0)==(0);
  do {
   if ($119) {
    $120 = +HEAPF64[(6952)>>3];
    HEAPF64[(5424)>>3] = $120;
   } else {
    $121 = HEAP32[(5828)>>2]|0;
    $122 = ($121|0)<(4);
    $123 = +HEAPF64[(5400)>>3];
    if ($122) {
     HEAPF64[(5424)>>3] = $123;
     break;
    } else {
     $124 = $123 * 3.0;
     HEAPF64[(5424)>>3] = $124;
     break;
    }
   }
  } while(0);
  $125 = HEAP32[(5240)>>2]|0;
  $126 = ($125|0)==(0);
  if (!($126)) {
   $127 = +HEAPF64[(5424)>>3];
   $128 = +HEAPF64[(5248)>>3];
   $129 = $127 > $128;
   if ($129) {
    HEAPF64[(5424)>>3] = $128;
   }
  }
  _qh_option(2344,0,(5424));
 }
 $130 = +HEAPF64[(5376)>>3];
 $131 = $130 > 8.9884656743115785E+307;
 if ($131) {
  $132 = +HEAPF64[(5424)>>3];
  HEAPF64[(5376)>>3] = $132;
  _qh_option(2368,0,(5376));
 }
 $133 = HEAP32[(5240)>>2]|0;
 $134 = ($133|0)==(0);
 if ($134) {
  $135 = +HEAPF64[(5424)>>3];
  $136 = $135 * 2.0;
  HEAPF64[(5248)>>3] = $136;
  $137 = +HEAPF64[(5288)>>3];
  $138 = $137 < 8.9884656743115785E+307;
  if ($138) {
   $139 = 1.0 - $137;
   $140 = +HEAPF64[(6960)>>3];
   $141 = $139 * $140;
   $142 = $136 < $141;
   if ($142) {
    HEAPF64[(5248)>>3] = $141;
   }
  }
  _qh_option(2392,0,(5248));
 }
 $143 = +HEAPF64[(5248)>>3];
 HEAPF64[(7064)>>3] = $143;
 $144 = +HEAPF64[(5376)>>3];
 $145 = $144 * 6.0;
 $146 = $143 < $145;
 if ($146) {
  HEAPF64[(7064)>>3] = $145;
 }
 $147 = +HEAPF64[(7064)>>3];
 $148 = +HEAPF64[(5424)>>3];
 $149 = $148 * 6.0;
 $150 = $147 < $149;
 if ($150) {
  HEAPF64[(7064)>>3] = $149;
 }
 _qh_option(2408,0,(7064));
 $151 = +HEAPF64[(5424)>>3];
 $152 = +HEAPF64[(5248)>>3];
 $153 = $152 + 6.6613381477509392E-16;
 $154 = !($151 > $153);
 $155 = HEAP32[(5268)>>2]|0;
 $156 = HEAP32[(5316)>>2]|0;
 $157 = $156 | $155;
 $158 = ($157|0)!=(0);
 $159 = $154 | $158;
 if ($159) {
  $161 = +HEAPF64[(6952)>>3];
  HEAPF64[(7640)>>3] = $161;
  $162 = +HEAPF64[(6952)>>3];
  $163 = -$162;
  HEAPF64[(7648)>>3] = $163;
  STACKTOP = sp;return;
 }
 $160 = HEAP32[(7480)>>2]|0;
 HEAPF64[$vararg_buffer2>>3] = $151;
 $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
 HEAPF64[$vararg_ptr5>>3] = $152;
 _qh_fprintf($160,7001,2424,$vararg_buffer2);
 $161 = +HEAPF64[(6952)>>3];
 HEAPF64[(7640)>>3] = $161;
 $162 = +HEAPF64[(6952)>>3];
 $163 = -$162;
 HEAPF64[(7648)>>3] = $163;
 STACKTOP = sp;return;
}
function _qh_detsimplex($apex,$points,$dim,$nearzero) {
 $apex = $apex|0;
 $points = $points|0;
 $dim = $dim|0;
 $nearzero = $nearzero|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coorda$05 = 0, $coordp$03 = 0, $gmcoord$07 = 0, $gmcoord$1$lcssa = 0, $gmcoord$12 = 0;
 var $i$08 = 0, $i$1 = 0, $k$04 = 0, $or$cond = 0, $or$cond6 = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(43584)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(43584)>>2] = $1;
 $2 = HEAP32[(7760)>>2]|0;
 $3 = ($points|0)==(0|0);
 if ($3) {
  $i$1 = 0;
 } else {
  $4 = ((($points)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = ($dim|0)==(0);
  $or$cond6 = $7 | $6;
  if ($or$cond6) {
   $i$1 = 0;
  } else {
   $8 = ((($4)) + 4|0);
   $9 = HEAP32[(7756)>>2]|0;
   $10 = ($dim|0)==(0);
   $12 = $8;$34 = $5;$gmcoord$07 = $9;$i$08 = 0;
   while(1) {
    $15 = (($i$08) + 1)|0;
    $17 = (($2) + ($i$08<<2)|0);
    HEAP32[$17>>2] = $gmcoord$07;
    if ($10) {
     $gmcoord$1$lcssa = $gmcoord$07;
    } else {
     $coorda$05 = $apex;$coordp$03 = $34;$gmcoord$12 = $gmcoord$07;$k$04 = $dim;
     while(1) {
      $18 = (($k$04) + -1)|0;
      $19 = ((($coordp$03)) + 8|0);
      $20 = +HEAPF64[$coordp$03>>3];
      $21 = ((($coorda$05)) + 8|0);
      $22 = +HEAPF64[$coorda$05>>3];
      $23 = $20 - $22;
      $24 = ((($gmcoord$12)) + 8|0);
      HEAPF64[$gmcoord$12>>3] = $23;
      $25 = ($18|0)==(0);
      if ($25) {
       break;
      } else {
       $coorda$05 = $21;$coordp$03 = $19;$gmcoord$12 = $24;$k$04 = $18;
      }
     }
     $scevgep = (($gmcoord$07) + ($dim<<3)|0);
     $gmcoord$1$lcssa = $scevgep;
    }
    $11 = ((($12)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    $16 = ($15|0)==($dim|0);
    $or$cond = $16 | $14;
    if ($or$cond) {
     $i$1 = $15;
     break;
    } else {
     $12 = $11;$34 = $13;$gmcoord$07 = $gmcoord$1$lcssa;$i$08 = $15;
    }
   }
  }
 }
 $26 = ($i$1|0)<($dim|0);
 if ($26) {
  $27 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $i$1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $dim;
  _qh_fprintf($27,6007,2544,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $28 = (+_qh_determinant($2,$dim,$nearzero));
 $29 = HEAP32[(5344)>>2]|0;
 $30 = ($29|0)>(1);
 if (!($30)) {
  STACKTOP = sp;return (+$28);
 }
 $31 = HEAP32[(7480)>>2]|0;
 $32 = (_qh_pointid($apex)|0);
 $33 = HEAP32[$nearzero>>2]|0;
 HEAPF64[$vararg_buffer2>>3] = $28;
 $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $32;
 $vararg_ptr6 = ((($vararg_buffer2)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $dim;
 $vararg_ptr7 = ((($vararg_buffer2)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $33;
 _qh_fprintf($31,2002,2616,$vararg_buffer2);
 STACKTOP = sp;return (+$28);
}
function _qh_distnorm($dim,$point,$normal,$offsetp) {
 $dim = $dim|0;
 $point = $point|0;
 $normal = $normal|0;
 $offsetp = $offsetp|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $coordp$02 = 0, $dist$0$lcssa = 0.0, $dist$03 = 0.0, $k$04 = 0, $normalp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$offsetp>>3];
 $1 = ($dim|0)==(0);
 if ($1) {
  $dist$0$lcssa = $0;
  return (+$dist$0$lcssa);
 } else {
  $coordp$02 = $point;$dist$03 = $0;$k$04 = $dim;$normalp$01 = $normal;
 }
 while(1) {
  $2 = (($k$04) + -1)|0;
  $3 = ((($coordp$02)) + 8|0);
  $4 = +HEAPF64[$coordp$02>>3];
  $5 = ((($normalp$01)) + 8|0);
  $6 = +HEAPF64[$normalp$01>>3];
  $7 = $4 * $6;
  $8 = $dist$03 + $7;
  $9 = ($2|0)==(0);
  if ($9) {
   $dist$0$lcssa = $8;
   break;
  } else {
   $coordp$02 = $3;$dist$03 = $8;$k$04 = $2;$normalp$01 = $5;
  }
 }
 return (+$dist$0$lcssa);
}
function _qh_divzero($numer,$denom,$mindenom1,$zerodiv) {
 $numer = +$numer;
 $denom = +$denom;
 $mindenom1 = +$mindenom1;
 $zerodiv = $zerodiv|0;
 var $$0 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $numer < $mindenom1;
 $1 = -$mindenom1;
 $2 = $numer > $1;
 $or$cond = $0 & $2;
 if ($or$cond) {
  $3 = $numer < 0.0;
  $4 = -$numer;
  $5 = $3 ? $4 : $numer;
  $6 = $denom < 0.0;
  $7 = -$denom;
  $8 = $6 ? $7 : $denom;
  $9 = $5 < $8;
  if ($9) {
   HEAP32[$zerodiv>>2] = 0;
   $10 = $numer / $denom;
   $$0 = $10;
   return (+$$0);
  } else {
   HEAP32[$zerodiv>>2] = 1;
   $$0 = 0.0;
   return (+$$0);
  }
 } else {
  $11 = $denom / $numer;
  $12 = $11 > $mindenom1;
  $13 = $11 < $1;
  $or$cond3 = $12 | $13;
  if ($or$cond3) {
   HEAP32[$zerodiv>>2] = 0;
   $14 = $numer / $denom;
   $$0 = $14;
   return (+$$0);
  } else {
   HEAP32[$zerodiv>>2] = 1;
   $$0 = 0.0;
   return (+$$0);
  }
 }
 return +(0.0);
}
function _qh_facetarea($facet) {
 $facet = $facet|0;
 var $$area$2 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $area$02 = 0.0, $area$1 = 0.0;
 var $area$2 = 0.0, $centrum$0 = 0, $or$cond = 0, $ridgep$03 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($facet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 8192;
 $3 = ($2|0)==(0);
 if ($3) {
  $17 = HEAP32[(7592)>>2]|0;
  $18 = ($17|0)==(2);
  if ($18) {
   $19 = ((($facet)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $centrum$0 = $20;
  } else {
   $21 = (_qh_getcentrum($facet)|0);
   $centrum$0 = $21;
  }
  $22 = ((($facet)) + 56|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $area$1 = 0.0;
  } else {
   $25 = ((($23)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $area$1 = 0.0;
   } else {
    $28 = ((($facet)) + 24|0);
    $29 = ((($facet)) + 16|0);
    $33 = $26;$area$02 = 0.0;$ridgep$03 = $25;
    while(1) {
     $30 = ((($ridgep$03)) + 4|0);
     $31 = HEAP32[(5828)>>2]|0;
     $32 = HEAP32[$33>>2]|0;
     $34 = ((($33)) + 4|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==($facet|0);
     $37 = $36&1;
     $38 = HEAP32[$28>>2]|0;
     $39 = (+_qh_facetarea_simplex($31,$centrum$0,$32,0,$37,$38,$29));
     $40 = $area$02 + $39;
     $41 = HEAP32[$30>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      $area$1 = $40;
      break;
     } else {
      $33 = $41;$area$02 = $40;$ridgep$03 = $30;
     }
    }
   }
  }
  $43 = HEAP32[(7592)>>2]|0;
  $44 = ($43|0)==(2);
  if ($44) {
   $area$2 = $area$1;
  } else {
   $45 = HEAP32[(7488)>>2]|0;
   _qh_memfree($centrum$0,$45);
   $area$2 = $area$1;
  }
 } else {
  $4 = ((($facet)) + 52|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[(5828)>>2]|0;
  $9 = ((($7)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1 >>> 12;
  $12 = $11 & 1;
  $13 = ((($facet)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($facet)) + 16|0);
  $16 = (+_qh_facetarea_simplex($8,$10,$5,$7,$12,$14,$15));
  $area$2 = $16;
 }
 $46 = HEAP32[$0>>2]|0;
 $47 = $46 & 131072;
 $48 = ($47|0)!=(0);
 $49 = HEAP32[(5304)>>2]|0;
 $50 = ($49|0)!=(0);
 $or$cond = $48 & $50;
 $51 = -$area$2;
 $$area$2 = $or$cond ? $51 : $area$2;
 $52 = HEAP32[(5344)>>2]|0;
 $53 = ($52|0)>(3);
 if (!($53)) {
  STACKTOP = sp;return (+$$area$2);
 }
 $54 = HEAP32[(7480)>>2]|0;
 $55 = ((($facet)) + 76|0);
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$vararg_buffer>>2] = $56;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $$area$2;
 _qh_fprintf($54,4009,2680,$vararg_buffer);
 STACKTOP = sp;return (+$$area$2);
}
function _qh_facetarea_simplex($dim,$apex,$vertices,$notvertex,$toporient,$normal,$offset) {
 $dim = $dim|0;
 $apex = $apex|0;
 $vertices = $vertices|0;
 $notvertex = $notvertex|0;
 $toporient = $toporient|0;
 $normal = $normal|0;
 $offset = $offset|0;
 var $$ = 0.0, $$0 = 0.0, $$lcssa106 = 0, $$lcssa106$lcssa = 0, $$lcssa106$lcssa108 = 0, $$lcssa106109 = 0, $$lcssa110 = 0, $$lcssa114 = 0, $$lcssa116 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0.0, $coorda$019 = 0, $coorda$132 = 0;
 var $coordp$020 = 0, $coordp$124 = 0, $coordp$233 = 0, $dist$0$lcssa = 0.0, $dist$0$lcssa$lcssa123 = 0.0, $dist$027 = 0.0, $exitcond = 0, $gmcoord$0$ph$ph = 0, $gmcoord$121 = 0, $gmcoord$234 = 0, $gmcoord$3 = 0, $gmcoord$511 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $i$217 = 0, $k$022 = 0, $k$126 = 0, $k$236 = 0, $k$413 = 0;
 var $nearzero = 0, $normalp$025 = 0, $normalp$135 = 0, $normalp$212 = 0, $scevgep48 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vertexp$0 = 0, $vertexp$0$ph = 0, $vertexp$0$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $nearzero = sp + 32|0;
 $0 = HEAP32[(7756)>>2]|0;
 $1 = HEAP32[(7760)>>2]|0;
 $2 = ($vertices|0)==(0|0);
 L1: do {
  if ($2) {
   $gmcoord$3 = $0;$i$1 = 0;
  } else {
   $3 = ((($vertices)) + 4|0);
   $4 = ($notvertex|0)==(0|0);
   $5 = ($dim|0)==(0);
   $6 = ($dim|0)==(0);
   $7 = ($dim|0)==(0);
   $gmcoord$0$ph$ph = $0;$i$0$ph$ph = 0;$vertexp$0$ph$ph = $3;
   L3: while(1) {
    $8 = +HEAPF64[(7064)>>3];
    $9 = -$8;
    $i$0$ph = $i$0$ph$ph;$vertexp$0$ph = $vertexp$0$ph$ph;
    while(1) {
     $vertexp$0 = $vertexp$0$ph;
     while(1) {
      $10 = ((($vertexp$0)) + 4|0);
      $11 = HEAP32[$vertexp$0>>2]|0;
      $12 = ($11|0)==(0|0);
      if ($12) {
       $gmcoord$3 = $gmcoord$0$ph$ph;$i$1 = $i$0$ph;
       break L1;
      }
      $13 = ($11|0)==($notvertex|0);
      if ($13) {
       $vertexp$0 = $10;
      } else {
       $$lcssa106 = $10;$$lcssa110 = $11;
       break;
      }
     }
     $14 = (($i$0$ph) + 1)|0;
     $15 = (($1) + ($i$0$ph<<2)|0);
     HEAP32[$15>>2] = $gmcoord$0$ph$ph;
     $16 = ((($$lcssa110)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     if (!($4)) {
      if ($7) {
       $i$0$ph = $14;$vertexp$0$ph = $$lcssa106;
       continue;
      } else {
       $$lcssa106$lcssa = $$lcssa106;$$lcssa114 = $14;$$lcssa120 = $17;
       label = 10;
       break;
      }
     }
     $26 = +HEAPF64[$offset>>3];
     if ($5) {
      $dist$0$lcssa = $26;
     } else {
      $coordp$124 = $17;$dist$027 = $26;$k$126 = $dim;$normalp$025 = $normal;
      while(1) {
       $27 = (($k$126) + -1)|0;
       $28 = ((($coordp$124)) + 8|0);
       $29 = +HEAPF64[$coordp$124>>3];
       $30 = ((($normalp$025)) + 8|0);
       $31 = +HEAPF64[$normalp$025>>3];
       $32 = $29 * $31;
       $33 = $dist$027 + $32;
       $34 = ($27|0)==(0);
       if ($34) {
        $dist$0$lcssa = $33;
        break;
       } else {
        $coordp$124 = $28;$dist$027 = $33;$k$126 = $27;$normalp$025 = $30;
       }
      }
     }
     $35 = $dist$0$lcssa < $9;
     if ($35) {
      break L3;
     }
     if ($6) {
      $i$0$ph = $14;$vertexp$0$ph = $$lcssa106;
     } else {
      $$lcssa106$lcssa108 = $$lcssa106;$$lcssa116 = $14;$$lcssa119 = $16;$dist$0$lcssa$lcssa123 = $dist$0$lcssa;
      label = 17;
      break;
     }
    }
    if ((label|0) == 10) {
     label = 0;
     $coorda$019 = $apex;$coordp$020 = $$lcssa120;$gmcoord$121 = $gmcoord$0$ph$ph;$k$022 = $dim;
     while(1) {
      $18 = (($k$022) + -1)|0;
      $19 = ((($coordp$020)) + 8|0);
      $20 = +HEAPF64[$coordp$020>>3];
      $21 = ((($coorda$019)) + 8|0);
      $22 = +HEAPF64[$coorda$019>>3];
      $23 = $20 - $22;
      $24 = ((($gmcoord$121)) + 8|0);
      HEAPF64[$gmcoord$121>>3] = $23;
      $25 = ($18|0)==(0);
      if ($25) {
       $$lcssa106109 = $$lcssa106$lcssa;$86 = $$lcssa114;
       break;
      } else {
       $coorda$019 = $21;$coordp$020 = $19;$gmcoord$121 = $24;$k$022 = $18;
      }
     }
    }
    else if ((label|0) == 17) {
     label = 0;
     $38 = HEAP32[$$lcssa119>>2]|0;
     $coorda$132 = $apex;$coordp$233 = $38;$gmcoord$234 = $gmcoord$0$ph$ph;$k$236 = $dim;$normalp$135 = $normal;
     while(1) {
      $39 = (($k$236) + -1)|0;
      $40 = ((($coordp$233)) + 8|0);
      $41 = +HEAPF64[$coordp$233>>3];
      $42 = ((($normalp$135)) + 8|0);
      $43 = +HEAPF64[$normalp$135>>3];
      $44 = $dist$0$lcssa$lcssa123 * $43;
      $45 = $41 - $44;
      $46 = ((($coorda$132)) + 8|0);
      $47 = +HEAPF64[$coorda$132>>3];
      $48 = $45 - $47;
      $49 = ((($gmcoord$234)) + 8|0);
      HEAPF64[$gmcoord$234>>3] = $48;
      $50 = ($39|0)==(0);
      if ($50) {
       $$lcssa106109 = $$lcssa106$lcssa108;$86 = $$lcssa116;
       break;
      } else {
       $coorda$132 = $46;$coordp$233 = $40;$gmcoord$234 = $49;$k$236 = $39;$normalp$135 = $42;
      }
     }
    }
    $scevgep48 = (($gmcoord$0$ph$ph) + ($dim<<3)|0);
    $gmcoord$0$ph$ph = $scevgep48;$i$0$ph$ph = $86;$vertexp$0$ph$ph = $$lcssa106109;
   }
   $36 = HEAP32[(44344)>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[(44344)>>2] = $37;
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
 } while(0);
 $51 = (($dim) + -1)|0;
 $52 = ($i$1|0)==($51|0);
 if (!($52)) {
  $53 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $i$1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $dim;
  _qh_fprintf($53,6008,2712,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $54 = (($1) + ($i$1<<2)|0);
 HEAP32[$54>>2] = $gmcoord$3;
 $55 = HEAP32[(5304)>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  $59 = ($dim|0)==(0);
  if (!($59)) {
   $gmcoord$511 = $gmcoord$3;$k$413 = $dim;$normalp$212 = $normal;
   while(1) {
    $69 = (($k$413) + -1)|0;
    $70 = ((($normalp$212)) + 8|0);
    $71 = +HEAPF64[$normalp$212>>3];
    $72 = ((($gmcoord$511)) + 8|0);
    HEAPF64[$gmcoord$511>>3] = $71;
    $73 = ($69|0)==(0);
    if ($73) {
     break;
    } else {
     $gmcoord$511 = $72;$k$413 = $69;$normalp$212 = $70;
    }
   }
  }
 } else {
  $57 = ($dim|0)>(1);
  if ($57) {
   $58 = (($dim) + -1)|0;
   $i$217 = 0;
   while(1) {
    $61 = (($1) + ($i$217<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) + ($51<<3)|0);
    HEAPF64[$63>>3] = 0.0;
    $64 = (($i$217) + 1)|0;
    $exitcond = ($64|0)==($58|0);
    if ($exitcond) {
     break;
    } else {
     $i$217 = $64;
    }
   }
  }
  $60 = ($dim|0)==(0);
  if (!($60)) {
   $65 = $dim << 3;
   _memset(($gmcoord$3|0),0,($65|0))|0;
  }
  $66 = (($1) + ($51<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($51<<3)|0);
  HEAPF64[$68>>3] = -1.0;
 }
 $74 = HEAP32[(43584)>>2]|0;
 $75 = (($74) + 1)|0;
 HEAP32[(43584)>>2] = $75;
 $76 = (+_qh_determinant($1,$dim,$nearzero));
 $77 = ($toporient|0)==(0);
 $78 = -$76;
 $$ = $77 ? $76 : $78;
 $79 = +HEAPF64[(5800)>>3];
 $80 = $$ * $79;
 $81 = HEAP32[(5344)>>2]|0;
 $82 = ($81|0)>(3);
 if (!($82)) {
  $$0 = $80;
  STACKTOP = sp;return (+$$0);
 }
 $83 = HEAP32[(7480)>>2]|0;
 $84 = (_qh_pointid($apex)|0);
 $85 = HEAP32[$nearzero>>2]|0;
 HEAPF64[$vararg_buffer2>>3] = $80;
 $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $84;
 $vararg_ptr6 = ((($vararg_buffer2)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $toporient;
 $vararg_ptr7 = ((($vararg_buffer2)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $85;
 _qh_fprintf($83,4010,2784,$vararg_buffer2);
 $$0 = $80;
 STACKTOP = sp;return (+$$0);
}
function _qh_facetcenter($vertices) {
 $vertices = $vertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $points = 0, $vertexp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $points = sp;
 $0 = (_qh_setsize($vertices)|0);
 $1 = (_qh_settemp($0)|0);
 HEAP32[$points>>2] = $1;
 $2 = ($vertices|0)==(0|0);
 if (!($2)) {
  $3 = ((($vertices)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $8 = $4;$vertexp$01 = $3;
   while(1) {
    $6 = ((($vertexp$01)) + 4|0);
    $7 = ((($8)) + 8|0);
    $9 = HEAP32[$7>>2]|0;
    _qh_setappend($points,$9);
    $10 = HEAP32[$6>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     break;
    } else {
     $8 = $10;$vertexp$01 = $6;
    }
   }
  }
 }
 $12 = HEAP32[(5828)>>2]|0;
 $13 = (($12) + -1)|0;
 $14 = HEAP32[$points>>2]|0;
 $15 = (_qh_voronoi_center($13,$14)|0);
 _qh_settempfree($points);
 STACKTOP = sp;return ($15|0);
}
function _qh_voronoi_center($dim,$points) {
 $dim = $dim|0;
 $points = $points|0;
 var $$in = 0, $$lcssa = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$lcssa90 = 0.0, $$lcssa92 = 0, $$lcssa94 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $center = 0, $exitcond = 0, $exitcond59 = 0, $exitcond60 = 0, $exitcond61 = 0, $exitcond62 = 0, $gmcoord$0$lcssa63 = 0, $gmcoord$041 = 0, $gmcoord$1$ph = 0, $gmcoord$2 = 0, $gmcoord$2$lcssa = 0, $gmcoord$337 = 0, $gmcoord$423 = 0, $gmcoord$516 = 0, $gmcoord$6$ph = 0, $gmcoord$7 = 0, $i$038 = 0, $i$127 = 0, $infinite = 0;
 var $j$017 = 0, $k$040 = 0, $k$132 = 0, $k$321 = 0, $nearzero = 0, $pointp$0 = 0, $pointp$0$ph = 0, $pointp$1 = 0, $pointp$1$ph = 0, $pointp$215 = 0, $scevgep = 0, $scevgep57 = 0, $simplex = 0, $sum2$033 = 0.0, $sum2p$024 = 0, $sum2p$118 = 0, $sum2p$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer5 = sp;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 32|0;
 $center = sp + 56|0;
 $simplex = sp + 44|0;
 $nearzero = sp + 48|0;
 $infinite = sp + 52|0;
 $0 = HEAP32[(7492)>>2]|0;
 $1 = (_qh_memalloc($0)|0);
 HEAP32[$center>>2] = $1;
 $2 = (_qh_setsize($points)|0);
 $3 = (($dim) + 1)|0;
 $4 = ($2|0)==($3|0);
 do {
  if ($4) {
   HEAP32[$simplex>>2] = $points;
  } else {
   $5 = ($2|0)<($3|0);
   if ($5) {
    $6 = HEAP32[(7480)>>2]|0;
    HEAP32[$vararg_buffer>>2] = $3;
    _qh_fprintf($6,6025,2864,$vararg_buffer);
    _qh_errexit(5,0,0);
    // unreachable;
   } else {
    $7 = (_qh_settemp($3)|0);
    HEAP32[$simplex>>2] = $7;
    _qh_maxsimplex($dim,$points,0,0,$simplex);
    break;
   }
  }
 } while(0);
 $8 = HEAP32[$simplex>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[(7756)>>2]|0;
 $12 = ($dim|0)>(0);
 if ($12) {
  $gmcoord$041 = $11;$k$040 = 0;
  while(1) {
   $15 = HEAP32[(7760)>>2]|0;
   $16 = (($15) + ($k$040<<2)|0);
   HEAP32[$16>>2] = $gmcoord$041;
   $17 = HEAP32[$simplex>>2]|0;
   $18 = ($17|0)==(0|0);
   L11: do {
    if ($18) {
     $gmcoord$2 = $gmcoord$041;
    } else {
     $19 = ((($17)) + 4|0);
     $20 = (($10) + ($k$040<<3)|0);
     $gmcoord$1$ph = $gmcoord$041;$pointp$0$ph = $19;
     while(1) {
      $pointp$0 = $pointp$0$ph;
      while(1) {
       $21 = ((($pointp$0)) + 4|0);
       $22 = HEAP32[$pointp$0>>2]|0;
       $23 = ($22|0)==(0|0);
       if ($23) {
        $gmcoord$2 = $gmcoord$1$ph;
        break L11;
       }
       $24 = ($22|0)==($10|0);
       if ($24) {
        $pointp$0 = $21;
       } else {
        $$lcssa92 = $21;$$lcssa94 = $22;
        break;
       }
      }
      $25 = (($$lcssa94) + ($k$040<<3)|0);
      $26 = +HEAPF64[$25>>3];
      $27 = +HEAPF64[$20>>3];
      $28 = $26 - $27;
      $29 = ((($gmcoord$1$ph)) + 8|0);
      HEAPF64[$gmcoord$1$ph>>3] = $28;
      $gmcoord$1$ph = $29;$pointp$0$ph = $$lcssa92;
     }
    }
   } while(0);
   $30 = (($k$040) + 1)|0;
   $exitcond62 = ($30|0)==($dim|0);
   if ($exitcond62) {
    $gmcoord$2$lcssa = $gmcoord$2;
    break;
   } else {
    $gmcoord$041 = $gmcoord$2;$k$040 = $30;
   }
  }
  $13 = ($dim|0)>(0);
  if ($13) {
   $14 = HEAP32[(7760)>>2]|0;
   $gmcoord$337 = $gmcoord$2$lcssa;$i$038 = 0;
   while(1) {
    $k$132 = 0;$sum2$033 = 0.0;
    while(1) {
     $31 = (($14) + ($k$132<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($i$038<<3)|0);
     $34 = +HEAPF64[$33>>3];
     $35 = $34 * $34;
     $36 = $sum2$033 + $35;
     $37 = (($k$132) + 1)|0;
     $exitcond60 = ($37|0)==($dim|0);
     if ($exitcond60) {
      $$lcssa90 = $36;
      break;
     } else {
      $k$132 = $37;$sum2$033 = $36;
     }
    }
    $38 = ((($gmcoord$337)) + 8|0);
    HEAPF64[$gmcoord$337>>3] = $$lcssa90;
    $39 = (($i$038) + 1)|0;
    $exitcond61 = ($39|0)==($dim|0);
    if ($exitcond61) {
     $gmcoord$0$lcssa63 = $gmcoord$2$lcssa;
     break;
    } else {
     $gmcoord$337 = $38;$i$038 = $39;
    }
   }
  } else {
   $gmcoord$0$lcssa63 = $gmcoord$2$lcssa;
  }
 } else {
  $gmcoord$0$lcssa63 = $11;
 }
 $40 = HEAP32[(7760)>>2]|0;
 $41 = (+_qh_determinant($40,$dim,$nearzero));
 $42 = +HEAPF64[(7000)>>3];
 $43 = (+_qh_divzero(0.5,$41,$42,$infinite));
 $44 = HEAP32[$infinite>>2]|0;
 $45 = ($44|0)==(0);
 if ($45) {
  $48 = ($dim|0)>(0);
  if ($48) {
   $i$127 = 0;
   while(1) {
    $56 = HEAP32[(7760)>>2]|0;
    $57 = HEAP32[(7756)>>2]|0;
    $59 = $56;$gmcoord$423 = $57;$k$321 = 0;$sum2p$024 = $gmcoord$0$lcssa63;
    while(1) {
     $58 = (($59) + ($k$321<<2)|0);
     HEAP32[$58>>2] = $gmcoord$423;
     $60 = ($k$321|0)==($i$127|0);
     L35: do {
      if ($60) {
       $scevgep = (($gmcoord$423) + ($dim<<3)|0);
       $gmcoord$516 = $gmcoord$423;$j$017 = $dim;$sum2p$118 = $sum2p$024;
       while(1) {
        $61 = (($j$017) + -1)|0;
        $62 = ((($sum2p$118)) + 8|0);
        $63 = +HEAPF64[$sum2p$118>>3];
        $64 = ((($gmcoord$516)) + 8|0);
        HEAPF64[$gmcoord$516>>3] = $63;
        $65 = ($61|0)==(0);
        if ($65) {
         break;
        } else {
         $gmcoord$516 = $64;$j$017 = $61;$sum2p$118 = $62;
        }
       }
       $scevgep57 = (($sum2p$024) + ($dim<<3)|0);
       $gmcoord$7 = $scevgep;$sum2p$2 = $scevgep57;
      } else {
       $66 = HEAP32[$simplex>>2]|0;
       $67 = ($66|0)==(0|0);
       if ($67) {
        $gmcoord$7 = $gmcoord$423;$sum2p$2 = $sum2p$024;
       } else {
        $68 = ((($66)) + 4|0);
        $69 = (($10) + ($k$321<<3)|0);
        $gmcoord$6$ph = $gmcoord$423;$pointp$1$ph = $68;
        while(1) {
         $pointp$1 = $pointp$1$ph;
         while(1) {
          $70 = ((($pointp$1)) + 4|0);
          $71 = HEAP32[$pointp$1>>2]|0;
          $72 = ($71|0)==(0|0);
          if ($72) {
           $gmcoord$7 = $gmcoord$6$ph;$sum2p$2 = $sum2p$024;
           break L35;
          }
          $73 = ($71|0)==($10|0);
          if ($73) {
           $pointp$1 = $70;
          } else {
           $$lcssa88 = $70;$$lcssa89 = $71;
           break;
          }
         }
         $74 = (($$lcssa89) + ($k$321<<3)|0);
         $75 = +HEAPF64[$74>>3];
         $76 = +HEAPF64[$69>>3];
         $77 = $75 - $76;
         $78 = ((($gmcoord$6$ph)) + 8|0);
         HEAPF64[$gmcoord$6$ph>>3] = $77;
         $gmcoord$6$ph = $78;$pointp$1$ph = $$lcssa88;
        }
       }
      }
     } while(0);
     $79 = (($k$321) + 1)|0;
     $80 = HEAP32[(7760)>>2]|0;
     $exitcond = ($79|0)==($dim|0);
     if ($exitcond) {
      $$lcssa = $80;
      break;
     } else {
      $59 = $80;$gmcoord$423 = $gmcoord$7;$k$321 = $79;$sum2p$024 = $sum2p$2;
     }
    }
    $81 = (+_qh_determinant($$lcssa,$dim,$nearzero));
    $82 = $43 * $81;
    $83 = (($10) + ($i$127<<3)|0);
    $84 = +HEAPF64[$83>>3];
    $85 = $82 + $84;
    $86 = HEAP32[$center>>2]|0;
    $87 = (($86) + ($i$127<<3)|0);
    HEAPF64[$87>>3] = $85;
    $88 = (($i$127) + 1)|0;
    $exitcond59 = ($88|0)==($dim|0);
    if ($exitcond59) {
     break;
    } else {
     $i$127 = $88;
    }
   }
  }
  $89 = HEAP32[(5344)>>2]|0;
  $90 = ($89|0)>(2);
  if ($90) {
   $91 = HEAP32[(7480)>>2]|0;
   HEAPF64[$vararg_buffer1>>3] = $41;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   HEAPF64[$vararg_ptr4>>3] = $43;
   _qh_fprintf($91,8033,3008,$vararg_buffer1);
   $92 = HEAP32[(7480)>>2]|0;
   _qh_printmatrix($92,3056,$center,1,$dim);
   $93 = HEAP32[(5344)>>2]|0;
   $94 = ($93|0)>(4);
   if ($94) {
    $95 = HEAP32[(7480)>>2]|0;
    $96 = HEAP32[$simplex>>2]|0;
    _qh_printpoints($95,3064,$96);
    $97 = HEAP32[$simplex>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = ((($97)) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(0|0);
     if (!($101)) {
      $104 = $100;$pointp$215 = $99;
      while(1) {
       $102 = ((($pointp$215)) + 4|0);
       $103 = HEAP32[(7480)>>2]|0;
       $105 = (_qh_pointid($104)|0);
       $106 = HEAP32[$center>>2]|0;
       $107 = (+_qh_pointdist($104,$106,$dim));
       HEAP32[$vararg_buffer5>>2] = $105;
       $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
       HEAPF64[$vararg_ptr8>>3] = $107;
       _qh_fprintf($103,8034,3072,$vararg_buffer5);
       $108 = HEAP32[$102>>2]|0;
       $109 = ($108|0)==(0|0);
       if ($109) {
        break;
       } else {
        $104 = $108;$pointp$215 = $102;
       }
      }
     }
    }
    $110 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($110,8035,56128,$vararg_buffer9);
   }
  }
 } else {
  $46 = ($dim|0)==(0);
  if (!($46)) {
   $47 = HEAP32[$center>>2]|0;
   $$in = $dim;
   while(1) {
    $49 = (($$in) + -1)|0;
    $50 = (($47) + ($49<<3)|0);
    HEAPF64[$50>>3] = -10.101000000000001;
    $51 = ($49|0)==(0);
    if ($51) {
     break;
    } else {
     $$in = $49;
    }
   }
  }
  $52 = HEAP32[(5344)>>2]|0;
  $53 = ($52|0)==(0);
  if (!($53)) {
   $54 = HEAP32[(7480)>>2]|0;
   $55 = HEAP32[$simplex>>2]|0;
   _qh_printpoints($54,2968,$55);
  }
 }
 $111 = HEAP32[$simplex>>2]|0;
 $112 = ($111|0)==($points|0);
 if ($112) {
  $113 = HEAP32[$center>>2]|0;
  STACKTOP = sp;return ($113|0);
 }
 _qh_settempfree($simplex);
 $113 = HEAP32[$center>>2]|0;
 STACKTOP = sp;return ($113|0);
}
function _qh_getarea($facetlist) {
 $facetlist = $facetlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist = 0;
 var $facet$02 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp;
 $dist = sp + 8|0;
 $0 = HEAP32[(7604)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(5692)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = HEAP32[(5344)>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($7,1001,3152,$vararg_buffer1);
  }
 } else {
  $4 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($4,8020,3088,$vararg_buffer);
 }
 $8 = ($facetlist|0)==(0|0);
 ;HEAP32[(7704)>>2]=0|0;HEAP32[(7704)+4>>2]=0|0;HEAP32[(7704)+8>>2]=0|0;HEAP32[(7704)+12>>2]=0|0;
 L9: do {
  if (!($8)) {
   $facet$02 = $facetlist;
   while(1) {
    $9 = ((($facet$02)) + 48|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     break L9;
    }
    $12 = ((($facet$02)) + 24|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = ((($facet$02)) + 80|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = $16 & 131072;
     $18 = ($17|0)!=(0);
     $19 = HEAP32[(5260)>>2]|0;
     $20 = ($19|0)!=(0);
     $or$cond = $18 & $20;
     if (!($or$cond)) {
      $21 = $16 & 1048576;
      $22 = ($21|0)==(0);
      if ($22) {
       $23 = (+_qh_facetarea($facet$02));
       $24 = ((($facet$02)) + 32|0);
       HEAPF64[$24>>3] = $23;
       $25 = HEAP32[$15>>2]|0;
       $26 = $25 | 1048576;
       HEAP32[$15>>2] = $26;
      }
      $27 = ((($facet$02)) + 32|0);
      $28 = +HEAPF64[$27>>3];
      $29 = HEAP32[(5304)>>2]|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $38 = +HEAPF64[(7704)>>3];
       $39 = $28 + $38;
       HEAPF64[(7704)>>3] = $39;
       $40 = HEAP32[(7484)>>2]|0;
       _qh_distplane($40,$facet$02,$dist);
       $41 = +HEAPF64[$dist>>3];
       $42 = $28 * $41;
       $43 = -$42;
       $44 = HEAP32[(5828)>>2]|0;
       $45 = (+($44|0));
       $46 = $43 / $45;
       $47 = +HEAPF64[(7712)>>3];
       $48 = $46 + $47;
       HEAPF64[(7712)>>3] = $48;
      } else {
       $31 = HEAP32[$15>>2]|0;
       $32 = $31 >>> 17;
       $33 = $32 & 1;
       $34 = HEAP32[(5780)>>2]|0;
       $35 = ($33|0)==($34|0);
       if ($35) {
        $36 = +HEAPF64[(7704)>>3];
        $37 = $28 + $36;
        HEAPF64[(7704)>>3] = $37;
       }
      }
      $49 = HEAP32[(5632)>>2]|0;
      $50 = ($49|0)==(0);
      if (!($50)) {
       $51 = +HEAPF64[(43256)>>3];
       $52 = $28 + $51;
       HEAPF64[(43256)>>3] = $52;
       $53 = +HEAPF64[(43264)>>3];
       $54 = $53 < $28;
       if ($54) {
        HEAPF64[(43264)>>3] = $28;
       }
       $55 = +HEAPF64[(43272)>>3];
       $56 = $55 > $28;
       if ($56) {
        HEAPF64[(43272)>>3] = $28;
       }
      }
     }
    }
    $57 = HEAP32[$9>>2]|0;
    $58 = ($57|0)==(0|0);
    if ($58) {
     break;
    } else {
     $facet$02 = $57;
    }
   }
  }
 } while(0);
 HEAP32[(7604)>>2] = 1;
 STACKTOP = sp;return;
}
function _qh_gram_schmidt($dim,$row) {
 $dim = $dim|0;
 $row = $row|0;
 var $$0 = 0, $$lcssa = 0.0, $$lcssa50 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $i$030 = 0, $j$027 = 0, $k$04 = 0, $k$17 = 0, $k$214 = 0, $k$322 = 0, $norm$03 = 0.0, $norm$113 = 0.0, $rowi$02 = 0, $rowi$16 = 0, $rowi$311 = 0, $rowi$420 = 0, $rowj$012 = 0, $rowj$121 = 0, $scevgep = 0, $scevgep44 = 0;
 var $scevgep45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)>(0);
 if ($0) {
  $i$030 = 0;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 while(1) {
  $3 = (($row) + ($i$030<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $k$04 = $dim;$norm$03 = 0.0;$rowi$02 = $4;
  while(1) {
   $5 = (($k$04) + -1)|0;
   $6 = +HEAPF64[$rowi$02>>3];
   $7 = $6 * $6;
   $8 = $norm$03 + $7;
   $9 = ((($rowi$02)) + 8|0);
   $10 = ($5|0)==(0);
   if ($10) {
    $$lcssa = $8;
    break;
   } else {
    $k$04 = $5;$norm$03 = $8;$rowi$02 = $9;
   }
  }
  $scevgep = (($4) + ($dim<<3)|0);
  $11 = (+Math_sqrt((+$$lcssa)));
  $12 = +HEAPF64[(44240)>>3];
  $13 = $12 > $11;
  if ($13) {
   HEAPF64[(44240)>>3] = $11;
  }
  $14 = $11 == 0.0;
  if ($14) {
   $$0 = 0;
   label = 16;
   break;
  } else {
   $k$17 = $dim;$rowi$16 = $scevgep;
  }
  while(1) {
   $15 = (($k$17) + -1)|0;
   $16 = ((($rowi$16)) + -8|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $17 / $11;
   HEAPF64[$16>>3] = $18;
   $19 = ($15|0)==(0);
   if ($19) {
    break;
   } else {
    $k$17 = $15;$rowi$16 = $16;
   }
  }
  $1 = (($i$030) + 1)|0;
  $20 = ($1|0)<($dim|0);
  if ($20) {
   $scevgep45 = (($4) + ($dim<<3)|0);
   $j$027 = $1;
   while(1) {
    $21 = (($row) + ($j$027<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $scevgep44 = (($22) + ($dim<<3)|0);
    $k$214 = $dim;$norm$113 = 0.0;$rowi$311 = $4;$rowj$012 = $22;
    while(1) {
     $23 = (($k$214) + -1)|0;
     $24 = ((($rowi$311)) + 8|0);
     $25 = +HEAPF64[$rowi$311>>3];
     $26 = ((($rowj$012)) + 8|0);
     $27 = +HEAPF64[$rowj$012>>3];
     $28 = $25 * $27;
     $29 = $norm$113 + $28;
     $30 = ($23|0)==(0);
     if ($30) {
      $$lcssa50 = $29;
      break;
     } else {
      $k$214 = $23;$norm$113 = $29;$rowi$311 = $24;$rowj$012 = $26;
     }
    }
    $k$322 = $dim;$rowi$420 = $scevgep45;$rowj$121 = $scevgep44;
    while(1) {
     $31 = (($k$322) + -1)|0;
     $32 = ((($rowi$420)) + -8|0);
     $33 = +HEAPF64[$32>>3];
     $34 = $$lcssa50 * $33;
     $35 = ((($rowj$121)) + -8|0);
     $36 = +HEAPF64[$35>>3];
     $37 = $36 - $34;
     HEAPF64[$35>>3] = $37;
     $38 = ($31|0)==(0);
     if ($38) {
      break;
     } else {
      $k$322 = $31;$rowi$420 = $32;$rowj$121 = $35;
     }
    }
    $39 = (($j$027) + 1)|0;
    $exitcond = ($39|0)==($dim|0);
    if ($exitcond) {
     break;
    } else {
     $j$027 = $39;
    }
   }
  }
  $2 = ($1|0)<($dim|0);
  if ($2) {
   $i$030 = $1;
  } else {
   $$0 = 1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  return ($$0|0);
 }
 return (0)|0;
}
function _qh_inthresholds($normal,$angle) {
 $normal = $normal|0;
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $k$02 = 0, $within$0$lcssa = 0, $within$01 = 0, $within$1 = 0, $within$2 = 0, $within$3 = 0, $within$4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($angle|0)!=(0|0);
 if ($0) {
  HEAPF64[$angle>>3] = 0.0;
 }
 $1 = HEAP32[(5828)>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $within$0$lcssa = 1;
  return ($within$0$lcssa|0);
 }
 $3 = HEAP32[(6912)>>2]|0;
 $4 = HEAP32[(6908)>>2]|0;
 $5 = HEAP32[(5828)>>2]|0;
 $k$02 = 0;$within$01 = 1;
 while(1) {
  $6 = (($3) + ($k$02<<3)|0);
  $7 = +HEAPF64[$6>>3];
  $8 = $7 > -8.9884656743115785E+307;
  if ($8) {
   $9 = (($normal) + ($k$02<<3)|0);
   $10 = +HEAPF64[$9>>3];
   $11 = $10 < $7;
   $within$1 = $11 ? 0 : $within$01;
   if ($0) {
    $12 = $7 - $10;
    $13 = $12 < 0.0;
    $14 = -$12;
    $15 = $13 ? $14 : $12;
    $16 = +HEAPF64[$angle>>3];
    $17 = $15 + $16;
    HEAPF64[$angle>>3] = $17;
    $within$2 = $within$1;
   } else {
    $within$2 = $within$1;
   }
  } else {
   $within$2 = $within$01;
  }
  $18 = (($4) + ($k$02<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 < 8.9884656743115785E+307;
  if ($20) {
   $21 = (($normal) + ($k$02<<3)|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $22 > $19;
   $within$3 = $23 ? 0 : $within$2;
   if ($0) {
    $24 = $19 - $22;
    $25 = $24 < 0.0;
    $26 = -$24;
    $27 = $25 ? $26 : $24;
    $28 = +HEAPF64[$angle>>3];
    $29 = $27 + $28;
    HEAPF64[$angle>>3] = $29;
    $within$4 = $within$3;
   } else {
    $within$4 = $within$3;
   }
  } else {
   $within$4 = $within$2;
  }
  $30 = (($k$02) + 1)|0;
  $31 = ($30|0)<($5|0);
  if ($31) {
   $k$02 = $30;$within$01 = $within$4;
  } else {
   $within$0$lcssa = $within$4;
   break;
  }
 }
 return ($within$0$lcssa|0);
}
function _qh_setdelaunay($dim,$count,$points) {
 $dim = $dim|0;
 $count = $count|0;
 $points = $points|0;
 var $$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0, $coordp$0$pn$lcssa = 0, $coordp$08 = 0, $coordp$1 = 0, $coordp$1$lcssa = 0, $coordp$11 = 0, $coordp$14 = 0, $exitcond = 0, $i$07 = 0, $k$02 = 0, $paraboloid$0$lcssa = 0.0, $paraboloid$03 = 0.0, $scevgep = 0, $scevgep12 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $count;
  _qh_fprintf($2,11,3208,$vararg_buffer);
 }
 $3 = ($count|0)>(0);
 if ($3) {
  $4 = (($dim) + -2)|0;
  $5 = ($4|0)==(0);
  $6 = (($dim) + -1)|0;
  $coordp$08 = $points;$i$07 = 0;
  while(1) {
   $7 = +HEAPF64[$coordp$08>>3];
   $8 = $7 * $7;
   $coordp$11 = ((($coordp$08)) + 8|0);
   if ($5) {
    $coordp$0$pn$lcssa = $coordp$08;$coordp$1$lcssa = $coordp$11;$paraboloid$0$lcssa = $8;
   } else {
    $scevgep = (($coordp$08) + ($6<<3)|0);
    $coordp$14 = $coordp$11;$k$02 = $4;$paraboloid$03 = $8;
    while(1) {
     $9 = (($k$02) + -1)|0;
     $10 = +HEAPF64[$coordp$14>>3];
     $11 = $10 * $10;
     $12 = $paraboloid$03 + $11;
     $coordp$1 = ((($coordp$14)) + 8|0);
     $13 = ($9|0)==(0);
     if ($13) {
      $$lcssa = $12;
      break;
     } else {
      $coordp$14 = $coordp$1;$k$02 = $9;$paraboloid$03 = $12;
     }
    }
    $scevgep12 = (($coordp$08) + ($4<<3)|0);
    $coordp$0$pn$lcssa = $scevgep12;$coordp$1$lcssa = $scevgep;$paraboloid$0$lcssa = $$lcssa;
   }
   $14 = ((($coordp$0$pn$lcssa)) + 16|0);
   HEAPF64[$coordp$1$lcssa>>3] = $paraboloid$0$lcssa;
   $15 = (($i$07) + 1)|0;
   $exitcond = ($15|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $coordp$08 = $14;$i$07 = $15;
   }
  }
 }
 $16 = +HEAPF64[(7800)>>3];
 $17 = $16 < 8.9884656743115785E+307;
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = +HEAPF64[(7808)>>3];
 $19 = +HEAPF64[(7816)>>3];
 _qh_scalelast($points,$count,$dim,$16,$18,$19);
 STACKTOP = sp;return;
}
function _qh_maxabsval($normal,$dim) {
 $normal = $normal|0;
 $dim = $dim|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $colp$02 = 0, $k$04 = 0, $maxp$0$lcssa = 0, $maxp$01 = 0, $maxp$1 = 0, $maxval$03 = 0.0, $maxval$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)==(0);
 if ($0) {
  $maxp$0$lcssa = 0;
  return ($maxp$0$lcssa|0);
 } else {
  $colp$02 = $normal;$k$04 = $dim;$maxp$01 = 0;$maxval$03 = -1.7976931348623157E+308;
 }
 while(1) {
  $1 = (($k$04) + -1)|0;
  $2 = +HEAPF64[$colp$02>>3];
  $3 = $2 < 0.0;
  $4 = -$2;
  $5 = $3 ? $4 : $2;
  $6 = $5 > $maxval$03;
  $maxp$1 = $6 ? $colp$02 : $maxp$01;
  $maxval$1 = $6 ? $5 : $maxval$03;
  $7 = ((($colp$02)) + 8|0);
  $8 = ($1|0)==(0);
  if ($8) {
   $maxp$0$lcssa = $maxp$1;
   break;
  } else {
   $colp$02 = $7;$k$04 = $1;$maxp$01 = $maxp$1;$maxval$03 = $maxval$1;
  }
 }
 return ($maxp$0$lcssa|0);
}
function _qh_maxmin($points,$numpoints,$dimension) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dimension = $dimension|0;
 var $$ = 0.0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $k$09 = 0, $maxcoord$0 = 0.0, $maxcoord$1 = 0.0, $maximum$1$lcssa = 0, $maximum$16 = 0, $maximum$2 = 0, $minimum$0 = 0, $minimum$1$lcssa = 0;
 var $minimum$15 = 0, $minimum$2 = 0, $point$07 = 0, $set = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $set = sp;
 HEAPF64[(7632)>>3] = 0.0;
 HEAPF64[(6960)>>3] = 0.0;
 HEAPF64[(6984)>>3] = -1.7976931348623157E+308;
 HEAPF64[(6976)>>3] = 0.0;
 HEAPF64[(7648)>>3] = 0.0;
 HEAP32[(7732)>>2] = 0;
 $0 = HEAP32[(6904)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[(7728)>>2] = 1;
 }
 $2 = $dimension << 1;
 $3 = (_qh_settemp($2)|0);
 HEAP32[$set>>2] = $3;
 $4 = ($dimension|0)>(0);
 if ($4) {
  $5 = (($points) + ($dimension<<3)|0);
  $6 = (($dimension) + -1)|0;
  $k$09 = 0;
  while(1) {
   $7 = HEAP32[(5324)>>2]|0;
   $8 = ($7|0)==($points|0);
   $minimum$0 = $8 ? $5 : $points;
   $9 = HEAP32[(5828)>>2]|0;
   $10 = Math_imul($9, $numpoints)|0;
   $11 = (($points) + ($10<<3)|0);
   $12 = ($10|0)>(0);
   if ($12) {
    $13 = HEAP32[(5324)>>2]|0;
    $14 = HEAP32[(5828)>>2]|0;
    $maximum$16 = $minimum$0;$minimum$15 = $minimum$0;$point$07 = $points;
    while(1) {
     $15 = ($point$07|0)==($13|0);
     if ($15) {
      $maximum$2 = $maximum$16;$minimum$2 = $minimum$15;
     } else {
      $16 = (($maximum$16) + ($k$09<<3)|0);
      $17 = +HEAPF64[$16>>3];
      $18 = (($point$07) + ($k$09<<3)|0);
      $19 = +HEAPF64[$18>>3];
      $20 = $17 < $19;
      if ($20) {
       $maximum$2 = $point$07;$minimum$2 = $minimum$15;
      } else {
       $21 = (($minimum$15) + ($k$09<<3)|0);
       $22 = +HEAPF64[$21>>3];
       $23 = $22 > $19;
       if ($23) {
        $maximum$2 = $maximum$16;$minimum$2 = $point$07;
       } else {
        $maximum$2 = $maximum$16;$minimum$2 = $minimum$15;
       }
      }
     }
     $24 = (($point$07) + ($14<<3)|0);
     $25 = ($24>>>0)<($11>>>0);
     if ($25) {
      $maximum$16 = $maximum$2;$minimum$15 = $minimum$2;$point$07 = $24;
     } else {
      $maximum$1$lcssa = $maximum$2;$minimum$1$lcssa = $minimum$2;
      break;
     }
    }
   } else {
    $maximum$1$lcssa = $minimum$0;$minimum$1$lcssa = $minimum$0;
   }
   $26 = ($k$09|0)==($6|0);
   if ($26) {
    $27 = (($minimum$1$lcssa) + ($k$09<<3)|0);
    $28 = +HEAPF64[$27>>3];
    HEAPF64[(7024)>>3] = $28;
    $29 = (($maximum$1$lcssa) + ($k$09<<3)|0);
    $30 = +HEAPF64[$29>>3];
    HEAPF64[(6968)>>3] = $30;
    $31 = HEAP32[(5712)>>2]|0;
    $32 = ($31|0)==(0);
    $$not = $26 ^ 1;
    $brmerge = $32 | $$not;
    if ($brmerge) {
     label = 15;
    } else {
     $33 = +HEAPF64[(6984)>>3];
     $maxcoord$1 = $33;
    }
   } else {
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $34 = (($maximum$1$lcssa) + ($k$09<<3)|0);
    $35 = +HEAPF64[$34>>3];
    $36 = (($minimum$1$lcssa) + ($k$09<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = -$37;
    $39 = $35 < $38;
    $$ = $39 ? $38 : $35;
    $40 = HEAP32[(5324)>>2]|0;
    $41 = ($40|0)==(0|0);
    if ($41) {
     $maxcoord$0 = $$;
    } else {
     $42 = (($40) + ($k$09<<3)|0);
     $43 = +HEAPF64[$42>>3];
     $44 = -$43;
     $45 = $43 < $44;
     $46 = $45 ? $44 : $43;
     $47 = $$ < $46;
     if ($47) {
      $maxcoord$0 = $46;
     } else {
      $maxcoord$0 = $$;
     }
    }
    $48 = +HEAPF64[$34>>3];
    $49 = +HEAPF64[$36>>3];
    $50 = $48 - $49;
    $51 = +HEAPF64[(6984)>>3];
    $52 = $51 < $50;
    if ($52) {
     HEAPF64[(6984)>>3] = $50;
     $maxcoord$1 = $maxcoord$0;
    } else {
     $maxcoord$1 = $maxcoord$0;
    }
   }
   $53 = +HEAPF64[(6960)>>3];
   $54 = $53 < $maxcoord$1;
   if ($54) {
    HEAPF64[(6960)>>3] = $maxcoord$1;
   }
   $55 = +HEAPF64[(6976)>>3];
   $56 = $maxcoord$1 + $55;
   HEAPF64[(6976)>>3] = $56;
   _qh_setappend($set,$maximum$1$lcssa);
   _qh_setappend($set,$minimum$1$lcssa);
   $57 = +HEAPF64[(6976)>>3];
   $58 = $57 * 80.0;
   $59 = $58 * 2.2204460492503131E-16;
   $60 = HEAP32[(7036)>>2]|0;
   $61 = (($60) + ($k$09<<3)|0);
   HEAPF64[$61>>3] = $59;
   $62 = (($k$09) + 1)|0;
   $exitcond = ($62|0)==($dimension|0);
   if ($exitcond) {
    break;
   } else {
    $k$09 = $62;
   }
  }
 }
 $63 = HEAP32[(5344)>>2]|0;
 $64 = ($63|0)>(0);
 if (!($64)) {
  $67 = HEAP32[$set>>2]|0;
  STACKTOP = sp;return ($67|0);
 }
 $65 = HEAP32[(7480)>>2]|0;
 $66 = HEAP32[$set>>2]|0;
 _qh_printpoints($65,3288,$66);
 $67 = HEAP32[$set>>2]|0;
 STACKTOP = sp;return ($67|0);
}
function _qh_printpoints($fp,$string,$points) {
 $fp = $fp|0;
 $string = $string|0;
 $points = $points|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pointp$03 = 0;
 var $pointp$12 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = ($string|0)==(0|0);
 if ($0) {
  $10 = ($points|0)==(0|0);
  if (!($10)) {
   $11 = ((($points)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $15 = $12;$pointp$12 = $11;
    while(1) {
     $14 = ((($pointp$12)) + 4|0);
     $16 = (_qh_pointid($15)|0);
     HEAP32[$vararg_buffer6>>2] = $16;
     _qh_fprintf($fp,9007,36672,$vararg_buffer6);
     $17 = HEAP32[$14>>2]|0;
     $18 = ($17|0)==(0|0);
     if ($18) {
      break;
     } else {
      $15 = $17;$pointp$12 = $14;
     }
    }
   }
  }
  _qh_fprintf($fp,9008,56128,$vararg_buffer9);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $string;
  _qh_fprintf($fp,9004,13032,$vararg_buffer);
  $1 = ($points|0)==(0|0);
  if (!($1)) {
   $2 = ((($points)) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0|0);
   if (!($4)) {
    $6 = $3;$pointp$03 = $2;
    while(1) {
     $5 = ((($pointp$03)) + 4|0);
     $7 = (_qh_pointid($6)|0);
     HEAP32[$vararg_buffer1>>2] = $7;
     _qh_fprintf($fp,9005,56784,$vararg_buffer1);
     $8 = HEAP32[$5>>2]|0;
     $9 = ($8|0)==(0|0);
     if ($9) {
      break;
     } else {
      $6 = $8;$pointp$03 = $5;
     }
    }
   }
  }
  _qh_fprintf($fp,9006,56128,$vararg_buffer4);
  STACKTOP = sp;return;
 }
}
function _qh_maxouter() {
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = +HEAPF64[(7632)>>3];
 $1 = +HEAPF64[(6952)>>3];
 $2 = $0 < $1;
 $3 = $2 ? $1 : $0;
 $4 = $1 + $3;
 $5 = HEAP32[(5344)>>2]|0;
 $6 = ($5|0)>(3);
 if (!($6)) {
  STACKTOP = sp;return (+$4);
 }
 $7 = HEAP32[(7480)>>2]|0;
 HEAPF64[$vararg_buffer>>3] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $0;
 _qh_fprintf($7,4012,3344,$vararg_buffer);
 STACKTOP = sp;return (+$4);
}
function _qh_maxsimplex($dim,$maxpoints,$points,$numpoints,$simplex) {
 $dim = $dim|0;
 $maxpoints = $maxpoints|0;
 $points = $points|0;
 $numpoints = $numpoints|0;
 $simplex = $simplex|0;
 var $$lcssa = 0, $$lcssa131 = 0, $$lcssa133 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $k$0$ph = 0, $k$048 = 0, $maxcoord$0 = 0.0, $maxcoord$0$ph = 0.0, $maxcoord$1 = 0.0;
 var $maxcoord$257 = 0.0, $maxcoord$3 = 0.0, $maxcoord$4 = 0.0, $maxdet$0$ph$lcssa = 0.0, $maxdet$0$ph34 = 0.0, $maxdet$157 = 0.0, $maxdet$15815 = 0.0, $maxdet$241 = 0.0, $maxdet$3 = 0.0, $maxdet$4 = 0.0, $maxnearzero$047 = 0, $maxnearzero$1$ph$lcssa = 0, $maxnearzero$1$ph33 = 0, $maxnearzero$241014 = 0, $maxnearzero$249 = 0, $maxnearzero$340 = 0, $maxnearzero$4 = 0, $maxnearzero$5 = 0, $maxpoint$0$ph$lcssa = 0, $maxpoint$0$ph32 = 0;
 var $maxpoint$1311 = 0, $maxpoint$239 = 0, $maxpoint$3 = 0, $maxpoint$4 = 0, $maxx$0 = 0, $maxx$0$ph = 0, $maxx$1 = 0, $maxx$255 = 0, $maxx$3 = 0, $maxx$4 = 0, $maxx$5 = 0, $mincoord$0$ph = 0.0, $mincoord$156 = 0.0, $mincoord$2 = 0.0, $minx$0$ph = 0, $minx$154 = 0, $minx$2 = 0, $minx$3 = 0, $nearzero = 0, $or$cond = 0;
 var $point$053 = 0, $point$138 = 0, $pointp$0 = 0, $pointp$0$ph = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $nearzero = sp + 64|0;
 $0 = HEAP32[$simplex>>2]|0;
 $1 = (_qh_setsize($0)|0);
 $2 = ($1|0)<(2);
 if ($2) {
  $3 = (_qh_setsize($maxpoints)|0);
  $4 = ($3|0)>(1);
  L3: do {
   if ($4) {
    $5 = ($maxpoints|0)==(0|0);
    if ($5) {
     $maxx$5 = 0;$minx$3 = 0;
    } else {
     $6 = ((($maxpoints)) + 4|0);
     $maxcoord$0$ph = -1.7976931348623157E+308;$maxx$0$ph = 0;$mincoord$0$ph = 1.7976931348623157E+308;$minx$0$ph = 0;$pointp$0$ph = $6;
     L6: while(1) {
      $maxcoord$0 = $maxcoord$0$ph;$maxx$0 = $maxx$0$ph;$pointp$0 = $pointp$0$ph;
      while(1) {
       $7 = ((($pointp$0)) + 4|0);
       $8 = HEAP32[$pointp$0>>2]|0;
       $9 = ($8|0)==(0|0);
       if ($9) {
        $maxx$5 = $maxx$0;$minx$3 = $minx$0$ph;
        break L3;
       }
       $10 = +HEAPF64[$8>>3];
       $11 = $maxcoord$0 < $10;
       $maxx$1 = $11 ? $8 : $maxx$0;
       $maxcoord$1 = $11 ? $10 : $maxcoord$0;
       $12 = $mincoord$0$ph > $10;
       if ($12) {
        $maxcoord$0$ph = $maxcoord$1;$maxx$0$ph = $maxx$1;$mincoord$0$ph = $10;$minx$0$ph = $8;$pointp$0$ph = $7;
        continue L6;
       } else {
        $maxcoord$0 = $maxcoord$1;$maxx$0 = $maxx$1;$pointp$0 = $7;
       }
      }
     }
    }
   } else {
    $13 = HEAP32[(5828)>>2]|0;
    $14 = Math_imul($13, $numpoints)|0;
    $15 = (($points) + ($14<<3)|0);
    $16 = ($14|0)>(0);
    if ($16) {
     $17 = HEAP32[(5324)>>2]|0;
     $18 = HEAP32[(5828)>>2]|0;
     $maxcoord$257 = -1.7976931348623157E+308;$maxx$255 = 0;$mincoord$156 = 1.7976931348623157E+308;$minx$154 = 0;$point$053 = $points;
     while(1) {
      $19 = ($point$053|0)==($17|0);
      if ($19) {
       $maxcoord$4 = $maxcoord$257;$maxx$4 = $maxx$255;$mincoord$2 = $mincoord$156;$minx$2 = $minx$154;
      } else {
       $20 = +HEAPF64[$point$053>>3];
       $21 = $maxcoord$257 < $20;
       $maxx$3 = $21 ? $point$053 : $maxx$255;
       $maxcoord$3 = $21 ? $20 : $maxcoord$257;
       $22 = $mincoord$156 > $20;
       if ($22) {
        $maxcoord$4 = $maxcoord$3;$maxx$4 = $maxx$3;$mincoord$2 = $20;$minx$2 = $point$053;
       } else {
        $maxcoord$4 = $maxcoord$3;$maxx$4 = $maxx$3;$mincoord$2 = $mincoord$156;$minx$2 = $minx$154;
       }
      }
      $23 = (($point$053) + ($18<<3)|0);
      $24 = ($23>>>0)<($15>>>0);
      if ($24) {
       $maxcoord$257 = $maxcoord$4;$maxx$255 = $maxx$4;$mincoord$156 = $mincoord$2;$minx$154 = $minx$2;$point$053 = $23;
      } else {
       $maxx$5 = $maxx$4;$minx$3 = $minx$2;
       break;
      }
     }
    } else {
     $maxx$5 = 0;$minx$3 = 0;
    }
   }
  } while(0);
  (_qh_setunique($simplex,$minx$3)|0);
  $25 = HEAP32[$simplex>>2]|0;
  $26 = (_qh_setsize($25)|0);
  $27 = ($26|0)<(2);
  if ($27) {
   (_qh_setunique($simplex,$maxx$5)|0);
  }
  $28 = HEAP32[$simplex>>2]|0;
  $29 = (_qh_setsize($28)|0);
  $30 = ($29|0)<(2);
  if ($30) {
   _qh_precision(3432);
   $31 = HEAP32[(44736)>>2]|0;
   $32 = HEAP32[(5828)>>2]|0;
   $33 = (($32) + 1)|0;
   $34 = ($31|0)>($33|0);
   $35 = HEAP32[(7480)>>2]|0;
   if ($34) {
    $36 = (_qh_setsize($maxpoints)|0);
    $37 = (($36) + ($numpoints))|0;
    HEAP32[$vararg_buffer>>2] = $37;
    _qh_fprintf($35,6012,3464,$vararg_buffer);
    _qh_errexit(3,0,0);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer1>>2] = $32;
    _qh_fprintf($35,6013,3568,$vararg_buffer1);
    _qh_errexit(1,0,0);
    // unreachable;
   }
  } else {
   $k$0$ph = $29;
  }
 } else {
  $k$0$ph = $1;
 }
 $38 = (($dim) + 1)|0;
 $39 = ($k$0$ph|0)<($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = ($maxpoints|0)==(0|0);
 $41 = ((($maxpoints)) + 4|0);
 $42 = ((($41)) + 4|0);
 $k$048 = $k$0$ph;$maxnearzero$047 = 0;
 while(1) {
  do {
   if ($40) {
    $43 = HEAP32[(44728)>>2]|0;
    $44 = (($43) + 1)|0;
    HEAP32[(44728)>>2] = $44;
    $45 = HEAP32[(5344)>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     $maxdet$157 = -1.7976931348623157E+308;$maxnearzero$249 = $maxnearzero$047;$maxpoint$1311 = 0;
     label = 37;
    } else {
     $maxdet$15815 = -1.7976931348623157E+308;$maxnearzero$241014 = $maxnearzero$047;
     label = 34;
    }
   } else {
    $47 = HEAP32[$41>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     $49 = HEAP32[(44728)>>2]|0;
     $50 = (($49) + 1)|0;
     HEAP32[(44728)>>2] = $50;
     $51 = HEAP32[(5344)>>2]|0;
     $52 = ($51|0)==(0);
     if ($52) {
      $maxdet$157 = -1.7976931348623157E+308;$maxnearzero$249 = $maxnearzero$047;$maxpoint$1311 = 0;
      label = 37;
      break;
     } else {
      $maxdet$15815 = -1.7976931348623157E+308;$maxnearzero$241014 = $maxnearzero$047;
      label = 34;
      break;
     }
    } else {
     $109 = $47;$110 = $42;$maxdet$0$ph34 = -1.7976931348623157E+308;$maxnearzero$1$ph33 = $maxnearzero$047;$maxpoint$0$ph32 = 0;
    }
    L38: while(1) {
     $54 = $109;$64 = $110;
     while(1) {
      $53 = HEAP32[$simplex>>2]|0;
      $55 = (_qh_setin($53,$54)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       $57 = HEAP32[$simplex>>2]|0;
       $58 = (+_qh_detsimplex($54,$57,$k$048,$nearzero));
       $59 = $58 < 0.0;
       $60 = -$58;
       $61 = $59 ? $60 : $58;
       $62 = $61 > $maxdet$0$ph34;
       if ($62) {
        $$lcssa = $54;$$lcssa131 = $64;$$lcssa133 = $61;
        break;
       }
      }
      $63 = ((($64)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       $maxdet$0$ph$lcssa = $maxdet$0$ph34;$maxnearzero$1$ph$lcssa = $maxnearzero$1$ph33;$maxpoint$0$ph$lcssa = $maxpoint$0$ph32;
       break L38;
      } else {
       $54 = $65;$64 = $63;
      }
     }
     $67 = HEAP32[$nearzero>>2]|0;
     $68 = ((($$lcssa131)) + 4|0);
     $69 = HEAP32[$$lcssa131>>2]|0;
     $70 = ($69|0)==(0|0);
     if ($70) {
      $maxdet$0$ph$lcssa = $$lcssa133;$maxnearzero$1$ph$lcssa = $67;$maxpoint$0$ph$lcssa = $$lcssa;
      break;
     } else {
      $109 = $69;$110 = $68;$maxdet$0$ph34 = $$lcssa133;$maxnearzero$1$ph33 = $67;$maxpoint$0$ph32 = $$lcssa;
     }
    }
    $71 = ($maxpoint$0$ph$lcssa|0)==(0|0);
    $72 = ($maxnearzero$1$ph$lcssa|0)!=(0);
    $or$cond = $71 | $72;
    if ($or$cond) {
     $73 = HEAP32[(44728)>>2]|0;
     $74 = (($73) + 1)|0;
     HEAP32[(44728)>>2] = $74;
     $75 = HEAP32[(5344)>>2]|0;
     $76 = ($75|0)!=(0);
     if ($71) {
      if ($76) {
       $maxdet$15815 = $maxdet$0$ph$lcssa;$maxnearzero$241014 = $maxnearzero$1$ph$lcssa;
       label = 34;
       break;
      } else {
       $maxdet$157 = $maxdet$0$ph$lcssa;$maxnearzero$249 = $maxnearzero$1$ph$lcssa;$maxpoint$1311 = 0;
       label = 37;
       break;
      }
     }
     if ($76) {
      $79 = HEAP32[(7480)>>2]|0;
      $80 = (($k$048) + 1)|0;
      $81 = (_qh_pointid($maxpoint$0$ph$lcssa)|0);
      HEAP32[$vararg_buffer7>>2] = $80;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $81;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAPF64[$vararg_ptr11>>3] = $maxdet$0$ph$lcssa;
      _qh_fprintf($79,8,3728,$vararg_buffer7);
      $maxdet$157 = $maxdet$0$ph$lcssa;$maxnearzero$249 = $maxnearzero$1$ph$lcssa;$maxpoint$1311 = $maxpoint$0$ph$lcssa;
      label = 37;
     } else {
      $maxdet$157 = $maxdet$0$ph$lcssa;$maxnearzero$249 = $maxnearzero$1$ph$lcssa;$maxpoint$1311 = $maxpoint$0$ph$lcssa;
      label = 37;
     }
    } else {
     $maxdet$4 = $maxdet$0$ph$lcssa;$maxnearzero$5 = $maxnearzero$1$ph$lcssa;$maxpoint$4 = $maxpoint$0$ph$lcssa;
    }
   }
  } while(0);
  if ((label|0) == 34) {
   label = 0;
   $77 = HEAP32[(7480)>>2]|0;
   $78 = (($k$048) + 1)|0;
   HEAP32[$vararg_buffer4>>2] = $78;
   _qh_fprintf($77,7,3664,$vararg_buffer4);
   $maxdet$157 = $maxdet$15815;$maxnearzero$249 = $maxnearzero$241014;$maxpoint$1311 = 0;
   label = 37;
  }
  if ((label|0) == 37) {
   label = 0;
   $82 = HEAP32[(5828)>>2]|0;
   $83 = Math_imul($82, $numpoints)|0;
   $84 = (($points) + ($83<<3)|0);
   $85 = ($83|0)>(0);
   if ($85) {
    $maxdet$241 = $maxdet$157;$maxnearzero$340 = $maxnearzero$249;$maxpoint$239 = $maxpoint$1311;$point$138 = $points;
    while(1) {
     $86 = HEAP32[(5324)>>2]|0;
     $87 = ($point$138|0)==($86|0);
     if ($87) {
      $maxdet$3 = $maxdet$241;$maxnearzero$4 = $maxnearzero$340;$maxpoint$3 = $maxpoint$239;
     } else {
      $88 = HEAP32[$simplex>>2]|0;
      $89 = (_qh_setin($88,$point$138)|0);
      $90 = ($89|0)==(0);
      if ($90) {
       $91 = HEAP32[$simplex>>2]|0;
       $92 = (+_qh_detsimplex($point$138,$91,$k$048,$nearzero));
       $93 = $92 < 0.0;
       $94 = -$92;
       $95 = $93 ? $94 : $92;
       $96 = $95 > $maxdet$241;
       if ($96) {
        $97 = HEAP32[$nearzero>>2]|0;
        $maxdet$3 = $95;$maxnearzero$4 = $97;$maxpoint$3 = $point$138;
       } else {
        $maxdet$3 = $maxdet$241;$maxnearzero$4 = $maxnearzero$340;$maxpoint$3 = $maxpoint$239;
       }
      } else {
       $maxdet$3 = $maxdet$241;$maxnearzero$4 = $maxnearzero$340;$maxpoint$3 = $maxpoint$239;
      }
     }
     $98 = HEAP32[(5828)>>2]|0;
     $99 = (($point$138) + ($98<<3)|0);
     $100 = ($99>>>0)<($84>>>0);
     if ($100) {
      $maxdet$241 = $maxdet$3;$maxnearzero$340 = $maxnearzero$4;$maxpoint$239 = $maxpoint$3;$point$138 = $99;
     } else {
      $maxdet$4 = $maxdet$3;$maxnearzero$5 = $maxnearzero$4;$maxpoint$4 = $maxpoint$3;
      break;
     }
    }
   } else {
    $maxdet$4 = $maxdet$157;$maxnearzero$5 = $maxnearzero$249;$maxpoint$4 = $maxpoint$1311;
   }
  }
  $101 = ($maxpoint$4|0)==(0|0);
  if ($101) {
   label = 44;
   break;
  }
  _qh_setappend($simplex,$maxpoint$4);
  $103 = HEAP32[(5344)>>2]|0;
  $104 = ($103|0)>(0);
  if ($104) {
   $105 = HEAP32[(7480)>>2]|0;
   $106 = (_qh_pointid($maxpoint$4)|0);
   $107 = (($k$048) + 1)|0;
   HEAP32[$vararg_buffer14>>2] = $106;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $107;
   $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
   HEAPF64[$vararg_ptr18>>3] = $maxdet$4;
   _qh_fprintf($105,1002,3896,$vararg_buffer14);
  }
  $108 = (($k$048) + 1)|0;
  $exitcond = ($k$048|0)==($dim|0);
  if ($exitcond) {
   label = 48;
   break;
  } else {
   $k$048 = $108;$maxnearzero$047 = $maxnearzero$5;
  }
 }
 if ((label|0) == 44) {
  $102 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($102,6014,3824,$vararg_buffer12);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 else if ((label|0) == 48) {
  STACKTOP = sp;return;
 }
}
function _qh_orientoutside($facet) {
 $facet = $facet|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $dist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dist = sp;
 $0 = HEAP32[(7484)>>2]|0;
 _qh_distplane($0,$facet,$dist);
 $1 = +HEAPF64[$dist>>3];
 $2 = $1 > 0.0;
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[(5828)>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($facet)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $$in = $3;
  while(1) {
   $7 = (($$in) + -1)|0;
   $8 = (($6) + ($7<<3)|0);
   $9 = +HEAPF64[$8>>3];
   $10 = -$9;
   HEAPF64[$8>>3] = $10;
   $11 = ($7|0)==(0);
   if ($11) {
    break;
   } else {
    $$in = $7;
   }
  }
 }
 $12 = ((($facet)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = -$13;
 HEAPF64[$12>>3] = $14;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _qh_outerinner($facet,$outerplane,$innerplane) {
 $facet = $facet|0;
 $outerplane = $outerplane|0;
 $innerplane = $innerplane|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $dist = 0, $mindist$0$ph = 0.0, $mindist$1 = 0.0, $or$cond = 0, $storemerge = 0.0, $storemerge2 = 0.0, $vertexp$0 = 0, $vertexp$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dist = sp;
 $0 = ($outerplane|0)==(0|0);
 if (!($0)) {
  $1 = ($facet|0)!=(0|0);
  $2 = HEAP32[(7624)>>2]|0;
  $3 = ($2|0)!=(0);
  $or$cond = $1 & $3;
  if ($or$cond) {
   $5 = ((($facet)) + 8|0);
   $6 = +HEAPF64[$5>>3];
   $7 = +HEAPF64[(6952)>>3];
   $8 = $6 + $7;
   $storemerge2 = $8;
  } else {
   $4 = (+_qh_maxouter());
   $storemerge2 = $4;
  }
  HEAPF64[$outerplane>>3] = $storemerge2;
  $9 = +HEAPF64[(7616)>>3];
  $10 = $9 < 8.9884656743115785E+307;
  if ($10) {
   $11 = HEAP32[(5828)>>2]|0;
   $12 = (+($11|0));
   $13 = (+Math_sqrt((+$12)));
   $14 = $9 * $13;
   $15 = $storemerge2 + $14;
   HEAPF64[$outerplane>>3] = $15;
  }
 }
 $16 = ($innerplane|0)==(0|0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = ($facet|0)==(0|0);
 if ($17) {
  $33 = +HEAPF64[(7648)>>3];
  $34 = +HEAPF64[(6952)>>3];
  $35 = $33 - $34;
  $storemerge = $35;
 } else {
  $18 = ((($facet)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  L15: do {
   if ($20) {
    $mindist$1 = 1.7976931348623157E+308;
   } else {
    $21 = ((($19)) + 4|0);
    $mindist$0$ph = 1.7976931348623157E+308;$vertexp$0$ph = $21;
    L17: while(1) {
     $vertexp$0 = $vertexp$0$ph;
     while(1) {
      $22 = ((($vertexp$0)) + 4|0);
      $23 = HEAP32[$vertexp$0>>2]|0;
      $24 = ($23|0)==(0|0);
      if ($24) {
       $mindist$1 = $mindist$0$ph;
       break L15;
      }
      $25 = HEAP32[(43616)>>2]|0;
      $26 = (($25) + 1)|0;
      HEAP32[(43616)>>2] = $26;
      $27 = ((($23)) + 8|0);
      $28 = HEAP32[$27>>2]|0;
      _qh_distplane($28,$facet,$dist);
      $29 = +HEAPF64[$dist>>3];
      $30 = $mindist$0$ph > $29;
      if ($30) {
       $mindist$0$ph = $29;$vertexp$0$ph = $22;
       continue L17;
      } else {
       $vertexp$0 = $22;
      }
     }
    }
   }
  } while(0);
  $31 = +HEAPF64[(6952)>>3];
  $32 = $mindist$1 - $31;
  $storemerge = $32;
 }
 HEAPF64[$innerplane>>3] = $storemerge;
 $36 = +HEAPF64[(7616)>>3];
 $37 = $36 < 8.9884656743115785E+307;
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[(5828)>>2]|0;
 $39 = (+($38|0));
 $40 = (+Math_sqrt((+$39)));
 $41 = $36 * $40;
 $42 = $storemerge - $41;
 HEAPF64[$innerplane>>3] = $42;
 STACKTOP = sp;return;
}
function _qh_pointdist($point1,$point2,$dim) {
 $point1 = $point1|0;
 $point2 = $point2|0;
 $dim = $dim|0;
 var $$0 = 0.0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $dist$0$lcssa = 0.0, $dist$05 = 0.0, $k$06 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)>(0);
 $1 = (0 - ($dim))|0;
 $2 = $0 ? $dim : $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $dist$0$lcssa = 0.0;
 } else {
  $$014 = $point1;$$023 = $point2;$dist$05 = 0.0;$k$06 = $2;
  while(1) {
   $4 = (($k$06) + -1)|0;
   $5 = ((($$014)) + 8|0);
   $6 = +HEAPF64[$$014>>3];
   $7 = ((($$023)) + 8|0);
   $8 = +HEAPF64[$$023>>3];
   $9 = $6 - $8;
   $10 = $9 * $9;
   $11 = $dist$05 + $10;
   $12 = ($4|0)==(0);
   if ($12) {
    $dist$0$lcssa = $11;
    break;
   } else {
    $$014 = $5;$$023 = $7;$dist$05 = $11;$k$06 = $4;
   }
  }
 }
 if (!($0)) {
  $$0 = $dist$0$lcssa;
  return (+$$0);
 }
 $13 = (+Math_sqrt((+$dist$0$lcssa)));
 $$0 = $13;
 return (+$$0);
}
function _qh_printmatrix($fp,$string,$rows,$numrow,$numcol) {
 $fp = $fp|0;
 $string = $string|0;
 $rows = $rows|0;
 $numrow = $numrow|0;
 $numcol = $numcol|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $exitcond = 0, $exitcond7 = 0, $i$03 = 0, $k$02 = 0, $rowp$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $string;
 _qh_fprintf($fp,9001,55768,$vararg_buffer);
 $0 = ($numrow|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($numcol|0)>(0);
 $i$03 = 0;
 while(1) {
  if ($1) {
   $2 = (($rows) + ($i$03<<2)|0);
   $3 = HEAP32[$2>>2]|0;
   $k$02 = 0;$rowp$01 = $3;
   while(1) {
    $4 = ((($rowp$01)) + 8|0);
    $5 = +HEAPF64[$rowp$01>>3];
    HEAPF64[$vararg_buffer1>>3] = $5;
    _qh_fprintf($fp,9002,3968,$vararg_buffer1);
    $6 = (($k$02) + 1)|0;
    $exitcond = ($6|0)==($numcol|0);
    if ($exitcond) {
     break;
    } else {
     $k$02 = $6;$rowp$01 = $4;
    }
   }
  }
  _qh_fprintf($fp,9003,56128,$vararg_buffer4);
  $7 = (($i$03) + 1)|0;
  $exitcond7 = ($7|0)==($numrow|0);
  if ($exitcond7) {
   break;
  } else {
   $i$03 = $7;
  }
 }
 STACKTOP = sp;return;
}
function _qh_projectinput() {
 var $$ = 0, $$lcssa = 0.0, $$pr = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $coord$0 = 0, $coord$0$lcssa = 0, $coord$0$ph = 0, $coord$1$lcssa = 0, $coord$18 = 0, $coord$2$lcssa = 0, $coord$26 = 0;
 var $exitcond = 0, $i$0 = 0, $i$0$ph = 0, $k$0$lcssa = 0, $k$019 = 0, $k$29 = 0, $k$3 = 0, $k$35 = 0, $k$37 = 0, $maxboloid$0$ph = 0.0, $maxboloid$0$ph$lcssa = 0.0, $newdim$0$lcssa = 0, $newdim$018 = 0, $newdim$1 = 0, $newdim$2 = 0, $newnum$0 = 0, $not$ = 0, $or$cond = 0, $paraboloid$0$lcssa = 0.0, $paraboloid$010 = 0.0;
 var $scevgep = 0, $scevgep32 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = HEAP32[(5832)>>2]|0;
 $1 = HEAP32[(5836)>>2]|0;
 $2 = (($0) + 1)|0;
 $3 = (_qh_memalloc($2)|0);
 _memset(($3|0),0,($2|0))|0;
 $4 = HEAP32[(5832)>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $k$019 = 0;$newdim$018 = $0;
  while(1) {
   $6 = HEAP32[(6920)>>2]|0;
   $7 = (($6) + ($k$019<<3)|0);
   $8 = +HEAPF64[$7>>3];
   $9 = $8 == 0.0;
   if ($9) {
    $10 = HEAP32[(6916)>>2]|0;
    $11 = (($10) + ($k$019<<3)|0);
    $12 = +HEAPF64[$11>>3];
    $13 = $12 == 0.0;
    if ($13) {
     $14 = (($3) + ($k$019)|0);
     HEAP8[$14>>0] = -1;
     $15 = (($newdim$018) + -1)|0;
     $newdim$1 = $15;
    } else {
     $newdim$1 = $newdim$018;
    }
   } else {
    $newdim$1 = $newdim$018;
   }
   $16 = (($k$019) + 1)|0;
   $17 = HEAP32[(5832)>>2]|0;
   $18 = ($16|0)<($17|0);
   if ($18) {
    $k$019 = $16;$newdim$018 = $newdim$1;
   } else {
    $k$0$lcssa = $16;$newdim$0$lcssa = $newdim$1;
    break;
   }
  }
 } else {
  $k$0$lcssa = 0;$newdim$0$lcssa = $0;
 }
 $19 = HEAP32[(5304)>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $newdim$2 = $newdim$0$lcssa;$newnum$0 = $1;
 } else {
  $21 = (($3) + ($k$0$lcssa)|0);
  HEAP8[$21>>0] = 1;
  $22 = (($newdim$0$lcssa) + 1)|0;
  $23 = HEAP32[(5260)>>2]|0;
  $not$ = ($23|0)!=(0);
  $24 = $not$&1;
  $$ = (($24) + ($1))|0;
  $newdim$2 = $22;$newnum$0 = $$;
 }
 $25 = HEAP32[(5828)>>2]|0;
 $26 = ($newdim$2|0)==($25|0);
 if (!($26)) {
  $27 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $newdim$2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $25;
  _qh_fprintf($27,6015,3976,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $28 = $newnum$0 << 3;
 $29 = Math_imul($28, $newdim$2)|0;
 $30 = (_qh_malloc($29)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = HEAP32[(7480)>>2]|0;
  $33 = HEAP32[(5836)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $33;
  _qh_fprintf($32,6016,4064,$vararg_buffer2);
  _qh_errexit(4,0,0);
  // unreachable;
 }
 $34 = HEAP32[(5832)>>2]|0;
 $35 = (($34) + 1)|0;
 $36 = HEAP32[(5840)>>2]|0;
 $37 = HEAP32[(5836)>>2]|0;
 _qh_projectpoints($3,$35,$36,$37,$34,$30,$newdim$2);
 $38 = HEAP32[(5344)>>2]|0;
 $39 = ($38|0)>(0);
 if ($39) {
  $40 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($40,1003,4120,$vararg_buffer5);
 }
 $41 = HEAP32[(5832)>>2]|0;
 $42 = (($41) + 1)|0;
 $43 = HEAP32[(6920)>>2]|0;
 $44 = (($newdim$2) + 1)|0;
 _qh_projectpoints($3,$42,$43,1,$42,$43,$44);
 $45 = HEAP32[(5832)>>2]|0;
 $46 = (($45) + 1)|0;
 $47 = HEAP32[(6916)>>2]|0;
 _qh_projectpoints($3,$46,$47,1,$46,$47,$44);
 $48 = HEAP32[(5340)>>2]|0;
 $49 = ($48|0)==(0);
 do {
  if (!($49)) {
   $50 = HEAP32[(5816)>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    $52 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($52,6017,4176,$vararg_buffer7);
    _qh_errexit(5,0,0);
    // unreachable;
   } else {
    $53 = HEAP32[(5832)>>2]|0;
    $54 = HEAP32[(5816)>>2]|0;
    _qh_projectpoints($3,$53,$54,1,$53,$54,$newdim$2);
    break;
   }
  }
 } while(0);
 $55 = HEAP32[(5832)>>2]|0;
 $56 = (($55) + 1)|0;
 _qh_memfree($3,$56);
 $57 = HEAP32[(5844)>>2]|0;
 $58 = ($57|0)==(0);
 if (!($58)) {
  $59 = HEAP32[(5840)>>2]|0;
  _qh_free($59);
 }
 HEAP32[(5840)>>2] = $30;
 HEAP32[(5844)>>2] = 1;
 $60 = HEAP32[(5304)>>2]|0;
 $61 = ($60|0)!=(0);
 $62 = HEAP32[(5260)>>2]|0;
 $63 = ($62|0)!=(0);
 $or$cond = $61 & $63;
 if (!($or$cond)) {
  if (!($61)) {
   STACKTOP = sp;return;
  }
  $105 = HEAP32[(5828)>>2]|0;
  $106 = HEAP32[(5836)>>2]|0;
  $107 = HEAP32[(5840)>>2]|0;
  _qh_setdelaunay($105,$106,$107);
  STACKTOP = sp;return;
 }
 $64 = HEAP32[(5840)>>2]|0;
 $65 = HEAP32[(5828)>>2]|0;
 $66 = HEAP32[(5836)>>2]|0;
 $67 = Math_imul($66, $65)|0;
 $68 = ($65|0)==(1);
 if ($68) {
  $75 = 1;
 } else {
  $69 = (($65) + -2)|0;
  $70 = $69;
  while(1) {
   $$sum2 = (($70) + ($67))|0;
   $71 = (($64) + ($$sum2<<3)|0);
   HEAPF64[$71>>3] = 0.0;
   $72 = (($70) + -1)|0;
   $73 = ($70|0)==(0);
   if ($73) {
    break;
   } else {
    $70 = $72;
   }
  }
  $$pr = HEAP32[(5828)>>2]|0;
  $75 = $$pr;
 }
 $74 = HEAP32[(5836)>>2]|0;
 $76 = ($75|0)>(1);
 $77 = (($75) + -1)|0;
 $coord$0$ph = $64;$i$0$ph = $74;$maxboloid$0$ph = 0.0;
 L43: while(1) {
  $coord$0 = $coord$0$ph;$i$0 = $i$0$ph;
  while(1) {
   $78 = (($i$0) + -1)|0;
   $79 = ($i$0|0)==(0);
   if ($79) {
    $coord$0$lcssa = $coord$0;$maxboloid$0$ph$lcssa = $maxboloid$0$ph;
    break L43;
   }
   if ($76) {
    $coord$18 = $coord$0;$k$29 = 0;$paraboloid$010 = 0.0;
    while(1) {
     $80 = +HEAPF64[$coord$18>>3];
     $81 = $80 * $80;
     $82 = $paraboloid$010 + $81;
     $$sum = (($k$29) + ($67))|0;
     $83 = (($64) + ($$sum<<3)|0);
     $84 = +HEAPF64[$83>>3];
     $85 = $80 + $84;
     HEAPF64[$83>>3] = $85;
     $86 = ((($coord$18)) + 8|0);
     $87 = (($k$29) + 1)|0;
     $exitcond = ($87|0)==($77|0);
     if ($exitcond) {
      $$lcssa = $82;
      break;
     } else {
      $coord$18 = $86;$k$29 = $87;$paraboloid$010 = $82;
     }
    }
    $scevgep32 = (($coord$0) + ($77<<3)|0);
    $coord$1$lcssa = $scevgep32;$paraboloid$0$lcssa = $$lcssa;
   } else {
    $coord$1$lcssa = $coord$0;$paraboloid$0$lcssa = 0.0;
   }
   $88 = ((($coord$1$lcssa)) + 8|0);
   HEAPF64[$coord$1$lcssa>>3] = $paraboloid$0$lcssa;
   $89 = $maxboloid$0$ph < $paraboloid$0$lcssa;
   if ($89) {
    $coord$0$ph = $88;$i$0$ph = $78;$maxboloid$0$ph = $paraboloid$0$lcssa;
    continue L43;
   } else {
    $coord$0 = $88;$i$0 = $78;
   }
  }
 }
 $90 = HEAP32[(5828)>>2]|0;
 $k$35 = (($90) + -1)|0;
 $91 = ($k$35|0)==(0);
 if ($91) {
  $coord$2$lcssa = $coord$0$lcssa;
 } else {
  $92 = HEAP32[(5836)>>2]|0;
  $93 = (+($92|0));
  $94 = (($90) + -1)|0;
  $coord$26 = $coord$0$lcssa;$k$37 = $k$35;
  while(1) {
   $95 = ((($coord$26)) + 8|0);
   $96 = +HEAPF64[$coord$26>>3];
   $97 = $96 / $93;
   HEAPF64[$coord$26>>3] = $97;
   $k$3 = (($k$37) + -1)|0;
   $98 = ($k$3|0)==(0);
   if ($98) {
    break;
   } else {
    $coord$26 = $95;$k$37 = $k$3;
   }
  }
  $scevgep = (($coord$0$lcssa) + ($94<<3)|0);
  $coord$2$lcssa = $scevgep;
 }
 $99 = $maxboloid$0$ph$lcssa * 1.1000000000000001;
 HEAPF64[$coord$2$lcssa>>3] = $99;
 $100 = HEAP32[(5836)>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[(5836)>>2] = $101;
 $102 = HEAP32[(5344)>>2]|0;
 $103 = ($102|0)==(0);
 if ($103) {
  STACKTOP = sp;return;
 }
 $104 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($104,9,4264,$vararg_buffer9);
 STACKTOP = sp;return;
}
function _qh_projectpoints($project,$n,$points,$numpoints,$dim,$newpoints,$newdim) {
 $project = $project|0;
 $n = $n|0;
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dim = $dim|0;
 $newpoints = $newpoints|0;
 $newdim = $newdim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $j$06 = 0, $k$010 = 0, $newk$05 = 0, $newk$1 = 0, $newk$2 = 0, $newp$02 = 0, $oldk$04 = 0, $oldk$1 = 0;
 var $oldk$2 = 0, $oldk$3 = 0, $oldp$0 = 0, $oldp$13 = 0, $testdim$0$lcssa = 0, $testdim$09 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($n|0)>(0);
 if ($0) {
  $k$010 = 0;$testdim$09 = $dim;
  while(1) {
   $1 = (($project) + ($k$010)|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (($3) + ($testdim$09))|0;
   $5 = (($k$010) + 1)|0;
   $exitcond = ($5|0)==($n|0);
   if ($exitcond) {
    $testdim$0$lcssa = $4;
    break;
   } else {
    $k$010 = $5;$testdim$09 = $4;
   }
  }
 } else {
  $testdim$0$lcssa = $dim;
 }
 $6 = ($testdim$0$lcssa|0)==($newdim|0);
 if (!($6)) {
  $7 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $newdim;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $testdim$0$lcssa;
  _qh_fprintf($7,6018,4328,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $8 = ($n|0)>(0);
 L8: do {
  if ($8) {
   $9 = ($numpoints|0)==(0);
   $j$06 = 0;$newk$05 = 0;$oldk$04 = 0;
   while(1) {
    $10 = (($project) + ($j$06)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(-1);
    do {
     if ($12) {
      $13 = (($oldk$04) + 1)|0;
      $newk$1 = $newk$05;$oldk$2 = $13;
      label = 15;
     } else {
      $14 = (($newk$05) + 1)|0;
      $15 = (($newpoints) + ($newk$05<<3)|0);
      $16 = ($11<<24>>24)==(1);
      if ($16) {
       $17 = ($oldk$04|0)<($dim|0);
       if ($17) {
        $oldk$1 = $oldk$04;
       } else {
        $newk$2 = $14;$oldk$3 = $oldk$04;
        break;
       }
      } else {
       $18 = (($oldk$04) + 1)|0;
       $oldk$1 = $18;
      }
      if ($9) {
       $newk$1 = $14;$oldk$2 = $oldk$1;
       label = 15;
      } else {
       $oldp$0 = (($points) + ($oldk$04<<3)|0);
       $i$01 = $numpoints;$newp$02 = $15;$oldp$13 = $oldp$0;
       while(1) {
        $19 = (($i$01) + -1)|0;
        $20 = +HEAPF64[$oldp$13>>3];
        HEAPF64[$newp$02>>3] = $20;
        $21 = (($newp$02) + ($newdim<<3)|0);
        $22 = (($oldp$13) + ($dim<<3)|0);
        $23 = ($19|0)==(0);
        if ($23) {
         $newk$1 = $14;$oldk$2 = $oldk$1;
         label = 15;
         break;
        } else {
         $i$01 = $19;$newp$02 = $21;$oldp$13 = $22;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     $24 = ($oldk$2|0)<($dim|0);
     if ($24) {
      $newk$2 = $newk$1;$oldk$3 = $oldk$2;
     } else {
      break L8;
     }
    }
    $25 = (($j$06) + 1)|0;
    $26 = ($25|0)<($n|0);
    if ($26) {
     $j$06 = $25;$newk$05 = $newk$2;$oldk$04 = $oldk$3;
    } else {
     break;
    }
   }
  }
 } while(0);
 $27 = HEAP32[(5344)>>2]|0;
 $28 = ($27|0)>(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $numpoints;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $dim;
 $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $newdim;
 _qh_fprintf($29,1004,4416,$vararg_buffer2);
 STACKTOP = sp;return;
}
function _qh_rotateinput($rows) {
 $rows = $rows|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5844)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[(5840)>>2]|0;
  $3 = HEAP32[(5836)>>2]|0;
  $4 = HEAP32[(5828)>>2]|0;
  $5 = (_qh_copypoints($2,$3,$4)|0);
  HEAP32[(5840)>>2] = $5;
  HEAP32[(5844)>>2] = 1;
 }
 $6 = HEAP32[(5840)>>2]|0;
 $7 = HEAP32[(5836)>>2]|0;
 $8 = HEAP32[(5828)>>2]|0;
 _qh_rotatepoints($6,$7,$8,$rows);
 return;
}
function _qh_rotatepoints($points,$numpoints,$dim,$row) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dim = $dim|0;
 $row = $row|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coord$021 = 0, $coord$1$lcssa = 0, $coord$2$lcssa = 0, $coord$23 = 0, $coord$3$lcssa = 0, $coord$313 = 0, $exitcond = 0, $i$08 = 0, $indvars$iv = 0;
 var $k$05 = 0, $k$115 = 0, $newval$0$lcssa = 0, $newval$07 = 0, $newval$114 = 0, $point$019 = 0, $points$pn = 0, $rowi$02 = 0, $scevgep29 = 0, $scevgep30 = 0, $sum$0$lcssa = 0.0, $sum$04 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_printmatrix($2,4480,$row,$dim,$dim);
 }
 $3 = ($numpoints|0)==(0);
 if ($3) {
  return;
 }
 $4 = (($row) + ($dim<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($dim|0)>(0);
 $7 = ($dim|0)==(0);
 $8 = ($dim|0)==(0);
 $scevgep29 = (($5) + ($dim<<3)|0);
 $9 = (0 - ($dim))|0;
 $$in = $numpoints;$coord$021 = 0;$point$019 = $points;$points$pn = $points;
 while(1) {
  $indvars$iv = (($points$pn) + ($dim<<3)|0);
  $10 = (($$in) + -1)|0;
  if ($6) {
   $i$08 = 0;$newval$07 = $5;
   while(1) {
    if ($8) {
     $coord$2$lcssa = $point$019;$sum$0$lcssa = 0.0;
    } else {
     $11 = (($row) + ($i$08<<2)|0);
     $12 = HEAP32[$11>>2]|0;
     $coord$23 = $point$019;$k$05 = $dim;$rowi$02 = $12;$sum$04 = 0.0;
     while(1) {
      $13 = (($k$05) + -1)|0;
      $14 = ((($rowi$02)) + 8|0);
      $15 = +HEAPF64[$rowi$02>>3];
      $16 = ((($coord$23)) + 8|0);
      $17 = +HEAPF64[$coord$23>>3];
      $18 = $15 * $17;
      $19 = $sum$04 + $18;
      $20 = ($13|0)==(0);
      if ($20) {
       $coord$2$lcssa = $indvars$iv;$sum$0$lcssa = $19;
       break;
      } else {
       $coord$23 = $16;$k$05 = $13;$rowi$02 = $14;$sum$04 = $19;
      }
     }
    }
    $21 = ((($newval$07)) + 8|0);
    HEAPF64[$newval$07>>3] = $sum$0$lcssa;
    $22 = (($i$08) + 1)|0;
    $exitcond = ($22|0)==($dim|0);
    if ($exitcond) {
     $coord$1$lcssa = $coord$2$lcssa;$newval$0$lcssa = $scevgep29;
     break;
    } else {
     $i$08 = $22;$newval$07 = $21;
    }
   }
  } else {
   $coord$1$lcssa = $coord$021;$newval$0$lcssa = $5;
  }
  if ($7) {
   $coord$3$lcssa = $coord$1$lcssa;
  } else {
   $coord$313 = $coord$1$lcssa;$k$115 = $dim;$newval$114 = $newval$0$lcssa;
   while(1) {
    $23 = (($k$115) + -1)|0;
    $24 = ((($newval$114)) + -8|0);
    $25 = +HEAPF64[$24>>3];
    $26 = ((($coord$313)) + -8|0);
    HEAPF64[$26>>3] = $25;
    $27 = ($23|0)==(0);
    if ($27) {
     break;
    } else {
     $coord$313 = $26;$k$115 = $23;$newval$114 = $24;
    }
   }
   $scevgep30 = (($coord$1$lcssa) + ($9<<3)|0);
   $coord$3$lcssa = $scevgep30;
  }
  $28 = (($point$019) + ($dim<<3)|0);
  $29 = ($10|0)==(0);
  if ($29) {
   break;
  } else {
   $$in = $10;$coord$021 = $coord$3$lcssa;$point$019 = $28;$points$pn = $indvars$iv;
  }
 }
 return;
}
function _qh_scaleinput() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5844)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[(5840)>>2]|0;
  $3 = HEAP32[(5836)>>2]|0;
  $4 = HEAP32[(5828)>>2]|0;
  $5 = (_qh_copypoints($2,$3,$4)|0);
  HEAP32[(5840)>>2] = $5;
  HEAP32[(5844)>>2] = 1;
 }
 $6 = HEAP32[(5840)>>2]|0;
 $7 = HEAP32[(5836)>>2]|0;
 $8 = HEAP32[(5828)>>2]|0;
 $9 = HEAP32[(6920)>>2]|0;
 $10 = HEAP32[(6916)>>2]|0;
 _qh_scalepoints($6,$7,$8,$9,$10);
 return;
}
function _qh_scalepoints($points,$numpoints,$dim,$newlows,$newhighs) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dim = $dim|0;
 $newlows = $newlows|0;
 $newhighs = $newhighs|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $coord$06 = 0, $coord$111 = 0, $coord$215 = 0, $exitcond = 0, $high$0$lcssa = 0.0, $high$08 = 0.0, $high$1 = 0.0;
 var $i$05 = 0, $i$110 = 0, $k$019 = 0, $low$0$lcssa = 0.0, $low$07 = 0.0, $low$1 = 0.0, $nearzero = 0, $newhigh$0 = 0.0, $newhigh$0$newlow$0 = 0.0, $newlow$0 = 0.0, $newlow$0$newhigh$0 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 64|0;
 $vararg_buffer4 = sp;
 $vararg_buffer = sp + 40|0;
 $nearzero = sp + 128|0;
 HEAP32[$nearzero>>2] = 0;
 $0 = ($dim|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($numpoints|0)==(0);
 $2 = (($dim) + -1)|0;
 $3 = ($numpoints|0)==(0);
 $4 = ($numpoints|0)==(0);
 $k$019 = 0;
 while(1) {
  $5 = (($newhighs) + ($k$019<<3)|0);
  $6 = +HEAPF64[$5>>3];
  $7 = (($newlows) + ($k$019<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $6 > 8.9884656743115785E+307;
  $10 = $8 < -8.9884656743115785E+307;
  $or$cond = $9 & $10;
  if (!($or$cond)) {
   $11 = (($points) + ($k$019<<3)|0);
   if ($1) {
    $high$0$lcssa = -1.7976931348623157E+308;$low$0$lcssa = 1.7976931348623157E+308;
   } else {
    $coord$06 = $11;$high$08 = -1.7976931348623157E+308;$i$05 = $numpoints;$low$07 = 1.7976931348623157E+308;
    while(1) {
     $12 = (($i$05) + -1)|0;
     $13 = +HEAPF64[$coord$06>>3];
     $14 = $low$07 > $13;
     $low$1 = $14 ? $13 : $low$07;
     $15 = $high$08 < $13;
     $high$1 = $15 ? $13 : $high$08;
     $16 = (($coord$06) + ($dim<<3)|0);
     $17 = ($12|0)==(0);
     if ($17) {
      $high$0$lcssa = $high$1;$low$0$lcssa = $low$1;
      break;
     } else {
      $coord$06 = $16;$high$08 = $high$1;$i$05 = $12;$low$07 = $low$1;
     }
    }
   }
   $newhigh$0 = $9 ? $high$0$lcssa : $6;
   $newlow$0 = $10 ? $low$0$lcssa : $8;
   $18 = HEAP32[(5304)>>2]|0;
   $19 = ($18|0)!=(0);
   $20 = ($k$019|0)==($2|0);
   $or$cond3 = $20 & $19;
   $21 = $newhigh$0 < $newlow$0;
   $or$cond4 = $21 & $or$cond3;
   if ($or$cond4) {
    label = 7;
    break;
   }
   $23 = $newhigh$0 - $newlow$0;
   $24 = $high$0$lcssa - $low$0$lcssa;
   $25 = +HEAPF64[(6992)>>3];
   $26 = (+_qh_divzero($23,$24,$25,$nearzero));
   $27 = HEAP32[$nearzero>>2]|0;
   $28 = ($27|0)==(0);
   if (!($28)) {
    label = 9;
    break;
   }
   $30 = $newlow$0 * $high$0$lcssa;
   $31 = $low$0$lcssa * $newhigh$0;
   $32 = $30 - $31;
   $33 = $32 / $24;
   if (!($3)) {
    $coord$111 = $11;$i$110 = $numpoints;
    while(1) {
     $34 = (($i$110) + -1)|0;
     $35 = +HEAPF64[$coord$111>>3];
     $36 = $26 * $35;
     $37 = $33 + $36;
     HEAPF64[$coord$111>>3] = $37;
     $38 = (($coord$111) + ($dim<<3)|0);
     $39 = ($34|0)==(0);
     if ($39) {
      break;
     } else {
      $coord$111 = $38;$i$110 = $34;
     }
    }
   }
   $40 = $newlow$0 < $newhigh$0;
   $newlow$0$newhigh$0 = $40 ? $newlow$0 : $newhigh$0;
   $newhigh$0$newlow$0 = $40 ? $newhigh$0 : $newlow$0;
   if (!($4)) {
    $$in = $numpoints;$coord$215 = $11;
    while(1) {
     $41 = (($$in) + -1)|0;
     $42 = +HEAPF64[$coord$215>>3];
     $43 = $42 > $newhigh$0$newlow$0;
     if ($43) {
      HEAPF64[$coord$215>>3] = $newhigh$0$newlow$0;
     }
     $44 = +HEAPF64[$coord$215>>3];
     $45 = $44 < $newlow$0$newhigh$0;
     if ($45) {
      HEAPF64[$coord$215>>3] = $newlow$0$newhigh$0;
     }
     $46 = (($coord$215) + ($dim<<3)|0);
     $47 = ($41|0)==(0);
     if ($47) {
      break;
     } else {
      $$in = $41;$coord$215 = $46;
     }
    }
   }
   $48 = HEAP32[(5344)>>2]|0;
   $49 = ($48|0)==(0);
   if (!($49)) {
    $50 = HEAP32[(7480)>>2]|0;
    HEAP32[$vararg_buffer11>>2] = $k$019;
    $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
    HEAPF64[$vararg_ptr14>>3] = $low$0$lcssa;
    $vararg_ptr15 = ((($vararg_buffer11)) + 16|0);
    HEAPF64[$vararg_ptr15>>3] = $high$0$lcssa;
    $vararg_ptr16 = ((($vararg_buffer11)) + 24|0);
    HEAPF64[$vararg_ptr16>>3] = $newlow$0;
    $vararg_ptr17 = ((($vararg_buffer11)) + 32|0);
    HEAPF64[$vararg_ptr17>>3] = $newhigh$0;
    $vararg_ptr18 = ((($vararg_buffer11)) + 40|0);
    HEAP32[$vararg_ptr18>>2] = $numpoints;
    $vararg_ptr19 = ((($vararg_buffer11)) + 48|0);
    HEAPF64[$vararg_ptr19>>3] = $26;
    $vararg_ptr20 = ((($vararg_buffer11)) + 56|0);
    HEAPF64[$vararg_ptr20>>3] = $33;
    _qh_fprintf($50,10,4728,$vararg_buffer11);
   }
  }
  $51 = (($k$019) + 1)|0;
  $exitcond = ($51|0)==($dim|0);
  if ($exitcond) {
   label = 21;
   break;
  } else {
   $k$019 = $51;
  }
 }
 if ((label|0) == 7) {
  $22 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $k$019;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $k$019;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $newhigh$0;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $newlow$0;
  _qh_fprintf($22,6021,4520,$vararg_buffer);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $29 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $k$019;
  $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
  HEAPF64[$vararg_ptr7>>3] = $newlow$0;
  $vararg_ptr8 = ((($vararg_buffer4)) + 16|0);
  HEAPF64[$vararg_ptr8>>3] = $newhigh$0;
  $vararg_ptr9 = ((($vararg_buffer4)) + 24|0);
  HEAPF64[$vararg_ptr9>>3] = $low$0$lcssa;
  $vararg_ptr10 = ((($vararg_buffer4)) + 32|0);
  HEAPF64[$vararg_ptr10>>3] = $high$0$lcssa;
  _qh_fprintf($29,6022,4616,$vararg_buffer4);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function _qh_scalelast($points,$numpoints,$dim,$low,$high,$newhigh) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dim = $dim|0;
 $low = +$low;
 $high = +$high;
 $newhigh = +$newhigh;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $coord$01 = 0, $i$02 = 0, $nearzero = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp;
 $vararg_buffer = sp + 8|0;
 $nearzero = sp + 64|0;
 HEAP32[$nearzero>>2] = 0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  HEAPF64[$vararg_buffer>>3] = $low;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $high;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr2>>3] = $newhigh;
  _qh_fprintf($2,4013,4848,$vararg_buffer);
 }
 HEAPF64[(7800)>>3] = $low;
 HEAPF64[(7808)>>3] = $high;
 HEAPF64[(7816)>>3] = $newhigh;
 $3 = $high - $low;
 $4 = +HEAPF64[(6992)>>3];
 $5 = (+_qh_divzero($newhigh,$3,$4,$nearzero));
 $6 = HEAP32[$nearzero>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $low * $newhigh;
  $12 = -$11;
  $13 = $12 / $3;
  $14 = ($numpoints|0)==(0);
  if ($14) {
   STACKTOP = sp;return;
  }
  $$sum = (($dim) + -1)|0;
  $15 = (($points) + ($$sum<<3)|0);
  $coord$01 = $15;$i$02 = $numpoints;
  while(1) {
   $16 = (($i$02) + -1)|0;
   $17 = +HEAPF64[$coord$01>>3];
   $18 = $5 * $17;
   $19 = $13 + $18;
   HEAPF64[$coord$01>>3] = $19;
   $20 = (($coord$01) + ($dim<<3)|0);
   $21 = ($16|0)==(0);
   if ($21) {
    break;
   } else {
    $coord$01 = $20;$i$02 = $16;
   }
  }
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[(5304)>>2]|0;
  $9 = ($8|0)==(0);
  $10 = HEAP32[(7480)>>2]|0;
  if ($9) {
   HEAPF64[$vararg_buffer5>>3] = $newhigh;
   $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
   HEAPF64[$vararg_ptr8>>3] = $low;
   $vararg_ptr9 = ((($vararg_buffer5)) + 16|0);
   HEAPF64[$vararg_ptr9>>3] = $high;
   $vararg_ptr10 = ((($vararg_buffer5)) + 24|0);
   HEAPF64[$vararg_ptr10>>3] = $3;
   _qh_fprintf($10,6020,5064,$vararg_buffer5);
   _qh_errexit(1,0,0);
   // unreachable;
  } else {
   _qh_fprintf($10,6019,4920,$vararg_buffer3);
   _qh_errexit(1,0,0);
   // unreachable;
  }
 }
}
function _qh_sharpnewfacets() {
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $facet$05 = 0, $issharp$2 = 0, $k$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = $0 << 2;
 $2 = (_qh_memalloc($1)|0);
 $3 = HEAP32[(7512)>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $issharp$2 = 0;
  } else {
   $5 = HEAP32[(7512)>>2]|0;
   $facet$05 = $3;
   while(1) {
    $6 = ((($facet$05)) + 48|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $issharp$2 = 0;
     break L1;
    }
    $9 = ($facet$05|0)==($5|0);
    $10 = HEAP32[(5828)>>2]|0;
    L6: do {
     if ($9) {
      $12 = ($10|0)==(0);
      if (!($12)) {
       $13 = ((($facet$05)) + 24|0);
       $14 = HEAP32[$13>>2]|0;
       $$in = $10;
       while(1) {
        $15 = (($$in) + -1)|0;
        $16 = (($14) + ($15<<3)|0);
        $17 = +HEAPF64[$16>>3];
        $18 = $17 > 0.0;
        $19 = $18&1;
        $20 = (($2) + ($15<<2)|0);
        HEAP32[$20>>2] = $19;
        $21 = ($15|0)==(0);
        if ($21) {
         break;
        } else {
         $$in = $15;
        }
       }
      }
     } else {
      $11 = ((($facet$05)) + 24|0);
      $k$1 = $10;
      while(1) {
       $22 = (($k$1) + -1)|0;
       $23 = ($k$1|0)==(0);
       if ($23) {
        break L6;
       }
       $24 = (($2) + ($22<<2)|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$11>>2]|0;
       $27 = (($26) + ($22<<3)|0);
       $28 = +HEAPF64[$27>>3];
       $29 = $28 > 0.0;
       $30 = $29&1;
       $31 = ($25|0)==($30|0);
       if ($31) {
        $k$1 = $22;
       } else {
        $issharp$2 = 1;
        break L1;
       }
      }
     }
    } while(0);
    $32 = HEAP32[$6>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $issharp$2 = 0;
     break;
    } else {
     $facet$05 = $32;
    }
   }
  }
 } while(0);
 $34 = HEAP32[(5828)>>2]|0;
 $35 = $34 << 2;
 _qh_memfree($2,$35);
 $36 = HEAP32[(5344)>>2]|0;
 $37 = ($36|0)>(2);
 if (!($37)) {
  STACKTOP = sp;return ($issharp$2|0);
 }
 $38 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $issharp$2;
 _qh_fprintf($38,3001,5200,$vararg_buffer);
 STACKTOP = sp;return ($issharp$2|0);
}
function _qh_init_A($infile,$outfile,$errfile,$argc,$argv) {
 $infile = $infile|0;
 $outfile = $outfile|0;
 $errfile = $errfile|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _qh_meminit($errfile);
 _qh_initqhull_start($infile,$outfile,$errfile);
 _qh_init_qhull_command($argc,$argv);
 return;
}
function _qh_initqhull_start($infile,$outfile,$errfile) {
 $infile = $infile|0;
 $outfile = $outfile|0;
 $errfile = $errfile|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _qh_initstatistics();
 _qh_initqhull_start2($infile,$outfile,$errfile);
 return;
}
function _qh_init_qhull_command($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_qh_argv_to_command($argc,$argv,(5856),256)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = 256;
  _qh_fprintf($2,6033,7848,$vararg_buffer);
  _qh_exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _qh_init_B($points,$numpoints,$dim,$ismalloc) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dim = $dim|0;
 $ismalloc = $ismalloc|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $k$02 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _qh_initqhull_globals($points,$numpoints,$dim,$ismalloc);
 $0 = HEAP32[(21192)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  _qh_initqhull_mem();
 }
 _qh_initqhull_buffers();
 _qh_initthresholds((5856));
 $2 = HEAP32[(5648)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[(5304)>>2]|0;
  $5 = ($4|0)!=(0);
  $6 = HEAP32[(5644)>>2]|0;
  $7 = ($6|0)!=(0);
  $or$cond = $5 & $7;
  if ($or$cond) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  _qh_projectinput();
 }
 $8 = HEAP32[(5708)>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _qh_scaleinput();
 }
 $10 = HEAP32[(5704)>>2]|0;
 $11 = ($10|0)>(-1);
 if (!($11)) {
  return;
 }
 $12 = HEAP32[(7756)>>2]|0;
 $13 = HEAP32[(5828)>>2]|0;
 $14 = HEAP32[(7760)>>2]|0;
 _qh_randommatrix($12,$13,$14);
 $15 = HEAP32[(5304)>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = HEAP32[(5828)>>2]|0;
  $18 = (($17) + -1)|0;
  $19 = ($17|0)>(1);
  $20 = HEAP32[(7760)>>2]|0;
  if ($19) {
   $21 = HEAP32[(7760)>>2]|0;
   $22 = (($21) + ($18<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($17) + -1)|0;
   $26 = $20;$k$02 = 0;
   while(1) {
    $25 = (($26) + ($k$02<<2)|0);
    $27 = HEAP32[$25>>2]|0;
    $28 = (($27) + ($18<<3)|0);
    HEAPF64[$28>>3] = 0.0;
    $29 = (($23) + ($k$02<<3)|0);
    HEAPF64[$29>>3] = 0.0;
    $30 = (($k$02) + 1)|0;
    $exitcond = ($30|0)==($24|0);
    if ($exitcond) {
     $$lcssa = $21;
     break;
    } else {
     $26 = $21;$k$02 = $30;
    }
   }
  } else {
   $$lcssa = $20;
  }
  $31 = (($$lcssa) + ($18<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($18<<3)|0);
  HEAPF64[$33>>3] = 1.0;
 }
 $34 = HEAP32[(5828)>>2]|0;
 $35 = HEAP32[(7760)>>2]|0;
 (_qh_gram_schmidt($34,$35)|0);
 $36 = HEAP32[(7760)>>2]|0;
 _qh_rotateinput($36);
 return;
}
function _qh_initqhull_globals($points,$numpoints,$dim,$ismalloc) {
 $points = $points|0;
 $numpoints = $numpoints|0;
 $dim = $dim|0;
 $ismalloc = $ismalloc|0;
 var $$ = 0, $$58 = 0, $$58$v = 0, $$lcssa = 0.0, $$pr59 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $extra$0 = 0, $factorial$0$lcssa = 0.0, $factorial$063 = 0.0, $k$062 = 0, $not$ = 0, $not$60 = 0, $notlhs = 0, $notlhs52 = 0, $notlhs54 = 0, $notlhs56 = 0, $notrhs = 0, $notrhs53 = 0, $notrhs55 = 0;
 var $notrhs57 = 0, $or$cond11 = 0, $or$cond13$not = 0, $or$cond19$not = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25$not = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3$not = 0, $or$cond33 = 0, $or$cond35$not = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond5 = 0, $or$cond51 = 0;
 var $or$cond9 = 0, $randr$061 = 0.0, $seed = 0, $timedata = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer33 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer33 = sp + 32|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer14 = sp + 64|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $seed = sp + 140|0;
 $timedata = sp + 136|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = (6116);
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = (5856);
  _qh_fprintf($2,13,7912,$vararg_buffer);
 }
 HEAP32[(5844)>>2] = $ismalloc;
 HEAP32[(5840)>>2] = $points;
 HEAP32[(5836)>>2] = $numpoints;
 HEAP32[(5832)>>2] = $dim;
 HEAP32[(5828)>>2] = $dim;
 $3 = HEAP32[(5440)>>2]|0;
 $4 = HEAP32[(5384)>>2]|0;
 $5 = $4 | $3;
 $6 = HEAP32[(5460)>>2]|0;
 $7 = $5 | $6;
 $or$cond3$not = ($7|0)==(0);
 $8 = +HEAPF64[(7616)>>3];
 $9 = $8 > 8.9884656743115785E+307;
 $or$cond5 = $or$cond3$not & $9;
 do {
  if ($or$cond5) {
   HEAP32[(5392)>>2] = 1;
   $10 = HEAP32[(5828)>>2]|0;
   $11 = ($10|0)<(5);
   if ($11) {
    HEAP32[(5460)>>2] = 1;
    _qh_option(7952,0,0);
    break;
   } else {
    HEAP32[(5384)>>2] = 1;
    _qh_option(7968,0,0);
    break;
   }
  } else {
   $12 = ($4|0)==(0);
   if (!($12)) {
    HEAP32[(5392)>>2] = 1;
   }
  }
 } while(0);
 $13 = +HEAPF64[(7616)>>3];
 $14 = HEAP32[(5772)>>2]|0;
 $15 = ($14|0)!=(0);
 $16 = $13 < 8.9884656743115785E+307;
 $or$cond9 = $16 & $15;
 $17 = HEAP32[(5504)>>2]|0;
 $18 = ($17|0)!=(0);
 $or$cond11 = $or$cond9 & $18;
 if ($or$cond11) {
  $19 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($19,7038,7984,$vararg_buffer2);
 }
 $20 = +HEAPF64[(7616)>>3];
 $21 = HEAP32[(5304)>>2]|0;
 $notlhs = !($20 < 8.9884656743115785E+307);
 $notrhs = ($21|0)==(0);
 $or$cond13$not = $notlhs | $notrhs;
 $22 = HEAP32[(5708)>>2]|0;
 $23 = HEAP32[(5712)>>2]|0;
 $24 = $23 | $22;
 $25 = ($24|0)!=(0);
 $26 = $or$cond13$not | $25;
 if (!($26)) {
  HEAP32[(5712)>>2] = 1;
  _qh_option(8096,0,0);
 }
 $27 = HEAP32[(5392)>>2]|0;
 $28 = HEAP32[(5456)>>2]|0;
 $notlhs52 = ($27|0)!=(0);
 $notrhs53 = ($28|0)==(0);
 $or$cond19$not = $notlhs52 & $notrhs53;
 $29 = +HEAPF64[(5288)>>3];
 $30 = $29 > 8.9884656743115785E+307;
 $or$cond21 = $or$cond19$not & $30;
 $31 = +HEAPF64[(5400)>>3];
 $32 = $31 == 0.0;
 $or$cond23 = $or$cond21 & $32;
 if ($or$cond23) {
  HEAP32[(6904)>>2] = 1;
  HEAP32[(7728)>>2] = 1;
  _qh_option(8112,0,0);
 }
 $33 = HEAP32[(5304)>>2]|0;
 $34 = HEAP32[(5352)>>2]|0;
 $notlhs54 = ($33|0)==(0);
 $notrhs55 = ($34|0)==(0);
 $or$cond25$not = $notlhs54 | $notrhs55;
 $35 = HEAP32[(5356)>>2]|0;
 $36 = ($35|0)!=(0);
 $or$cond27 = $or$cond25$not | $36;
 if (!($or$cond27)) {
  HEAP32[(5356)>>2] = 1;
  _qh_option(8128,0,0);
 }
 $37 = HEAP32[(5304)>>2]|0;
 $38 = ($37|0)!=(0);
 $39 = HEAP32[(5340)>>2]|0;
 $40 = ($39|0)!=(0);
 $or$cond29 = $38 & $40;
 if ($or$cond29) {
  $41 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($41,6046,8144,$vararg_buffer4);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $42 = ($37|0)==(0);
 if ($42) {
  $43 = HEAP32[(5780)>>2]|0;
  $44 = HEAP32[(5260)>>2]|0;
  $45 = $44 | $43;
  $46 = ($45|0)==(0);
  if (!($46)) {
   $47 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($47,6047,8240,$vararg_buffer6);
   _qh_errexit(1,0,0);
   // unreachable;
  }
 }
 $48 = HEAP32[(5780)>>2]|0;
 $49 = ($48|0)!=(0);
 $50 = HEAP32[(5260)>>2]|0;
 $51 = ($50|0)!=(0);
 $or$cond33 = $49 & $51;
 if ($or$cond33) {
  $52 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($52,6048,8344,$vararg_buffer8);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $53 = HEAP32[(5712)>>2]|0;
 $54 = HEAP32[(5304)>>2]|0;
 $notlhs56 = ($53|0)!=(0);
 $notrhs57 = ($54|0)==(0);
 $or$cond35$not = $notlhs56 & $notrhs57;
 $55 = HEAP32[(5504)>>2]|0;
 $56 = ($55|0)!=(0);
 $or$cond37 = $or$cond35$not & $56;
 if ($or$cond37) {
  $57 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($57,7040,8424,$vararg_buffer10);
 }
 $58 = HEAP32[(5720)>>2]|0;
 $59 = HEAP32[(5392)>>2]|0;
 $60 = ($59|0)!=(0);
 $not$ = ($58|0)==(0);
 $61 = $not$ & $60;
 $62 = $61&1;
 HEAP32[(5808)>>2] = $62;
 if ($61) {
  $63 = HEAP32[(5356)>>2]|0;
  $64 = ($63|0)!=(0);
  $65 = HEAP32[(5352)>>2]|0;
  $66 = ($65|0)!=(0);
  $or$cond39 = $64 & $66;
  if ($or$cond39) {
   $70 = 0;
  } else {
   $67 = HEAP32[(5436)>>2]|0;
   $68 = ($67|0)==(0);
   $70 = $68;
  }
 } else {
  $70 = 0;
 }
 $69 = $70&1;
 HEAP32[(5824)>>2] = $69;
 $71 = HEAP32[(5392)>>2]|0;
 $72 = ($71|0)==(0);
 if ($72) {
  $73 = HEAP32[(5796)>>2]|0;
  $74 = ($73|0)==(0);
  if (!($74)) {
   HEAP32[(7592)>>2] = 1;
  }
 } else {
  HEAP32[(7592)>>2] = 2;
 }
 $75 = HEAP32[(5744)>>2]|0;
 $76 = ($75|0)==(0);
 $77 = HEAP32[(5392)>>2]|0;
 $78 = ($77|0)!=(0);
 $or$cond41 = $76 | $78;
 if (!($or$cond41)) {
  $79 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($79,6049,8520,$vararg_buffer12);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $80 = HEAP32[(5648)>>2]|0;
 $81 = ($80|0)==(0);
 if ($81) {
  $82 = HEAP32[(5304)>>2]|0;
  $83 = ($82|0)!=(0);
  $84 = HEAP32[(5644)>>2]|0;
  $85 = ($84|0)!=(0);
  $or$cond43 = $83 & $85;
  if ($or$cond43) {
   label = 37;
  } else {
   $$pr59 = HEAP32[(5828)>>2]|0;
   $93 = $$pr59;$extra$0 = 0;
  }
 } else {
  label = 37;
 }
 if ((label|0) == 37) {
  $86 = HEAP32[(5648)>>2]|0;
  $87 = HEAP32[(5828)>>2]|0;
  $88 = (($87) - ($86))|0;
  HEAP32[(5828)>>2] = $88;
  $89 = HEAP32[(5304)>>2]|0;
  $90 = ($89|0)==(0);
  if ($90) {
   $93 = $88;$extra$0 = 0;
  } else {
   $91 = (($88) + 1)|0;
   HEAP32[(5828)>>2] = $91;
   $92 = HEAP32[(5260)>>2]|0;
   $not$60 = ($92|0)!=(0);
   $$ = $not$60&1;
   $93 = $91;$extra$0 = $$;
  }
 }
 $94 = ($93|0)<(2);
 if ($94) {
  $95 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $93;
  _qh_fprintf($95,6050,8592,$vararg_buffer14);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $96 = HEAP32[(5828)>>2]|0;
 $97 = ($96|0)>(2);
 if ($97) {
  $98 = HEAP32[(5828)>>2]|0;
  $factorial$063 = 1.0;$k$062 = 2;
  while(1) {
   $99 = (+($k$062|0));
   $100 = $factorial$063 * $99;
   $101 = (($k$062) + 1)|0;
   $102 = ($101|0)<($98|0);
   if ($102) {
    $factorial$063 = $100;$k$062 = $101;
   } else {
    $factorial$0$lcssa = $100;
    break;
   }
  }
 } else {
  $factorial$0$lcssa = 1.0;
 }
 $103 = 1.0 / $factorial$0$lcssa;
 HEAPF64[(5800)>>3] = $103;
 $104 = HEAP32[(5344)>>2]|0;
 $105 = ($104|0)>(1);
 if ($105) {
  $106 = HEAP32[(7480)>>2]|0;
  $107 = HEAP32[(5648)>>2]|0;
  $108 = HEAP32[(5828)>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $dim;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $numpoints;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $ismalloc;
  $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
  HEAP32[$vararg_ptr22>>2] = $107;
  $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
  HEAP32[$vararg_ptr23>>2] = $108;
  _qh_fprintf($106,2005,8632,$vararg_buffer17);
 }
 $109 = HEAP32[(5828)>>2]|0;
 $110 = $109 << 3;
 HEAP32[(7488)>>2] = $110;
 $111 = (($110) + -8)|0;
 HEAP32[(7492)>>2] = $111;
 $112 = HEAP32[(5828)>>2]|0;
 $113 = ($112|0)>(6);
 if ($113) {
  HEAP32[(5416)>>2] = 0;
  _qh_option(8736,0,0);
 }
 $114 = HEAP32[(5320)>>2]|0;
 $115 = ($114|0)==(0);
 $$58$v = $115 ? 1 : 2;
 $$58 = (($$58$v) + ($112))|0;
 $116 = HEAP32[(5700)>>2]|0;
 $117 = ($116|0)>(1);
 do {
  if ($117) {
   $118 = HEAP32[(5344)>>2]|0;
   HEAP32[(5752)>>2] = $118;
   $119 = HEAP32[(5344)>>2]|0;
   $120 = ($119|0)==(-1);
   if ($120) {
    break;
   }
   HEAP32[(5344)>>2] = 0;
  } else {
   $121 = HEAP32[(5756)>>2]|0;
   $122 = ($121|0)!=(-1);
   $123 = +HEAPF64[(5760)>>3];
   $124 = $123 < 8.9884656743115785E+307;
   $or$cond45 = $122 | $124;
   $125 = HEAP32[(5768)>>2]|0;
   $126 = ($125|0)!=(0);
   $or$cond47 = $or$cond45 | $126;
   if (!($or$cond47)) {
    break;
   }
   $127 = HEAP32[(5344)>>2]|0;
   $128 = ($127|0)!=(0);
   $129 = $128 ? $127 : 3;
   HEAP32[(5748)>>2] = $129;
   HEAP32[(5344)>>2] = 0;
  }
 } while(0);
 $130 = HEAP32[(5704)>>2]|0;
 if ((($130|0) == 0) | (($130|0) == -1)) {
  $131 = (_time(($timedata|0))|0);
  HEAP32[$seed>>2] = $131;
  $132 = HEAP32[(5704)>>2]|0;
  $133 = ($132|0)==(-1);
  if ($133) {
   $134 = (0 - ($131))|0;
   HEAP32[$seed>>2] = $134;
   _qh_option(8768,$seed,0);
  } else {
   _qh_option(8784,$seed,0);
  }
  $135 = HEAP32[$seed>>2]|0;
  HEAP32[(5704)>>2] = $135;
  $136 = $135;
 } else {
  $136 = $130;
 }
 HEAP32[$seed>>2] = $136;
 $137 = ($136|0)==(-2147483648);
 do {
  if ($137) {
   HEAP32[$seed>>2] = 1;
  } else {
   $138 = ($136|0)<(0);
   if (!($138)) {
    break;
   }
   $139 = (0 - ($136))|0;
   HEAP32[$seed>>2] = $139;
  }
 } while(0);
 $140 = HEAP32[$seed>>2]|0;
 _qh_srand($140);
 $147 = 999;$randr$061 = 0.0;
 while(1) {
  $141 = (_qh_rand()|0);
  $142 = (+($141|0));
  $143 = $randr$061 + $142;
  $144 = ($141|0)==(2147483647);
  if ($144) {
   label = 65;
   break;
  }
  $146 = (($147) + -1)|0;
  $148 = ($147|0)==(0);
  if ($148) {
   $$lcssa = $143;
   break;
  } else {
   $147 = $146;$randr$061 = $143;
  }
 }
 if ((label|0) == 65) {
  $145 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer24>>2] = $141;
  $vararg_ptr27 = ((($vararg_buffer24)) + 8|0);
  HEAPF64[$vararg_ptr27>>3] = 2147483646.0;
  _qh_fprintf($145,8036,8800,$vararg_buffer24);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $149 = HEAP32[$seed>>2]|0;
 _qh_srand($149);
 $150 = $$lcssa / 1000.0;
 $151 = $150 < 214748364.60000002;
 $152 = $150 > 1932735281.4000001;
 $or$cond51 = $151 | $152;
 if ($or$cond51) {
  $153 = HEAP32[(7480)>>2]|0;
  HEAPF64[$vararg_buffer28>>3] = $150;
  $vararg_ptr31 = ((($vararg_buffer28)) + 8|0);
  HEAPF64[$vararg_ptr31>>3] = 1073741823.0;
  $vararg_ptr32 = ((($vararg_buffer28)) + 16|0);
  HEAPF64[$vararg_ptr32>>3] = 2147483646.0;
  _qh_fprintf($153,8037,8896,$vararg_buffer28);
 }
 $154 = +HEAPF64[(5664)>>3];
 $155 = $154 * 2.0;
 $156 = $155 / 2147483646.0;
 HEAPF64[(5672)>>3] = $156;
 $157 = +HEAPF64[(5664)>>3];
 $158 = 1.0 - $157;
 HEAPF64[(5680)>>3] = $158;
 $159 = (($extra$0) + ($numpoints))|0;
 $160 = ($159|0)<($$58|0);
 if ($160) {
  $161 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer33>>2] = $numpoints;
  $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
  HEAP32[$vararg_ptr36>>2] = $$58;
  _qh_fprintf($161,6214,9072,$vararg_buffer33);
  _qh_errexit(1,0,0);
  // unreachable;
 } else {
  _qh_initqhull_outputflags();
  STACKTOP = sp;return;
 }
}
function _qh_initqhull_mem() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5344)>>2]|0;
 _qh_meminitbuffers($0,8,18,65536,131072);
 _qh_memsize(24);
 $1 = HEAP32[(5392)>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _qh_memsize(16);
  _qh_memsize(24);
 }
 _qh_memsize(88);
 $3 = HEAP32[(5828)>>2]|0;
 $4 = $3 << 2;
 $5 = (($4) + 4)|0;
 _qh_memsize($5);
 $6 = HEAP32[(7488)>>2]|0;
 _qh_memsize($6);
 $7 = (($4) + 8)|0;
 _qh_memsize($7);
 _qh_memsetup();
 return;
}
function _qh_initqhull_buffers() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(21192)>>2]|0;
 $1 = (($0) + -8)|0;
 $2 = $1 >>> 2;
 $3 = ($2|0)==(0);
 $4 = ($2|0)>($0|0);
 $or$cond = $3 | $4;
 $$ = $or$cond ? 8 : $2;
 HEAP32[(7496)>>2] = $$;
 $5 = (_qh_setnew($$)|0);
 HEAP32[(7748)>>2] = $5;
 $6 = HEAP32[(7496)>>2]|0;
 $7 = (_qh_setnew($6)|0);
 HEAP32[(7752)>>2] = $7;
 $8 = HEAP32[(7496)>>2]|0;
 $9 = (_qh_setnew($8)|0);
 HEAP32[(7792)>>2] = $9;
 $10 = HEAP32[(5828)>>2]|0;
 $11 = $10 << 3;
 $12 = (_qh_memalloc($11)|0);
 HEAP32[(7036)>>2] = $12;
 $13 = HEAP32[(5832)>>2]|0;
 $14 = $13 << 3;
 $15 = (($14) + 8)|0;
 $16 = (_qh_memalloc($15)|0);
 HEAP32[(6912)>>2] = $16;
 $17 = HEAP32[(5832)>>2]|0;
 $18 = $17 << 3;
 $19 = (($18) + 8)|0;
 $20 = (_qh_memalloc($19)|0);
 HEAP32[(6908)>>2] = $20;
 $21 = HEAP32[(5832)>>2]|0;
 $22 = $21 << 3;
 $23 = (($22) + 8)|0;
 $24 = (_qh_memalloc($23)|0);
 HEAP32[(6920)>>2] = $24;
 $25 = HEAP32[(5832)>>2]|0;
 $26 = $25 << 3;
 $27 = (($26) + 8)|0;
 $28 = (_qh_memalloc($27)|0);
 HEAP32[(6916)>>2] = $28;
 $29 = HEAP32[(5832)>>2]|0;
 $30 = ($29|0)==(-1);
 if ($30) {
  $42 = HEAP32[(5828)>>2]|0;
  $43 = (($42) + 1)|0;
  $44 = $42 << 3;
  $45 = Math_imul($44, $43)|0;
  $46 = (_qh_memalloc($45)|0);
  HEAP32[(7756)>>2] = $46;
  $47 = HEAP32[(5828)>>2]|0;
  $48 = $47 << 2;
  $49 = (($48) + 4)|0;
  $50 = (_qh_memalloc($49)|0);
  HEAP32[(7760)>>2] = $50;
  return;
 }
 $31 = HEAP32[(6912)>>2]|0;
 $32 = HEAP32[(6908)>>2]|0;
 $33 = HEAP32[(6920)>>2]|0;
 $34 = HEAP32[(6916)>>2]|0;
 $36 = $29;
 while(1) {
  $35 = (($31) + ($36<<3)|0);
  HEAPF64[$35>>3] = -1.7976931348623157E+308;
  $37 = (($32) + ($36<<3)|0);
  HEAPF64[$37>>3] = 1.7976931348623157E+308;
  $38 = (($33) + ($36<<3)|0);
  HEAPF64[$38>>3] = -1.7976931348623157E+308;
  $39 = (($34) + ($36<<3)|0);
  HEAPF64[$39>>3] = 1.7976931348623157E+308;
  $40 = (($36) + -1)|0;
  $41 = ($36|0)==(0);
  if ($41) {
   break;
  } else {
   $36 = $40;
  }
 }
 $42 = HEAP32[(5828)>>2]|0;
 $43 = (($42) + 1)|0;
 $44 = $42 << 3;
 $45 = Math_imul($44, $43)|0;
 $46 = (_qh_memalloc($45)|0);
 HEAP32[(7756)>>2] = $46;
 $47 = HEAP32[(5828)>>2]|0;
 $48 = $47 << 2;
 $49 = (($48) + 4)|0;
 $50 = (_qh_memalloc($49)|0);
 HEAP32[(7760)>>2] = $50;
 return;
}
function _qh_initthresholds($command) {
 $command = $command|0;
 var $$ = 0, $$10 = 0.0, $$in = 0, $$in26 = 0, $$old = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $maxdim$0$ph = 0, $not$ = 0, $s = 0, $value$0 = 0.0, $value$1 = 0.0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 40|0;
 $s = sp + 60|0;
 HEAP32[$s>>2] = $command;
 $0 = HEAP32[(5832)>>2]|0;
 $1 = HEAP32[(5304)>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $maxdim$0$ph = $0;
 } else {
  $3 = HEAP32[(5644)>>2]|0;
  $4 = HEAP32[(5648)>>2]|0;
  $5 = $4 | $3;
  $not$ = ($5|0)!=(0);
  $6 = $not$&1;
  $$ = (($6) + ($0))|0;
  $maxdim$0$ph = $$;
 }
 $7 = ($maxdim$0$ph|0)==(0);
 L4: while(1) {
  $8 = HEAP32[$s>>2]|0;
  $9 = HEAP8[$8>>0]|0;
  if ((($9<<24>>24) == 0)) {
   break;
  } else if ((($9<<24>>24) == 45)) {
   $10 = ((($8)) + 1|0);
   HEAP32[$s>>2] = $10;
  }
  $11 = HEAP32[$s>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  L9: do {
   if ((($12<<24>>24) == 80)) {
    $16 = ((($11)) + 1|0);
    HEAP32[$s>>2] = $16;
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $25 = $16;
     while(1) {
      $24 = ((($25)) + 1|0);
      HEAP32[$s>>2] = $24;
      $26 = HEAP8[$25>>0]|0;
      $27 = $26 << 24 >> 24;
      $28 = (_isspace($27)|0);
      $29 = ($28|0)==(0);
      if (!($29)) {
       break L9;
      }
      $30 = ($26<<24>>24)==(100);
      do {
       if ((($26<<24>>24) == 68) | (($26<<24>>24) == 100)) {
        $31 = HEAP32[$s>>2]|0;
        $32 = HEAP8[$31>>0]|0;
        $33 = $32 << 24 >> 24;
        $isdigittmp4 = (($33) + -48)|0;
        $isdigit5 = ($isdigittmp4>>>0)<(10);
        if (!($isdigit5)) {
         $34 = HEAP32[(7480)>>2]|0;
         $35 = ((($31)) + -1|0);
         HEAP32[$vararg_buffer>>2] = $27;
         $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
         HEAP32[$vararg_ptr1>>2] = $35;
         _qh_fprintf($34,7044,9160,$vararg_buffer);
         break;
        }
        $39 = (_qh_strtol($31,$s)|0);
        $40 = HEAP32[(5828)>>2]|0;
        $41 = ($39|0)<($40|0);
        if (!($41)) {
         $42 = HEAP32[(7480)>>2]|0;
         HEAP32[$vararg_buffer2>>2] = $39;
         $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
         HEAP32[$vararg_ptr5>>2] = $27;
         $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
         HEAP32[$vararg_ptr6>>2] = $40;
         _qh_fprintf($42,7045,9240,$vararg_buffer2);
         break;
        }
        $43 = HEAP32[$s>>2]|0;
        $44 = HEAP8[$43>>0]|0;
        $45 = ($44<<24>>24)==(58);
        if ($45) {
         $46 = ((($43)) + 1|0);
         HEAP32[$s>>2] = $46;
         $47 = (+_qh_strtod($46,$s));
         $48 = (+Math_abs((+$47)));
         $49 = $48 > 1.0;
         if ($49) {
          $50 = HEAP32[(7480)>>2]|0;
          HEAPF64[$vararg_buffer7>>3] = $47;
          $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
          HEAP32[$vararg_ptr10>>2] = $27;
          _qh_fprintf($50,7046,9312,$vararg_buffer7);
          break;
         } else {
          $value$0 = $47;
         }
        } else {
         $value$0 = 0.0;
        }
        if ($30) {
         $51 = HEAP32[(6912)>>2]|0;
         $52 = (($51) + ($39<<3)|0);
         HEAPF64[$52>>3] = $value$0;
         break;
        } else {
         $53 = HEAP32[(6908)>>2]|0;
         $54 = (($53) + ($39<<3)|0);
         HEAPF64[$54>>3] = $value$0;
         break;
        }
       }
      } while(0);
      $36 = HEAP32[$s>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       break;
      } else {
       $25 = $36;
      }
     }
    }
   } else if ((($12<<24>>24) == 81)) {
    $55 = ((($11)) + 1|0);
    HEAP32[$s>>2] = $55;
    $56 = HEAP8[$55>>0]|0;
    $57 = ($56<<24>>24)==(0);
    if (!($57)) {
     $59 = $55;
     while(1) {
      $58 = ((($59)) + 1|0);
      HEAP32[$s>>2] = $58;
      $60 = HEAP8[$59>>0]|0;
      $61 = $60 << 24 >> 24;
      $62 = (_isspace($61)|0);
      $63 = ($62|0)==(0);
      if (!($63)) {
       break L9;
      }
      $64 = ($60<<24>>24)==(98);
      do {
       if ($64) {
        $65 = HEAP32[$s>>2]|0;
        $66 = HEAP8[$65>>0]|0;
        if ((($66<<24>>24) == 98)) {
         $74 = ((($65)) + 1|0);
         HEAP32[$s>>2] = $74;
         break;
        } else if (!((($66<<24>>24) == 66))) {
         label = 32;
         break;
        }
        $67 = ((($65)) + 1|0);
        HEAP32[$s>>2] = $67;
        if (!($7)) {
         $68 = HEAP32[(6920)>>2]|0;
         $69 = HEAP32[(6916)>>2]|0;
         $$in = $maxdim$0$ph;
         while(1) {
          $70 = (($$in) + -1)|0;
          $71 = (($68) + ($70<<3)|0);
          HEAPF64[$71>>3] = -0.5;
          $72 = (($69) + ($70<<3)|0);
          HEAPF64[$72>>3] = 0.5;
          $73 = ($70|0)==(0);
          if ($73) {
           break;
          } else {
           $$in = $70;
          }
         }
        }
       } else {
        $$old = ($60<<24>>24)==(66);
        if ($$old) {
         label = 32;
        }
       }
      } while(0);
      do {
       if ((label|0) == 32) {
        label = 0;
        $75 = HEAP32[$s>>2]|0;
        $76 = HEAP8[$75>>0]|0;
        $77 = $76 << 24 >> 24;
        $isdigittmp = (($77) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if (!($isdigit)) {
         $78 = HEAP32[(7480)>>2]|0;
         HEAP32[$vararg_buffer11>>2] = $61;
         _qh_fprintf($78,7047,9392,$vararg_buffer11);
         break;
        }
        $82 = (_qh_strtol($75,$s)|0);
        $83 = ($82|0)<($maxdim$0$ph|0);
        if (!($83)) {
         $84 = HEAP32[(7480)>>2]|0;
         HEAP32[$vararg_buffer14>>2] = $82;
         $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
         HEAP32[$vararg_ptr17>>2] = $61;
         $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
         HEAP32[$vararg_ptr18>>2] = $maxdim$0$ph;
         _qh_fprintf($84,7048,9464,$vararg_buffer14);
         break;
        }
        $85 = HEAP32[$s>>2]|0;
        $86 = HEAP8[$85>>0]|0;
        $87 = ($86<<24>>24)==(58);
        if ($87) {
         $88 = ((($85)) + 1|0);
         HEAP32[$s>>2] = $88;
         $89 = (+_qh_strtod($88,$s));
         $value$1 = $89;
        } else {
         $$10 = $64 ? -0.5 : 0.5;
         $value$1 = $$10;
        }
        if ($64) {
         $90 = HEAP32[(6920)>>2]|0;
         $91 = (($90) + ($82<<3)|0);
         HEAPF64[$91>>3] = $value$1;
         break;
        } else {
         $92 = HEAP32[(6916)>>2]|0;
         $93 = (($92) + ($82<<3)|0);
         HEAPF64[$93>>3] = $value$1;
         break;
        }
       }
      } while(0);
      $79 = HEAP32[$s>>2]|0;
      $80 = HEAP8[$79>>0]|0;
      $81 = ($80<<24>>24)==(0);
      if ($81) {
       break;
      } else {
       $59 = $79;
      }
     }
    }
   } else {
    $13 = HEAP32[$s>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(0);
    if (!($15)) {
     $95 = $14;
     while(1) {
      $94 = $95 << 24 >> 24;
      $96 = (_isspace($94)|0);
      $97 = ($96|0)==(0);
      if (!($97)) {
       break L9;
      }
      $98 = HEAP32[$s>>2]|0;
      $99 = ((($98)) + 1|0);
      HEAP32[$s>>2] = $99;
      $100 = HEAP8[$99>>0]|0;
      $101 = ($100<<24>>24)==(0);
      if ($101) {
       break;
      } else {
       $95 = $100;
      }
     }
    }
   }
  } while(0);
  $19 = HEAP32[$s>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = (_isspace($21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   continue;
  }
  while(1) {
   $102 = HEAP32[$s>>2]|0;
   $103 = ((($102)) + 1|0);
   HEAP32[$s>>2] = $103;
   $104 = HEAP8[$103>>0]|0;
   $105 = $104 << 24 >> 24;
   $106 = (_isspace($105)|0);
   $107 = ($106|0)==(0);
   if ($107) {
    continue L4;
   }
  }
 }
 $108 = HEAP32[(5828)>>2]|0;
 $109 = ($108|0)==(0);
 if ($109) {
  STACKTOP = sp;return;
 }
 $110 = HEAP32[(6912)>>2]|0;
 $111 = HEAP32[(6908)>>2]|0;
 $$in26 = $108;
 while(1) {
  $112 = (($$in26) + -1)|0;
  $113 = (($110) + ($112<<3)|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $114 > -8.9884656743115785E+307;
  if ($115) {
   HEAP32[(5328)>>2] = 1;
   $116 = (($111) + ($112<<3)|0);
   $117 = +HEAPF64[$116>>3];
   $118 = $117 < 8.9884656743115785E+307;
   if ($118) {
    break;
   }
  } else {
   $119 = (($111) + ($112<<3)|0);
   $120 = +HEAPF64[$119>>3];
   $121 = $120 < 8.9884656743115785E+307;
   if ($121) {
    HEAP32[(5328)>>2] = 1;
   }
  }
  $122 = ($112|0)==(0);
  if ($122) {
   label = 54;
   break;
  } else {
   $$in26 = $112;
  }
 }
 if ((label|0) == 54) {
  STACKTOP = sp;return;
 }
 HEAP32[(5728)>>2] = 1;
 HEAP32[(5328)>>2] = 0;
 STACKTOP = sp;return;
}
function _qh_option($option,$i,$r) {
 $option = $option|0;
 $i = $i|0;
 $r = $r|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $buf = 0, $maxlen$0 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $buf = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $option;
 (_sprintf($buf,9536,$vararg_buffer)|0);
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  $1 = (_strlen(($buf|0))|0);
  $2 = (($buf) + ($1)|0);
  $3 = HEAP32[$i>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $3;
  (_sprintf($2,36672,$vararg_buffer1)|0);
 }
 $4 = ($r|0)==(0|0);
 if (!($4)) {
  $5 = (_strlen(($buf|0))|0);
  $6 = (($buf) + ($5)|0);
  $7 = +HEAPF64[$r>>3];
  HEAPF64[$vararg_buffer4>>3] = $7;
  (_sprintf($6,9544,$vararg_buffer4)|0);
 }
 $8 = (_strlen(($buf|0))|0);
 $9 = HEAP32[(6884)>>2]|0;
 $10 = (($9) + ($8))|0;
 HEAP32[(6884)>>2] = $10;
 $11 = (512 - ($8))|0;
 $12 = (($11) + -1)|0;
 $13 = ($12|0)<(0);
 $$ = $13 ? 0 : $12;
 $14 = ($10|0)>(79);
 $15 = ($$|0)>(0);
 $or$cond = $14 & $15;
 if (!($or$cond)) {
  $maxlen$0 = $$;
  (_strncat((6372),$buf,$maxlen$0)|0);
  STACKTOP = sp;return;
 }
 HEAP32[(6884)>>2] = $8;
 $16 = (($$) + -1)|0;
 (_strncat((6372),56128,$$)|0);
 $maxlen$0 = $16;
 (_strncat((6372),$buf,$maxlen$0)|0);
 STACKTOP = sp;return;
}
function _qh_initqhull_outputflags() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond11$not = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0;
 var $or$cond27 = 0, $or$cond29 = 0, $or$cond31 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $printcoplanar$0$be = 0, $printcoplanar$0$be$lcssa = 0, $printcoplanar$051 = 0, $printgeom$0$be = 0, $printgeom$0$be$lcssa = 0, $printgeom$049 = 0, $printmath$0$be = 0, $printmath$0$be$lcssa = 0, $printmath$050 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 40|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = (5856);
  _qh_fprintf($2,3024,9552,$vararg_buffer);
 }
 $3 = HEAP32[(5480)>>2]|0;
 $4 = HEAP32[(5488)>>2]|0;
 $5 = $4 | $3;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[(5348)>>2]|0;
   $8 = +HEAPF64[(5368)>>3];
   $9 = $8 < 8.9884656743115785E+307;
   $10 = HEAP32[(5360)>>2]|0;
   $11 = $10 | $7;
   $12 = HEAP32[(5304)>>2]|0;
   $13 = $11 | $12;
   $14 = ($13|0)!=(0);
   $15 = $9 | $14;
   if (!($15)) {
    $16 = HEAP32[(5444)>>2]|0;
    $17 = ($16|0)==(0);
    if (!($17)) {
     break;
    }
    $18 = HEAP32[(5332)>>2]|0;
    $19 = HEAP32[(5320)>>2]|0;
    $20 = $19 | $18;
    $21 = ($20|0)==(0);
    if ($21) {
     break;
    }
   }
   HEAP32[(5480)>>2] = 1;
   _qh_option(9584,0,0);
  }
 } while(0);
 $22 = HEAP32[(5640)>>2]|0;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $32 = 28;$printcoplanar$051 = 0;$printgeom$049 = 0;$printmath$050 = 0;
  } else {
   $24 = HEAP32[(5828)>>2]|0;
   $25 = HEAP32[(5304)>>2]|0;
   $notlhs = ($24|0)!=(4);
   $notrhs = ($25|0)==(0);
   $or$cond11$not = $notlhs | $notrhs;
   $26 = HEAP32[(5796)>>2]|0;
   $27 = ($26|0)!=(0);
   $or$cond13 = $or$cond11$not | $27;
   $28 = HEAP32[(5312)>>2]|0;
   $29 = ($28|0)>(-1);
   $or$cond15 = $or$cond13 | $29;
   if ($or$cond15) {
    $30 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($30,6215,9592,$vararg_buffer1);
    _qh_errexit(1,0,0);
    // unreachable;
   } else {
    HEAP32[(5312)>>2] = 3;
    HEAP32[(5624)>>2] = 1;
    $32 = 28;$printcoplanar$051 = 0;$printgeom$049 = 0;$printmath$050 = 0;
    break;
   }
  }
 } while(0);
 L16: while(1) {
  $31 = (5508 + ($32<<2)|0);
  $33 = HEAP32[$31>>2]|0;
  L18: do {
   switch ($33|0) {
   case 13: case 15:  {
    $printcoplanar$0$be = $printcoplanar$051;$printgeom$0$be = $printgeom$049;$printmath$0$be = 1;
    break;
   }
   case 7:  {
    $printcoplanar$0$be = $printcoplanar$051;$printgeom$0$be = 1;$printmath$0$be = $printmath$050;
    break;
   }
   case 3:  {
    $printcoplanar$0$be = 1;$printgeom$0$be = $printgeom$049;$printmath$0$be = $printmath$050;
    break;
   }
   case 20:  {
    $printcoplanar$0$be = 1;$printgeom$0$be = $printgeom$049;$printmath$0$be = $printmath$050;
    break;
   }
   default: {
    $36 = ($33|0)!=(19);
    $37 = HEAP32[(5340)>>2]|0;
    $38 = ($37|0)!=(0);
    $or$cond17 = $36 | $38;
    if (!($or$cond17)) {
     label = 18;
     break L16;
    }
    $40 = ($33|0)!=(25);
    $41 = HEAP32[(5796)>>2]|0;
    $42 = $41 | $37;
    $43 = ($42|0)==(0);
    $or$cond = $40 | $43;
    if (!($or$cond)) {
     label = 20;
     break L16;
    }
    $45 = HEAP32[$31>>2]|0;
    $46 = ($45|0)==(4);
    $47 = ($41|0)!=(0);
    $or$cond21 = $47 & $46;
    if ($or$cond21) {
     label = 22;
     break L16;
    }
    $49 = ($45|0)==(26);
    if ($49) {
     if ($47) {
      _qh_option(9944,0,0);
      $printcoplanar$0$be = $printcoplanar$051;$printgeom$0$be = $printgeom$049;$printmath$0$be = $printmath$050;
      break L18;
     } else {
      _qh_option(9960,0,0);
      $printcoplanar$0$be = $printcoplanar$051;$printgeom$0$be = $printgeom$049;$printmath$0$be = $printmath$050;
      break L18;
     }
    } else {
     $printcoplanar$0$be = $printcoplanar$051;$printgeom$0$be = $printgeom$049;$printmath$0$be = $printmath$050;
    }
   }
   }
  } while(0);
  $34 = (($32) + -1)|0;
  $35 = ($32|0)==(0);
  if ($35) {
   $printcoplanar$0$be$lcssa = $printcoplanar$0$be;$printgeom$0$be$lcssa = $printgeom$0$be;$printmath$0$be$lcssa = $printmath$0$be;
   label = 27;
   break;
  } else {
   $32 = $34;$printcoplanar$051 = $printcoplanar$0$be;$printgeom$049 = $printgeom$0$be;$printmath$050 = $printmath$0$be;
  }
 }
 if ((label|0) == 18) {
  $39 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($39,6053,9680,$vararg_buffer3);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 else if ((label|0) == 20) {
  $44 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($44,6054,9768,$vararg_buffer5);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $48 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($48,6055,9864,$vararg_buffer7);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $50 = ($printcoplanar$0$be$lcssa|0)!=(0);
  $51 = HEAP32[(5304)>>2]|0;
  $52 = ($51|0)!=(0);
  $or$cond23 = $50 & $52;
  $53 = +HEAPF64[(7616)>>3];
  $54 = $53 < 8.9884656743115785E+307;
  $or$cond25 = $or$cond23 & $54;
  $55 = HEAP32[(5504)>>2]|0;
  $56 = ($55|0)!=(0);
  $or$cond47 = $or$cond25 & $56;
  if ($or$cond47) {
   $57 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($57,7041,9976,$vararg_buffer9);
  }
  $58 = ($printmath$0$be$lcssa|0)==(0);
  if (!($58)) {
   $59 = HEAP32[(5828)>>2]|0;
   $60 = ($59|0)>(3);
   $61 = HEAP32[(5796)>>2]|0;
   $62 = ($61|0)!=(0);
   $or$cond27 = $60 | $62;
   if ($or$cond27) {
    $63 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($63,6056,10088,$vararg_buffer11);
    _qh_errexit(1,0,0);
    // unreachable;
   }
  }
  $64 = ($printgeom$0$be$lcssa|0)==(0);
  if (!($64)) {
   $65 = HEAP32[(5828)>>2]|0;
   $66 = ($65|0)>(4);
   if ($66) {
    $67 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($67,6057,10216,$vararg_buffer13);
    _qh_errexit(1,0,0);
    // unreachable;
   }
   $68 = HEAP32[(5492)>>2]|0;
   $69 = ($68|0)==(0);
   if (!($69)) {
    $70 = HEAP32[(5468)>>2]|0;
    $71 = HEAP32[(5464)>>2]|0;
    $72 = (($71) + ($70))|0;
    $73 = HEAP32[(5476)>>2]|0;
    $74 = (($72) + ($73))|0;
    $75 = HEAP32[(5628)>>2]|0;
    $76 = (($74) + ($75))|0;
    $77 = HEAP32[(5308)>>2]|0;
    $78 = (($76) + ($77))|0;
    $79 = HEAP32[(5624)>>2]|0;
    $80 = (0 - ($79))|0;
    $81 = ($78|0)==($80|0);
    if ($81) {
     $82 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($82,6058,10296,$vararg_buffer15);
     _qh_errexit(1,0,0);
     // unreachable;
    }
   }
   $83 = HEAP32[(5796)>>2]|0;
   $84 = ($83|0)==(0);
   if (!($84)) {
    $85 = HEAP32[(5828)>>2]|0;
    $86 = ($85|0)>(3);
    $87 = HEAP32[(5312)>>2]|0;
    $88 = ($87|0)>(-1);
    $or$cond29 = $86 | $88;
    if ($or$cond29) {
     $89 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($89,6059,10352,$vararg_buffer17);
     _qh_errexit(1,0,0);
     // unreachable;
    }
   }
   $90 = HEAP32[(5828)>>2]|0;
   $91 = ($90|0)==(4);
   $92 = HEAP32[(5312)>>2]|0;
   $93 = ($92|0)==(-1);
   $or$cond31 = $91 & $93;
   if ($or$cond31) {
    $94 = HEAP32[(5468)>>2]|0;
    $95 = HEAP32[(5628)>>2]|0;
    $96 = $95 | $94;
    $97 = HEAP32[(5464)>>2]|0;
    $98 = $96 | $97;
    $99 = ($98|0)==(0);
    if (!($99)) {
     $100 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($100,7042,10424,$vararg_buffer19);
     HEAP32[(5464)>>2] = 0;
     HEAP32[(5628)>>2] = 0;
     HEAP32[(5468)>>2] = 0;
    }
   }
  }
  $101 = HEAP32[(5352)>>2]|0;
  $102 = HEAP32[(5356)>>2]|0;
  $103 = $102 | $101;
  $104 = HEAP32[(5444)>>2]|0;
  $105 = $103 | $104;
  $106 = ($105|0)==(0);
  do {
   if ($106) {
    $107 = HEAP32[(5468)>>2]|0;
    $108 = ($107|0)!=(0);
    $109 = HEAP32[(5628)>>2]|0;
    $110 = ($109|0)!=(0);
    $or$cond41 = $108 & $110;
    $or$cond43 = $50 | $or$cond41;
    if ($or$cond43) {
     $111 = HEAP32[(7700)>>2]|0;
     $112 = ($111|0)==(0);
     if ($112) {
      HEAP32[(5352)>>2] = 1;
      _qh_option(10656,0,0);
      break;
     } else {
      $113 = HEAP32[(7480)>>2]|0;
      _qh_fprintf($113,7072,10552,$vararg_buffer21);
      break;
     }
    }
   }
  } while(0);
  $114 = HEAP32[(5828)>>2]|0;
  HEAP32[(5472)>>2] = $114;
  $115 = HEAP32[(5312)>>2]|0;
  $116 = ($115|0)>(-1);
  if (!($116)) {
   $124 = HEAP32[(5796)>>2]|0;
   $125 = ($124|0)==(0);
   if ($125) {
    STACKTOP = sp;return;
   }
   $126 = HEAP32[(5828)>>2]|0;
   $127 = (($126) + -1)|0;
   HEAP32[(5312)>>2] = $127;
   $128 = HEAP32[(5828)>>2]|0;
   $129 = (($128) + -1)|0;
   HEAP32[(5472)>>2] = $129;
   STACKTOP = sp;return;
  }
  $117 = HEAP32[(5828)>>2]|0;
  $118 = ($115|0)<($117|0);
  if (!($118)) {
   HEAP32[(5312)>>2] = -1;
   STACKTOP = sp;return;
  }
  $119 = (($114) + -1)|0;
  HEAP32[(5472)>>2] = $119;
  $120 = HEAP32[(5828)>>2]|0;
  $121 = ($120|0)<(3);
  $or$cond45 = $64 | $121;
  if (!($or$cond45)) {
   STACKTOP = sp;return;
  }
  $122 = HEAP32[(7480)>>2]|0;
  $123 = HEAP32[(5312)>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $123;
  _qh_fprintf($122,7043,10672,$vararg_buffer23);
  STACKTOP = sp;return;
 }
}
function _qh_initqhull_start2($infile,$outfile,$errfile) {
 $infile = $infile|0;
 $outfile = $outfile|0;
 $errfile = $errfile|0;
 var $0 = 0, $1 = 0, $2 = 0, $endptr = 0, $strlen = 0, $timedata = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $timedata = sp;
 (_clock()|0);
 _memset((5232|0),0,2616)|0;
 HEAP32[(5236)>>2] = 1;
 HEAP32[(5312)>>2] = -1;
 HEAP32[(7480)>>2] = $errfile;
 HEAP32[(7472)>>2] = $infile;
 HEAP32[(7476)>>2] = $outfile;
 HEAP32[(7596)>>2] = -1;
 HEAPF64[(7616)>>3] = 1.7976931348623157E+308;
 HEAPF64[(5368)>>3] = 1.7976931348623157E+308;
 HEAPF64[(7800)>>3] = 1.7976931348623157E+308;
 HEAPF64[(7808)>>3] = 1.7976931348623157E+308;
 HEAPF64[(7816)>>3] = 1.7976931348623157E+308;
 HEAPF64[(6960)>>3] = 0.0;
 HEAPF64[(6976)>>3] = 0.0;
 ;HEAP32[(7632)>>2]=0|0;HEAP32[(7632)+4>>2]=0|0;HEAP32[(7632)+8>>2]=0|0;HEAP32[(7632)+12>>2]=0|0;
 HEAPF64[(6984)>>3] = -1.7976931348623157E+308;
 HEAP32[(5388)>>2] = 1;
 HEAPF64[(6992)>>3] = 2.2250738585072014E-308;
 HEAPF64[(5248)>>3] = 0.0;
 HEAPF64[(5424)>>3] = 1.7976931348623157E+308;
 HEAPF64[(5376)>>3] = 1.7976931348623157E+308;
 HEAPF64[(7056)>>3] = 1.7976931348623157E+308;
 HEAPF64[(5400)>>3] = 0.0;
 HEAPF64[(5288)>>3] = 1.7976931348623157E+308;
 HEAP32[(5504)>>2] = 1;
 HEAPF64[(7680)>>3] = 0.0;
 HEAPF64[(5296)>>3] = 1.7976931348623157E+308;
 HEAPF64[(5408)>>3] = 0.0;
 HEAP32[(5704)>>2] = -2147483648;
 HEAP32[(5416)>>2] = 1;
 ;HEAP32[(7704)>>2]=0|0;HEAP32[(7704)+4>>2]=0|0;HEAP32[(7704)+8>>2]=0|0;HEAP32[(7704)+12>>2]=0|0;
 HEAPF64[(5760)>>3] = 1.7976931348623157E+308;
 HEAP32[(5756)>>2] = -1;
 HEAP32[(7524)>>2] = -1;
 HEAP32[(7532)>>2] = -1;
 $0 = (_time(($timedata|0))|0);
 _qh_srand($0);
 $1 = (_qh_rand()|0);
 $2 = (($1) + 1)|0;
 HEAP32[(6896)>>2] = $2;
 _qh_option(10760,(6896),0);
 $strlen = (_strlen(((7072)|0))|0);
 $endptr = (7072 + ($strlen)|0);
 ;HEAP8[$endptr>>0]=HEAP8[10768>>0]|0;HEAP8[$endptr+1>>0]=HEAP8[10768+1>>0]|0;HEAP8[$endptr+2>>0]=HEAP8[10768+2>>0]|0;HEAP8[$endptr+3>>0]=HEAP8[10768+3>>0]|0;HEAP8[$endptr+4>>0]=HEAP8[10768+4>>0]|0;HEAP8[$endptr+5>>0]=HEAP8[10768+5>>0]|0;
 STACKTOP = sp;return;
}
function _qh_produce_output() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(21224)>>2]|0;
 $1 = (_qh_setsize($0)|0);
 _qh_prepare_output();
 _qh_produce_output2();
 $2 = HEAP32[(21224)>>2]|0;
 $3 = (_qh_setsize($2)|0);
 $4 = ($3|0)==($1|0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $5 = HEAP32[(7480)>>2]|0;
  $6 = HEAP32[(21224)>>2]|0;
  $7 = (_qh_setsize($6)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  _qh_fprintf($5,6206,10800,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
}
function _qh_prepare_output() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5796)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  _qh_clearcenters(1);
  _qh_vertexneighbors();
 }
 $2 = HEAP32[(5772)>>2]|0;
 $3 = ($2|0)==(0);
 $4 = HEAP32[(7608)>>2]|0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 | $5;
 if (!($or$cond)) {
  _qh_triangulate();
  $6 = HEAP32[(5788)>>2]|0;
  $7 = ($6|0)==(0);
  $8 = HEAP32[(5280)>>2]|0;
  $9 = ($8|0)!=(0);
  $or$cond3 = $7 | $9;
  if (!($or$cond3)) {
   $10 = HEAP32[(7500)>>2]|0;
   _qh_checkpolygon($10);
  }
 }
 $11 = HEAP32[(7500)>>2]|0;
 _qh_findgood_all($11);
 $12 = HEAP32[(5820)>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = HEAP32[(7500)>>2]|0;
  _qh_getarea($14);
 }
 $15 = HEAP32[(5348)>>2]|0;
 $16 = HEAP32[(5360)>>2]|0;
 $17 = $16 | $15;
 $18 = ($17|0)!=(0);
 $19 = +HEAPF64[(5368)>>3];
 $20 = $19 < 8.9884656743115785E+307;
 $or$cond7 = $18 | $20;
 if ($or$cond7) {
  $21 = HEAP32[(7500)>>2]|0;
  _qh_markkeep($21);
 }
 $22 = HEAP32[(5632)>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  return;
 }
 _qh_collectstatistics();
 return;
}
function _qh_produce_output2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$06 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(21224)>>2]|0;
 $1 = (_qh_setsize($0)|0);
 $2 = HEAP32[(5636)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = HEAP32[(5508)>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = HEAP32[(7476)>>2]|0;
   _qh_printsummary($7);
   $i$06 = 0;
  } else {
   $i$06 = 0;
  }
 } else {
  $4 = HEAP32[(7480)>>2]|0;
  _qh_printsummary($4);
  $i$06 = 0;
 }
 while(1) {
  $8 = HEAP32[(7476)>>2]|0;
  $9 = (5508 + ($i$06<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[(7500)>>2]|0;
  _qh_printfacets($8,$10,$11,0,0);
  $12 = (($i$06) + 1)|0;
  $exitcond = ($12|0)==(29);
  if ($exitcond) {
   break;
  } else {
   $i$06 = $12;
  }
 }
 _qh_allstatistics();
 $13 = HEAP32[(5504)>>2]|0;
 $14 = ($13|0)==(0);
 $15 = HEAP32[(5392)>>2]|0;
 $16 = ($15|0)!=(0);
 $or$cond = $14 | $16;
 if (!($or$cond)) {
  $17 = +HEAPF64[(7616)>>3];
  $18 = $17 > 8.9884656743115785E+307;
  $19 = HEAP32[(5700)>>2]|0;
  $20 = ($19|0)!=(0);
  $or$cond3 = $18 | $20;
  if ($or$cond3) {
   $21 = HEAP32[(7480)>>2]|0;
   $22 = HEAP32[(47108)>>2]|0;
   _qh_printstats($21,$22,0);
  }
 }
 $23 = HEAP32[(5788)>>2]|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = HEAP32[(44632)>>2]|0;
  $26 = ($25|0)>(0);
  $27 = HEAP32[(44680)>>2]|0;
  $28 = ($27|0)>(0);
  $or$cond5 = $26 | $28;
  if ($or$cond5) {
   $29 = HEAP32[(7480)>>2]|0;
   $30 = HEAP32[(47112)>>2]|0;
   _qh_printstats($29,$30,0);
  }
 }
 $31 = HEAP32[(5632)>>2]|0;
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = HEAP32[(7480)>>2]|0;
  _qh_printstatistics($33,56512);
  $34 = HEAP32[(7480)>>2]|0;
  _qh_memstatistics($34);
  $35 = HEAP32[(5828)>>2]|0;
  $36 = $35 << 2;
  $37 = (($36) + 4)|0;
  $38 = HEAP32[(7480)>>2]|0;
  $39 = HEAP32[(7488)>>2]|0;
  $40 = (($36) + 8)|0;
  HEAP32[$vararg_buffer>>2] = 24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 16;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 24;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = 88;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $39;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $37;
  $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr6>>2] = $40;
  _qh_fprintf($38,8040,10872,$vararg_buffer);
 }
 $41 = HEAP32[(21224)>>2]|0;
 $42 = (_qh_setsize($41)|0);
 $43 = ($42|0)==($1|0);
 if ($43) {
  STACKTOP = sp;return;
 } else {
  $44 = HEAP32[(7480)>>2]|0;
  $45 = HEAP32[(21224)>>2]|0;
  $46 = (_qh_setsize($45)|0);
  HEAP32[$vararg_buffer7>>2] = $46;
  _qh_fprintf($44,6065,11000,$vararg_buffer7);
  _qh_errexit(5,0,0);
  // unreachable;
 }
}
function _qh_printfacets($fp,$format,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$0 = 0, $facetp$0 = 0, $innerplane = 0, $numcoplanars = 0, $numfacets = 0, $numridges = 0, $numsimplicial = 0, $numtricoplanars = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $outerplane = 0, $totneighbors = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr6 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 48|0;
 $numfacets = sp + 160|0;
 $numsimplicial = sp + 156|0;
 $numridges = sp + 152|0;
 $totneighbors = sp + 148|0;
 $numcoplanars = sp + 144|0;
 $numtricoplanars = sp + 136|0;
 $vertices = sp + 140|0;
 $outerplane = sp + 56|0;
 $innerplane = sp + 64|0;
 $0 = HEAP32[(5656)>>2]|0;
 HEAP32[(7788)>>2] = $0;
 HEAP32[(5656)>>2] = 0;
 $1 = HEAP32[(5276)>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   label = 4;
  } else {
   switch ($format|0) {
   case 28:  {
    label = 6;
    break L1;
    break;
   }
   case 4: case 17: case 19:  {
    break;
   }
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   case 18:  {
    label = 11;
    break L1;
    break;
   }
   case 0:  {
    break L1;
    break;
   }
   default: {
    label = 12;
    break L1;
   }
   }
   $3 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($3,7056,11080,$vararg_buffer);
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  if ((($format|0) == 28)) {
   label = 6;
  } else if ((($format|0) == 2)) {
   label = 5;
  } else if ((($format|0) == 18)) {
   label = 11;
  } else if (!((($format|0) == 0))) {
   label = 12;
  }
 }
 do {
  if ((label|0) == 5) {
   $4 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
   HEAP32[$vertices>>2] = $4;
   $5 = (_qh_getcenter($4)|0);
   $6 = HEAP32[(5828)>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $6;
   _qh_fprintf($fp,9186,11184,$vararg_buffer1);
   $7 = HEAP32[(5828)>>2]|0;
   _qh_printpointid($fp,0,$7,$5,-1);
   $8 = HEAP32[(7488)>>2]|0;
   _qh_memfree($5,$8);
   _qh_settempfree($vertices);
  }
  else if ((label|0) == 6) {
   $9 = HEAP32[(5304)>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    _qh_printextremes_d($fp,$facetlist,$facets,$printall);
    break;
   }
   $11 = HEAP32[(5828)>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    _qh_printextremes_2d($fp,$facetlist,$facets,$printall);
    break;
   } else {
    _qh_printextremes($fp,$facetlist,$facets,$printall);
    break;
   }
  }
  else if ((label|0) == 11) {
   $13 = HEAP32[5224>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $13;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = (6372);
   _qh_fprintf($fp,9187,55936,$vararg_buffer3);
  }
  else if ((label|0) == 12) {
   $14 = ($format|0)!=(21);
   $15 = HEAP32[(5796)>>2]|0;
   $16 = ($15|0)!=(0);
   $or$cond5 = $14 | $16;
   if (!($or$cond5)) {
    _qh_printpoints_out($fp,$facetlist,$facets,$printall);
    break;
   }
   if ((($format|0) == 27)) {
    _qh_printvneighbors($fp,$facetlist,$facets,$printall);
    break;
   } else if ((($format|0) == 22)) {
    HEAP32[$vararg_buffer7>>2] = (6116);
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = (5856);
    _qh_fprintf($fp,9188,11192,$vararg_buffer7);
    break;
   } else if ((($format|0) == 23)) {
    _qh_fprintf($fp,9189,11208,$vararg_buffer11);
    $17 = +HEAPF64[(7704)>>3];
    HEAPF64[$vararg_buffer13>>3] = $17;
    _qh_fprintf($fp,9190,11216,$vararg_buffer13);
    $18 = +HEAPF64[(7712)>>3];
    HEAPF64[$vararg_buffer16>>3] = $18;
    _qh_fprintf($fp,9191,11216,$vararg_buffer16);
    _qh_fprintf($fp,9192,56128,$vararg_buffer19);
    break;
   } else if ((($format|0) == 24)) {
    _qh_countfacets($facetlist,$facets,$printall,$numfacets,$numsimplicial,$totneighbors,$numridges,$numcoplanars,$numtricoplanars);
    $19 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
    HEAP32[$vertices>>2] = $19;
    $20 = HEAP32[(5828)>>2]|0;
    $21 = HEAP32[(5836)>>2]|0;
    $22 = HEAP32[(7748)>>2]|0;
    $23 = (_qh_setsize($22)|0);
    $24 = (($23) + ($21))|0;
    $25 = HEAP32[(7556)>>2]|0;
    $26 = HEAP32[(7552)>>2]|0;
    $27 = HEAP32[(7520)>>2]|0;
    $28 = (($26) - ($27))|0;
    $29 = HEAP32[$vertices>>2]|0;
    $30 = (_qh_setsize($29)|0);
    $31 = HEAP32[$numfacets>>2]|0;
    $32 = HEAP32[$numcoplanars>>2]|0;
    $33 = HEAP32[$numsimplicial>>2]|0;
    $34 = (($31) - ($33))|0;
    $35 = HEAP32[(43568)>>2]|0;
    $36 = HEAP32[$numtricoplanars>>2]|0;
    HEAP32[$vararg_buffer21>>2] = $20;
    $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
    HEAP32[$vararg_ptr24>>2] = $24;
    $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
    HEAP32[$vararg_ptr25>>2] = $25;
    $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
    HEAP32[$vararg_ptr26>>2] = $28;
    $vararg_ptr27 = ((($vararg_buffer21)) + 16|0);
    HEAP32[$vararg_ptr27>>2] = $30;
    $vararg_ptr28 = ((($vararg_buffer21)) + 20|0);
    HEAP32[$vararg_ptr28>>2] = $31;
    $vararg_ptr29 = ((($vararg_buffer21)) + 24|0);
    HEAP32[$vararg_ptr29>>2] = $32;
    $vararg_ptr30 = ((($vararg_buffer21)) + 28|0);
    HEAP32[$vararg_ptr30>>2] = $34;
    $vararg_ptr31 = ((($vararg_buffer21)) + 32|0);
    HEAP32[$vararg_ptr31>>2] = $35;
    $vararg_ptr32 = ((($vararg_buffer21)) + 36|0);
    HEAP32[$vararg_ptr32>>2] = $36;
    _qh_fprintf($fp,9193,11224,$vararg_buffer21);
    _qh_settempfree($vertices);
    _qh_outerinner(0,$outerplane,$innerplane);
    $37 = +HEAPF64[$outerplane>>3];
    $38 = +HEAPF64[$innerplane>>3];
    HEAPF64[$vararg_buffer33>>3] = $37;
    $vararg_ptr36 = ((($vararg_buffer33)) + 8|0);
    HEAPF64[$vararg_ptr36>>3] = $38;
    _qh_fprintf($fp,9194,11264,$vararg_buffer33);
    break;
   } else {
    $39 = ($format|0)==(17);
    $or$cond7 = $39 & $16;
    if ($or$cond7) {
     _qh_printvoronoi($fp,$format,$facetlist,$facets,$printall);
     break;
    }
    $40 = ($format|0)==(7);
    $or$cond9 = $40 & $16;
    if ($or$cond9) {
     _qh_printbegin($fp,$format,$facetlist,$facets,$printall);
     _qh_printvoronoi($fp,$format,$facetlist,$facets,$printall);
     _qh_printend($fp,$format,$facetlist,$facets,$printall);
     break;
    }
    if ($16) {
     if ((($format|0) == 9) | (($format|0) == 12) | (($format|0) == 26)) {
      _qh_printvdiagram($fp,$format,$facetlist,$facets,$printall);
      break;
     }
    }
    _qh_printbegin($fp,$format,$facetlist,$facets,$printall);
    $41 = ($facetlist|0)==(0|0);
    L35: do {
     if (!($41)) {
      $facet$0 = $facetlist;
      while(1) {
       $42 = ($facet$0|0)==(0|0);
       if ($42) {
        break L35;
       }
       $43 = ((($facet$0)) + 48|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(0|0);
       if ($45) {
        break;
       } else {
        $facet$0 = $44;
       }
      }
     }
    } while(0);
    $46 = ($facets|0)==(0|0);
    if (!($46)) {
     $47 = ((($facets)) + 4|0);
     $facetp$0 = $47;
     while(1) {
      $48 = HEAP32[$facetp$0>>2]|0;
      $49 = ($48|0)==(0|0);
      $50 = ((($facetp$0)) + 4|0);
      if ($49) {
       break;
      } else {
       $facetp$0 = $50;
      }
     }
    }
    _qh_printend($fp,$format,$facetlist,$facets,$printall);
    break;
   }
  }
 } while(0);
 $51 = HEAP32[(7788)>>2]|0;
 HEAP32[(5656)>>2] = $51;
 STACKTOP = sp;return;
}
function _qh_printfacet($fp,$facet) {
 $fp = $fp|0;
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _qh_printfacetheader($fp,$facet);
 $0 = ((($facet)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 _qh_printfacetridges($fp,$facet);
 return;
}
function _qh_printvertex($fp,$vertex) {
 $fp = $fp|0;
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$04 = 0;
 var $k$05 = 0, $point$06 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $0 = ($vertex|0)==(0|0);
 if ($0) {
  _qh_fprintf($fp,9234,11280,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $1 = ((($vertex)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_qh_pointid($2)|0);
 $4 = ((($vertex)) + 16|0);
 $5 = $4;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 16777215;
 HEAP32[$vararg_buffer1>>2] = $3;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $11;
 _qh_fprintf($fp,9235,11296,$vararg_buffer1);
 $12 = HEAP32[$1>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[(5828)>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $k$05 = $14;$point$06 = $12;
   while(1) {
    $16 = (($k$05) + -1)|0;
    $17 = ((($point$06)) + 8|0);
    $18 = +HEAPF64[$point$06>>3];
    HEAPF64[$vararg_buffer4>>3] = $18;
    _qh_fprintf($fp,9236,11312,$vararg_buffer4);
    $19 = ($16|0)==(0);
    if ($19) {
     break;
    } else {
     $k$05 = $16;$point$06 = $17;
    }
   }
  }
 }
 $20 = $4;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 & 1073741824;
 $27 = (0)==(0);
 $28 = ($26|0)==(0);
 $29 = $27 & $28;
 if (!($29)) {
  _qh_fprintf($fp,9237,11320,$vararg_buffer7);
 }
 $30 = $4;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & 536870912;
 $37 = (0)==(0);
 $38 = ($36|0)==(0);
 $39 = $37 & $38;
 if (!($39)) {
  _qh_fprintf($fp,9238,11336,$vararg_buffer9);
 }
 _qh_fprintf($fp,9239,56128,$vararg_buffer11);
 $40 = ((($vertex)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  STACKTOP = sp;return;
 }
 _qh_fprintf($fp,9240,11352,$vararg_buffer13);
 $43 = HEAP32[$40>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = ((($43)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  if (!($47)) {
   $48 = ((($45)) + 4|0);
   $53 = $46;$56 = $48;$count$04 = 0;
   while(1) {
    $49 = (($count$04) + 1)|0;
    $50 = (($49|0) % 100)&-1;
    $51 = ($50|0)==(0);
    if ($51) {
     _qh_fprintf($fp,9241,36664,$vararg_buffer15);
    }
    $52 = ((($53)) + 76|0);
    $54 = HEAP32[$52>>2]|0;
    HEAP32[$vararg_buffer17>>2] = $54;
    _qh_fprintf($fp,9242,27968,$vararg_buffer17);
    $55 = ((($56)) + 4|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0|0);
    if ($58) {
     break;
    } else {
     $53 = $57;$56 = $55;$count$04 = $49;
    }
   }
  }
 }
 _qh_fprintf($fp,9243,56128,$vararg_buffer20);
 STACKTOP = sp;return;
}
function _qh_compare_facetarea($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p1>>2]|0;
 $1 = HEAP32[$p2>>2]|0;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1048576;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = -1;
  return ($$0|0);
 }
 $6 = ((($1)) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1048576;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($0)) + 32|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($1)) + 32|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 > $13;
 if ($14) {
  $$0 = 1;
  return ($$0|0);
 }
 $not$ = $11 != $13;
 $$ = $not$ << 31 >> 31;
 $$0 = $$;
 return ($$0|0);
}
function _qh_compare_facetmerge($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p1>>2]|0;
 $1 = HEAP32[$p2>>2]|0;
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 511;
 $5 = ((($1)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 511;
 $8 = (($4) - ($7))|0;
 return ($8|0);
}
function _qh_compare_facetvisit($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $j$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p1>>2]|0;
 $1 = HEAP32[$p2>>2]|0;
 $2 = ((($0)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (0 - ($6))|0;
  $i$0 = $7;
 } else {
  $i$0 = $3;
 }
 $8 = ((($1)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $j$0 = $9;
  $14 = (($i$0) - ($j$0))|0;
  return ($14|0);
 }
 $11 = ((($1)) + 76|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (0 - ($12))|0;
 $j$0 = $13;
 $14 = (($i$0) - ($j$0))|0;
 return ($14|0);
}
function _qh_countfacets($facetlist,$facets,$printall,$numfacetsp,$numsimplicialp,$totneighborsp,$numridgesp,$numcoplanarsp,$numtricoplanarsp) {
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 $numfacetsp = $numfacetsp|0;
 $numsimplicialp = $numsimplicialp|0;
 $totneighborsp = $totneighborsp|0;
 $numridgesp = $numridgesp|0;
 $numcoplanarsp = $numcoplanarsp|0;
 $numtricoplanarsp = $numtricoplanarsp|0;
 var $$lcssa = 0, $$lcssa143 = 0, $$lcssa143$lcssa = 0, $$lcssa145 = 0, $$lcssa157 = 0, $$lcssa158 = 0, $$lcssa159 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $facet$030 = 0, $facetp$0$ph = 0, $facetp$0$ph$ph = 0, $facetp$0$ph$pn = 0, $not$ = 0, $not$8 = 0, $numcoplanars$035 = 0, $numcoplanars$1 = 0, $numcoplanars$2 = 0, $numcoplanars$3$ph$ph = 0, $numcoplanars$4 = 0, $numfacets$031 = 0, $numfacets$1 = 0, $numfacets$2 = 0;
 var $numfacets$3$ph = 0, $numfacets$3$ph$ph = 0, $numfacets$4 = 0, $numridges$033 = 0, $numridges$1 = 0, $numridges$2 = 0, $numridges$3 = 0, $numridges$4$ph = 0, $numridges$4$ph$ph = 0, $numridges$5 = 0, $numridges$5$lcssa = 0, $numridges$6 = 0, $numsimplicial$032 = 0, $numsimplicial$1 = 0, $numsimplicial$2 = 0, $numsimplicial$3 = 0, $numsimplicial$4$ph = 0, $numsimplicial$4$ph$ph = 0, $numsimplicial$5 = 0, $numsimplicial$5$lcssa = 0;
 var $numsimplicial$6 = 0, $numtricoplanars$0$ = 0, $numtricoplanars$036 = 0, $numtricoplanars$1 = 0, $numtricoplanars$2 = 0, $numtricoplanars$3 = 0, $numtricoplanars$4$ = 0, $numtricoplanars$4$ph = 0, $numtricoplanars$4$ph$ph = 0, $numtricoplanars$5 = 0, $numtricoplanars$5$lcssa = 0, $numtricoplanars$6 = 0, $or$cond = 0, $or$cond3 = 0, $totneighbors$034 = 0, $totneighbors$1 = 0, $totneighbors$2 = 0, $totneighbors$3$ph = 0, $totneighbors$3$ph$ph = 0, $totneighbors$4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($facetlist|0)==(0|0);
 L1: do {
  if ($0) {
   $numcoplanars$2 = 0;$numfacets$2 = 0;$numridges$3 = 0;$numsimplicial$3 = 0;$numtricoplanars$3 = 0;$totneighbors$2 = 0;
  } else {
   $1 = ($printall|0)==(0);
   $facet$030 = $facetlist;$numcoplanars$035 = 0;$numfacets$031 = 0;$numridges$033 = 0;$numsimplicial$032 = 0;$numtricoplanars$036 = 0;$totneighbors$034 = 0;
   while(1) {
    $2 = ((($facet$030)) + 48|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==(0|0);
    if ($4) {
     $numcoplanars$2 = $numcoplanars$035;$numfacets$2 = $numfacets$031;$numridges$3 = $numridges$033;$numsimplicial$3 = $numsimplicial$032;$numtricoplanars$3 = $numtricoplanars$036;$totneighbors$2 = $totneighbors$034;
     break L1;
    }
    $5 = ((($facet$030)) + 80|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = $6 & 2048;
    $8 = ($7|0)!=(0);
    $9 = HEAP32[(7656)>>2]|0;
    $10 = ($9|0)!=(0);
    $or$cond = $8 & $10;
    do {
     if ($or$cond) {
      label = 7;
     } else {
      if ($1) {
       $11 = (_qh_skipfacet($facet$030)|0);
       $12 = ($11|0)==(0);
       if (!($12)) {
        label = 7;
        break;
       }
      }
      $14 = (($numfacets$031) + 1)|0;
      $15 = ((($facet$030)) + 72|0);
      HEAP32[$15>>2] = $14;
      $16 = ((($facet$030)) + 60|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (_qh_setsize($17)|0);
      $19 = (($18) + ($totneighbors$034))|0;
      $20 = HEAP32[$5>>2]|0;
      $21 = $20 & 8192;
      $22 = ($21|0)==(0);
      if ($22) {
       $26 = ((($facet$030)) + 56|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_qh_setsize($27)|0);
       $29 = (($28) + ($numridges$033))|0;
       $numridges$1 = $29;$numsimplicial$1 = $numsimplicial$032;$numtricoplanars$1 = $numtricoplanars$036;
      } else {
       $23 = (($numsimplicial$032) + 1)|0;
       $24 = $20 & 268435968;
       $not$ = ($24|0)==(268435968);
       $25 = $not$&1;
       $numtricoplanars$0$ = (($25) + ($numtricoplanars$036))|0;
       $numridges$1 = $numridges$033;$numsimplicial$1 = $23;$numtricoplanars$1 = $numtricoplanars$0$;
      }
      $30 = ((($facet$030)) + 68|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       $numcoplanars$1 = $numcoplanars$035;$numfacets$1 = $14;$numridges$2 = $numridges$1;$numsimplicial$2 = $numsimplicial$1;$numtricoplanars$2 = $numtricoplanars$1;$totneighbors$1 = $19;
      } else {
       $33 = (_qh_setsize($31)|0);
       $34 = (($33) + ($numcoplanars$035))|0;
       $numcoplanars$1 = $34;$numfacets$1 = $14;$numridges$2 = $numridges$1;$numsimplicial$2 = $numsimplicial$1;$numtricoplanars$2 = $numtricoplanars$1;$totneighbors$1 = $19;
      }
     }
    } while(0);
    if ((label|0) == 7) {
     label = 0;
     $13 = ((($facet$030)) + 72|0);
     HEAP32[$13>>2] = 0;
     $numcoplanars$1 = $numcoplanars$035;$numfacets$1 = $numfacets$031;$numridges$2 = $numridges$033;$numsimplicial$2 = $numsimplicial$032;$numtricoplanars$2 = $numtricoplanars$036;$totneighbors$1 = $totneighbors$034;
    }
    $35 = HEAP32[$2>>2]|0;
    $36 = ($35|0)==(0|0);
    if ($36) {
     $numcoplanars$2 = $numcoplanars$1;$numfacets$2 = $numfacets$1;$numridges$3 = $numridges$2;$numsimplicial$3 = $numsimplicial$2;$numtricoplanars$3 = $numtricoplanars$2;$totneighbors$2 = $totneighbors$1;
     break;
    } else {
     $facet$030 = $35;$numcoplanars$035 = $numcoplanars$1;$numfacets$031 = $numfacets$1;$numridges$033 = $numridges$2;$numsimplicial$032 = $numsimplicial$2;$numtricoplanars$036 = $numtricoplanars$2;$totneighbors$034 = $totneighbors$1;
    }
   }
  }
 } while(0);
 $37 = ($facets|0)==(0|0);
 L20: do {
  if ($37) {
   $numcoplanars$4 = $numcoplanars$2;$numfacets$4 = $numfacets$2;$numridges$6 = $numridges$3;$numsimplicial$6 = $numsimplicial$3;$numtricoplanars$6 = $numtricoplanars$3;$totneighbors$4 = $totneighbors$2;
  } else {
   $38 = ((($facets)) + 4|0);
   $39 = ($printall|0)==(0);
   $facetp$0$ph$ph = $38;$numcoplanars$3$ph$ph = $numcoplanars$2;$numfacets$3$ph$ph = $numfacets$2;$numridges$4$ph$ph = $numridges$3;$numsimplicial$4$ph$ph = $numsimplicial$3;$numtricoplanars$4$ph$ph = $numtricoplanars$3;$totneighbors$3$ph$ph = $totneighbors$2;
   while(1) {
    $facetp$0$ph = $facetp$0$ph$ph;$numfacets$3$ph = $numfacets$3$ph$ph;$numridges$4$ph = $numridges$4$ph$ph;$numsimplicial$4$ph = $numsimplicial$4$ph$ph;$numtricoplanars$4$ph = $numtricoplanars$4$ph$ph;$totneighbors$3$ph = $totneighbors$3$ph$ph;
    while(1) {
     $40 = HEAP32[$facetp$0$ph>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      $numcoplanars$4 = $numcoplanars$3$ph$ph;$numfacets$4 = $numfacets$3$ph;$numridges$6 = $numridges$4$ph;$numsimplicial$6 = $numsimplicial$4$ph;$numtricoplanars$6 = $numtricoplanars$4$ph;$totneighbors$4 = $totneighbors$3$ph;
      break L20;
     } else {
      $44 = $40;$facetp$0$ph$pn = $facetp$0$ph;
     }
     while(1) {
      $42 = ((($facetp$0$ph$pn)) + 4|0);
      $43 = ((($44)) + 80|0);
      $45 = HEAP32[$43>>2]|0;
      $46 = $45 & 2048;
      $47 = ($46|0)!=(0);
      $48 = HEAP32[(7656)>>2]|0;
      $49 = ($48|0)!=(0);
      $or$cond3 = $47 & $49;
      if (!($or$cond3)) {
       if (!($39)) {
        $$lcssa = $44;$$lcssa143 = $42;$$lcssa145 = $43;
        break;
       }
       $50 = (_qh_skipfacet($44)|0);
       $51 = ($50|0)==(0);
       if ($51) {
        $$lcssa = $44;$$lcssa143 = $42;$$lcssa145 = $43;
        break;
       }
      }
      $52 = ((($44)) + 72|0);
      HEAP32[$52>>2] = 0;
      $53 = HEAP32[$42>>2]|0;
      $54 = ($53|0)==(0|0);
      if ($54) {
       $numcoplanars$4 = $numcoplanars$3$ph$ph;$numfacets$4 = $numfacets$3$ph;$numridges$6 = $numridges$4$ph;$numsimplicial$6 = $numsimplicial$4$ph;$numtricoplanars$6 = $numtricoplanars$4$ph;$totneighbors$4 = $totneighbors$3$ph;
       break L20;
      } else {
       $44 = $53;$facetp$0$ph$pn = $42;
      }
     }
     $55 = (($numfacets$3$ph) + 1)|0;
     $56 = ((($$lcssa)) + 72|0);
     HEAP32[$56>>2] = $55;
     $57 = ((($$lcssa)) + 60|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (_qh_setsize($58)|0);
     $60 = (($59) + ($totneighbors$3$ph))|0;
     $61 = HEAP32[$$lcssa145>>2]|0;
     $62 = $61 & 8192;
     $63 = ($62|0)==(0);
     if ($63) {
      $67 = ((($$lcssa)) + 56|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (_qh_setsize($68)|0);
      $70 = (($69) + ($numridges$4$ph))|0;
      $numridges$5 = $70;$numsimplicial$5 = $numsimplicial$4$ph;$numtricoplanars$5 = $numtricoplanars$4$ph;
     } else {
      $64 = (($numsimplicial$4$ph) + 1)|0;
      $65 = $61 & 268435968;
      $not$8 = ($65|0)==(268435968);
      $66 = $not$8&1;
      $numtricoplanars$4$ = (($66) + ($numtricoplanars$4$ph))|0;
      $numridges$5 = $numridges$4$ph;$numsimplicial$5 = $64;$numtricoplanars$5 = $numtricoplanars$4$;
     }
     $71 = ((($$lcssa)) + 68|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)==(0|0);
     if ($73) {
      $facetp$0$ph = $$lcssa143;$numfacets$3$ph = $55;$numridges$4$ph = $numridges$5;$numsimplicial$4$ph = $numsimplicial$5;$numtricoplanars$4$ph = $numtricoplanars$5;$totneighbors$3$ph = $60;
     } else {
      $$lcssa143$lcssa = $$lcssa143;$$lcssa157 = $55;$$lcssa158 = $60;$$lcssa159 = $72;$numridges$5$lcssa = $numridges$5;$numsimplicial$5$lcssa = $numsimplicial$5;$numtricoplanars$5$lcssa = $numtricoplanars$5;
      break;
     }
    }
    $74 = (_qh_setsize($$lcssa159)|0);
    $75 = (($74) + ($numcoplanars$3$ph$ph))|0;
    $facetp$0$ph$ph = $$lcssa143$lcssa;$numcoplanars$3$ph$ph = $75;$numfacets$3$ph$ph = $$lcssa157;$numridges$4$ph$ph = $numridges$5$lcssa;$numsimplicial$4$ph$ph = $numsimplicial$5$lcssa;$numtricoplanars$4$ph$ph = $numtricoplanars$5$lcssa;$totneighbors$3$ph$ph = $$lcssa158;
   }
  }
 } while(0);
 $76 = (($numfacets$4) + 1)|0;
 $77 = HEAP32[(7720)>>2]|0;
 $78 = (($76) + ($77))|0;
 HEAP32[(7720)>>2] = $78;
 HEAP32[$numfacetsp>>2] = $numfacets$4;
 HEAP32[$numsimplicialp>>2] = $numsimplicial$6;
 HEAP32[$totneighborsp>>2] = $totneighbors$4;
 HEAP32[$numridgesp>>2] = $numridges$6;
 HEAP32[$numcoplanarsp>>2] = $numcoplanars$4;
 HEAP32[$numtricoplanarsp>>2] = $numtricoplanars$6;
 return;
}
function _qh_skipfacet($facet) {
 $facet = $facet|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $neighborp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5488)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $20 = HEAP32[(5480)>>2]|0;
  $21 = ($20|0)==(0);
  if (!($21)) {
   $22 = ((($facet)) + 80|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $23 >>> 19;
   $$lobit = $24 & 1;
   $25 = $$lobit ^ 1;
   $$0 = $25;
   return ($$0|0);
  }
  $26 = ((($facet)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $$0 = 1;
   return ($$0|0);
  }
  $29 = (_qh_inthresholds($27,0)|0);
  $30 = ($29|0)==(0);
  $31 = $30&1;
  $$0 = $31;
  return ($$0|0);
 }
 $2 = ((($facet)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 524288;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[(5480)>>2]|0;
  $7 = ($6|0)==(0);
  $8 = $7&1;
  $$0 = $8;
  return ($$0|0);
 }
 $9 = ((($facet)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 1;
  return ($$0|0);
 }
 $12 = ((($10)) + 4|0);
 $neighborp$0 = $12;
 while(1) {
  $13 = HEAP32[$neighborp$0>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = 1;
   label = 12;
   break;
  }
  $15 = ((($neighborp$0)) + 4|0);
  $16 = ((($13)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 524288;
  $19 = ($18|0)==(0);
  if ($19) {
   $neighborp$0 = $15;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function _qh_detvnorm($vertex,$vertexA,$centers,$offsetp) {
 $vertex = $vertex|0;
 $vertexA = $vertexA|0;
 $centers = $centers|0;
 $offsetp = $offsetp|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$lcssa73$lcssa = 0, $$lcssa75 = 0, $$lcssa77 = 0, $$pr = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0;
 var $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0;
 var $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0;
 var $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $angle$0 = 0.0, $angle$0$v = 0.0, $angle$1 = 0.0, $coord$020 = 0, $dist$0 = 0.0;
 var $dist$1 = 0.0, $exitcond = 0, $exitcond46 = 0, $exitcond48 = 0, $gmcoord$0$ph$ph = 0, $gmcoord$121 = 0, $gmcoord$2 = 0, $i$0$ph = 0, $i$0$ph$ph = 0, $i$1 = 0, $inpoint$0 = 0, $k$035 = 0, $k$119 = 0, $k$215 = 0, $k$313 = 0, $nearzero = 0, $normalp$016 = 0, $numcenters$0$ph32 = 0, $numcenters$025 = 0, $numcenters$1 = 0;
 var $offset = 0, $point = 0, $point$promoted = 0, $point_i$012 = 0, $pointp$0 = 0, $pointp$0$ph = 0, $pointp$0$ph$ph = 0, $points = 0, $scevgep = 0, $scevgep47 = 0, $simplex = 0, $unbounded$0$ph31 = 0, $unbounded$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer6 = sp + 64|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 32|0;
 $simplex = sp + 100|0;
 $point = sp + 96|0;
 $points = sp + 92|0;
 $nearzero = sp + 88|0;
 $offset = sp;
 $zero = sp + 40|0;
 HEAP32[$simplex>>2] = 0;
 $0 = HEAP32[(7496)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$points>>2] = $1;
 HEAP32[$nearzero>>2] = 0;
 $2 = HEAP32[(5828)>>2]|0;
 $3 = (($2) + -1)|0;
 HEAPF64[$zero>>3] = 0.0;
 $4 = HEAP32[(7756)>>2]|0;
 $5 = HEAP32[(5828)>>2]|0;
 $6 = Math_imul($5, $5)|0;
 $7 = (($4) + ($6<<3)|0);
 $8 = ($2|0)>(1);
 if ($8) {
  $9 = ((($vertex)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($vertexA)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($2) + -1)|0;
  $k$035 = 0;
  while(1) {
   $14 = (($10) + ($k$035<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = (($12) + ($k$035<<3)|0);
   $17 = +HEAPF64[$16>>3];
   $18 = $15 + $17;
   $19 = $18 * 0.5;
   $$sum2 = (($k$035) + ($6))|0;
   $20 = (($4) + ($$sum2<<3)|0);
   HEAPF64[$20>>3] = $19;
   $21 = (($k$035) + 1)|0;
   $exitcond48 = ($21|0)==($13|0);
   if ($exitcond48) {
    break;
   } else {
    $k$035 = $21;
   }
  }
 }
 $22 = ($centers|0)==(0|0);
 L6: do {
  if ($22) {
   $numcenters$1 = 0;$unbounded$1 = 0;
  } else {
   $23 = ((($centers)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $numcenters$1 = 0;$unbounded$1 = 0;
   } else {
    $26 = ((($23)) + 4|0);
    $205 = $24;$206 = $26;$numcenters$0$ph32 = 0;$unbounded$0$ph31 = 0;
    while(1) {
     $32 = $205;$43 = $206;$numcenters$025 = $numcenters$0$ph32;
     while(1) {
      $30 = (($numcenters$025) + 1)|0;
      $31 = ((($32)) + 72|0);
      $33 = HEAP32[$31>>2]|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$lcssa75 = $43;$$lcssa77 = $30;
       break;
      }
      $35 = ((($32)) + 40|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(0|0);
      if ($37) {
       $38 = ((($32)) + 52|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (_qh_facetcenter($39)|0);
       HEAP32[$35>>2] = $40;
      }
      $41 = HEAP32[$35>>2]|0;
      _qh_setappend($points,$41);
      $42 = ((($43)) + 4|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $numcenters$1 = $30;$unbounded$1 = $unbounded$0$ph31;
       break L6;
      } else {
       $32 = $44;$43 = $42;$numcenters$025 = $30;
      }
     }
     $27 = ((($$lcssa75)) + 4|0);
     $28 = HEAP32[$$lcssa75>>2]|0;
     $29 = ($28|0)==(0|0);
     if ($29) {
      $numcenters$1 = $$lcssa77;$unbounded$1 = 1;
      break;
     } else {
      $205 = $28;$206 = $27;$numcenters$0$ph32 = $$lcssa77;$unbounded$0$ph31 = 1;
     }
    }
   }
  }
 } while(0);
 $46 = ($numcenters$1|0)>($3|0);
 if ($46) {
  $47 = HEAP32[(7496)>>2]|0;
  $48 = (_qh_settemp($47)|0);
  HEAP32[$simplex>>2] = $48;
  $49 = ((($vertex)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  _qh_setappend($simplex,$50);
  $51 = ($unbounded$1|0)==(0);
  if (!($51)) {
   _qh_setappend($simplex,$7);
  }
  $52 = HEAP32[$points>>2]|0;
  _qh_maxsimplex($3,$52,0,0,$simplex);
  $53 = HEAP32[$simplex>>2]|0;
  (_qh_setdelnth($53,0)|0);
  $$pr = HEAP32[$simplex>>2]|0;
  $61 = $$pr;
 } else {
  $54 = ($numcenters$1|0)==($3|0);
  if (!($54)) {
   $58 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer>>2] = $numcenters$1;
   _qh_fprintf($58,6216,11368,$vararg_buffer);
   _qh_errexit(5,0,0);
   // unreachable;
  }
  $55 = ($unbounded$1|0)==(0);
  if (!($55)) {
   _qh_setappend($points,$7);
  }
  $56 = HEAP32[$points>>2]|0;
  HEAP32[$simplex>>2] = $56;
  $57 = $56;
  $61 = $57;
 }
 $59 = HEAP32[(7756)>>2]|0;
 $60 = ((($61)) + 4|0);
 $62 = HEAP32[$60>>2]|0;
 HEAP32[$point>>2] = 0;
 $63 = ($61|0)==(0|0);
 L32: do {
  if ($63) {
   $gmcoord$2 = $59;$i$1 = 0;
  } else {
   $64 = ($3|0)==(0);
   $65 = (($2) + -1)|0;
   $gmcoord$0$ph$ph = $59;$i$0$ph$ph = 0;$pointp$0$ph$ph = $60;
   while(1) {
    $i$0$ph = $i$0$ph$ph;$pointp$0$ph = $pointp$0$ph$ph;
    while(1) {
     $pointp$0 = $pointp$0$ph;
     while(1) {
      $66 = ((($pointp$0)) + 4|0);
      $67 = HEAP32[$pointp$0>>2]|0;
      HEAP32[$point>>2] = $67;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $gmcoord$2 = $gmcoord$0$ph$ph;$i$1 = $i$0$ph;
       break L32;
      }
      $69 = HEAP32[(5344)>>2]|0;
      $70 = ($69|0)>(3);
      if ($70) {
       $71 = HEAP32[(7480)>>2]|0;
       _qh_printmatrix($71,11456,$point,1,$3);
      }
      $72 = HEAP32[$point>>2]|0;
      $73 = ($72|0)==($62|0);
      if ($73) {
       $pointp$0 = $66;
      } else {
       $$lcssa73 = $66;
       break;
      }
     }
     $74 = (($i$0$ph) + 1)|0;
     $75 = HEAP32[(7760)>>2]|0;
     $76 = (($75) + ($i$0$ph<<2)|0);
     HEAP32[$76>>2] = $gmcoord$0$ph$ph;
     if ($64) {
      $i$0$ph = $74;$pointp$0$ph = $$lcssa73;
     } else {
      $$lcssa = $74;$$lcssa73$lcssa = $$lcssa73;
      break;
     }
    }
    $point$promoted = HEAP32[$point>>2]|0;
    $scevgep = (($gmcoord$0$ph$ph) + ($65<<3)|0);
    $79 = $point$promoted;$coord$020 = $62;$gmcoord$121 = $gmcoord$0$ph$ph;$k$119 = $3;
    while(1) {
     $77 = (($k$119) + -1)|0;
     $78 = ((($79)) + 8|0);
     $80 = +HEAPF64[$79>>3];
     $81 = ((($coord$020)) + 8|0);
     $82 = +HEAPF64[$coord$020>>3];
     $83 = $80 - $82;
     $84 = ((($gmcoord$121)) + 8|0);
     HEAPF64[$gmcoord$121>>3] = $83;
     $85 = ($77|0)==(0);
     if ($85) {
      break;
     } else {
      $79 = $78;$coord$020 = $81;$gmcoord$121 = $84;$k$119 = $77;
     }
    }
    $scevgep47 = (($point$promoted) + ($65<<3)|0);
    HEAP32[$point>>2] = $scevgep47;
    $gmcoord$0$ph$ph = $scevgep;$i$0$ph$ph = $$lcssa;$pointp$0$ph$ph = $$lcssa73$lcssa;
   }
  }
 } while(0);
 $86 = HEAP32[(7760)>>2]|0;
 $87 = (($86) + ($i$1<<2)|0);
 HEAP32[$87>>2] = $gmcoord$2;
 $88 = HEAP32[(7760)>>2]|0;
 _qh_sethyperplane_gauss($3,$88,$62,1,$gmcoord$2,$offset,$nearzero);
 $89 = HEAP32[(5336)>>2]|0;
 $90 = ((($vertexA)) + 8|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($89|0)==($91|0);
 if ($92) {
  $inpoint$0 = $91;
 } else {
  $93 = ((($vertex)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $inpoint$0 = $94;
 }
 $95 = HEAP32[(43616)>>2]|0;
 $96 = (($95) + 1)|0;
 HEAP32[(43616)>>2] = $96;
 $97 = (+_qh_distnorm($3,$inpoint$0,$gmcoord$2,$offset));
 $98 = $97 > 0.0;
 if ($98) {
  $99 = +HEAPF64[$offset>>3];
  $100 = -$99;
  HEAPF64[$offset>>3] = $100;
  $101 = ($3|0)==(0);
  if (!($101)) {
   $k$215 = $3;$normalp$016 = $gmcoord$2;
   while(1) {
    $102 = (($k$215) + -1)|0;
    $103 = +HEAPF64[$normalp$016>>3];
    $104 = -$103;
    HEAPF64[$normalp$016>>3] = $104;
    $105 = ((($normalp$016)) + 8|0);
    $106 = ($102|0)==(0);
    if ($106) {
     break;
    } else {
     $k$215 = $102;$normalp$016 = $105;
    }
   }
  }
 }
 $107 = HEAP32[(5788)>>2]|0;
 $108 = HEAP32[(5632)>>2]|0;
 $109 = $108 | $107;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = ((($vertex)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (_qh_pointid($112)|0);
  $114 = HEAP32[$90>>2]|0;
  $115 = (_qh_pointid($114)|0);
  $116 = ($unbounded$1|0)==(0);
  do {
   if ($116) {
    $117 = HEAP32[(43632)>>2]|0;
    $118 = (($117) + 1)|0;
    HEAP32[(43632)>>2] = $118;
    $119 = (+_qh_distnorm($3,$7,$gmcoord$2,$offset));
    $120 = $119 < 0.0;
    $121 = -$119;
    $dist$0 = $120 ? $121 : $119;
    $122 = HEAP32[(44680)>>2]|0;
    $123 = (($122) + 1)|0;
    HEAP32[(44680)>>2] = $123;
    $124 = +HEAPF64[(44696)>>3];
    $125 = $124 < $dist$0;
    if ($125) {
     HEAPF64[(44696)>>3] = $dist$0;
    }
    $126 = +HEAPF64[(44688)>>3];
    $127 = $dist$0 + $126;
    HEAPF64[(44688)>>3] = $127;
    $128 = HEAP32[(5344)>>2]|0;
    $129 = ($128|0)>(3);
    if ($129) {
     $130 = HEAP32[(7480)>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $113;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $115;
     $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
     HEAPF64[$vararg_ptr5>>3] = $dist$0;
     _qh_fprintf($130,4014,11496,$vararg_buffer1);
    }
    $131 = ($2|0)>(1);
    if ($131) {
     $132 = HEAP32[$90>>2]|0;
     $133 = HEAP32[$111>>2]|0;
     $134 = (($2) + -1)|0;
     $k$313 = 0;
     while(1) {
      $135 = (($132) + ($k$313<<3)|0);
      $136 = +HEAPF64[$135>>3];
      $137 = (($133) + ($k$313<<3)|0);
      $138 = +HEAPF64[$137>>3];
      $139 = $136 - $138;
      $$sum = (($k$313) + ($6))|0;
      $140 = (($4) + ($$sum<<3)|0);
      HEAPF64[$140>>3] = $139;
      $141 = (($k$313) + 1)|0;
      $exitcond46 = ($141|0)==($134|0);
      if ($exitcond46) {
       break;
      } else {
       $k$313 = $141;
      }
     }
    }
    _qh_normalize($7,$3,0);
    $142 = (+_qh_distnorm($3,$7,$gmcoord$2,$zero));
    $143 = $142 < 0.0;
    $angle$0$v = $143 ? 1.0 : -1.0;
    $angle$0 = $142 + $angle$0$v;
    $144 = $angle$0 < 0.0;
    $145 = $angle$0 - $angle$0;
    $angle$1 = $144 ? $145 : $angle$0;
    $146 = HEAP32[(5344)>>2]|0;
    $147 = ($146|0)>(3);
    if ($147) {
     $148 = HEAP32[(7480)>>2]|0;
     $149 = HEAP32[$nearzero>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $113;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $115;
     $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
     HEAPF64[$vararg_ptr10>>3] = $angle$1;
     $vararg_ptr11 = ((($vararg_buffer6)) + 16|0);
     HEAP32[$vararg_ptr11>>2] = $149;
     _qh_fprintf($148,4015,11544,$vararg_buffer6);
    }
    $150 = HEAP32[$nearzero>>2]|0;
    $151 = ($150|0)==(0);
    if ($151) {
     $158 = HEAP32[(44704)>>2]|0;
     $159 = (($158) + 1)|0;
     HEAP32[(44704)>>2] = $159;
     $160 = +HEAPF64[(44720)>>3];
     $161 = $160 < $angle$1;
     if ($161) {
      HEAPF64[(44720)>>3] = $angle$1;
     }
     $162 = +HEAPF64[(44712)>>3];
     $163 = $angle$1 + $162;
     HEAPF64[(44712)>>3] = $163;
     break;
    } else {
     $152 = HEAP32[(44656)>>2]|0;
     $153 = (($152) + 1)|0;
     HEAP32[(44656)>>2] = $153;
     $154 = +HEAPF64[(44672)>>3];
     $155 = $154 < $angle$1;
     if ($155) {
      HEAPF64[(44672)>>3] = $angle$1;
     }
     $156 = +HEAPF64[(44664)>>3];
     $157 = $angle$1 + $156;
     HEAPF64[(44664)>>3] = $157;
     break;
    }
   }
  } while(0);
  $164 = HEAP32[$simplex>>2]|0;
  $165 = HEAP32[$points>>2]|0;
  $166 = ($164|0)==($165|0);
  if (!($166)) {
   HEAP32[$point>>2] = 0;
   $167 = HEAP32[$points>>2]|0;
   $168 = ($167|0)==(0|0);
   if (!($168)) {
    $169 = ((($167)) + 4|0);
    $170 = HEAP32[$169>>2]|0;
    HEAP32[$point>>2] = $170;
    $171 = HEAP32[$points>>2]|0;
    $172 = (_qh_setsize($171)|0);
    $173 = ($172|0)>(0);
    if ($173) {
     $point_i$012 = 0;
     while(1) {
      $174 = HEAP32[$simplex>>2]|0;
      $175 = HEAP32[$point>>2]|0;
      $176 = (_qh_setin($174,$175)|0);
      $177 = ($176|0)==(0);
      if ($177) {
       $178 = (((($centers)) + 4|0) + ($point_i$012<<2)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = HEAP32[(43632)>>2]|0;
       $181 = (($180) + 1)|0;
       HEAP32[(43632)>>2] = $181;
       $182 = HEAP32[$point>>2]|0;
       $183 = (+_qh_distnorm($3,$182,$gmcoord$2,$offset));
       $184 = $183 < 0.0;
       $185 = -$183;
       $dist$1 = $184 ? $185 : $183;
       $186 = HEAP32[(44632)>>2]|0;
       $187 = (($186) + 1)|0;
       HEAP32[(44632)>>2] = $187;
       $188 = +HEAPF64[(44648)>>3];
       $189 = $188 < $dist$1;
       if ($189) {
        HEAPF64[(44648)>>3] = $dist$1;
       }
       $190 = +HEAPF64[(44640)>>3];
       $191 = $dist$1 + $190;
       HEAPF64[(44640)>>3] = $191;
       $192 = HEAP32[(5344)>>2]|0;
       $193 = ($192|0)>(3);
       if ($193) {
        $194 = HEAP32[(7480)>>2]|0;
        $195 = ((($179)) + 72|0);
        $196 = HEAP32[$195>>2]|0;
        HEAP32[$vararg_buffer12>>2] = $113;
        $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
        HEAP32[$vararg_ptr15>>2] = $115;
        $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
        HEAP32[$vararg_ptr16>>2] = $196;
        $vararg_ptr17 = ((($vararg_buffer12)) + 16|0);
        HEAPF64[$vararg_ptr17>>3] = $dist$1;
        _qh_fprintf($194,4016,11600,$vararg_buffer12);
       }
      }
      $197 = (($point_i$012) + 1)|0;
      $198 = HEAP32[$points>>2]|0;
      $199 = (((($198)) + 4|0) + ($197<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      HEAP32[$point>>2] = $200;
      $exitcond = ($197|0)==($172|0);
      if ($exitcond) {
       break;
      } else {
       $point_i$012 = $197;
      }
     }
    }
   }
  }
 }
 $201 = +HEAPF64[$offset>>3];
 HEAPF64[$offsetp>>3] = $201;
 $202 = HEAP32[$simplex>>2]|0;
 $203 = HEAP32[$points>>2]|0;
 $204 = ($202|0)==($203|0);
 if ($204) {
  _qh_settempfree($points);
  STACKTOP = sp;return ($gmcoord$2|0);
 }
 _qh_settempfree($simplex);
 _qh_settempfree($points);
 STACKTOP = sp;return ($gmcoord$2|0);
}
function _qh_detvridge($vertex) {
 $vertex = $vertex|0;
 var $$lcssa = 0, $$lcssa20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $centers = 0, $firstinf$0$ph3 = 0, $tricenters = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $centers = sp + 4|0;
 $tricenters = sp;
 $0 = HEAP32[(7496)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$centers>>2] = $1;
 $2 = HEAP32[(7496)>>2]|0;
 $3 = (_qh_settemp($2)|0);
 HEAP32[$tricenters>>2] = $3;
 $4 = ((($vertex)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if (!($6)) {
   $7 = ((($5)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $10 = ((($7)) + 4|0);
    $37 = $8;$38 = $10;$firstinf$0$ph3 = 1;
    while(1) {
     $12 = $37;$26 = $38;
     L6: while(1) {
      $11 = ((($12)) + 80|0);
      $13 = HEAP32[$11>>2]|0;
      $14 = $13 & 16384;
      $15 = ($14|0)==(0);
      do {
       if (!($15)) {
        $16 = ((($12)) + 72|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==(0);
        if ($18) {
         $$lcssa = $12;$$lcssa20 = $26;
         break L6;
        }
        $19 = $13 & 512;
        $20 = ($19|0)==(0);
        if (!($20)) {
         $21 = ((($12)) + 40|0);
         $22 = HEAP32[$21>>2]|0;
         $23 = (_qh_setunique($tricenters,$22)|0);
         $24 = ($23|0)==(0);
         if ($24) {
          break;
         }
        }
        _qh_setappend($centers,$12);
       }
      } while(0);
      $25 = ((($26)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(0|0);
      if ($28) {
       break L1;
      } else {
       $12 = $27;$26 = $25;
      }
     }
     $29 = ($firstinf$0$ph3|0)==(0);
     if (!($29)) {
      _qh_setappend($centers,$$lcssa);
     }
     $30 = ((($$lcssa20)) + 4|0);
     $31 = HEAP32[$$lcssa20>>2]|0;
     $32 = ($31|0)==(0|0);
     if ($32) {
      break;
     } else {
      $37 = $31;$38 = $30;$firstinf$0$ph3 = 0;
     }
    }
   }
  }
 } while(0);
 $33 = HEAP32[$centers>>2]|0;
 $34 = ((($33)) + 4|0);
 $35 = (_qh_setsize($33)|0);
 _qsort($34,$35,4,1);
 _qh_settempfree($tricenters);
 $36 = HEAP32[$centers>>2]|0;
 STACKTOP = sp;return ($36|0);
}
function _qh_detvridge3($atvertex,$vertex) {
 $atvertex = $atvertex|0;
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $centers = 0, $firstinf$014 = 0, $firstinf$1 = 0, $neighbor$012 = 0, $neighborp$016 = 0, $neighborp$1 = 0, $neighborp$47 = 0, $tricenters = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $centers = sp + 12|0;
 $tricenters = sp + 8|0;
 $0 = HEAP32[(7496)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$centers>>2] = $1;
 $2 = HEAP32[(7496)>>2]|0;
 $3 = (_qh_settemp($2)|0);
 HEAP32[$tricenters>>2] = $3;
 $4 = ((($atvertex)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $12 = $8;$neighborp$016 = $7;
   while(1) {
    $10 = ((($neighborp$016)) + 4|0);
    $11 = ((($12)) + 80|0);
    $13 = HEAP32[$11>>2]|0;
    $14 = $13 & -32769;
    HEAP32[$11>>2] = $14;
    $15 = HEAP32[$10>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     break;
    } else {
     $12 = $15;$neighborp$016 = $10;
    }
   }
  }
 }
 $17 = ((($vertex)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 L6: do {
  if (!($19)) {
   $20 = ((($18)) + 4|0);
   $neighborp$1 = $20;
   while(1) {
    $21 = HEAP32[$neighborp$1>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break L6;
    }
    $23 = ((($neighborp$1)) + 4|0);
    $24 = ((($21)) + 80|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 32768;
    $27 = ($26|0)==(0);
    if ($27) {
     $firstinf$014 = 1;$neighbor$012 = $21;
     break;
    } else {
     $neighborp$1 = $23;
    }
   }
   L11: while(1) {
    $28 = ((($neighbor$012)) + 80|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 | 32768;
    HEAP32[$28>>2] = $30;
    $31 = $29 & 16384;
    $32 = ($31|0)==(0);
    do {
     if ($32) {
      $firstinf$1 = $firstinf$014;
     } else {
      $33 = ((($neighbor$012)) + 72|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)==(0);
      if ($35) {
       $42 = ($firstinf$014|0)==(0);
       if ($42) {
        $firstinf$1 = 0;
        break;
       }
       _qh_setappend($centers,$neighbor$012);
       $firstinf$1 = 0;
       break;
      }
      $36 = $29 & 512;
      $37 = ($36|0)==(0);
      if (!($37)) {
       $38 = ((($neighbor$012)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (_qh_setunique($tricenters,$39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        $firstinf$1 = $firstinf$014;
        break;
       }
      }
      _qh_setappend($centers,$neighbor$012);
      $firstinf$1 = $firstinf$014;
     }
    } while(0);
    $43 = ((($neighbor$012)) + 60|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(0|0);
    if ($45) {
     break L6;
    }
    $46 = ((($44)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     break L6;
    }
    $49 = ((($46)) + 4|0);
    $51 = $47;$61 = $49;
    while(1) {
     $50 = ((($51)) + 80|0);
     $52 = HEAP32[$50>>2]|0;
     $53 = $52 & 32768;
     $54 = ($53|0)==(0);
     if ($54) {
      $55 = HEAP32[$17>>2]|0;
      $56 = (_qh_setin($55,$51)|0);
      $57 = ($56|0)==(0);
      if (!($57)) {
       $firstinf$014 = $firstinf$1;$neighbor$012 = $51;
       continue L11;
      }
      $58 = HEAP32[$50>>2]|0;
      $59 = $58 | 32768;
      HEAP32[$50>>2] = $59;
     }
     $60 = ((($61)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(0|0);
     if ($63) {
      break L6;
     } else {
      $51 = $62;$61 = $60;
     }
    }
   }
  }
 } while(0);
 $64 = HEAP32[(5280)>>2]|0;
 $65 = ($64|0)==(0);
 L32: do {
  if (!($65)) {
   $66 = HEAP32[$17>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = ((($66)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($68)) + 4|0);
     $72 = ((($vertex)) + 8|0);
     $74 = $69;$84 = $71;
     while(1) {
      $73 = ((($74)) + 80|0);
      $75 = HEAP32[$73>>2]|0;
      $76 = $75 & 32768;
      $77 = ($76|0)==(0);
      if ($77) {
       break;
      }
      $83 = ((($84)) + 4|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($85|0)==(0|0);
      if ($86) {
       break L32;
      } else {
       $74 = $85;$84 = $83;
      }
     }
     $78 = HEAP32[(7480)>>2]|0;
     $79 = HEAP32[$72>>2]|0;
     $80 = (_qh_pointid($79)|0);
     $81 = ((($74)) + 76|0);
     $82 = HEAP32[$81>>2]|0;
     HEAP32[$vararg_buffer>>2] = $80;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $82;
     _qh_fprintf($78,6217,11656,$vararg_buffer);
     _qh_errexit(5,$74,0);
     // unreachable;
    }
   }
  }
 } while(0);
 $87 = HEAP32[$4>>2]|0;
 $88 = ($87|0)==(0|0);
 if ($88) {
  _qh_settempfree($tricenters);
  $99 = HEAP32[$centers>>2]|0;
  STACKTOP = sp;return ($99|0);
 }
 $89 = ((($87)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 if ($91) {
  _qh_settempfree($tricenters);
  $99 = HEAP32[$centers>>2]|0;
  STACKTOP = sp;return ($99|0);
 } else {
  $94 = $90;$neighborp$47 = $89;
 }
 while(1) {
  $92 = ((($neighborp$47)) + 4|0);
  $93 = ((($94)) + 80|0);
  $95 = HEAP32[$93>>2]|0;
  $96 = $95 | 32768;
  HEAP32[$93>>2] = $96;
  $97 = HEAP32[$92>>2]|0;
  $98 = ($97|0)==(0|0);
  if ($98) {
   break;
  } else {
   $94 = $97;$neighborp$47 = $92;
  }
 }
 _qh_settempfree($tricenters);
 $99 = HEAP32[$centers>>2]|0;
 STACKTOP = sp;return ($99|0);
}
function _qh_eachvoronoi($fp,$printvridge,$atvertex,$visitall,$innerouter,$inorder) {
 $fp = $fp|0;
 $printvridge = $printvridge|0;
 $atvertex = $atvertex|0;
 $visitall = $visitall|0;
 $innerouter = $innerouter|0;
 $inorder = $inorder|0;
 var $$lcssa = 0, $$lcssa135 = 0, $$lcssa136 = 0, $$lcssa137 = 0, $$lcssa144 = 0, $$lcssa146 = 0, $$pr = 0, $$pr7$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $centers = 0, $count$0$ = 0, $count$0$ph$ph38 = 0, $count$0$ph33 = 0, $count$0$ph33$lcssa = 0, $count$1 = 0, $count$1$lcssa = 0, $firstinf$0$ph$ph39 = 0;
 var $firstinf$1 = 0, $neighborp$225 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $storemerge = 0, $totridges$0$ph$lcssa = 0, $totridges$0$ph47 = 0, $totridges$1$ph$lcssa = 0, $totridges$1$ph45 = 0, $totridges$29 = 0, $tricenters = 0, $unbounded$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vertex$0 = 0, $vertex$050 = 0, $vertex$051 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $centers = sp + 16|0;
 $tricenters = sp + 12|0;
 $0 = HEAP32[(7496)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$tricenters>>2] = $1;
 $2 = HEAP32[(7552)>>2]|0;
 $3 = HEAP32[(7724)>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = $4 & 2147483647;
 $6 = $3 & -2147483648;
 $7 = $5 | $6;
 HEAP32[(7724)>>2] = $7;
 $8 = ((($atvertex)) + 16|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 | 268435456;
 $16 = $8;
 $17 = $16;
 HEAP32[$17>>2] = $11;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = ($visitall|0)==(0);
 L1: do {
  if (!($20)) {
   $vertex$050 = HEAP32[(7540)>>2]|0;
   $21 = ($vertex$050|0)==(0|0);
   if (!($21)) {
    $vertex$051 = $vertex$050;
    while(1) {
     $22 = HEAP32[$vertex$051>>2]|0;
     $23 = ($22|0)==(0|0);
     if ($23) {
      break L1;
     }
     $24 = ((($vertex$051)) + 16|0);
     $25 = $24;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($25) + 4)|0;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $31 = $30 & -268435457;
     $32 = $24;
     $33 = $32;
     HEAP32[$33>>2] = $27;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = $31;
     $vertex$0 = HEAP32[$vertex$051>>2]|0;
     $36 = ($vertex$0|0)==(0|0);
     if ($36) {
      break;
     } else {
      $vertex$051 = $vertex$0;
     }
    }
   }
  }
 } while(0);
 $37 = ((($atvertex)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $totridges$29 = 0;
  _qh_settempfree($tricenters);
  STACKTOP = sp;return ($totridges$29|0);
 }
 $40 = ((($38)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  $43 = ((($40)) + 4|0);
  $45 = $41;$52 = $43;
  while(1) {
   $44 = ((($45)) + 72|0);
   $46 = HEAP32[$44>>2]|0;
   $47 = ($46>>>0)<($2>>>0);
   if ($47) {
    $48 = ((($45)) + 80|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 | 16384;
    HEAP32[$48>>2] = $50;
   }
   $51 = ((($52)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    break;
   } else {
    $45 = $53;$52 = $51;
   }
  }
 }
 $$pr = HEAP32[$37>>2]|0;
 $55 = ($$pr|0)==(0|0);
 if ($55) {
  $totridges$29 = 0;
  _qh_settempfree($tricenters);
  STACKTOP = sp;return ($totridges$29|0);
 }
 $56 = ((($$pr)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 L21: do {
  if ($58) {
   $totridges$0$ph$lcssa = 0;
  } else {
   $59 = ((($56)) + 4|0);
   $60 = ($innerouter|0)==(1);
   $61 = ($innerouter|0)==(2);
   $62 = ((($atvertex)) + 8|0);
   $63 = ($printvridge|0)!=(0|0);
   $64 = ($fp|0)!=(0|0);
   $or$cond = $64 & $63;
   $65 = ($inorder|0)!=(0);
   $176 = $57;$177 = $59;$totridges$0$ph47 = 0;
   while(1) {
    $70 = $176;$75 = $177;
    while(1) {
     $69 = ((($70)) + 80|0);
     $71 = HEAP32[$69>>2]|0;
     $72 = $71 & 16384;
     $73 = ($72|0)==(0);
     if (!($73)) {
      $78 = ((($70)) + 52|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if (!($80)) {
       $$lcssa = $75;$$lcssa135 = $79;
       break;
      }
     }
     $74 = ((($75)) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $totridges$0$ph$lcssa = $totridges$0$ph47;
      break L21;
     } else {
      $70 = $76;$75 = $74;
     }
    }
    $81 = ((($$lcssa135)) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(0|0);
    L31: do {
     if ($83) {
      $totridges$1$ph$lcssa = $totridges$0$ph47;
     } else {
      $84 = ((($81)) + 4|0);
      $178 = $82;$179 = $84;$totridges$1$ph45 = $totridges$0$ph47;
      while(1) {
       $146 = $179;$86 = $178;
       L35: while(1) {
        $85 = ((($86)) + 16|0);
        $87 = $85;
        $88 = $87;
        $89 = HEAP32[$88>>2]|0;
        $90 = (($87) + 4)|0;
        $91 = $90;
        $92 = HEAP32[$91>>2]|0;
        $93 = HEAP32[(7724)>>2]|0;
        $94 = $89 ^ $93;
        $95 = $94 & 2147483647;
        $96 = ($95|0)!=(0);
        $97 = $92 & 268435456;
        $98 = (0)==(0);
        $99 = ($97|0)==(0);
        $100 = $98 & $99;
        $or$cond6 = $100 & $96;
        do {
         if ($or$cond6) {
          $101 = $93 & 2147483647;
          $102 = $89 & -2147483648;
          $103 = $101 | $102;
          $104 = $85;
          $105 = $104;
          HEAP32[$105>>2] = $103;
          $106 = (($104) + 4)|0;
          $107 = $106;
          HEAP32[$107>>2] = $92;
          $108 = HEAP32[$tricenters>>2]|0;
          _qh_settruncate($108,0);
          $109 = ((($86)) + 12|0);
          $110 = HEAP32[$109>>2]|0;
          $111 = ($110|0)==(0|0);
          L39: do {
           if ($111) {
            $count$1 = 0;$firstinf$1 = 1;
           } else {
            $112 = ((($110)) + 4|0);
            $113 = HEAP32[$112>>2]|0;
            $114 = ($113|0)==(0|0);
            if ($114) {
             $count$1 = 0;$firstinf$1 = 1;
            } else {
             $115 = ((($112)) + 4|0);
             $180 = $113;$181 = $115;$count$0$ph$ph38 = 0;$firstinf$0$ph$ph39 = 1;
             while(1) {
              $182 = $180;$183 = $181;$count$0$ph33 = $count$0$ph$ph38;
              L44: while(1) {
               $117 = $182;$122 = $183;
               while(1) {
                $116 = ((($117)) + 80|0);
                $118 = HEAP32[$116>>2]|0;
                $119 = $118 & 16384;
                $120 = ($119|0)==(0);
                if (!($120)) {
                 $125 = ((($117)) + 72|0);
                 $126 = HEAP32[$125>>2]|0;
                 $127 = ($126|0)==(0);
                 if ($127) {
                  $$lcssa136 = $122;$count$0$ph33$lcssa = $count$0$ph33;
                  break L44;
                 }
                 $128 = $118 & 512;
                 $129 = ($128|0)==(0);
                 if ($129) {
                  $$lcssa137 = $122;
                  break;
                 }
                 $130 = ((($117)) + 40|0);
                 $131 = HEAP32[$130>>2]|0;
                 $132 = (_qh_setunique($tricenters,$131)|0);
                 $133 = ($132|0)==(0);
                 if (!($133)) {
                  $$lcssa137 = $122;
                  break;
                 }
                }
                $121 = ((($122)) + 4|0);
                $123 = HEAP32[$122>>2]|0;
                $124 = ($123|0)==(0|0);
                if ($124) {
                 $count$1 = $count$0$ph33;$firstinf$1 = $firstinf$0$ph$ph39;
                 break L39;
                } else {
                 $117 = $123;$122 = $121;
                }
               }
               $134 = (($count$0$ph33) + 1)|0;
               $135 = ((($$lcssa137)) + 4|0);
               $136 = HEAP32[$$lcssa137>>2]|0;
               $137 = ($136|0)==(0|0);
               if ($137) {
                $count$1 = $134;$firstinf$1 = $firstinf$0$ph$ph39;
                break L39;
               } else {
                $182 = $136;$183 = $135;$count$0$ph33 = $134;
               }
              }
              $count$0$ = (($firstinf$0$ph$ph39) + ($count$0$ph33$lcssa))|0;
              $138 = ((($$lcssa136)) + 4|0);
              $139 = HEAP32[$$lcssa136>>2]|0;
              $140 = ($139|0)==(0|0);
              if ($140) {
               $count$1 = $count$0$;$firstinf$1 = 0;
               break;
              } else {
               $180 = $139;$181 = $138;$count$0$ph$ph38 = $count$0$;$firstinf$0$ph$ph39 = 0;
              }
             }
            }
           }
          } while(0);
          $141 = HEAP32[(5828)>>2]|0;
          $142 = (($141) + -1)|0;
          $143 = ($count$1|0)<($142|0);
          if (!($143)) {
           $144 = ($firstinf$1|0)==(0);
           if ($144) {
            if ($60) {
             break;
            } else {
             $$lcssa144 = $86;$$lcssa146 = $146;$count$1$lcssa = $count$1;$unbounded$0 = 1;
             break L35;
            }
           } else {
            if ($61) {
             break;
            } else {
             $$lcssa144 = $86;$$lcssa146 = $146;$count$1$lcssa = $count$1;$unbounded$0 = 0;
             break L35;
            }
           }
          }
         }
        } while(0);
        $145 = ((($146)) + 4|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = ($147|0)==(0|0);
        if ($148) {
         $totridges$1$ph$lcssa = $totridges$1$ph45;
         break L31;
        } else {
         $146 = $145;$86 = $147;
        }
       }
       $149 = (($totridges$1$ph45) + 1)|0;
       $150 = HEAP32[(5344)>>2]|0;
       $151 = ($150|0)>(3);
       if ($151) {
        $152 = HEAP32[(7480)>>2]|0;
        $153 = HEAP32[$62>>2]|0;
        $154 = (_qh_pointid($153)|0);
        $155 = ((($$lcssa144)) + 8|0);
        $156 = HEAP32[$155>>2]|0;
        $157 = (_qh_pointid($156)|0);
        HEAP32[$vararg_buffer>>2] = $count$1$lcssa;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $154;
        $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
        HEAP32[$vararg_ptr2>>2] = $157;
        _qh_fprintf($152,4017,11752,$vararg_buffer);
       }
       if ($or$cond) {
        $158 = HEAP32[(5828)>>2]|0;
        $159 = ($158|0)==(4);
        $or$cond3 = $65 & $159;
        if ($or$cond3) {
         $160 = (_qh_detvridge3($atvertex,$$lcssa144)|0);
         $storemerge = $160;
        } else {
         $161 = (_qh_detvridge($$lcssa144)|0);
         $storemerge = $161;
        }
        HEAP32[$centers>>2] = $storemerge;
        FUNCTION_TABLE_viiiii[$printvridge & 3]($fp,$atvertex,$$lcssa144,$storemerge,$unbounded$0);
        _qh_settempfree($centers);
       }
       $162 = ((($$lcssa146)) + 4|0);
       $163 = HEAP32[$$lcssa146>>2]|0;
       $164 = ($163|0)==(0|0);
       if ($164) {
        $totridges$1$ph$lcssa = $149;
        break;
       } else {
        $178 = $163;$179 = $162;$totridges$1$ph45 = $149;
       }
      }
     }
    } while(0);
    $66 = ((($$lcssa)) + 4|0);
    $67 = HEAP32[$$lcssa>>2]|0;
    $68 = ($67|0)==(0|0);
    if ($68) {
     $totridges$0$ph$lcssa = $totridges$1$ph$lcssa;
     break;
    } else {
     $176 = $67;$177 = $66;$totridges$0$ph47 = $totridges$1$ph$lcssa;
    }
   }
  }
 } while(0);
 $$pr7$pr = HEAP32[$37>>2]|0;
 $165 = ($$pr7$pr|0)==(0|0);
 if ($165) {
  $totridges$29 = $totridges$0$ph$lcssa;
  _qh_settempfree($tricenters);
  STACKTOP = sp;return ($totridges$29|0);
 }
 $166 = ((($$pr7$pr)) + 4|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)==(0|0);
 if ($168) {
  $totridges$29 = $totridges$0$ph$lcssa;
  _qh_settempfree($tricenters);
  STACKTOP = sp;return ($totridges$29|0);
 } else {
  $171 = $167;$neighborp$225 = $166;
 }
 while(1) {
  $169 = ((($neighborp$225)) + 4|0);
  $170 = ((($171)) + 80|0);
  $172 = HEAP32[$170>>2]|0;
  $173 = $172 & -16385;
  HEAP32[$170>>2] = $173;
  $174 = HEAP32[$169>>2]|0;
  $175 = ($174|0)==(0|0);
  if ($175) {
   $totridges$29 = $totridges$0$ph$lcssa;
   break;
  } else {
   $171 = $174;$neighborp$225 = $169;
  }
 }
 _qh_settempfree($tricenters);
 STACKTOP = sp;return ($totridges$29|0);
}
function _qh_facetvertices($facetlist,$facets,$allfacets) {
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $allfacets = $allfacets|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $facet$013 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $vertex$0 = 0, $vertex$016 = 0, $vertex$017 = 0, $vertices = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vertices = sp;
 $0 = HEAP32[(7724)>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = $1 & 2147483647;
 $3 = $0 & -2147483648;
 $4 = $2 | $3;
 HEAP32[(7724)>>2] = $4;
 $5 = HEAP32[(7500)>>2]|0;
 $6 = ($5|0)==($facetlist|0);
 $7 = ($allfacets|0)!=(0);
 $or$cond = $7 & $6;
 $or$cond$not = $or$cond ^ 1;
 $8 = ($facets|0)!=(0|0);
 $or$cond3 = $8 | $or$cond$not;
 L1: do {
  if ($or$cond3) {
   $30 = HEAP32[(7496)>>2]|0;
   $31 = (_qh_settemp($30)|0);
   HEAP32[$vertices>>2] = $31;
   $32 = ($facetlist|0)==(0|0);
   if (!($32)) {
    $facet$013 = $facetlist;
    while(1) {
     $33 = ((($facet$013)) + 48|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      break L1;
     }
     if ($7) {
      label = 9;
     } else {
      $36 = (_qh_skipfacet($facet$013)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       label = 9;
      }
     }
     if ((label|0) == 9) {
      label = 0;
      $38 = ((($facet$013)) + 52|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(0|0);
      if (!($40)) {
       $41 = ((($39)) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(0|0);
       if (!($43)) {
        $44 = ((($41)) + 4|0);
        $46 = $42;$65 = $44;
        while(1) {
         $45 = ((($46)) + 16|0);
         $47 = $45;
         $48 = $47;
         $49 = HEAP32[$48>>2]|0;
         $50 = (($47) + 4)|0;
         $51 = $50;
         $52 = HEAP32[$51>>2]|0;
         $53 = HEAP32[(7724)>>2]|0;
         $54 = $49 ^ $53;
         $55 = $54 & 2147483647;
         $56 = ($55|0)==(0);
         if (!($56)) {
          $57 = $53 & 2147483647;
          $58 = $49 & -2147483648;
          $59 = $57 | $58;
          $60 = $45;
          $61 = $60;
          HEAP32[$61>>2] = $59;
          $62 = (($60) + 4)|0;
          $63 = $62;
          HEAP32[$63>>2] = $52;
          _qh_setappend($vertices,$46);
         }
         $64 = ((($65)) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = ($66|0)==(0|0);
         if ($67) {
          break;
         } else {
          $46 = $66;$65 = $64;
         }
        }
       }
      }
     }
     $68 = HEAP32[$33>>2]|0;
     $69 = ($68|0)==(0|0);
     if ($69) {
      break;
     } else {
      $facet$013 = $68;
     }
    }
   }
  } else {
   $9 = HEAP32[(7556)>>2]|0;
   $10 = (_qh_settemp($9)|0);
   HEAP32[$vertices>>2] = $10;
   $vertex$016 = HEAP32[(7540)>>2]|0;
   $11 = ($vertex$016|0)==(0|0);
   if (!($11)) {
    $vertex$017 = $vertex$016;
    while(1) {
     $12 = HEAP32[$vertex$017>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      break L1;
     }
     $14 = HEAP32[(7724)>>2]|0;
     $15 = ((($vertex$017)) + 16|0);
     $16 = $15;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($16) + 4)|0;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $22 = $14 & 2147483647;
     $23 = $18 & -2147483648;
     $24 = $23 | $22;
     $25 = $15;
     $26 = $25;
     HEAP32[$26>>2] = $24;
     $27 = (($25) + 4)|0;
     $28 = $27;
     HEAP32[$28>>2] = $21;
     _qh_setappend($vertices,$vertex$017);
     $vertex$0 = HEAP32[$vertex$017>>2]|0;
     $29 = ($vertex$0|0)==(0|0);
     if ($29) {
      break;
     } else {
      $vertex$017 = $vertex$0;
     }
    }
   }
  }
 } while(0);
 if (!($8)) {
  $111 = HEAP32[$vertices>>2]|0;
  STACKTOP = sp;return ($111|0);
 }
 $70 = ((($facets)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  $111 = HEAP32[$vertices>>2]|0;
  STACKTOP = sp;return ($111|0);
 }
 $73 = ((($70)) + 4|0);
 $74 = $71;$78 = $73;
 while(1) {
  if ($7) {
   label = 22;
  } else {
   $75 = (_qh_skipfacet($74)|0);
   $76 = ($75|0)==(0);
   if ($76) {
    label = 22;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   $81 = ((($74)) + 52|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0|0);
   if (!($83)) {
    $84 = ((($82)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==(0|0);
    if (!($86)) {
     $87 = ((($84)) + 4|0);
     $108 = $87;$89 = $85;
     while(1) {
      $88 = ((($89)) + 16|0);
      $90 = $88;
      $91 = $90;
      $92 = HEAP32[$91>>2]|0;
      $93 = (($90) + 4)|0;
      $94 = $93;
      $95 = HEAP32[$94>>2]|0;
      $96 = HEAP32[(7724)>>2]|0;
      $97 = $92 ^ $96;
      $98 = $97 & 2147483647;
      $99 = ($98|0)==(0);
      if (!($99)) {
       $100 = $96 & 2147483647;
       $101 = $92 & -2147483648;
       $102 = $100 | $101;
       $103 = $88;
       $104 = $103;
       HEAP32[$104>>2] = $102;
       $105 = (($103) + 4)|0;
       $106 = $105;
       HEAP32[$106>>2] = $95;
       _qh_setappend($vertices,$89);
      }
      $107 = ((($108)) + 4|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ($109|0)==(0|0);
      if ($110) {
       break;
      } else {
       $108 = $107;$89 = $109;
      }
     }
    }
   }
  }
  $77 = ((($78)) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(0|0);
  if ($80) {
   break;
  } else {
   $74 = $79;$78 = $77;
  }
 }
 $111 = HEAP32[$vertices>>2]|0;
 STACKTOP = sp;return ($111|0);
}
function _qh_markkeep($facetlist) {
 $facetlist = $facetlist|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $count$0 = 0, $count$1 = 0, $count$2$ = 0, $count$2715 = 0, $count$4 = 0, $facet$011 = 0, $facet$1616 = 0, $facet$1616$phi = 0, $facetp$0 = 0, $facetp$1 = 0;
 var $facets = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $facets = sp + 16|0;
 $0 = HEAP32[(7552)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$facets>>2] = $1;
 $2 = HEAP32[(5344)>>2]|0;
 $3 = ($2|0)>(1);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = HEAP32[(5348)>>2]|0;
  $6 = HEAP32[(5360)>>2]|0;
  $7 = +HEAPF64[(5368)>>3];
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $7;
  _qh_fprintf($4,2006,11824,$vararg_buffer);
 }
 $8 = ($facetlist|0)!=(0|0);
 L4: do {
  if ($8) {
   $facet$011 = $facetlist;
   while(1) {
    $9 = ((($facet$011)) + 48|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     break L4;
    }
    $12 = ((($facet$011)) + 80|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 & 526336;
    $15 = ($14|0)==(524288);
    if ($15) {
     _qh_setappend($facets,$facet$011);
    }
    $16 = HEAP32[$9>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     break;
    } else {
     $facet$011 = $16;
    }
   }
  }
 } while(0);
 $18 = HEAP32[$facets>>2]|0;
 $19 = (_qh_setsize($18)|0);
 $20 = HEAP32[(5348)>>2]|0;
 $21 = ($20|0)==(0);
 L12: do {
  if (!($21)) {
   $22 = HEAP32[$facets>>2]|0;
   $23 = ((($22)) + 4|0);
   _qsort($23,$19,4,2);
   $24 = HEAP32[(5348)>>2]|0;
   $25 = (($19) - ($24))|0;
   $26 = ($25|0)>(0);
   if ($26) {
    $27 = HEAP32[$facets>>2]|0;
    $28 = ($27|0)==(0|0);
    if (!($28)) {
     $29 = ((($27)) + 4|0);
     $count$0 = $25;$facetp$0 = $29;
     while(1) {
      $30 = HEAP32[$facetp$0>>2]|0;
      $31 = ($30|0)==(0|0);
      if ($31) {
       break L12;
      }
      $32 = ((($facetp$0)) + 4|0);
      $33 = ((($30)) + 80|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = $34 & -524289;
      HEAP32[$33>>2] = $35;
      $36 = (($count$0) + -1)|0;
      $37 = ($36|0)==(0);
      if ($37) {
       break;
      } else {
       $count$0 = $36;$facetp$0 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $38 = HEAP32[(5360)>>2]|0;
 $39 = ($38|0)==(0);
 L20: do {
  if (!($39)) {
   $40 = HEAP32[$facets>>2]|0;
   $41 = ((($40)) + 4|0);
   _qsort($41,$19,4,3);
   $42 = HEAP32[(5360)>>2]|0;
   $43 = (($19) - ($42))|0;
   $44 = ($43|0)>(0);
   if ($44) {
    $45 = HEAP32[$facets>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = ((($45)) + 4|0);
     $count$1 = $43;$facetp$1 = $47;
     while(1) {
      $48 = HEAP32[$facetp$1>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       break L20;
      }
      $50 = ((($facetp$1)) + 4|0);
      $51 = ((($48)) + 80|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & -524289;
      HEAP32[$51>>2] = $53;
      $54 = (($count$1) + -1)|0;
      $55 = ($54|0)==(0);
      if ($55) {
       break;
      } else {
       $count$1 = $54;$facetp$1 = $50;
      }
     }
    }
   }
  }
 } while(0);
 $56 = +HEAPF64[(5368)>>3];
 $57 = $56 < 8.9884656743115785E+307;
 if ($57) {
  $58 = HEAP32[$facets>>2]|0;
  $59 = ($58|0)==(0|0);
  if (!($59)) {
   $60 = ((($58)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if (!($62)) {
    $63 = ((($60)) + 4|0);
    $65 = $61;$76 = $63;
    while(1) {
     $64 = ((($65)) + 80|0);
     $66 = HEAP32[$64>>2]|0;
     $67 = $66 & 1048576;
     $68 = ($67|0)==(0);
     if ($68) {
      label = 26;
     } else {
      $69 = ((($65)) + 32|0);
      $70 = +HEAPF64[$69>>3];
      $71 = +HEAPF64[(5368)>>3];
      $72 = $70 < $71;
      if ($72) {
       label = 26;
      }
     }
     if ((label|0) == 26) {
      label = 0;
      $73 = HEAP32[$64>>2]|0;
      $74 = $73 & -524289;
      HEAP32[$64>>2] = $74;
     }
     $75 = ((($76)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      break;
     } else {
      $65 = $77;$76 = $75;
     }
    }
   }
  }
 }
 _qh_settempfree($facets);
 if (!($8)) {
  $count$4 = 0;
  HEAP32[(7564)>>2] = $count$4;
  STACKTOP = sp;return;
 }
 $79 = ((($facetlist)) + 48|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)==(0|0);
 if ($81) {
  $count$4 = 0;
  HEAP32[(7564)>>2] = $count$4;
  STACKTOP = sp;return;
 } else {
  $86 = $80;$count$2715 = 0;$facet$1616 = $facetlist;
 }
 while(1) {
  $82 = ((($facet$1616)) + 80|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $83 >>> 19;
  $$lobit = $84 & 1;
  $count$2$ = (($$lobit) + ($count$2715))|0;
  $85 = ((($86)) + 48|0);
  $87 = HEAP32[$85>>2]|0;
  $88 = ($87|0)==(0|0);
  if ($88) {
   $count$4 = $count$2$;
   break;
  } else {
   $facet$1616$phi = $86;$86 = $87;$count$2715 = $count$2$;$facet$1616 = $facet$1616$phi;
  }
 }
 HEAP32[(7564)>>2] = $count$4;
 STACKTOP = sp;return;
}
function _qh_markvoronoi($facetlist,$facets,$printall,$isLowerp,$numcentersp) {
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 $isLowerp = $isLowerp|0;
 $numcentersp = $numcentersp|0;
 var $$ = 0, $$lcssa35 = 0, $$lcssa36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $facet$019 = 0, $facet$1 = 0, $facet$111 = 0, $facet$112 = 0, $facet$27 = 0, $facetp$1 = 0, $facetp$1$ph = 0, $isLower$0 = 0, $isLower$1 = 0, $numcenters$08 = 0, $numcenters$1 = 0, $numcenters$2 = 0, $numcenters$3$ph = 0;
 var $numcenters$4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7696)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(7696)>>2] = $1;
 _qh_clearcenters(1);
 _qh_vertexneighbors();
 $2 = (_qh_pointvertex()|0);
 $3 = HEAP32[(5260)>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[(5836)>>2]|0;
  $6 = (($5) + -1)|0;
  $7 = (((($2)) + 4|0) + ($6<<2)|0);
  HEAP32[$7>>2] = 0;
 }
 $8 = HEAP32[(7720)>>2]|0;
 $9 = (($8) + 1)|0;
 $10 = HEAP32[(7552)>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 $$ = $11 ? $10 : $9;
 HEAP32[(7720)>>2] = $$;
 $12 = ($facetlist|0)!=(0|0);
 L4: do {
  if ($12) {
   $13 = ($printall|0)==(0);
   $facet$019 = $facetlist;
   while(1) {
    $14 = ((($facet$019)) + 48|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if ($16) {
     $isLower$0 = 0;
     break L4;
    }
    if ($13) {
     $17 = (_qh_skipfacet($facet$019)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      label = 8;
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     label = 0;
     $19 = ((($facet$019)) + 80|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = $20 & 131072;
     $22 = ($21|0)==(0);
     if ($22) {
      $isLower$0 = 1;
      break L4;
     }
    }
    $23 = HEAP32[$14>>2]|0;
    $24 = ($23|0)==(0|0);
    if ($24) {
     $isLower$0 = 0;
     break;
    } else {
     $facet$019 = $23;
    }
   }
  } else {
   $isLower$0 = 0;
  }
 } while(0);
 $25 = ($facets|0)!=(0|0);
 L15: do {
  if ($25) {
   $26 = ((($facets)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $isLower$1 = $isLower$0;
   } else {
    $29 = ((($26)) + 4|0);
    $30 = ($printall|0)==(0);
    $31 = $27;$35 = $29;
    while(1) {
     if ($30) {
      $32 = (_qh_skipfacet($31)|0);
      $33 = ($32|0)==(0);
      if ($33) {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      label = 0;
      $38 = ((($31)) + 80|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $39 & 131072;
      $41 = ($40|0)==(0);
      if ($41) {
       $isLower$1 = 1;
       break L15;
      }
     }
     $34 = ((($35)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      $isLower$1 = $isLower$0;
      break;
     } else {
      $31 = $36;$35 = $34;
     }
    }
   }
  } else {
   $isLower$1 = $isLower$0;
  }
 } while(0);
 $facet$111 = HEAP32[(7500)>>2]|0;
 $42 = ($facet$111|0)==(0|0);
 L26: do {
  if (!($42)) {
   $facet$112 = $facet$111;
   while(1) {
    $43 = ((($facet$112)) + 48|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(0|0);
    if ($45) {
     break L26;
    }
    $46 = ((($facet$112)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     label = 22;
    } else {
     $49 = ((($facet$112)) + 80|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 >>> 17;
     $52 = $51 & 1;
     $53 = ($52|0)==($isLower$1|0);
     if ($53) {
      $54 = ((($facet$112)) + 72|0);
      HEAP32[$54>>2] = 0;
     } else {
      label = 22;
     }
    }
    if ((label|0) == 22) {
     label = 0;
     $55 = HEAP32[(7720)>>2]|0;
     $56 = ((($facet$112)) + 72|0);
     HEAP32[$56>>2] = $55;
    }
    $57 = ((($facet$112)) + 80|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 & -49153;
    $60 = $59 | 32768;
    HEAP32[$57>>2] = $60;
    $facet$1 = HEAP32[$43>>2]|0;
    $61 = ($facet$1|0)==(0|0);
    if ($61) {
     break;
    } else {
     $facet$112 = $facet$1;
    }
   }
  }
 } while(0);
 L37: do {
  if ($12) {
   $62 = ($printall|0)==(0);
   $facet$27 = $facetlist;$numcenters$08 = 1;
   while(1) {
    $63 = ((($facet$27)) + 48|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0|0);
    if ($65) {
     $numcenters$2 = $numcenters$08;
     break L37;
    }
    if ($62) {
     $66 = (_qh_skipfacet($facet$27)|0);
     $67 = ($66|0)==(0);
     if ($67) {
      label = 29;
     } else {
      $numcenters$1 = $numcenters$08;
     }
    } else {
     label = 29;
    }
    if ((label|0) == 29) {
     label = 0;
     $68 = (($numcenters$08) + 1)|0;
     $69 = ((($facet$27)) + 72|0);
     HEAP32[$69>>2] = $numcenters$08;
     $numcenters$1 = $68;
    }
    $70 = HEAP32[$63>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $numcenters$2 = $numcenters$1;
     break;
    } else {
     $facet$27 = $70;$numcenters$08 = $numcenters$1;
    }
   }
  } else {
   $numcenters$2 = 1;
  }
 } while(0);
 L48: do {
  if ($25) {
   $72 = ((($facets)) + 4|0);
   $73 = ($printall|0)==(0);
   $facetp$1$ph = $72;$numcenters$3$ph = $numcenters$2;
   while(1) {
    $facetp$1 = $facetp$1$ph;
    while(1) {
     $74 = ((($facetp$1)) + 4|0);
     $75 = HEAP32[$facetp$1>>2]|0;
     $76 = ($75|0)==(0|0);
     if ($76) {
      $numcenters$4 = $numcenters$3$ph;
      break L48;
     }
     if (!($73)) {
      $$lcssa35 = $74;$$lcssa36 = $75;
      break;
     }
     $77 = (_qh_skipfacet($75)|0);
     $78 = ($77|0)==(0);
     if ($78) {
      $$lcssa35 = $74;$$lcssa36 = $75;
      break;
     } else {
      $facetp$1 = $74;
     }
    }
    $79 = (($numcenters$3$ph) + 1)|0;
    $80 = ((($$lcssa36)) + 72|0);
    HEAP32[$80>>2] = $numcenters$3$ph;
    $facetp$1$ph = $$lcssa35;$numcenters$3$ph = $79;
   }
  } else {
   $numcenters$4 = $numcenters$2;
  }
 } while(0);
 HEAP32[$isLowerp>>2] = $isLower$1;
 HEAP32[$numcentersp>>2] = $numcenters$4;
 $81 = HEAP32[(5344)>>2]|0;
 $82 = ($81|0)>(1);
 if (!($82)) {
  STACKTOP = sp;return ($2|0);
 }
 $83 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $isLower$1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $numcenters$4;
 _qh_fprintf($83,2007,11912,$vararg_buffer);
 STACKTOP = sp;return ($2|0);
}
function _qh_order_vertexneighbors($vertex) {
 $vertex = $vertex|0;
 var $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$0$ph4 = 0, $neighborp$0 = 0, $newset = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $newset = sp + 16|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($vertex)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 16777215;
  HEAP32[$vararg_buffer>>2] = $10;
  _qh_fprintf($2,4018,11960,$vararg_buffer);
 }
 $11 = ((($vertex)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_qh_setsize($12)|0);
 $14 = (_qh_settemp($13)|0);
 HEAP32[$newset>>2] = $14;
 $15 = HEAP32[$11>>2]|0;
 $16 = (_qh_setdellast($15)|0);
 _qh_setappend($newset,$16);
 $17 = HEAP32[$11>>2]|0;
 $18 = (_qh_setsize($17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  _qh_setfree($11);
  (_qh_settemppop()|0);
  $45 = HEAP32[$newset>>2]|0;
  HEAP32[$11>>2] = $45;
  STACKTOP = sp;return;
 }
 $20 = ((($vertex)) + 16|0);
 $facet$0$ph4 = $16;
 L7: while(1) {
  $21 = ((($facet$0$ph4)) + 76|0);
  $22 = ((($facet$0$ph4)) + 60|0);
  $23 = HEAP32[$11>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   label = 10;
   break;
  }
  $25 = ((($23)) + 4|0);
  $neighborp$0 = $25;
  while(1) {
   $26 = HEAP32[$neighborp$0>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    label = 10;
    break L7;
   }
   $28 = ((($neighborp$0)) + 4|0);
   $29 = HEAP32[$22>>2]|0;
   $30 = (_qh_setin($29,$26)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $neighborp$0 = $28;
   } else {
    $$lcssa = $26;$$lcssa12 = $26;
    break;
   }
  }
  $32 = HEAP32[$11>>2]|0;
  (_qh_setdel($32,$$lcssa)|0);
  _qh_setappend($newset,$$lcssa);
  $33 = HEAP32[$11>>2]|0;
  $34 = (_qh_setsize($33)|0);
  $35 = ($34|0)==(0);
  if ($35) {
   label = 11;
   break;
  } else {
   $facet$0$ph4 = $$lcssa12;
  }
 }
 if ((label|0) == 10) {
  $36 = HEAP32[(7480)>>2]|0;
  $37 = $20;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 16777215;
  $44 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $43;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $44;
  _qh_fprintf($36,6066,12024,$vararg_buffer1);
  _qh_errexit(5,$facet$0$ph4,0);
  // unreachable;
 }
 else if ((label|0) == 11) {
  _qh_setfree($11);
  (_qh_settemppop()|0);
  $45 = HEAP32[$newset>>2]|0;
  HEAP32[$11>>2] = $45;
  STACKTOP = sp;return;
 }
}
function _qh_printafacet($fp,$format,$facet,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facet = $facet|0;
 $printall = $printall|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _qh_printbegin($fp,$format,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $facet$083 = 0, $facet$166 = 0;
 var $facet$2 = 0, $facet$286 = 0, $facet$287 = 0, $facetp$080 = 0, $num = 0, $numcoplanars = 0, $numfacets = 0, $numridges = 0, $numsimplicial = 0, $numtricoplanars = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond29 = 0, $or$cond33 = 0;
 var $or$cond36 = 0, $or$cond38 = 0, $or$cond40 = 0, $or$cond42 = 0, $or$cond44 = 0, $or$cond7 = 0, $or$cond9 = 0, $point$072 = 0, $point$193 = 0, $pointp$162 = 0, $pointp$264 = 0, $pointp$358 = 0, $pointp$459 = 0, $pointp$590 = 0, $totneighbors = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0;
 var $vararg_buffer114 = 0, $vararg_buffer118 = 0, $vararg_buffer12 = 0, $vararg_buffer121 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0;
 var $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer71 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer90 = 0, $vararg_buffer93 = 0, $vararg_buffer99 = 0, $vararg_ptr102 = 0, $vararg_ptr103 = 0, $vararg_ptr104 = 0, $vararg_ptr111 = 0, $vararg_ptr112 = 0;
 var $vararg_ptr113 = 0, $vararg_ptr117 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr53 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr7 = 0, $vararg_ptr70 = 0, $vararg_ptr74 = 0, $vararg_ptr89 = 0, $vararg_ptr96 = 0, $vararg_ptr97 = 0, $vararg_ptr98 = 0, $vertexp$069 = 0, $vertices = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer121 = sp + 16|0;
 $vararg_buffer118 = sp + 344|0;
 $vararg_buffer114 = sp + 336|0;
 $vararg_buffer108 = sp + 320|0;
 $vararg_buffer105 = sp + 312|0;
 $vararg_buffer99 = sp + 296|0;
 $vararg_buffer93 = sp + 280|0;
 $vararg_buffer90 = sp + 272|0;
 $vararg_buffer86 = sp + 264|0;
 $vararg_buffer83 = sp + 256|0;
 $vararg_buffer81 = sp + 248|0;
 $vararg_buffer79 = sp + 240|0;
 $vararg_buffer77 = sp + 232|0;
 $vararg_buffer75 = sp + 224|0;
 $vararg_buffer71 = sp + 216|0;
 $vararg_buffer65 = sp + 200|0;
 $vararg_buffer62 = sp + 192|0;
 $vararg_buffer59 = sp + 24|0;
 $vararg_buffer57 = sp + 40|0;
 $vararg_buffer54 = sp + 48|0;
 $vararg_buffer50 = sp + 56|0;
 $vararg_buffer48 = sp + 64|0;
 $vararg_buffer46 = sp + 72|0;
 $vararg_buffer44 = sp + 80|0;
 $vararg_buffer42 = sp + 184|0;
 $vararg_buffer40 = sp + 8|0;
 $vararg_buffer38 = sp;
 $vararg_buffer36 = sp + 32|0;
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer24 = sp + 104|0;
 $vararg_buffer20 = sp + 112|0;
 $vararg_buffer16 = sp + 120|0;
 $vararg_buffer14 = sp + 128|0;
 $vararg_buffer12 = sp + 136|0;
 $vararg_buffer10 = sp + 144|0;
 $vararg_buffer8 = sp + 152|0;
 $vararg_buffer4 = sp + 160|0;
 $vararg_buffer1 = sp + 168|0;
 $vararg_buffer = sp + 176|0;
 $numfacets = sp + 376|0;
 $numsimplicial = sp + 348|0;
 $numridges = sp + 352|0;
 $totneighbors = sp + 356|0;
 $numcoplanars = sp + 360|0;
 $numtricoplanars = sp + 364|0;
 $num = sp + 368|0;
 $vertices = sp + 372|0;
 HEAP32[(7696)>>2] = 0;
 _qh_countfacets($facetlist,$facets,$printall,$numfacets,$numsimplicial,$totneighbors,$numridges,$numcoplanars,$numtricoplanars);
 do {
  switch ($format|0) {
  case 6: case 5:  {
   $6 = ($facetlist|0)==(0|0);
   if ($6) {
    STACKTOP = sp;return;
   }
   _qh_printvertexlist($fp,12120,$facetlist,$facets,$printall);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $7 = HEAP32[(5828)>>2]|0;
   $8 = ($7|0)>(4);
   if ($8) {
    $415 = HEAP32[(7480)>>2]|0;
    $416 = HEAP32[(5828)>>2]|0;
    HEAP32[$vararg_buffer121>>2] = $416;
    _qh_fprintf($415,6068,12952,$vararg_buffer121);
    _qh_errexit(5,0,0);
    // unreachable;
   }
   $9 = HEAP32[(5796)>>2]|0;
   $10 = ($9|0)!=(0);
   $11 = ($7|0)>(3);
   $or$cond = $11 & $10;
   if ($or$cond) {
    $415 = HEAP32[(7480)>>2]|0;
    $416 = HEAP32[(5828)>>2]|0;
    HEAP32[$vararg_buffer121>>2] = $416;
    _qh_fprintf($415,6068,12952,$vararg_buffer121);
    _qh_errexit(5,0,0);
    // unreachable;
   }
   $12 = ($7|0)==(2);
   if ($12) {
    $13 = HEAP32[(5624)>>2]|0;
    $14 = HEAP32[(5308)>>2]|0;
    $15 = $14 | $13;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($17,7049,12144,$vararg_buffer8);
    }
   }
   $18 = HEAP32[(5828)>>2]|0;
   $19 = ($18|0)==(4);
   do {
    if ($19) {
     $20 = HEAP32[(5484)>>2]|0;
     $21 = HEAP32[(5500)>>2]|0;
     $22 = $21 | $20;
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = HEAP32[(5472)>>2]|0;
      $25 = ($24|0)==(4);
      $26 = HEAP32[(5464)>>2]|0;
      $27 = ($26|0)!=(0);
      $or$cond7 = $25 & $27;
      if (!($or$cond7)) {
       break;
      }
     }
     $28 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($28,7050,12224,$vararg_buffer10);
    }
   } while(0);
   $29 = HEAP32[(5472)>>2]|0;
   $30 = ($29|0)==(4);
   $31 = HEAP32[(5628)>>2]|0;
   $32 = ($31|0)!=(0);
   $or$cond9 = $30 & $32;
   if ($or$cond9) {
    $33 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($33,7051,12312,$vararg_buffer12);
   }
   $34 = HEAP32[(5472)>>2]|0;
   $35 = ($34|0)==(4);
   $36 = HEAP32[(5308)>>2]|0;
   $37 = ($36|0)!=(0);
   $or$cond11 = $35 & $37;
   $38 = HEAP32[(5492)>>2]|0;
   $39 = ($38|0)!=(0);
   $or$cond13 = $or$cond11 & $39;
   if ($or$cond13) {
    $40 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($40,7052,12376,$vararg_buffer14);
   }
   $41 = HEAP32[(5472)>>2]|0;
   if ((($41|0) == 3)) {
    HEAP32[$vararg_buffer20>>2] = (6116);
    $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
    HEAP32[$vararg_ptr23>>2] = (5856);
    _qh_fprintf($fp,9037,12480,$vararg_buffer20);
   } else if ((($41|0) == 4)) {
    $42 = HEAP32[(7720)>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[(7720)>>2] = $43;
    HEAP32[$num>>2] = 0;
    $44 = ($facetlist|0)==(0|0);
    L33: do {
     if (!($44)) {
      $facet$083 = $facetlist;
      while(1) {
       $45 = ((($facet$083)) + 48|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break L33;
       }
       _qh_printend4geom(0,$facet$083,$num,$printall);
       $48 = HEAP32[$45>>2]|0;
       $49 = ($48|0)==(0|0);
       if ($49) {
        break;
       } else {
        $facet$083 = $48;
       }
      }
     }
    } while(0);
    $50 = ($facets|0)==(0|0);
    if (!($50)) {
     $51 = ((($facets)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if (!($53)) {
      $55 = $52;$facetp$080 = $51;
      while(1) {
       $54 = ((($facetp$080)) + 4|0);
       _qh_printend4geom(0,$55,$num,$printall);
       $56 = HEAP32[$54>>2]|0;
       $57 = ($56|0)==(0|0);
       if ($57) {
        break;
       } else {
        $55 = $56;$facetp$080 = $54;
       }
      }
     }
    }
    $58 = HEAP32[$num>>2]|0;
    HEAP32[(7840)>>2] = $58;
    HEAP32[(7692)>>2] = 0;
    HEAP32[$vararg_buffer24>>2] = (6116);
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = (5856);
    _qh_fprintf($fp,9038,12536,$vararg_buffer24);
   } else if ((($41|0) == 2)) {
    HEAP32[$vararg_buffer16>>2] = (6116);
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = (5856);
    _qh_fprintf($fp,9036,12432,$vararg_buffer16);
   }
   $59 = HEAP32[(5476)>>2]|0;
   $60 = ($59|0)==(0);
   if (!($60)) {
    $61 = HEAP32[(7696)>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[(7696)>>2] = $62;
    $63 = HEAP32[(5836)>>2]|0;
    $64 = HEAP32[(7748)>>2]|0;
    $65 = (_qh_setsize($64)|0);
    $66 = (($65) + ($63))|0;
    HEAP32[$num>>2] = $66;
    $67 = HEAP32[(5304)>>2]|0;
    $68 = ($67|0)!=(0);
    $69 = HEAP32[(5260)>>2]|0;
    $70 = ($69|0)!=(0);
    $or$cond15 = $68 & $70;
    if ($or$cond15) {
     $71 = (($66) + -1)|0;
     HEAP32[$num>>2] = $71;
    }
    $72 = HEAP32[(5472)>>2]|0;
    $73 = ($72|0)==(4);
    $74 = HEAP32[$num>>2]|0;
    if ($73) {
     HEAP32[$vararg_buffer28>>2] = $74;
     $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
     HEAP32[$vararg_ptr31>>2] = $74;
     _qh_fprintf($fp,9039,12552,$vararg_buffer28);
    } else {
     HEAP32[$vararg_buffer32>>2] = $74;
     $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
     HEAP32[$vararg_ptr35>>2] = $74;
     _qh_fprintf($fp,9040,12568,$vararg_buffer32);
    }
    $75 = HEAP32[$num>>2]|0;
    $76 = ($75|0)==(0);
    if (!($76)) {
     $$in = $75;
     while(1) {
      $77 = (($$in) + -1)|0;
      $78 = (($77|0) % 20)&-1;
      $79 = ($78|0)==(0);
      if ($79) {
       _qh_fprintf($fp,9041,56128,$vararg_buffer36);
      }
      _qh_fprintf($fp,9042,12584,$vararg_buffer38);
      $80 = ($77|0)==(0);
      if ($80) {
       break;
      } else {
       $$in = $77;
      }
     }
    }
    _qh_fprintf($fp,9043,12592,$vararg_buffer40);
    $81 = HEAP32[$num>>2]|0;
    $82 = ($81|0)==(1);
    if (!($82)) {
     $83 = (($81) + -2)|0;
     $85 = $83;
     while(1) {
      $84 = (($85|0) % 20)&-1;
      $86 = ($84|0)==(0);
      if ($86) {
       _qh_fprintf($fp,9044,56128,$vararg_buffer42);
      }
      _qh_fprintf($fp,9045,12616,$vararg_buffer44);
      $87 = (($85) + -1)|0;
      $88 = ($85|0)==(0);
      if ($88) {
       break;
      } else {
       $85 = $87;
      }
     }
    }
    _qh_fprintf($fp,9046,12624,$vararg_buffer46);
    $89 = HEAP32[(5840)>>2]|0;
    $90 = HEAP32[(5828)>>2]|0;
    $91 = HEAP32[(5836)>>2]|0;
    $92 = Math_imul($91, $90)|0;
    $93 = (($89) + ($92<<3)|0);
    $94 = ($92|0)>(0);
    if ($94) {
     $point$072 = $89;
     while(1) {
      $95 = HEAP32[(5304)>>2]|0;
      $96 = ($95|0)!=(0);
      $97 = HEAP32[(5260)>>2]|0;
      $98 = ($97|0)!=(0);
      $or$cond17 = $96 & $98;
      if ($or$cond17) {
       $99 = (_qh_pointid($point$072)|0);
       $100 = HEAP32[(5836)>>2]|0;
       $101 = (($100) + -1)|0;
       $102 = ($99|0)==($101|0);
       if (!($102)) {
        label = 50;
       }
      } else {
       label = 50;
      }
      do {
       if ((label|0) == 50) {
        label = 0;
        $103 = HEAP32[(5472)>>2]|0;
        $104 = ($103|0)==(4);
        if ($104) {
         _qh_printpoint($fp,0,$point$072);
         break;
        } else {
         _qh_printpoint3($fp,$point$072);
         break;
        }
       }
      } while(0);
      $105 = HEAP32[(5828)>>2]|0;
      $106 = (($point$072) + ($105<<3)|0);
      $107 = ($106>>>0)<($93>>>0);
      if ($107) {
       $point$072 = $106;
      } else {
       break;
      }
     }
    }
    $108 = HEAP32[(7748)>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = ((($108)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==(0|0);
     if (!($112)) {
      $113 = ((($110)) + 4|0);
      $116 = $111;$118 = $113;
      while(1) {
       $114 = HEAP32[(5472)>>2]|0;
       $115 = ($114|0)==(4);
       if ($115) {
        _qh_printpoint($fp,0,$116);
       } else {
        _qh_printpoint3($fp,$116);
       }
       $117 = ((($118)) + 4|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        break;
       } else {
        $116 = $119;$118 = $117;
       }
      }
     }
    }
    _qh_fprintf($fp,9047,12648,$vararg_buffer48);
   }
   $121 = HEAP32[(5472)>>2]|0;
   $122 = ($121|0)!=(4);
   $123 = HEAP32[(5492)>>2]|0;
   $124 = ($123|0)!=(0);
   $or$cond19 = $122 | $124;
   if (!($or$cond19)) {
    $125 = HEAP32[(7840)>>2]|0;
    $126 = ($125*3)|0;
    HEAP32[$vararg_buffer50>>2] = $126;
    $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
    HEAP32[$vararg_ptr53>>2] = $125;
    _qh_fprintf($fp,9048,12680,$vararg_buffer50);
   }
   $127 = +HEAPF64[(6952)>>3];
   $128 = $127 * 2.0;
   HEAPF64[(7672)>>3] = $128;
   $129 = HEAP32[(5460)>>2]|0;
   $130 = ($129|0)==(0);
   if ($130) {
    $135 = HEAP32[(5456)>>2]|0;
    $136 = ($135|0)==(0);
    if (!($136)) {
     $137 = +HEAPF64[(5408)>>3];
     $138 = +HEAPF64[(6952)>>3];
     $139 = $137 + $138;
     $140 = $128 < $139;
     if ($140) {
      HEAPF64[(7672)>>3] = $139;
     }
    }
   } else {
    $131 = +HEAPF64[(5400)>>3];
    $132 = +HEAPF64[(6952)>>3];
    $133 = $131 + $132;
    $134 = $128 < $133;
    if ($134) {
     HEAPF64[(7672)>>3] = $133;
    }
   }
   $141 = +HEAPF64[(7672)>>3];
   HEAPF64[(7680)>>3] = $141;
   $142 = HEAP32[(5628)>>2]|0;
   $143 = HEAP32[(5468)>>2]|0;
   $144 = (0 - ($143))|0;
   $145 = ($142|0)==($144|0);
   if (!($145)) {
    $146 = +HEAPF64[(6960)>>3];
    $147 = $146 * 0.02;
    $148 = $141 < $147;
    if ($148) {
     HEAPF64[(7680)>>3] = $147;
    }
   }
   $149 = +HEAPF64[(5288)>>3];
   $150 = $149 < 8.9884656743115785E+307;
   if ($150) {
    $151 = +HEAPF64[(7680)>>3];
    $152 = 1.0 - $149;
    $153 = +HEAPF64[(6960)>>3];
    $154 = $152 * $153;
    $155 = $151 < $154;
    if ($155) {
     HEAPF64[(7680)>>3] = $154;
    }
   } else {
    $156 = HEAP32[(5460)>>2]|0;
    $157 = ($156|0)==(0);
    $158 = HEAP32[(5456)>>2]|0;
    $159 = ($158|0)!=(0);
    $or$cond21 = $157 & $159;
    $160 = +HEAPF64[(5296)>>3];
    $161 = $160 < 8.9884656743115785E+307;
    $or$cond23 = $or$cond21 & $161;
    if ($or$cond23) {
     $162 = +HEAPF64[(7680)>>3];
     $163 = 1.0 - $160;
     $164 = +HEAPF64[(6960)>>3];
     $165 = $163 * $164;
     $166 = $162 < $165;
     if ($166) {
      HEAPF64[(7680)>>3] = $165;
     }
    }
   }
   $167 = +HEAPF64[(7680)>>3];
   $168 = +HEAPF64[(5424)>>3];
   $169 = $167 < $168;
   if ($169) {
    HEAPF64[(7680)>>3] = $168;
   }
   $170 = +HEAPF64[(7616)>>3];
   $171 = $170 < 8.9884656743115785E+307;
   if ($171) {
    $172 = HEAP32[(5828)>>2]|0;
    $173 = (+($172|0));
    $174 = (+Math_sqrt((+$173)));
    $175 = $170 * $174;
    $176 = +HEAPF64[(7680)>>3];
    $177 = $176 + $175;
    HEAPF64[(7680)>>3] = $177;
   }
   $178 = HEAP32[(5472)>>2]|0;
   $179 = ($178|0)==(4);
   if (!($179)) {
    $180 = HEAP32[(5468)>>2]|0;
    $181 = HEAP32[(5628)>>2]|0;
    $182 = $181 | $180;
    $183 = HEAP32[(5464)>>2]|0;
    $184 = $182 | $183;
    $185 = ($184|0)==(0);
    if (!($185)) {
     $186 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
     HEAP32[$vertices>>2] = $186;
     $187 = HEAP32[(5628)>>2]|0;
     $188 = ($187|0)!=(0);
     $189 = HEAP32[(5472)>>2]|0;
     $190 = ($189|0)<(4);
     $or$cond29 = $188 & $190;
     if ($or$cond29) {
      $191 = +HEAPF64[(7680)>>3];
      _qh_printspheres($fp,$186,$191);
     }
     $192 = HEAP32[(5468)>>2]|0;
     $193 = HEAP32[(5464)>>2]|0;
     $194 = $193 | $192;
     $195 = ($194|0)==(0);
     do {
      if (!($195)) {
       HEAP32[(7784)>>2] = 1;
       $196 = HEAP32[(5468)>>2]|0;
       $197 = ($196|0)==(0);
       $198 = HEAP32[(5628)>>2]|0;
       $199 = ($198|0)!=(0);
       $or$cond33 = $197 | $199;
       do {
        if (!($or$cond33)) {
         $200 = HEAP32[$vertices>>2]|0;
         $201 = ($200|0)==(0|0);
         if ($201) {
          break;
         }
         $202 = ((($200)) + 4|0);
         $203 = HEAP32[$202>>2]|0;
         $204 = ($203|0)==(0|0);
         if ($204) {
          break;
         } else {
          $207 = $203;$vertexp$069 = $202;
         }
         while(1) {
          $205 = ((($vertexp$069)) + 4|0);
          $206 = ((($207)) + 8|0);
          $208 = HEAP32[$206>>2]|0;
          $209 = HEAP32[(7484)>>2]|0;
          $210 = +HEAPF64[(7680)>>3];
          _qh_printpointvect2($fp,$208,0,$209,$210);
          $211 = HEAP32[$205>>2]|0;
          $212 = ($211|0)==(0|0);
          if ($212) {
           break;
          } else {
           $207 = $211;$vertexp$069 = $205;
          }
         }
        }
       } while(0);
       $213 = ($facetlist|0)==(0|0);
       L133: do {
        if (!($213)) {
         $214 = ($printall|0)==(0);
         $facet$166 = $facetlist;
         while(1) {
          $215 = ((($facet$166)) + 48|0);
          $216 = HEAP32[$215>>2]|0;
          $217 = ($216|0)==(0|0);
          if ($217) {
           break L133;
          }
          if ($214) {
           $218 = (_qh_skipfacet($facet$166)|0);
           $219 = ($218|0)==(0);
           if ($219) {
            label = 97;
           }
          } else {
           label = 97;
          }
          do {
           if ((label|0) == 97) {
            label = 0;
            $220 = ((($facet$166)) + 24|0);
            $221 = HEAP32[$220>>2]|0;
            $222 = ($221|0)==(0|0);
            if ($222) {
             break;
            }
            $223 = HEAP32[(5464)>>2]|0;
            $224 = ($223|0)!=(0);
            $225 = HEAP32[(5472)>>2]|0;
            $226 = ($225|0)<(4);
            $or$cond36 = $224 & $226;
            if ($or$cond36) {
             $227 = +HEAPF64[(7672)>>3];
             _qh_printcentrum($fp,$facet$166,$227);
            }
            $228 = HEAP32[(5468)>>2]|0;
            $229 = ($228|0)==(0);
            if ($229) {
             break;
            }
            $230 = ((($facet$166)) + 68|0);
            $231 = HEAP32[$230>>2]|0;
            $232 = ($231|0)==(0|0);
            do {
             if (!($232)) {
              $233 = ((($231)) + 4|0);
              $234 = HEAP32[$233>>2]|0;
              $235 = ($234|0)==(0|0);
              if ($235) {
               break;
              } else {
               $239 = $234;$pointp$162 = $233;
              }
              while(1) {
               $236 = ((($pointp$162)) + 4|0);
               $237 = HEAP32[$220>>2]|0;
               $238 = +HEAPF64[(7680)>>3];
               _qh_printpointvect2($fp,$239,$237,0,$238);
               $240 = HEAP32[$236>>2]|0;
               $241 = ($240|0)==(0|0);
               if ($241) {
                break;
               } else {
                $239 = $240;$pointp$162 = $236;
               }
              }
             }
            } while(0);
            $242 = ((($facet$166)) + 64|0);
            $243 = HEAP32[$242>>2]|0;
            $244 = ($243|0)==(0|0);
            if ($244) {
             break;
            }
            $245 = ((($243)) + 4|0);
            $246 = HEAP32[$245>>2]|0;
            $247 = ($246|0)==(0|0);
            if ($247) {
             break;
            } else {
             $251 = $246;$pointp$264 = $245;
            }
            while(1) {
             $248 = ((($pointp$264)) + 4|0);
             $249 = HEAP32[$220>>2]|0;
             $250 = +HEAPF64[(7680)>>3];
             _qh_printpointvect2($fp,$251,$249,0,$250);
             $252 = HEAP32[$248>>2]|0;
             $253 = ($252|0)==(0|0);
             if ($253) {
              break;
             } else {
              $251 = $252;$pointp$264 = $248;
             }
            }
           }
          } while(0);
          $254 = HEAP32[$215>>2]|0;
          $255 = ($254|0)==(0|0);
          if ($255) {
           break;
          } else {
           $facet$166 = $254;
          }
         }
        }
       } while(0);
       $256 = ($facets|0)==(0|0);
       if ($256) {
        break;
       }
       $257 = ((($facets)) + 4|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = ($258|0)==(0|0);
       if ($259) {
        break;
       }
       $260 = ((($257)) + 4|0);
       $261 = ($printall|0)==(0);
       $262 = $258;$266 = $260;
       while(1) {
        if ($261) {
         $263 = (_qh_skipfacet($262)|0);
         $264 = ($263|0)==(0);
         if ($264) {
          label = 114;
         }
        } else {
         label = 114;
        }
        do {
         if ((label|0) == 114) {
          label = 0;
          $269 = ((($262)) + 24|0);
          $270 = HEAP32[$269>>2]|0;
          $271 = ($270|0)==(0|0);
          if ($271) {
           break;
          }
          $272 = HEAP32[(5464)>>2]|0;
          $273 = ($272|0)!=(0);
          $274 = HEAP32[(5472)>>2]|0;
          $275 = ($274|0)<(4);
          $or$cond38 = $273 & $275;
          if ($or$cond38) {
           $276 = +HEAPF64[(7672)>>3];
           _qh_printcentrum($fp,$262,$276);
          }
          $277 = HEAP32[(5468)>>2]|0;
          $278 = ($277|0)==(0);
          if ($278) {
           break;
          }
          $279 = ((($262)) + 68|0);
          $280 = HEAP32[$279>>2]|0;
          $281 = ($280|0)==(0|0);
          do {
           if (!($281)) {
            $282 = ((($280)) + 4|0);
            $283 = HEAP32[$282>>2]|0;
            $284 = ($283|0)==(0|0);
            if ($284) {
             break;
            } else {
             $288 = $283;$pointp$358 = $282;
            }
            while(1) {
             $285 = ((($pointp$358)) + 4|0);
             $286 = HEAP32[$269>>2]|0;
             $287 = +HEAPF64[(7680)>>3];
             _qh_printpointvect2($fp,$288,$286,0,$287);
             $289 = HEAP32[$285>>2]|0;
             $290 = ($289|0)==(0|0);
             if ($290) {
              break;
             } else {
              $288 = $289;$pointp$358 = $285;
             }
            }
           }
          } while(0);
          $291 = ((($262)) + 64|0);
          $292 = HEAP32[$291>>2]|0;
          $293 = ($292|0)==(0|0);
          if ($293) {
           break;
          }
          $294 = ((($292)) + 4|0);
          $295 = HEAP32[$294>>2]|0;
          $296 = ($295|0)==(0|0);
          if ($296) {
           break;
          } else {
           $300 = $295;$pointp$459 = $294;
          }
          while(1) {
           $297 = ((($pointp$459)) + 4|0);
           $298 = HEAP32[$269>>2]|0;
           $299 = +HEAPF64[(7680)>>3];
           _qh_printpointvect2($fp,$300,$298,0,$299);
           $301 = HEAP32[$297>>2]|0;
           $302 = ($301|0)==(0|0);
           if ($302) {
            break;
           } else {
            $300 = $301;$pointp$459 = $297;
           }
          }
         }
        } while(0);
        $265 = ((($266)) + 4|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = ($267|0)==(0|0);
        if ($268) {
         break;
        } else {
         $262 = $267;$266 = $265;
        }
       }
      }
     } while(0);
     _qh_settempfree($vertices);
    }
   }
   $303 = HEAP32[(7720)>>2]|0;
   $304 = (($303) + 1)|0;
   HEAP32[(7720)>>2] = $304;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $0 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer>>2] = $0;
   _qh_fprintf($fp,9033,12104,$vararg_buffer);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $1 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $1;
   _qh_fprintf($fp,9034,12104,$vararg_buffer1);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $2 = HEAP32[(7592)>>2]|0;
   $3 = ($2|0)==(0);
   if ($3) {
    _qh_clearcenters(2);
   }
   $4 = HEAP32[(5828)>>2]|0;
   $5 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $4;
   $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
   HEAP32[$vararg_ptr7>>2] = $5;
   _qh_fprintf($fp,9035,12112,$vararg_buffer4);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $305 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer54>>2] = $305;
   _qh_fprintf($fp,9049,12104,$vararg_buffer54);
   STACKTOP = sp;return;
   break;
  }
  case 14:  {
   $306 = HEAP32[(5796)>>2]|0;
   $307 = ($306|0)!=(0);
   $308 = HEAP32[(5504)>>2]|0;
   $309 = ($308|0)!=(0);
   $or$cond40 = $307 & $309;
   if ($or$cond40) {
    $310 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($310,7053,12696,$vararg_buffer57);
   }
   $311 = HEAP32[(7576)>>2]|0;
   $312 = $311 & 16777215;
   HEAP32[(7692)>>2] = $312;
   $313 = HEAP32[(5828)>>2]|0;
   $314 = ($313|0)<(4);
   if ($314) {
    $315 = HEAP32[$numfacets>>2]|0;
    HEAP32[$vararg_buffer59>>2] = $315;
    _qh_fprintf($fp,9050,12104,$vararg_buffer59);
    STACKTOP = sp;return;
   } else {
    $316 = HEAP32[$numsimplicial>>2]|0;
    $317 = HEAP32[$numridges>>2]|0;
    $318 = (($317) + ($316))|0;
    HEAP32[$vararg_buffer62>>2] = $318;
    _qh_fprintf($fp,9051,12104,$vararg_buffer62);
    STACKTOP = sp;return;
   }
   break;
  }
  case 12: case 11: case 9:  {
   $319 = HEAP32[(5276)>>2]|0;
   $320 = ($319|0)==(0);
   if ($320) {
    $324 = HEAP32[(5828)>>2]|0;
    $325 = (($324) + 1)|0;
    $326 = HEAP32[$numfacets>>2]|0;
    HEAP32[$vararg_buffer71>>2] = $325;
    $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
    HEAP32[$vararg_ptr74>>2] = $326;
    _qh_fprintf($fp,9053,12112,$vararg_buffer71);
    STACKTOP = sp;return;
   } else {
    $321 = HEAP32[$numfacets>>2]|0;
    $322 = HEAP32[(5828)>>2]|0;
    $323 = (($322) + 1)|0;
    HEAP32[$vararg_buffer65>>2] = (6116);
    $vararg_ptr68 = ((($vararg_buffer65)) + 4|0);
    HEAP32[$vararg_ptr68>>2] = (5856);
    $vararg_ptr69 = ((($vararg_buffer65)) + 8|0);
    HEAP32[$vararg_ptr69>>2] = $321;
    $vararg_ptr70 = ((($vararg_buffer65)) + 12|0);
    HEAP32[$vararg_ptr70>>2] = $323;
    _qh_fprintf($fp,9052,12768,$vararg_buffer65);
    STACKTOP = sp;return;
   }
   break;
  }
  case 13: case 15:  {
   $327 = HEAP32[(5828)>>2]|0;
   $328 = ($327|0)>(3);
   if ($328) {
    $415 = HEAP32[(7480)>>2]|0;
    $416 = HEAP32[(5828)>>2]|0;
    HEAP32[$vararg_buffer121>>2] = $416;
    _qh_fprintf($415,6068,12952,$vararg_buffer121);
    _qh_errexit(5,0,0);
    // unreachable;
   }
   $329 = HEAP32[(5796)>>2]|0;
   $330 = ($329|0)==(0);
   if (!($330)) {
    $331 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($331,7054,12800,$vararg_buffer75);
   }
   $332 = ($format|0)==(13);
   do {
    if ($332) {
     $333 = HEAP32[(5828)>>2]|0;
     $334 = ($333|0)==(2);
     if ($334) {
      _qh_fprintf($fp,9054,12856,$vararg_buffer77);
      break;
     } else {
      _qh_fprintf($fp,9055,12872,$vararg_buffer79);
      break;
     }
    } else {
     _qh_fprintf($fp,9056,12896,$vararg_buffer81);
    }
   } while(0);
   HEAP32[(7692)>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $335 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer83>>2] = $335;
   _qh_fprintf($fp,9057,12104,$vararg_buffer83);
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $336 = HEAP32[(5828)>>2]|0;
   $337 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer86>>2] = $336;
   $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
   HEAP32[$vararg_ptr89>>2] = $337;
   _qh_fprintf($fp,9058,12112,$vararg_buffer86);
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $338 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer90>>2] = $338;
   _qh_fprintf($fp,9059,12104,$vararg_buffer90);
   STACKTOP = sp;return;
   break;
  }
  case 25: case 17:  {
   $339 = HEAP32[(5796)>>2]|0;
   $340 = ($339|0)==(0);
   if (!($340)) {
    $415 = HEAP32[(7480)>>2]|0;
    $416 = HEAP32[(5828)>>2]|0;
    HEAP32[$vararg_buffer121>>2] = $416;
    _qh_fprintf($415,6068,12952,$vararg_buffer121);
    _qh_errexit(5,0,0);
    // unreachable;
   }
   $341 = HEAP32[(5828)>>2]|0;
   HEAP32[$num>>2] = $341;
   $342 = ($format|0)==(17);
   $343 = HEAP32[(5828)>>2]|0;
   $344 = ($343|0)==(2);
   $or$cond42 = $342 | $344;
   $345 = HEAP32[(5836)>>2]|0;
   $346 = HEAP32[(7748)>>2]|0;
   $347 = (_qh_setsize($346)|0);
   $348 = (($347) + ($345))|0;
   if ($or$cond42) {
    $349 = HEAP32[$numfacets>>2]|0;
    $350 = HEAP32[$totneighbors>>2]|0;
    $351 = (($350|0) / 2)&-1;
    HEAP32[$vararg_buffer93>>2] = $341;
    $vararg_ptr96 = ((($vararg_buffer93)) + 4|0);
    HEAP32[$vararg_ptr96>>2] = $348;
    $vararg_ptr97 = ((($vararg_buffer93)) + 8|0);
    HEAP32[$vararg_ptr97>>2] = $349;
    $vararg_ptr98 = ((($vararg_buffer93)) + 12|0);
    HEAP32[$vararg_ptr98>>2] = $351;
    _qh_fprintf($fp,9060,12904,$vararg_buffer93);
   } else {
    HEAP32[(7692)>>2] = $348;
    $352 = HEAP32[(5304)>>2]|0;
    $353 = ($352|0)==(0);
    if (!($353)) {
     $354 = HEAP32[$num>>2]|0;
     $355 = (($354) + -1)|0;
     HEAP32[$num>>2] = $355;
    }
    $356 = HEAP32[$num>>2]|0;
    $357 = HEAP32[(7692)>>2]|0;
    $358 = HEAP32[$numfacets>>2]|0;
    $359 = (($358) + ($357))|0;
    $360 = HEAP32[$numsimplicial>>2]|0;
    $361 = (($359) - ($360))|0;
    $362 = HEAP32[$numridges>>2]|0;
    $363 = (($362) + ($360))|0;
    $364 = HEAP32[$totneighbors>>2]|0;
    $365 = (($364|0) / 2)&-1;
    HEAP32[$vararg_buffer99>>2] = $356;
    $vararg_ptr102 = ((($vararg_buffer99)) + 4|0);
    HEAP32[$vararg_ptr102>>2] = $361;
    $vararg_ptr103 = ((($vararg_buffer99)) + 8|0);
    HEAP32[$vararg_ptr103>>2] = $363;
    $vararg_ptr104 = ((($vararg_buffer99)) + 12|0);
    HEAP32[$vararg_ptr104>>2] = $365;
    _qh_fprintf($fp,9061,12904,$vararg_buffer99);
   }
   $366 = HEAP32[(5840)>>2]|0;
   $367 = HEAP32[(5828)>>2]|0;
   $368 = HEAP32[(5836)>>2]|0;
   $369 = Math_imul($368, $367)|0;
   $370 = (($366) + ($369<<3)|0);
   $371 = ($369|0)>(0);
   if ($371) {
    $372 = HEAP32[$num>>2]|0;
    $point$193 = $366;
    while(1) {
     $373 = HEAP32[(7476)>>2]|0;
     _qh_printpointid($373,0,$372,$point$193,-1);
     $374 = HEAP32[(5828)>>2]|0;
     $375 = (($point$193) + ($374<<3)|0);
     $376 = ($375>>>0)<($370>>>0);
     if ($376) {
      $point$193 = $375;
     } else {
      break;
     }
    }
   }
   $377 = HEAP32[(7748)>>2]|0;
   $378 = ($377|0)==(0|0);
   if (!($378)) {
    $379 = ((($377)) + 4|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = ($380|0)==(0|0);
    if (!($381)) {
     $382 = HEAP32[$num>>2]|0;
     $385 = $380;$pointp$590 = $379;
     while(1) {
      $383 = ((($pointp$590)) + 4|0);
      $384 = HEAP32[(7476)>>2]|0;
      _qh_printpointid($384,0,$382,$385,-1);
      $386 = HEAP32[$383>>2]|0;
      $387 = ($386|0)==(0|0);
      if ($387) {
       break;
      } else {
       $385 = $386;$pointp$590 = $383;
      }
     }
    }
   }
   $388 = ($format|0)==(25);
   $389 = HEAP32[(5828)>>2]|0;
   $390 = ($389|0)>(2);
   $or$cond44 = $388 & $390;
   if (!($or$cond44)) {
    STACKTOP = sp;return;
   }
   $facet$286 = HEAP32[(7500)>>2]|0;
   $391 = ($facet$286|0)==(0|0);
   if ($391) {
    STACKTOP = sp;return;
   } else {
    $facet$287 = $facet$286;
   }
   while(1) {
    $392 = ((($facet$287)) + 48|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = ($393|0)==(0|0);
    if ($394) {
     label = 174;
     break;
    }
    $395 = ((($facet$287)) + 80|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = $396 & 8192;
    $398 = ($397|0)==(0);
    if ($398) {
     $399 = ((($facet$287)) + 72|0);
     $400 = HEAP32[$399>>2]|0;
     $401 = ($400|0)==(0);
     if (!($401)) {
      $403 = HEAP32[(7476)>>2]|0;
      _qh_printcenter($403,$format,0,$facet$287);
     }
    }
    $facet$2 = HEAP32[$392>>2]|0;
    $402 = ($facet$2|0)==(0|0);
    if ($402) {
     label = 174;
     break;
    } else {
     $facet$287 = $facet$2;
    }
   }
   if ((label|0) == 174) {
    STACKTOP = sp;return;
   }
   break;
  }
  case 20:  {
   $404 = HEAP32[$numcoplanars>>2]|0;
   HEAP32[$vararg_buffer105>>2] = $404;
   _qh_fprintf($fp,9062,12104,$vararg_buffer105);
   STACKTOP = sp;return;
   break;
  }
  case 21:  {
   $405 = HEAP32[(5796)>>2]|0;
   $406 = ($405|0)==(0);
   if ($406) {
    $415 = HEAP32[(7480)>>2]|0;
    $416 = HEAP32[(5828)>>2]|0;
    HEAP32[$vararg_buffer121>>2] = $416;
    _qh_fprintf($415,6068,12952,$vararg_buffer121);
    _qh_errexit(5,0,0);
    // unreachable;
   }
   $407 = HEAP32[(5276)>>2]|0;
   $408 = ($407|0)==(0);
   if ($408) {
    $411 = HEAP32[(5828)>>2]|0;
    $412 = (($411) + -1)|0;
    $413 = HEAP32[$numfacets>>2]|0;
    HEAP32[$vararg_buffer114>>2] = $412;
    $vararg_ptr117 = ((($vararg_buffer114)) + 4|0);
    HEAP32[$vararg_ptr117>>2] = $413;
    _qh_fprintf($fp,9064,12112,$vararg_buffer114);
    STACKTOP = sp;return;
   } else {
    $409 = HEAP32[$numfacets>>2]|0;
    $410 = HEAP32[(5828)>>2]|0;
    HEAP32[$vararg_buffer108>>2] = (6116);
    $vararg_ptr111 = ((($vararg_buffer108)) + 4|0);
    HEAP32[$vararg_ptr111>>2] = (5856);
    $vararg_ptr112 = ((($vararg_buffer108)) + 8|0);
    HEAP32[$vararg_ptr112>>2] = $409;
    $vararg_ptr113 = ((($vararg_buffer108)) + 12|0);
    HEAP32[$vararg_ptr113>>2] = $410;
    _qh_fprintf($fp,9063,12920,$vararg_buffer108);
    STACKTOP = sp;return;
   }
   break;
  }
  case 26:  {
   $414 = HEAP32[$numfacets>>2]|0;
   HEAP32[$vararg_buffer118>>2] = $414;
   _qh_fprintf($fp,9065,12104,$vararg_buffer118);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   $415 = HEAP32[(7480)>>2]|0;
   $416 = HEAP32[(5828)>>2]|0;
   HEAP32[$vararg_buffer121>>2] = $416;
   _qh_fprintf($415,6068,12952,$vararg_buffer121);
   _qh_errexit(5,0,0);
   // unreachable;
  }
  }
 } while(0);
}
function _qh_printvertexlist($fp,$string,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $string = $string|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vertexp$01 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $vertices = sp + 4|0;
 $0 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
 HEAP32[$vertices>>2] = $0;
 HEAP32[$vararg_buffer>>2] = $string;
 _qh_fprintf($fp,9244,13032,$vararg_buffer);
 $1 = HEAP32[$vertices>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $7 = $4;$vertexp$01 = $3;
   while(1) {
    $6 = ((($vertexp$01)) + 4|0);
    _qh_printvertex($fp,$7);
    $8 = HEAP32[$6>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     break;
    } else {
     $7 = $8;$vertexp$01 = $6;
    }
   }
  }
 }
 _qh_settempfree($vertices);
 STACKTOP = sp;return;
}
function _qh_printend4geom($fp,$facet,$nump,$printall) {
 $fp = $fp|0;
 $facet = $facet|0;
 $nump = $nump|0;
 $printall = $printall|0;
 var $$lcssa = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa46 = 0, $$lcssa48 = 0, $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $color = 0, $neighborp$0 = 0, $neighborp$0$ph = 0, $num$0$ph = 0, $num$1$ph = 0, $num$2 = 0, $or$cond = 0, $ridgep$0 = 0, $ridgep$0$ph = 0, $storemerge = 0.0, $storemerge$1 = 0.0, $storemerge$2 = 0.0, $storemerge4 = 0.0, $storemerge4$1 = 0.0, $storemerge4$2 = 0.0;
 var $vararg_buffer = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 72|0;
 $vararg_buffer = sp;
 $color = sp + 48|0;
 $0 = HEAP32[$nump>>2]|0;
 $1 = ($printall|0)==(0);
 if ($1) {
  $2 = (_qh_skipfacet($facet)|0);
  $3 = HEAP32[(5492)>>2]|0;
  $4 = $3 | $2;
  $5 = ($4|0)==(0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
 } else {
  $$old = HEAP32[(5492)>>2]|0;
  $$old2 = ($$old|0)==(0);
  if (!($$old2)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ((($facet)) + 80|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 2048;
 $9 = ($8|0)!=(0);
 $10 = HEAP32[(7656)>>2]|0;
 $11 = ($10|0)!=(0);
 $or$cond = $9 & $11;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $12 = ((($facet)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = ($fp|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$12>>2]|0;
  $17 = +HEAPF64[$16>>3];
  $18 = $17 + 1.0;
  $19 = $18 * 0.5;
  $20 = $19 < -1.0;
  $storemerge = $20 ? -1.0 : $19;
  $21 = $storemerge > 1.0;
  $storemerge4 = $21 ? 1.0 : $storemerge;
  HEAPF64[$color>>3] = $storemerge4;
  $22 = ((($16)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 + 1.0;
  $25 = $24 * 0.5;
  $26 = ((($color)) + 8|0);
  $27 = $25 < -1.0;
  $storemerge$1 = $27 ? -1.0 : $25;
  $28 = $storemerge$1 > 1.0;
  $storemerge4$1 = $28 ? 1.0 : $storemerge$1;
  HEAPF64[$26>>3] = $storemerge4$1;
  $29 = ((($16)) + 16|0);
  $30 = +HEAPF64[$29>>3];
  $31 = $30 + 1.0;
  $32 = $31 * 0.5;
  $33 = ((($color)) + 16|0);
  $34 = $32 < -1.0;
  $storemerge$2 = $34 ? -1.0 : $32;
  $35 = $storemerge$2 > 1.0;
  $storemerge4$2 = $35 ? 1.0 : $storemerge$2;
  HEAPF64[$33>>3] = $storemerge4$2;
 }
 $36 = HEAP32[(7720)>>2]|0;
 $37 = ((($facet)) + 72|0);
 HEAP32[$37>>2] = $36;
 $38 = HEAP32[$6>>2]|0;
 $39 = $38 & 8192;
 $40 = ($39|0)==(0);
 L16: do {
  if ($40) {
   $65 = ((($facet)) + 56|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0|0);
   if ($67) {
    $num$2 = $0;
   } else {
    $68 = ((($66)) + 4|0);
    $69 = +HEAPF64[$color>>3];
    $70 = ((($color)) + 8|0);
    $71 = +HEAPF64[$70>>3];
    $72 = ((($color)) + 16|0);
    $73 = +HEAPF64[$72>>3];
    $74 = ((($facet)) + 76|0);
    $num$1$ph = $0;$ridgep$0$ph = $68;
    while(1) {
     $75 = HEAP32[(7720)>>2]|0;
     $ridgep$0 = $ridgep$0$ph;
     while(1) {
      $76 = ((($ridgep$0)) + 4|0);
      $77 = HEAP32[$ridgep$0>>2]|0;
      $78 = ($77|0)==(0|0);
      if ($78) {
       $num$2 = $num$1$ph;
       break L16;
      }
      $79 = ((($77)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==($facet|0);
      if ($81) {
       $82 = ((($77)) + 8|0);
       $83 = HEAP32[$82>>2]|0;
       $85 = $83;
      } else {
       $85 = $80;
      }
      $84 = ((($85)) + 72|0);
      $86 = HEAP32[$84>>2]|0;
      $87 = ($86|0)==($75|0);
      if ($87) {
       $ridgep$0 = $76;
      } else {
       $$lcssa = $85;$$lcssa43 = $76;$$lcssa44 = $77;
       break;
      }
     }
     if ($15) {
      $88 = ($num$1$ph*3)|0;
      $89 = (($88) + 1)|0;
      $90 = (($88) + 2)|0;
      $91 = ((($$lcssa44)) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92 & 16777215;
      $94 = HEAP32[$74>>2]|0;
      $95 = ((($$lcssa)) + 76|0);
      $96 = HEAP32[$95>>2]|0;
      HEAP32[$vararg_buffer8>>2] = $88;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
      HEAP32[$vararg_ptr11>>2] = $89;
      $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
      HEAP32[$vararg_ptr12>>2] = $90;
      $vararg_ptr13 = ((($vararg_buffer8)) + 16|0);
      HEAPF64[$vararg_ptr13>>3] = $69;
      $vararg_ptr14 = ((($vararg_buffer8)) + 24|0);
      HEAPF64[$vararg_ptr14>>3] = $71;
      $vararg_ptr15 = ((($vararg_buffer8)) + 32|0);
      HEAPF64[$vararg_ptr15>>3] = $73;
      $vararg_ptr16 = ((($vararg_buffer8)) + 40|0);
      HEAP32[$vararg_ptr16>>2] = $93;
      $vararg_ptr17 = ((($vararg_buffer8)) + 44|0);
      HEAP32[$vararg_ptr17>>2] = $94;
      $vararg_ptr18 = ((($vararg_buffer8)) + 48|0);
      HEAP32[$vararg_ptr18>>2] = $96;
      _qh_fprintf($fp,9085,13088,$vararg_buffer8);
     }
     $97 = (($num$1$ph) + 1)|0;
     $num$1$ph = $97;$ridgep$0$ph = $$lcssa43;
    }
   }
  } else {
   $41 = ((($facet)) + 60|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $num$2 = $0;
   } else {
    $44 = ((($42)) + 4|0);
    $45 = +HEAPF64[$color>>3];
    $46 = ((($color)) + 8|0);
    $47 = +HEAPF64[$46>>3];
    $48 = ((($color)) + 16|0);
    $49 = +HEAPF64[$48>>3];
    $50 = ((($facet)) + 76|0);
    $neighborp$0$ph = $44;$num$0$ph = $0;
    while(1) {
     $51 = HEAP32[(7720)>>2]|0;
     $neighborp$0 = $neighborp$0$ph;
     while(1) {
      $52 = ((($neighborp$0)) + 4|0);
      $53 = HEAP32[$neighborp$0>>2]|0;
      $54 = ($53|0)==(0|0);
      if ($54) {
       $num$2 = $num$0$ph;
       break L16;
      }
      $55 = ((($53)) + 72|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)==($51|0);
      if ($57) {
       $neighborp$0 = $52;
      } else {
       $$lcssa46 = $52;$$lcssa48 = $53;
       break;
      }
     }
     if ($15) {
      $58 = ($num$0$ph*3)|0;
      $59 = (($58) + 1)|0;
      $60 = (($58) + 2)|0;
      $61 = HEAP32[$50>>2]|0;
      $62 = ((($$lcssa48)) + 76|0);
      $63 = HEAP32[$62>>2]|0;
      HEAP32[$vararg_buffer>>2] = $58;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $59;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $60;
      $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
      HEAPF64[$vararg_ptr3>>3] = $45;
      $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
      HEAPF64[$vararg_ptr4>>3] = $47;
      $vararg_ptr5 = ((($vararg_buffer)) + 32|0);
      HEAPF64[$vararg_ptr5>>3] = $49;
      $vararg_ptr6 = ((($vararg_buffer)) + 40|0);
      HEAP32[$vararg_ptr6>>2] = $61;
      $vararg_ptr7 = ((($vararg_buffer)) + 44|0);
      HEAP32[$vararg_ptr7>>2] = $63;
      _qh_fprintf($fp,9084,13040,$vararg_buffer);
     }
     $64 = (($num$0$ph) + 1)|0;
     $neighborp$0$ph = $$lcssa46;$num$0$ph = $64;
    }
   }
  }
 } while(0);
 HEAP32[$nump>>2] = $num$2;
 STACKTOP = sp;return;
}
function _qh_printpoint($fp,$string,$point) {
 $fp = $fp|0;
 $string = $string|0;
 $point = $point|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_qh_pointid($point)|0);
 $1 = HEAP32[(5828)>>2]|0;
 _qh_printpointid($fp,$string,$1,$point,$0);
 return;
}
function _qh_printpoint3($fp,$point) {
 $fp = $fp|0;
 $point = $point|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $p = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $p = sp + 24|0;
 _qh_projectdim3($point,$p);
 $0 = +HEAPF64[$p>>3];
 HEAPF64[$vararg_buffer>>3] = $0;
 _qh_fprintf($fp,9216,13136,$vararg_buffer);
 $1 = ((($p)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 HEAPF64[$vararg_buffer1>>3] = $2;
 _qh_fprintf($fp,9216,13136,$vararg_buffer1);
 $3 = ((($p)) + 16|0);
 $4 = +HEAPF64[$3>>3];
 HEAPF64[$vararg_buffer4>>3] = $4;
 _qh_fprintf($fp,9216,13136,$vararg_buffer4);
 $5 = (_qh_pointid($point)|0);
 HEAP32[$vararg_buffer7>>2] = $5;
 _qh_fprintf($fp,9217,13144,$vararg_buffer7);
 STACKTOP = sp;return;
}
function _qh_printspheres($fp,$vertices,$radius) {
 $fp = $fp|0;
 $vertices = $vertices|0;
 $radius = +$radius;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vertexp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer6 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 40|0;
 $0 = HEAP32[(7696)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(7696)>>2] = $1;
 _qh_fprintf($fp,9227,13152,$vararg_buffer);
 $2 = ($vertices|0)==(0|0);
 if ($2) {
  _qh_fprintf($fp,9230,13912,$vararg_buffer8);
  STACKTOP = sp;return;
 }
 $3 = ((($vertices)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _qh_fprintf($fp,9230,13912,$vararg_buffer8);
  STACKTOP = sp;return;
 } else {
  $8 = $4;$vertexp$01 = $3;
 }
 while(1) {
  $6 = ((($vertexp$01)) + 4|0);
  $7 = ((($8)) + 16|0);
  $9 = $7;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 16777215;
  HEAPF64[$vararg_buffer1>>3] = $radius;
  $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr3>>2] = $15;
  $vararg_ptr4 = ((($vararg_buffer1)) + 16|0);
  HEAPF64[$vararg_ptr4>>3] = $radius;
  $vararg_ptr5 = ((($vararg_buffer1)) + 24|0);
  HEAPF64[$vararg_ptr5>>3] = $radius;
  _qh_fprintf($fp,9228,13856,$vararg_buffer1);
  $16 = ((($8)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  _qh_printpoint3($fp,$17);
  _qh_fprintf($fp,9229,13904,$vararg_buffer6);
  $18 = HEAP32[$6>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   break;
  } else {
   $8 = $18;$vertexp$01 = $6;
  }
 }
 _qh_fprintf($fp,9230,13912,$vararg_buffer8);
 STACKTOP = sp;return;
}
function _qh_printpointvect2($fp,$point,$normal,$center,$radius) {
 $fp = $fp|0;
 $point = $point|0;
 $normal = $normal|0;
 $center = $center|0;
 $radius = +$radius;
 var $0 = 0.0, $red = 0, $yellow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $red = sp + 24|0;
 $yellow = sp;
 ;HEAP32[$red>>2]=HEAP32[13920>>2]|0;HEAP32[$red+4>>2]=HEAP32[13920+4>>2]|0;HEAP32[$red+8>>2]=HEAP32[13920+8>>2]|0;HEAP32[$red+12>>2]=HEAP32[13920+12>>2]|0;HEAP32[$red+16>>2]=HEAP32[13920+16>>2]|0;HEAP32[$red+20>>2]=HEAP32[13920+20>>2]|0;
 ;HEAP32[$yellow>>2]=HEAP32[13944>>2]|0;HEAP32[$yellow+4>>2]=HEAP32[13944+4>>2]|0;HEAP32[$yellow+8>>2]=HEAP32[13944+8>>2]|0;HEAP32[$yellow+12>>2]=HEAP32[13944+12>>2]|0;HEAP32[$yellow+16>>2]=HEAP32[13944+16>>2]|0;HEAP32[$yellow+20>>2]=HEAP32[13944+20>>2]|0;
 _qh_printpointvect($fp,$point,$normal,$center,$radius,$red);
 $0 = -$radius;
 _qh_printpointvect($fp,$point,$normal,$center,$0,$yellow);
 STACKTOP = sp;return;
}
function _qh_printcentrum($fp,$facet,$radius) {
 $fp = $fp|0;
 $facet = $facet|0;
 $radius = +$radius;
 var $$in = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $centrum$0 = 0, $dist = 0, $green = 0, $normal = 0, $tempcentrum$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0;
 var $vararg_ptr9 = 0, $xaxis = 0, $yaxis = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer21 = sp + 224|0;
 $vararg_buffer16 = sp + 200|0;
 $vararg_buffer11 = sp + 176|0;
 $vararg_buffer6 = sp + 152|0;
 $vararg_buffer3 = sp + 144|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $xaxis = sp + 72|0;
 $yaxis = sp + 40|0;
 $normal = sp + 8|0;
 $dist = sp;
 $green = sp + 104|0;
 ;HEAP32[$green>>2]=HEAP32[13968>>2]|0;HEAP32[$green+4>>2]=HEAP32[13968+4>>2]|0;HEAP32[$green+8>>2]=HEAP32[13968+8>>2]|0;HEAP32[$green+12>>2]=HEAP32[13968+12>>2]|0;HEAP32[$green+16>>2]=HEAP32[13968+16>>2]|0;HEAP32[$green+20>>2]=HEAP32[13968+20>>2]|0;
 $0 = HEAP32[(7592)>>2]|0;
 $1 = ($0|0)==(2);
 if ($1) {
  $2 = ((($facet)) + 40|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $5 = (_qh_getcentrum($facet)|0);
   HEAP32[$2>>2] = $5;
  }
  $6 = HEAP32[$2>>2]|0;
  $centrum$0 = $6;$tempcentrum$0 = 0;
 } else {
  $7 = (_qh_getcentrum($facet)|0);
  $centrum$0 = $7;$tempcentrum$0 = 1;
 }
 _qh_fprintf($fp,9072,13992,$vararg_buffer);
 $8 = HEAP32[(7784)>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $12 = ((($facet)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $13;
  _qh_fprintf($fp,9074,14216,$vararg_buffer3);
 } else {
  HEAP32[(7784)>>2] = 0;
  $10 = ((($facet)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $11;
  _qh_fprintf($fp,9073,14040,$vararg_buffer1);
 }
 $14 = ((($facet)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 _qh_distplane($19,$facet,$dist);
 $20 = HEAP32[$18>>2]|0;
 $21 = +HEAPF64[$dist>>3];
 $22 = (_qh_projectpoint($20,$facet,$21)|0);
 $23 = HEAP32[(5828)>>2]|0;
 $24 = ($23|0)==(0);
 do {
  if (!($24)) {
   $25 = ((($facet)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   $$in = $23;
   while(1) {
    $27 = (($$in) + -1)|0;
    $28 = (($22) + ($27<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = (($centrum$0) + ($27<<3)|0);
    $31 = +HEAPF64[$30>>3];
    $32 = $29 - $31;
    $33 = (($xaxis) + ($27<<3)|0);
    HEAPF64[$33>>3] = $32;
    $34 = (($26) + ($27<<3)|0);
    $35 = +HEAPF64[$34>>3];
    $36 = (($normal) + ($27<<3)|0);
    HEAPF64[$36>>3] = $35;
    $37 = ($27|0)==(0);
    if ($37) {
     break;
    } else {
     $$in = $27;
    }
   }
   $$pr = HEAP32[(5828)>>2]|0;
   if ((($$pr|0) == 2)) {
    $38 = ((($xaxis)) + 16|0);
    HEAPF64[$38>>3] = 0.0;
    $39 = ((($normal)) + 16|0);
    HEAPF64[$39>>3] = 0.0;
    break;
   } else if ((($$pr|0) == 4)) {
    _qh_projectdim3($xaxis,$xaxis);
    _qh_projectdim3($normal,$normal);
    $40 = HEAP32[(5472)>>2]|0;
    _qh_normalize2($normal,$40,1,0,0);
    break;
   } else {
    break;
   }
  }
 } while(0);
 _qh_crossproduct(3,$xaxis,$normal,$yaxis);
 $41 = +HEAPF64[$xaxis>>3];
 $42 = ((($xaxis)) + 8|0);
 $43 = +HEAPF64[$42>>3];
 $44 = ((($xaxis)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 HEAPF64[$vararg_buffer6>>3] = $41;
 $vararg_ptr9 = ((($vararg_buffer6)) + 8|0);
 HEAPF64[$vararg_ptr9>>3] = $43;
 $vararg_ptr10 = ((($vararg_buffer6)) + 16|0);
 HEAPF64[$vararg_ptr10>>3] = $45;
 _qh_fprintf($fp,9075,14264,$vararg_buffer6);
 $46 = +HEAPF64[$yaxis>>3];
 $47 = ((($yaxis)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 $49 = ((($yaxis)) + 16|0);
 $50 = +HEAPF64[$49>>3];
 HEAPF64[$vararg_buffer11>>3] = $46;
 $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
 HEAPF64[$vararg_ptr14>>3] = $48;
 $vararg_ptr15 = ((($vararg_buffer11)) + 16|0);
 HEAPF64[$vararg_ptr15>>3] = $50;
 _qh_fprintf($fp,9076,14264,$vararg_buffer11);
 $51 = +HEAPF64[$normal>>3];
 $52 = ((($normal)) + 8|0);
 $53 = +HEAPF64[$52>>3];
 $54 = ((($normal)) + 16|0);
 $55 = +HEAPF64[$54>>3];
 HEAPF64[$vararg_buffer16>>3] = $51;
 $vararg_ptr19 = ((($vararg_buffer16)) + 8|0);
 HEAPF64[$vararg_ptr19>>3] = $53;
 $vararg_ptr20 = ((($vararg_buffer16)) + 16|0);
 HEAPF64[$vararg_ptr20>>3] = $55;
 _qh_fprintf($fp,9077,14264,$vararg_buffer16);
 _qh_printpoint3($fp,$centrum$0);
 _qh_fprintf($fp,9078,14288,$vararg_buffer21);
 $56 = HEAP32[(7488)>>2]|0;
 _qh_memfree($22,$56);
 $57 = ((($facet)) + 24|0);
 $58 = HEAP32[$57>>2]|0;
 _qh_printpointvect($fp,$centrum$0,$58,0,$radius,$green);
 $59 = ($tempcentrum$0|0)==(0);
 if ($59) {
  STACKTOP = sp;return;
 }
 $60 = HEAP32[(7488)>>2]|0;
 _qh_memfree($centrum$0,$60);
 STACKTOP = sp;return;
}
function _qh_printpointid($fp,$string,$dim,$point,$id) {
 $fp = $fp|0;
 $string = $string|0;
 $dim = $dim|0;
 $point = $point|0;
 $id = $id|0;
 var $$01 = 0, $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = ($point|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = ($string|0)!=(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $string;
  _qh_fprintf($fp,9211,13032,$vararg_buffer);
  $2 = ($id|0)==(-1);
  if (!($2)) {
   HEAP32[$vararg_buffer1>>2] = $id;
   _qh_fprintf($fp,9212,14296,$vararg_buffer1);
  }
 }
 $3 = ($dim|0)==(0);
 if (!($3)) {
  $$01 = $point;$$in = $dim;
  while(1) {
   $4 = (($$in) + -1)|0;
   $5 = ((($$01)) + 8|0);
   $6 = +HEAPF64[$$01>>3];
   if ($1) {
    HEAPF64[$vararg_buffer4>>3] = $6;
    _qh_fprintf($fp,9213,14304,$vararg_buffer4);
   } else {
    HEAPF64[$vararg_buffer7>>3] = $6;
    _qh_fprintf($fp,9214,11216,$vararg_buffer7);
   }
   $7 = ($4|0)==(0);
   if ($7) {
    break;
   } else {
    $$01 = $5;$$in = $4;
   }
  }
 }
 _qh_fprintf($fp,9215,56128,$vararg_buffer10);
 STACKTOP = sp;return;
}
function _qh_printcenter($fp,$format,$string,$facet) {
 $fp = $fp|0;
 $format = $format|0;
 $string = $string|0;
 $facet = $facet|0;
 var $$ = 0, $$cmp = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond17 = 0, $exitcond18 = 0, $k$012 = 0, $k$113 = 0, $k$215 = 0, $num$1 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $0 = HEAP32[(7592)>>2]|0;
 $$off = (($0) + -1)|0;
 $$cmp = ($$off>>>0)>(1);
 if ($$cmp) {
  STACKTOP = sp;return;
 }
 $1 = ($string|0)==(0|0);
 if (!($1)) {
  _qh_fprintf($fp,9066,$string,$vararg_buffer);
 }
 $2 = HEAP32[(7592)>>2]|0;
 $3 = ($2|0)==(1);
 $4 = HEAP32[(5828)>>2]|0;
 L7: do {
  if ($3) {
   $5 = (($4) + -1)|0;
   $6 = ((($facet)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = ((($facet)) + 80|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 & 131072;
    $12 = ($11|0)!=(0);
    $13 = HEAP32[(5260)>>2]|0;
    $14 = ($13|0)!=(0);
    $or$cond3 = $12 & $14;
    if ($or$cond3) {
     $15 = ($4|0)>(1);
     if (!($15)) {
      $num$1 = $5;
      label = 20;
      break;
     }
     $16 = (($4) + -1)|0;
     $k$113 = 0;
     while(1) {
      HEAPF64[$vararg_buffer3>>3] = -10.101000000000001;
      _qh_fprintf($fp,9068,11216,$vararg_buffer3);
      $29 = (($k$113) + 1)|0;
      $exitcond17 = ($29|0)==($16|0);
      if ($exitcond17) {
       $num$1 = $5;
       label = 20;
       break L7;
      } else {
       $k$113 = $29;
      }
     }
    }
   }
   $17 = ((($facet)) + 40|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $20 = ((($facet)) + 52|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_qh_facetcenter($21)|0);
    HEAP32[$17>>2] = $22;
   }
   $23 = ($4|0)>(1);
   if ($23) {
    $24 = (($4) + -1)|0;
    $k$012 = 0;
    while(1) {
     $25 = HEAP32[$17>>2]|0;
     $26 = (($25) + ($k$012<<3)|0);
     $27 = +HEAPF64[$26>>3];
     HEAPF64[$vararg_buffer1>>3] = $27;
     _qh_fprintf($fp,9067,11216,$vararg_buffer1);
     $28 = (($k$012) + 1)|0;
     $exitcond = ($28|0)==($24|0);
     if ($exitcond) {
      $num$1 = $5;
      label = 20;
      break;
     } else {
      $k$012 = $28;
     }
    }
   } else {
    $num$1 = $5;
    label = 20;
   }
  } else {
   $30 = ($format|0)==(25);
   $31 = HEAP32[(5304)>>2]|0;
   $32 = ($31|0)!=(0);
   $or$cond5 = $30 & $32;
   $33 = $or$cond5 << 31 >> 31;
   $$ = (($33) + ($4))|0;
   $34 = ((($facet)) + 40|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if ($36) {
    $37 = (_qh_getcentrum($facet)|0);
    HEAP32[$34>>2] = $37;
   }
   $38 = ($$|0)>(0);
   if ($38) {
    $39 = $or$cond5 << 31 >> 31;
    $40 = (($4) + ($39))|0;
    $k$215 = 0;
    while(1) {
     $41 = HEAP32[$34>>2]|0;
     $42 = (($41) + ($k$215<<3)|0);
     $43 = +HEAPF64[$42>>3];
     HEAPF64[$vararg_buffer6>>3] = $43;
     _qh_fprintf($fp,9069,11216,$vararg_buffer6);
     $44 = (($k$215) + 1)|0;
     $exitcond18 = ($44|0)==($40|0);
     if ($exitcond18) {
      $num$1 = $$;
      label = 20;
      break;
     } else {
      $k$215 = $44;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $45 = ($format|0)==(7);
  $46 = ($num$1|0)==(2);
  $or$cond7 = $45 & $46;
  if ($or$cond7) {
   _qh_fprintf($fp,9070,14312,$vararg_buffer9);
   STACKTOP = sp;return;
  }
 }
 _qh_fprintf($fp,9071,56128,$vararg_buffer11);
 STACKTOP = sp;return;
}
function _qh_projectdim3($source,$destination) {
 $source = $source|0;
 $destination = $destination|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $i$0$lcssa7 = 0, $i$02 = 0, $i$1 = 0, $i$1$lcssa = 0, $k$03 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(5312)>>2]|0;
  $3 = HEAP32[(5828)>>2]|0;
  $5 = $0;$i$02 = 0;$k$03 = 0;
  while(1) {
   $6 = ($5|0)==(4);
   $7 = ($k$03|0)==($2|0);
   do {
    if ($6) {
     if ($7) {
      $i$1 = $i$02;
     } else {
      $8 = (($source) + ($k$03<<3)|0);
      $9 = +HEAPF64[$8>>3];
      $10 = (($i$02) + 1)|0;
      $11 = (($destination) + ($i$02<<3)|0);
      HEAPF64[$11>>3] = $9;
      $i$1 = $10;
     }
    } else {
     if ($7) {
      $12 = (($i$02) + 1)|0;
      $13 = (($destination) + ($i$02<<3)|0);
      HEAPF64[$13>>3] = 0.0;
      $i$1 = $12;
      break;
     } else {
      $14 = (($source) + ($k$03<<3)|0);
      $15 = +HEAPF64[$14>>3];
      $16 = (($i$02) + 1)|0;
      $17 = (($destination) + ($i$02<<3)|0);
      HEAPF64[$17>>3] = $15;
      $i$1 = $16;
      break;
     }
    }
   } while(0);
   $18 = (($k$03) + 1)|0;
   $19 = ($18|0)<($3|0);
   if ($19) {
    $5 = $3;$i$02 = $i$1;$k$03 = $18;
   } else {
    $i$1$lcssa = $i$1;
    break;
   }
  }
  $4 = ($i$1$lcssa|0)<(3);
  if ($4) {
   $i$0$lcssa7 = $i$1$lcssa;
  } else {
   return;
  }
 } else {
  $i$0$lcssa7 = 0;
 }
 $scevgep = (($destination) + ($i$0$lcssa7<<3)|0);
 $20 = $i$0$lcssa7 << 3;
 $21 = (24 - ($20))|0;
 _memset(($scevgep|0),0,($21|0))|0;
 return;
}
function _qh_printpointvect($fp,$point,$normal,$center,$radius,$color) {
 $fp = $fp|0;
 $point = $point|0;
 $normal = $normal|0;
 $center = $center|0;
 $radius = +$radius;
 $color = $color|0;
 var $$in = 0, $$in4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $diff = 0, $pointA = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff = sp + 32|0;
 $pointA = sp;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = ($0|0)==(0);
 $2 = ($center|0)!=(0|0);
 if (!($1)) {
  $3 = ($normal|0)==(0|0);
  $$in = $0;
  while(1) {
   $4 = (($$in) + -1)|0;
   do {
    if ($2) {
     $5 = (($point) + ($4<<3)|0);
     $6 = +HEAPF64[$5>>3];
     $7 = (($center) + ($4<<3)|0);
     $8 = +HEAPF64[$7>>3];
     $9 = $6 - $8;
     $10 = (($diff) + ($4<<3)|0);
     HEAPF64[$10>>3] = $9;
    } else {
     if ($3) {
      $15 = (($diff) + ($4<<3)|0);
      HEAPF64[$15>>3] = 0.0;
      break;
     } else {
      $11 = (($normal) + ($4<<3)|0);
      $12 = +HEAPF64[$11>>3];
      $13 = (($diff) + ($4<<3)|0);
      HEAPF64[$13>>3] = $12;
      break;
     }
    }
   } while(0);
   $14 = ($4|0)==(0);
   if ($14) {
    break;
   } else {
    $$in = $4;
   }
  }
 }
 if ($2) {
  $16 = HEAP32[(5828)>>2]|0;
  _qh_normalize2($diff,$16,1,0,0);
 }
 $17 = HEAP32[(5828)>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  _qh_printline3geom($fp,$point,$pointA,$color);
  STACKTOP = sp;return;
 } else {
  $$in4 = $17;
 }
 while(1) {
  $19 = (($$in4) + -1)|0;
  $20 = (($point) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (($diff) + ($19<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 * $radius;
  $25 = $21 + $24;
  $26 = (($pointA) + ($19<<3)|0);
  HEAPF64[$26>>3] = $25;
  $27 = ($19|0)==(0);
  if ($27) {
   break;
  } else {
   $$in4 = $19;
  }
 }
 _qh_printline3geom($fp,$point,$pointA,$color);
 STACKTOP = sp;return;
}
function _qh_printend($fp,$format,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$06 = 0, $facetp$05 = 0, $notlhs = 0, $notrhs = 0, $num = 0, $or$cond = 0, $or$cond$not = 0;
 var $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 48|0;
 $num = sp + 60|0;
 $0 = HEAP32[(7696)>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,7055,14320,$vararg_buffer);
 }
 switch ($format|0) {
 case 21:  {
  $31 = HEAP32[(5276)>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   STACKTOP = sp;return;
  }
  _qh_fprintf($fp,9083,14464,$vararg_buffer13);
  STACKTOP = sp;return;
  break;
 }
 case 13:  {
  _qh_fprintf($fp,9081,14472,$vararg_buffer9);
  STACKTOP = sp;return;
  break;
 }
 case 15:  {
  _qh_fprintf($fp,9082,14456,$vararg_buffer11);
  STACKTOP = sp;return;
  break;
 }
 case 12: case 11: case 9:  {
  $29 = HEAP32[(5276)>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   STACKTOP = sp;return;
  }
  _qh_fprintf($fp,9080,14464,$vararg_buffer7);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $3 = HEAP32[(5828)>>2]|0;
  $4 = HEAP32[(5312)>>2]|0;
  $notlhs = ($3|0)!=(4);
  $notrhs = ($4|0)>(-1);
  $or$cond$not = $notlhs | $notrhs;
  $5 = HEAP32[(5492)>>2]|0;
  $6 = ($5|0)!=(0);
  $or$cond3 = $or$cond$not | $6;
  if ($or$cond3) {
   _qh_fprintf($fp,9079,14456,$vararg_buffer5);
   STACKTOP = sp;return;
  }
  $7 = HEAP32[(7720)>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[(7720)>>2] = $8;
  HEAP32[$num>>2] = 0;
  $9 = ($facetlist|0)==(0|0);
  L24: do {
   if (!($9)) {
    $facet$06 = $facetlist;
    while(1) {
     $10 = ((($facet$06)) + 48|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      break L24;
     }
     _qh_printend4geom($fp,$facet$06,$num,$printall);
     $13 = HEAP32[$10>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      break;
     } else {
      $facet$06 = $13;
     }
    }
   }
  } while(0);
  $15 = ($facets|0)==(0|0);
  if (!($15)) {
   $16 = ((($facets)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $20 = $17;$facetp$05 = $16;
    while(1) {
     $19 = ((($facetp$05)) + 4|0);
     _qh_printend4geom($fp,$20,$num,$printall);
     $21 = HEAP32[$19>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      break;
     } else {
      $20 = $21;$facetp$05 = $19;
     }
    }
   }
  }
  $23 = HEAP32[$num>>2]|0;
  $24 = HEAP32[(7840)>>2]|0;
  $25 = ($23|0)==($24|0);
  $26 = HEAP32[(7692)>>2]|0;
  $27 = ($26|0)==($24|0);
  $or$cond = $25 & $27;
  if ($or$cond) {
   STACKTOP = sp;return;
  } else {
   $28 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $24;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $26;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr4>>2] = $23;
   _qh_fprintf($28,6069,14360,$vararg_buffer1);
   _qh_errexit(5,0,0);
   // unreachable;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _qh_printextremes($fp,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $$lcssa = 0, $$lcssa14 = 0, $$lcssa15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $numpoints$0$ph = 0, $numpoints$1 = 0, $point$05 = 0, $point_i$04 = 0, $points = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vertexp$0 = 0, $vertexp$0$ph = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 16|0;
 $points = sp + 12|0;
 $0 = HEAP32[(5836)>>2]|0;
 $1 = HEAP32[(7748)>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = (($2) + ($0))|0;
 $4 = (_qh_settemp($3)|0);
 HEAP32[$points>>2] = $4;
 _qh_setzero($4,0,$3);
 $5 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
 HEAP32[$vertices>>2] = $5;
 $6 = ($5|0)==(0|0);
 L1: do {
  if ($6) {
   $numpoints$1 = 0;
  } else {
   $7 = ((($5)) + 4|0);
   $numpoints$0$ph = 0;$vertexp$0$ph = $7;
   while(1) {
    $vertexp$0 = $vertexp$0$ph;
    while(1) {
     $8 = ((($vertexp$0)) + 4|0);
     $9 = HEAP32[$vertexp$0>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      $numpoints$1 = $numpoints$0$ph;
      break L1;
     }
     $11 = ((($9)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (_qh_pointid($12)|0);
     $14 = ($13|0)>(-1);
     if ($14) {
      $$lcssa = $11;$$lcssa14 = $8;$$lcssa15 = $13;
      break;
     } else {
      $vertexp$0 = $8;
     }
    }
    $15 = HEAP32[$$lcssa>>2]|0;
    $16 = HEAP32[$points>>2]|0;
    $17 = (((($16)) + 4|0) + ($$lcssa15<<2)|0);
    HEAP32[$17>>2] = $15;
    $18 = (($numpoints$0$ph) + 1)|0;
    $numpoints$0$ph = $18;$vertexp$0$ph = $$lcssa14;
   }
  }
 } while(0);
 _qh_settempfree($vertices);
 HEAP32[$vararg_buffer>>2] = $numpoints$1;
 _qh_fprintf($fp,9086,12104,$vararg_buffer);
 $19 = HEAP32[$points>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  _qh_settempfree($points);
  STACKTOP = sp;return;
 }
 $21 = ((($19)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_qh_setsize($19)|0);
 $24 = ($23|0)>(0);
 if ($24) {
  $point$05 = $22;$point_i$04 = 0;
 } else {
  _qh_settempfree($points);
  STACKTOP = sp;return;
 }
 while(1) {
  $25 = ($point$05|0)==(0|0);
  if (!($25)) {
   HEAP32[$vararg_buffer1>>2] = $point_i$04;
   _qh_fprintf($fp,9087,12104,$vararg_buffer1);
  }
  $26 = (($point_i$04) + 1)|0;
  $27 = HEAP32[$points>>2]|0;
  $28 = (((($27)) + 4|0) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $exitcond = ($26|0)==($23|0);
  if ($exitcond) {
   break;
  } else {
   $point$05 = $29;$point_i$04 = $26;
  }
 }
 _qh_settempfree($points);
 STACKTOP = sp;return;
}
function _qh_printextremes_2d($fp,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $facet$0 = 0, $nextfacet$0 = 0, $nextfacet$0$in$in = 0, $numcoplanars = 0, $numfacets = 0, $numridges = 0, $numsimplicial = 0, $numtricoplanars = 0, $or$cond = 0, $totneighbors = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr4 = 0, $vertexA$0 = 0, $vertexA$0$in = 0, $vertexB$0 = 0, $vertexB$0$in = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $numfacets = sp + 48|0;
 $numridges = sp + 52|0;
 $totneighbors = sp + 32|0;
 $numcoplanars = sp + 36|0;
 $numsimplicial = sp + 40|0;
 $numtricoplanars = sp + 44|0;
 $vertices = sp + 28|0;
 _qh_countfacets($facetlist,$facets,$printall,$numfacets,$numsimplicial,$totneighbors,$numridges,$numcoplanars,$numtricoplanars);
 $0 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
 HEAP32[$vertices>>2] = $0;
 $1 = (_qh_setsize($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 _qh_fprintf($fp,9088,12104,$vararg_buffer);
 _qh_settempfree($vertices);
 $2 = HEAP32[$numfacets>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ($facetlist|0)==(0|0);
 if ($4) {
  $5 = ((($facets)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $85 = $6;
 } else {
  $85 = $facetlist;
 }
 $7 = HEAP32[(7724)>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = $8 & 2147483647;
 $10 = $7 & -2147483648;
 $11 = $9 | $10;
 HEAP32[(7724)>>2] = $11;
 $12 = HEAP32[(7720)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(7720)>>2] = $13;
 $facet$0 = $85;
 while(1) {
  $14 = ((($facet$0)) + 80|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 4096;
  $17 = ($16|0)==(0);
  $18 = ((($facet$0)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 4|0);
  if ($17) {
   $25 = ((($19)) + 8|0);
   $26 = ((($facet$0)) + 60|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 8|0);
   $nextfacet$0$in$in = $28;$vertexA$0$in = $25;$vertexB$0$in = $20;
  } else {
   $21 = ((($19)) + 8|0);
   $22 = ((($facet$0)) + 60|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 4|0);
   $nextfacet$0$in$in = $24;$vertexA$0$in = $20;$vertexB$0$in = $21;
  }
  $vertexB$0 = HEAP32[$vertexB$0$in>>2]|0;
  $vertexA$0 = HEAP32[$vertexA$0$in>>2]|0;
  $nextfacet$0 = HEAP32[$nextfacet$0$in$in>>2]|0;
  $29 = ((($facet$0)) + 72|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[(7720)>>2]|0;
  $32 = ($30|0)==($31|0);
  if ($32) {
   $33 = HEAP32[(7480)>>2]|0;
   $34 = ((($facet$0)) + 76|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ((($nextfacet$0)) + 76|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $35;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $37;
   _qh_fprintf($33,6218,14480,$vararg_buffer1);
   _qh_errexit2(5,$facet$0,$nextfacet$0);
   $$pr = HEAP32[$29>>2]|0;
   $38 = $$pr;
  } else {
   $38 = $30;
  }
  $39 = ($38|0)==(0);
  if (!($39)) {
   $40 = ((($vertexA$0)) + 16|0);
   $41 = $40;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($41) + 4)|0;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[(7724)>>2]|0;
   $48 = $43 ^ $47;
   $49 = $48 & 2147483647;
   $50 = ($49|0)==(0);
   if (!($50)) {
    $51 = $47 & 2147483647;
    $52 = $43 & -2147483648;
    $53 = $51 | $52;
    $54 = $40;
    $55 = $54;
    HEAP32[$55>>2] = $53;
    $56 = (($54) + 4)|0;
    $57 = $56;
    HEAP32[$57>>2] = $46;
    $58 = ((($vertexA$0)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (_qh_pointid($59)|0);
    HEAP32[$vararg_buffer5>>2] = $60;
    _qh_fprintf($fp,9089,12104,$vararg_buffer5);
   }
   $61 = ((($vertexB$0)) + 16|0);
   $62 = $61;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $68 = HEAP32[(7724)>>2]|0;
   $69 = $64 ^ $68;
   $70 = $69 & 2147483647;
   $71 = ($70|0)==(0);
   if (!($71)) {
    $72 = $68 & 2147483647;
    $73 = $64 & -2147483648;
    $74 = $72 | $73;
    $75 = $61;
    $76 = $75;
    HEAP32[$76>>2] = $74;
    $77 = (($75) + 4)|0;
    $78 = $77;
    HEAP32[$78>>2] = $67;
    $79 = ((($vertexB$0)) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (_qh_pointid($80)|0);
    HEAP32[$vararg_buffer8>>2] = $81;
    _qh_fprintf($fp,9090,12104,$vararg_buffer8);
   }
  }
  $82 = HEAP32[(7720)>>2]|0;
  HEAP32[$29>>2] = $82;
  $83 = ($nextfacet$0|0)==(0|0);
  $84 = ($nextfacet$0|0)==($85|0);
  $or$cond = $83 | $84;
  if ($or$cond) {
   break;
  } else {
   $facet$0 = $nextfacet$0;
  }
 }
 STACKTOP = sp;return;
}
function _qh_printextremes_d($fp,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $$lcssa = 0, $$lcssa41 = 0, $$lowerseen$0 = 0, $$lowerseen$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $lowerseen$07 = 0;
 var $neighborp$08 = 0, $numpoints$0$ph14 = 0, $numpoints$1 = 0, $or$cond = 0, $upperseen$0$ = 0, $upperseen$0$$lcssa = 0, $upperseen$06 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 12|0;
 $0 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
 HEAP32[$vertices>>2] = $0;
 _qh_vertexneighbors();
 $1 = HEAP32[$vertices>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $numpoints$1 = 0;
  } else {
   $3 = ((($1)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $numpoints$1 = 0;
   } else {
    $6 = ((($3)) + 4|0);
    $93 = $4;$94 = $6;$numpoints$0$ph14 = 0;
    while(1) {
     $65 = $94;$8 = $93;
     L6: while(1) {
      $7 = ((($8)) + 12|0);
      $9 = HEAP32[$7>>2]|0;
      $10 = ($9|0)==(0|0);
      do {
       if ($10) {
        $11 = ((($8)) + 16|0);
        $12 = $11;
        $13 = $12;
        $14 = HEAP32[$13>>2]|0;
        $15 = (($12) + 4)|0;
        $16 = $15;
        $17 = HEAP32[$16>>2]|0;
        $57 = $17;$58 = $11;$61 = $14;
       } else {
        $18 = ((($9)) + 4|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = ($19|0)==(0|0);
        if ($20) {
         $21 = ((($8)) + 16|0);
         $22 = $21;
         $23 = $22;
         $24 = HEAP32[$23>>2]|0;
         $25 = (($22) + 4)|0;
         $26 = $25;
         $27 = HEAP32[$26>>2]|0;
         $57 = $27;$58 = $21;$61 = $24;
         break;
        } else {
         $30 = $19;$lowerseen$07 = 0;$neighborp$08 = $18;$upperseen$06 = 0;
        }
        while(1) {
         $28 = ((($neighborp$08)) + 4|0);
         $29 = ((($30)) + 80|0);
         $31 = HEAP32[$29>>2]|0;
         $32 = $31 & 131072;
         $33 = ($32|0)==(0);
         $upperseen$0$ = $33 ? $upperseen$06 : 1;
         $$lowerseen$0 = $33 ? 1 : $lowerseen$07;
         $34 = HEAP32[$28>>2]|0;
         $35 = ($34|0)==(0|0);
         if ($35) {
          $$lowerseen$0$lcssa = $$lowerseen$0;$upperseen$0$$lcssa = $upperseen$0$;
          break;
         } else {
          $30 = $34;$lowerseen$07 = $$lowerseen$0;$neighborp$08 = $28;$upperseen$06 = $upperseen$0$;
         }
        }
        $36 = ($upperseen$0$$lcssa|0)!=(0);
        $37 = ($$lowerseen$0$lcssa|0)!=(0);
        $or$cond = $36 & $37;
        $38 = ((($8)) + 16|0);
        $39 = $38;
        $40 = $39;
        $41 = HEAP32[$40>>2]|0;
        $42 = (($39) + 4)|0;
        $43 = $42;
        $44 = HEAP32[$43>>2]|0;
        if ($or$cond) {
         $$lcssa = $65;$$lcssa41 = $38;$46 = $44;$49 = $41;
         break L6;
        } else {
         $57 = $44;$58 = $38;$61 = $41;
        }
       }
      } while(0);
      $56 = $57 & -268435457;
      $59 = $58;
      $60 = $59;
      HEAP32[$60>>2] = $61;
      $62 = (($59) + 4)|0;
      $63 = $62;
      HEAP32[$63>>2] = $56;
      $64 = ((($65)) + 4|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       $numpoints$1 = $numpoints$0$ph14;
       break L1;
      } else {
       $65 = $64;$8 = $66;
      }
     }
     $45 = $46 | 268435456;
     $47 = $$lcssa41;
     $48 = $47;
     HEAP32[$48>>2] = $49;
     $50 = (($47) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $45;
     $52 = (($numpoints$0$ph14) + 1)|0;
     $53 = ((($$lcssa)) + 4|0);
     $54 = HEAP32[$$lcssa>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $numpoints$1 = $52;
      break;
     } else {
      $93 = $54;$94 = $53;$numpoints$0$ph14 = $52;
     }
    }
   }
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $numpoints$1;
 _qh_fprintf($fp,9091,12104,$vararg_buffer);
 $68 = HEAP32[$vertices>>2]|0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  _qh_settempfree($vertices);
  STACKTOP = sp;return;
 }
 $70 = ((($68)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  _qh_settempfree($vertices);
  STACKTOP = sp;return;
 }
 $73 = ((($70)) + 4|0);
 $75 = $71;$90 = $73;
 while(1) {
  $74 = ((($75)) + 16|0);
  $76 = $74;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 & 268435456;
  $83 = (0)==(0);
  $84 = ($82|0)==(0);
  $85 = $83 & $84;
  if (!($85)) {
   $86 = ((($75)) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (_qh_pointid($87)|0);
   HEAP32[$vararg_buffer1>>2] = $88;
   _qh_fprintf($fp,9092,12104,$vararg_buffer1);
  }
  $89 = ((($90)) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(0|0);
  if ($92) {
   break;
  } else {
   $75 = $91;$90 = $89;
  }
 }
 _qh_settempfree($vertices);
 STACKTOP = sp;return;
}
function _qh_printfacetheader($fp,$facet) {
 $fp = $fp|0;
 $facet = $facet|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $magicptr1 = 0;
 var $magicptr6 = 0, $neighborp$0 = 0, $or$cond4 = 0, $or$cond5 = 0, $pointp$010 = 0, $pointp$19 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer104 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer104 = sp + 368|0;
 $vararg_buffer101 = sp + 360|0;
 $vararg_buffer99 = sp + 352|0;
 $vararg_buffer97 = sp + 344|0;
 $vararg_buffer95 = sp + 336|0;
 $vararg_buffer92 = sp + 328|0;
 $vararg_buffer89 = sp + 320|0;
 $vararg_buffer86 = sp + 312|0;
 $vararg_buffer83 = sp + 304|0;
 $vararg_buffer80 = sp + 296|0;
 $vararg_buffer77 = sp + 288|0;
 $vararg_buffer74 = sp + 280|0;
 $vararg_buffer71 = sp + 272|0;
 $vararg_buffer68 = sp + 264|0;
 $vararg_buffer65 = sp + 256|0;
 $vararg_buffer62 = sp + 248|0;
 $vararg_buffer59 = sp + 240|0;
 $vararg_buffer56 = sp + 232|0;
 $vararg_buffer53 = sp + 224|0;
 $vararg_buffer51 = sp + 216|0;
 $vararg_buffer49 = sp + 208|0;
 $vararg_buffer47 = sp + 200|0;
 $vararg_buffer45 = sp + 192|0;
 $vararg_buffer43 = sp + 184|0;
 $vararg_buffer41 = sp + 80|0;
 $vararg_buffer39 = sp + 72|0;
 $vararg_buffer37 = sp + 64|0;
 $vararg_buffer35 = sp + 56|0;
 $vararg_buffer33 = sp + 48|0;
 $vararg_buffer31 = sp + 40|0;
 $vararg_buffer29 = sp + 24|0;
 $vararg_buffer27 = sp + 16|0;
 $vararg_buffer25 = sp + 8|0;
 $vararg_buffer23 = sp;
 $vararg_buffer21 = sp + 32|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer17 = sp + 96|0;
 $vararg_buffer15 = sp + 104|0;
 $vararg_buffer13 = sp + 112|0;
 $vararg_buffer11 = sp + 120|0;
 $vararg_buffer9 = sp + 128|0;
 $vararg_buffer7 = sp + 136|0;
 $vararg_buffer5 = sp + 144|0;
 $vararg_buffer3 = sp + 152|0;
 $vararg_buffer1 = sp + 160|0;
 $vararg_buffer = sp + 168|0;
 $dist = sp + 176|0;
 $magicptr1 = $facet;
 if ((($magicptr1|0) == 2)) {
  _qh_fprintf($fp,9133,14568,$vararg_buffer);
  STACKTOP = sp;return;
 } else if ((($magicptr1|0) == 0)) {
  _qh_fprintf($fp,9135,14608,$vararg_buffer3);
  STACKTOP = sp;return;
 } else if ((($magicptr1|0) == 1)) {
  _qh_fprintf($fp,9134,14584,$vararg_buffer1);
  STACKTOP = sp;return;
 } else {
  $0 = HEAP32[(5656)>>2]|0;
  HEAP32[(7788)>>2] = $0;
  HEAP32[(5656)>>2] = 0;
  $1 = ((($facet)) + 76|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $2;
  _qh_fprintf($fp,9136,14624,$vararg_buffer5);
  _qh_fprintf($fp,9137,14632,$vararg_buffer7);
  $3 = ((($facet)) + 80|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 4096;
  $6 = ($5|0)==(0);
  if ($6) {
   _qh_fprintf($fp,9139,14656,$vararg_buffer11);
  } else {
   _qh_fprintf($fp,9138,14648,$vararg_buffer9);
  }
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 8192;
  $9 = ($8|0)==(0);
  if (!($9)) {
   _qh_fprintf($fp,9140,14664,$vararg_buffer13);
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = $10 & 512;
  $12 = ($11|0)==(0);
  if (!($12)) {
   _qh_fprintf($fp,9141,14680,$vararg_buffer15);
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = $13 & 131072;
  $15 = ($14|0)==(0);
  if (!($15)) {
   _qh_fprintf($fp,9142,14696,$vararg_buffer17);
  }
  $16 = HEAP32[$3>>2]|0;
  $17 = $16 & 2048;
  $18 = ($17|0)==(0);
  if (!($18)) {
   _qh_fprintf($fp,9143,14712,$vararg_buffer19);
  }
  $19 = HEAP32[$3>>2]|0;
  $20 = $19 & 1024;
  $21 = ($20|0)==(0);
  if (!($21)) {
   _qh_fprintf($fp,9144,14728,$vararg_buffer21);
  }
  $22 = HEAP32[$3>>2]|0;
  $23 = $22 & 134217728;
  $24 = ($23|0)==(0);
  if (!($24)) {
   _qh_fprintf($fp,9145,14736,$vararg_buffer23);
  }
  $25 = HEAP32[$3>>2]|0;
  $26 = $25 & 524288;
  $27 = ($26|0)==(0);
  if ($27) {
   _qh_fprintf($fp,9146,14744,$vararg_buffer25);
  }
  $28 = HEAP32[$3>>2]|0;
  $29 = $28 & 16384;
  $30 = ($29|0)==(0);
  if (!($30)) {
   _qh_fprintf($fp,9147,14752,$vararg_buffer27);
  }
  $31 = HEAP32[$3>>2]|0;
  $32 = $31 & 16777216;
  $33 = ($32|0)==(0);
  if (!($33)) {
   _qh_fprintf($fp,9148,14760,$vararg_buffer29);
  }
  $34 = HEAP32[$3>>2]|0;
  $35 = $34 & 33554432;
  $36 = ($35|0)==(0);
  if (!($36)) {
   _qh_fprintf($fp,9149,14776,$vararg_buffer31);
  }
  $37 = HEAP32[$3>>2]|0;
  $38 = $37 & 268435456;
  $39 = ($38|0)==(0);
  if (!($39)) {
   _qh_fprintf($fp,9150,14792,$vararg_buffer33);
  }
  $40 = HEAP32[$3>>2]|0;
  $41 = $40 & 2097152;
  $42 = ($41|0)==(0);
  if (!($42)) {
   _qh_fprintf($fp,9151,14808,$vararg_buffer35);
  }
  $43 = HEAP32[$3>>2]|0;
  $44 = $43 & 12582912;
  $45 = ($44|0)==(4194304);
  if ($45) {
   _qh_fprintf($fp,9152,14824,$vararg_buffer37);
  }
  $46 = HEAP32[$3>>2]|0;
  $47 = $46 & 8388608;
  $48 = ($47|0)==(0);
  if (!($48)) {
   _qh_fprintf($fp,9153,14840,$vararg_buffer39);
  }
  $49 = HEAP32[$3>>2]|0;
  $50 = $49 & 536870912;
  $51 = ($50|0)==(0);
  if (!($51)) {
   _qh_fprintf($fp,9154,14856,$vararg_buffer41);
  }
  $52 = HEAP32[$3>>2]|0;
  $53 = $52 & 65536;
  $54 = ($53|0)==(0);
  if (!($54)) {
   _qh_fprintf($fp,9155,14872,$vararg_buffer43);
  }
  $55 = HEAP32[$3>>2]|0;
  $56 = $55 & 262144;
  $57 = ($56|0)==(0);
  if (!($57)) {
   _qh_fprintf($fp,9156,14888,$vararg_buffer45);
  }
  $58 = HEAP32[$3>>2]|0;
  $59 = $58 & 1073741824;
  $60 = ($59|0)==(0);
  if ($60) {
   $61 = $58;
  } else {
   _qh_fprintf($fp,9157,14904,$vararg_buffer47);
   $$pr = HEAP32[$3>>2]|0;
   $61 = $$pr;
  }
  $62 = ($61|0)<(0);
  if ($62) {
   _qh_fprintf($fp,9158,14920,$vararg_buffer49);
  }
  _qh_fprintf($fp,9159,56128,$vararg_buffer51);
  $63 = HEAP32[$3>>2]|0;
  $64 = $63 & 1048576;
  $65 = ($64|0)==(0);
  L64: do {
   if ($65) {
    $68 = HEAP32[(7656)>>2]|0;
    $69 = ($68|0)==(0);
    $70 = $63 & 2048;
    $71 = ($70|0)==(0);
    $or$cond4 = $71 | $69;
    do {
     if (!($or$cond4)) {
      $72 = ((($facet)) + 32|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(0|0);
      if ($74) {
       break;
      }
      $75 = ((($73)) + 76|0);
      $76 = HEAP32[$75>>2]|0;
      HEAP32[$vararg_buffer56>>2] = $76;
      _qh_fprintf($fp,9161,14960,$vararg_buffer56);
      break L64;
     }
    } while(0);
    $77 = HEAP32[$3>>2]|0;
    $78 = $77 & 1024;
    $79 = ($78|0)==(0);
    if (!($79)) {
     $80 = ((($facet)) + 32|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(0|0);
     $83 = ($81|0)==($facet|0);
     $or$cond5 = $82 | $83;
     if ($or$cond5) {
      break;
     }
     $84 = ((($81)) + 76|0);
     $85 = HEAP32[$84>>2]|0;
     HEAP32[$vararg_buffer59>>2] = $85;
     _qh_fprintf($fp,9162,14984,$vararg_buffer59);
     break;
    }
    $86 = $77 & 512;
    $87 = ($86|0)==(0);
    $88 = ((($facet)) + 32|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)!=(0|0);
    if ($87) {
     if (!($90)) {
      break;
     }
     $93 = ((($89)) + 76|0);
     $94 = HEAP32[$93>>2]|0;
     HEAP32[$vararg_buffer65>>2] = $94;
     _qh_fprintf($fp,9164,15080,$vararg_buffer65);
     break;
    } else {
     if (!($90)) {
      break;
     }
     $91 = ((($89)) + 76|0);
     $92 = HEAP32[$91>>2]|0;
     HEAP32[$vararg_buffer62>>2] = $92;
     _qh_fprintf($fp,9163,15032,$vararg_buffer62);
     break;
    }
   } else {
    $66 = ((($facet)) + 32|0);
    $67 = +HEAPF64[$66>>3];
    HEAPF64[$vararg_buffer53>>3] = $67;
    _qh_fprintf($fp,9160,14936,$vararg_buffer53);
   }
  } while(0);
  $95 = HEAP32[$3>>2]|0;
  $96 = $95 & 511;
  $97 = ($96|0)==(0);
  if (!($97)) {
   HEAP32[$vararg_buffer68>>2] = $96;
   _qh_fprintf($fp,9165,15112,$vararg_buffer68);
  }
  $98 = HEAP32[(5828)>>2]|0;
  $99 = ((($facet)) + 24|0);
  $100 = HEAP32[$99>>2]|0;
  _qh_printpointid($fp,15136,$98,$100,-1);
  $101 = ((($facet)) + 16|0);
  $102 = +HEAPF64[$101>>3];
  HEAPF64[$vararg_buffer71>>3] = $102;
  _qh_fprintf($fp,9166,15152,$vararg_buffer71);
  $103 = HEAP32[(7592)>>2]|0;
  $104 = ($103|0)==(1);
  if ($104) {
   label = 63;
  } else {
   $105 = ((($facet)) + 40|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0|0);
   if (!($107)) {
    label = 63;
   }
  }
  if ((label|0) == 63) {
   _qh_printcenter($fp,5,15176,$facet);
  }
  $108 = ((($facet)) + 8|0);
  $109 = +HEAPF64[$108>>3];
  $110 = +HEAPF64[(6952)>>3];
  $111 = $109 > $110;
  if ($111) {
   HEAPF64[$vararg_buffer74>>3] = $109;
   _qh_fprintf($fp,9167,15192,$vararg_buffer74);
  }
  $112 = ((($facet)) + 64|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($113|0)==(0|0);
  do {
   if (!($114)) {
    $115 = ((($113)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(0|0);
    if ($117) {
     break;
    }
    $118 = (_qh_setlast($113)|0);
    $119 = HEAP32[$112>>2]|0;
    $120 = (_qh_setsize($119)|0);
    $121 = ($120|0)<(6);
    do {
     if ($121) {
      $122 = (_qh_pointid($118)|0);
      HEAP32[$vararg_buffer77>>2] = $122;
      _qh_fprintf($fp,9168,15224,$vararg_buffer77);
      $123 = HEAP32[$112>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      }
      $125 = ((($123)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       break;
      } else {
       $129 = $126;$pointp$010 = $125;
      }
      while(1) {
       $128 = ((($pointp$010)) + 4|0);
       _qh_printpoint($fp,15264,$129);
       $130 = HEAP32[$128>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        break;
       } else {
        $129 = $130;$pointp$010 = $128;
       }
      }
     } else {
      $132 = HEAP32[$112>>2]|0;
      $133 = (_qh_setsize($132)|0);
      $134 = ($133|0)<(21);
      $135 = HEAP32[$112>>2]|0;
      if ($134) {
       _qh_printpoints($fp,15272,$135);
       break;
      } else {
       $136 = (_qh_setsize($135)|0);
       HEAP32[$vararg_buffer80>>2] = $136;
       _qh_fprintf($fp,9169,15296,$vararg_buffer80);
       _qh_printpoint($fp,15328,$118);
       break;
      }
     }
    } while(0);
    $137 = +HEAPF64[$facet>>3];
    HEAPF64[$vararg_buffer83>>3] = $137;
    _qh_fprintf($fp,9170,15344,$vararg_buffer83);
   }
  } while(0);
  $138 = ((($facet)) + 68|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139|0)==(0|0);
  do {
   if (!($140)) {
    $141 = ((($139)) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(0|0);
    if ($143) {
     break;
    }
    $144 = (_qh_setlast($139)|0);
    $145 = HEAP32[$138>>2]|0;
    $146 = (_qh_setsize($145)|0);
    $147 = ($146|0)<(6);
    do {
     if ($147) {
      $148 = (_qh_pointid($144)|0);
      HEAP32[$vararg_buffer86>>2] = $148;
      _qh_fprintf($fp,9171,15376,$vararg_buffer86);
      $149 = HEAP32[$138>>2]|0;
      $150 = ($149|0)==(0|0);
      if ($150) {
       break;
      }
      $151 = ((($149)) + 4|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==(0|0);
      if ($153) {
       break;
      } else {
       $155 = $152;$pointp$19 = $151;
      }
      while(1) {
       $154 = ((($pointp$19)) + 4|0);
       _qh_printpoint($fp,15264,$155);
       $156 = HEAP32[$154>>2]|0;
       $157 = ($156|0)==(0|0);
       if ($157) {
        break;
       } else {
        $155 = $156;$pointp$19 = $154;
       }
      }
     } else {
      $158 = HEAP32[$138>>2]|0;
      $159 = (_qh_setsize($158)|0);
      $160 = ($159|0)<(21);
      $161 = HEAP32[$138>>2]|0;
      if ($160) {
       _qh_printpoints($fp,15416,$161);
       break;
      } else {
       $162 = (_qh_setsize($161)|0);
       HEAP32[$vararg_buffer89>>2] = $162;
       _qh_fprintf($fp,9172,15440,$vararg_buffer89);
       _qh_printpoint($fp,15328,$144);
       break;
      }
     }
    } while(0);
    $163 = HEAP32[(43616)>>2]|0;
    $164 = (($163) + 1)|0;
    HEAP32[(43616)>>2] = $164;
    _qh_distplane($144,$facet,$dist);
    $165 = +HEAPF64[$dist>>3];
    HEAPF64[$vararg_buffer92>>3] = $165;
    _qh_fprintf($fp,9173,15472,$vararg_buffer92);
   }
  } while(0);
  $166 = ((($facet)) + 52|0);
  $167 = HEAP32[$166>>2]|0;
  _qh_printvertices($fp,15504,$167);
  _qh_fprintf($fp,9174,15520,$vararg_buffer95);
  $168 = ((($facet)) + 60|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)==(0|0);
  L120: do {
   if (!($170)) {
    $171 = ((($169)) + 4|0);
    $neighborp$0 = $171;
    while(1) {
     $172 = ((($neighborp$0)) + 4|0);
     $173 = HEAP32[$neighborp$0>>2]|0;
     $magicptr6 = $173;
     if ((($magicptr6|0) == 0)) {
      break L120;
     } else if ((($magicptr6|0) == 1)) {
      _qh_fprintf($fp,9176,15560,$vararg_buffer99);
      $neighborp$0 = $172;
      continue;
     } else if ((($magicptr6|0) == 2)) {
      _qh_fprintf($fp,9175,15552,$vararg_buffer97);
      $neighborp$0 = $172;
      continue;
     } else {
      $174 = ((($173)) + 76|0);
      $175 = HEAP32[$174>>2]|0;
      HEAP32[$vararg_buffer101>>2] = $175;
      _qh_fprintf($fp,9177,27968,$vararg_buffer101);
      $neighborp$0 = $172;
      continue;
     }
    }
   }
  } while(0);
  _qh_fprintf($fp,9178,56128,$vararg_buffer104);
  $176 = HEAP32[(7788)>>2]|0;
  HEAP32[(5656)>>2] = $176;
  STACKTOP = sp;return;
 }
}
function _qh_printfacetridges($fp,$facet) {
 $fp = $fp|0;
 $facet = $facet|0;
 var $$lcssa = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$lcssa59 = 0, $$lcssa61 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $neighborp$0 = 0, $neighborp$0$ph = 0, $numridges$019 = 0, $numridges$1$ph = 0, $numridges$2$ph = 0, $numridges$3 = 0, $or$cond = 0, $ridge$018 = 0, $ridgep$014 = 0, $ridgep$123 = 0, $ridgep$2 = 0, $ridgep$2$ph = 0, $ridgep$316 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $0 = ((($facet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2048;
 $3 = ($2|0)!=(0);
 $4 = HEAP32[(7656)>>2]|0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 & $5;
 if ($or$cond) {
  _qh_fprintf($fp,9179,15568,$vararg_buffer);
  $6 = ((($facet)) + 56|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = ((($7)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $14 = $10;$ridgep$014 = $9;
    while(1) {
     $12 = ((($ridgep$014)) + 4|0);
     $13 = ((($14)) + 12|0);
     $15 = HEAP32[$13>>2]|0;
     $16 = $15 & 16777215;
     HEAP32[$vararg_buffer1>>2] = $16;
     _qh_fprintf($fp,9180,15608,$vararg_buffer1);
     $17 = HEAP32[$12>>2]|0;
     $18 = ($17|0)==(0|0);
     if ($18) {
      break;
     } else {
      $14 = $17;$ridgep$014 = $12;
     }
    }
   }
  }
  _qh_fprintf($fp,9181,56128,$vararg_buffer3);
  STACKTOP = sp;return;
 }
 _qh_fprintf($fp,9182,15616,$vararg_buffer5);
 $19 = ((($facet)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = ((($20)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $27 = $23;$ridgep$123 = $22;
   while(1) {
    $25 = ((($ridgep$123)) + 4|0);
    $26 = ((($27)) + 12|0);
    $28 = HEAP32[$26>>2]|0;
    $29 = $28 & -16777217;
    HEAP32[$26>>2] = $29;
    $30 = HEAP32[$25>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     break;
    } else {
     $27 = $30;$ridgep$123 = $25;
    }
   }
  }
 }
 $32 = HEAP32[(5828)>>2]|0;
 $33 = ($32|0)==(3);
 L15: do {
  if ($33) {
   $34 = HEAP32[$19>>2]|0;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $numridges$3 = 0;
   } else {
    $numridges$019 = 0;$ridge$018 = $36;
    while(1) {
     $38 = ((($ridge$018)) + 12|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $39 & 16777216;
     $41 = ($40|0)==(0);
     if (!($41)) {
      $numridges$3 = $numridges$019;
      break L15;
     }
     $42 = $39 | 16777216;
     HEAP32[$38>>2] = $42;
     _qh_printridge($fp,$ridge$018);
     $43 = (($numridges$019) + 1)|0;
     $44 = (_qh_nextridge3d($ridge$018,$facet,0)|0);
     $45 = ($44|0)==(0|0);
     if ($45) {
      $numridges$3 = $43;
      break;
     } else {
      $numridges$019 = $43;$ridge$018 = $44;
     }
    }
   }
  } else {
   $46 = ((($facet)) + 60|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $numridges$3 = 0;
   } else {
    $49 = ((($47)) + 4|0);
    $neighborp$0$ph = $49;$numridges$1$ph = 0;
    L22: while(1) {
     $neighborp$0 = $neighborp$0$ph;
     while(1) {
      $50 = ((($neighborp$0)) + 4|0);
      $51 = HEAP32[$neighborp$0>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       $numridges$3 = $numridges$1$ph;
       break L15;
      }
      $53 = HEAP32[$19>>2]|0;
      $54 = ($53|0)==(0|0);
      if ($54) {
       $neighborp$0 = $50;
      } else {
       $$lcssa = $53;$$lcssa56 = $50;$$lcssa57 = $51;
       break;
      }
     }
     $55 = ((($$lcssa)) + 4|0);
     $numridges$2$ph = $numridges$1$ph;$ridgep$2$ph = $55;
     while(1) {
      $ridgep$2 = $ridgep$2$ph;
      while(1) {
       $56 = ((($ridgep$2)) + 4|0);
       $57 = HEAP32[$ridgep$2>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        $neighborp$0$ph = $$lcssa56;$numridges$1$ph = $numridges$2$ph;
        continue L22;
       }
       $59 = ((($57)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==($facet|0);
       if ($61) {
        $62 = ((($57)) + 8|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = $63;
       } else {
        $64 = $60;
       }
       $65 = ($64|0)==($$lcssa57|0);
       if ($65) {
        $$lcssa59 = $56;$$lcssa61 = $57;
        break;
       } else {
        $ridgep$2 = $56;
       }
      }
      $66 = ((($$lcssa61)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = $67 | 16777216;
      HEAP32[$66>>2] = $68;
      _qh_printridge($fp,$$lcssa61);
      $69 = (($numridges$2$ph) + 1)|0;
      $numridges$2$ph = $69;$ridgep$2$ph = $$lcssa59;
     }
    }
   }
  }
 } while(0);
 $70 = HEAP32[$19>>2]|0;
 $71 = (_qh_setsize($70)|0);
 $72 = ($numridges$3|0)==($71|0);
 if (!($72)) {
  _qh_fprintf($fp,9183,15632,$vararg_buffer7);
  $73 = HEAP32[$19>>2]|0;
  $74 = ($73|0)==(0|0);
  if (!($74)) {
   $75 = ((($73)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==(0|0);
   if (!($77)) {
    $80 = $76;$ridgep$316 = $75;
    while(1) {
     $78 = ((($ridgep$316)) + 4|0);
     $79 = ((($80)) + 12|0);
     $81 = HEAP32[$79>>2]|0;
     $82 = $81 & 16777215;
     HEAP32[$vararg_buffer9>>2] = $82;
     _qh_fprintf($fp,9184,15608,$vararg_buffer9);
     $83 = HEAP32[$78>>2]|0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      break;
     } else {
      $80 = $83;$ridgep$316 = $78;
     }
    }
   }
  }
  _qh_fprintf($fp,9185,56128,$vararg_buffer12);
 }
 $85 = HEAP32[$19>>2]|0;
 $86 = ($85|0)==(0|0);
 if ($86) {
  STACKTOP = sp;return;
 }
 $87 = ((($85)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0|0);
 if ($89) {
  STACKTOP = sp;return;
 }
 $90 = ((($87)) + 4|0);
 $92 = $88;$97 = $90;
 while(1) {
  $91 = ((($92)) + 12|0);
  $93 = HEAP32[$91>>2]|0;
  $94 = $93 & 16777216;
  $95 = ($94|0)==(0);
  if ($95) {
   _qh_printridge($fp,$92);
  }
  $96 = ((($97)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0|0);
  if ($99) {
   break;
  } else {
   $92 = $98;$97 = $96;
  }
 }
 STACKTOP = sp;return;
}
function _qh_printvertices($fp,$string,$vertices) {
 $fp = $fp|0;
 $string = $string|0;
 $vertices = $vertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vertexp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $string;
 _qh_fprintf($fp,9245,13032,$vararg_buffer);
 $0 = ($vertices|0)==(0|0);
 if ($0) {
  _qh_fprintf($fp,9247,56128,$vararg_buffer5);
  STACKTOP = sp;return;
 }
 $1 = ((($vertices)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _qh_fprintf($fp,9247,56128,$vararg_buffer5);
  STACKTOP = sp;return;
 } else {
  $6 = $2;$vertexp$01 = $1;
 }
 while(1) {
  $4 = ((($vertexp$01)) + 4|0);
  $5 = ((($6)) + 8|0);
  $7 = HEAP32[$5>>2]|0;
  $8 = (_qh_pointid($7)|0);
  $9 = ((($6)) + 16|0);
  $10 = $9;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 16777215;
  HEAP32[$vararg_buffer1>>2] = $8;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $16;
  _qh_fprintf($fp,9246,15656,$vararg_buffer1);
  $17 = HEAP32[$4>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   break;
  } else {
   $6 = $17;$vertexp$01 = $4;
  }
 }
 _qh_fprintf($fp,9247,56128,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _qh_printridge($fp,$ridge) {
 $fp = $fp|0;
 $ridge = $ridge|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = ((($ridge)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 16777215;
 HEAP32[$vararg_buffer>>2] = $2;
 _qh_fprintf($fp,9222,15672,$vararg_buffer);
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 33554432;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _qh_fprintf($fp,9223,14736,$vararg_buffer1);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 & 67108864;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _qh_fprintf($fp,9224,15688,$vararg_buffer3);
 }
 _qh_fprintf($fp,9225,56128,$vararg_buffer5);
 $9 = HEAP32[$ridge>>2]|0;
 _qh_printvertices($fp,15704,$9);
 $10 = ((($ridge)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = ((($ridge)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($11)) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($14)) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $17;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $19;
 _qh_fprintf($fp,9226,15728,$vararg_buffer7);
 STACKTOP = sp;return;
}
function _qh_printpoints_out($fp,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond25 = 0, $facet$021 = 0, $not$ = 0, $numpoints$0$ = 0, $numpoints$014 = 0, $numpoints$2 = 0;
 var $point$016 = 0, $point$113 = 0, $point_i$015 = 0, $point_i$112 = 0, $points = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $vertices = sp + 40|0;
 $points = sp + 36|0;
 $0 = HEAP32[(5836)>>2]|0;
 $1 = HEAP32[(7748)>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = (($2) + ($0))|0;
 $4 = (_qh_settemp($3)|0);
 HEAP32[$points>>2] = $4;
 _qh_setzero($4,0,$3);
 $5 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
 HEAP32[$vertices>>2] = $5;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($7)) + 4|0);
   $12 = $8;$20 = $10;
   while(1) {
    $11 = ((($12)) + 8|0);
    $13 = HEAP32[$11>>2]|0;
    $14 = (_qh_pointid($13)|0);
    $15 = ($14|0)>(-1);
    if ($15) {
     $16 = HEAP32[$11>>2]|0;
     $17 = HEAP32[$points>>2]|0;
     $18 = (((($17)) + 4|0) + ($14<<2)|0);
     HEAP32[$18>>2] = $16;
    }
    $19 = ((($20)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break;
    } else {
     $12 = $21;$20 = $19;
    }
   }
  }
 }
 $23 = HEAP32[(5356)>>2]|0;
 $24 = HEAP32[(5352)>>2]|0;
 $25 = $24 | $23;
 $26 = HEAP32[(5824)>>2]|0;
 $27 = $25 | $26;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $29 = ($facetlist|0)==(0|0);
  L12: do {
   if (!($29)) {
    $30 = ($printall|0)==(0);
    $facet$021 = $facetlist;
    while(1) {
     $31 = ((($facet$021)) + 48|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      break L12;
     }
     if ($30) {
      $34 = (_qh_skipfacet($facet$021)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       label = 13;
      }
     } else {
      label = 13;
     }
     if ((label|0) == 13) {
      label = 0;
      $36 = ((($facet$021)) + 68|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0|0);
      if (!($38)) {
       $39 = ((($37)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(0|0);
       if (!($41)) {
        $42 = ((($39)) + 4|0);
        $43 = $40;$49 = $42;
        while(1) {
         $44 = (_qh_pointid($43)|0);
         $45 = ($44|0)>(-1);
         if ($45) {
          $46 = HEAP32[$points>>2]|0;
          $47 = (((($46)) + 4|0) + ($44<<2)|0);
          HEAP32[$47>>2] = $43;
         }
         $48 = ((($49)) + 4|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ($50|0)==(0|0);
         if ($51) {
          break;
         } else {
          $43 = $50;$49 = $48;
         }
        }
       }
      }
     }
     $52 = HEAP32[$31>>2]|0;
     $53 = ($52|0)==(0|0);
     if ($53) {
      break;
     } else {
      $facet$021 = $52;
     }
    }
   }
  } while(0);
  $54 = ($facets|0)==(0|0);
  if (!($54)) {
   $55 = ((($facets)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if (!($57)) {
    $58 = ((($55)) + 4|0);
    $59 = ($printall|0)==(0);
    $60 = $56;$64 = $58;
    while(1) {
     if ($59) {
      $61 = (_qh_skipfacet($60)|0);
      $62 = ($61|0)==(0);
      if ($62) {
       label = 26;
      }
     } else {
      label = 26;
     }
     if ((label|0) == 26) {
      label = 0;
      $67 = ((($60)) + 68|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if (!($69)) {
       $70 = ((($68)) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)==(0|0);
       if (!($72)) {
        $73 = ((($70)) + 4|0);
        $74 = $71;$80 = $73;
        while(1) {
         $75 = (_qh_pointid($74)|0);
         $76 = ($75|0)>(-1);
         if ($76) {
          $77 = HEAP32[$points>>2]|0;
          $78 = (((($77)) + 4|0) + ($75<<2)|0);
          HEAP32[$78>>2] = $74;
         }
         $79 = ((($80)) + 4|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = ($81|0)==(0|0);
         if ($82) {
          break;
         } else {
          $74 = $81;$80 = $79;
         }
        }
       }
      }
     }
     $63 = ((($64)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==(0|0);
     if ($66) {
      break;
     } else {
      $60 = $65;$64 = $63;
     }
    }
   }
  }
 }
 _qh_settempfree($vertices);
 $83 = HEAP32[$points>>2]|0;
 $84 = ($83|0)==(0|0);
 if ($84) {
  $numpoints$2 = 0;
 } else {
  $85 = ((($83)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (_qh_setsize($83)|0);
  $88 = ($87|0)>(0);
  if ($88) {
   $89 = HEAP32[$points>>2]|0;
   $numpoints$014 = 0;$point$016 = $86;$point_i$015 = 0;
   while(1) {
    $not$ = ($point$016|0)!=(0|0);
    $90 = $not$&1;
    $numpoints$0$ = (($90) + ($numpoints$014))|0;
    $91 = (($point_i$015) + 1)|0;
    $92 = (((($89)) + 4|0) + ($91<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $exitcond25 = ($91|0)==($87|0);
    if ($exitcond25) {
     $numpoints$2 = $numpoints$0$;
     break;
    } else {
     $numpoints$014 = $numpoints$0$;$point$016 = $93;$point_i$015 = $91;
    }
   }
  } else {
   $numpoints$2 = 0;
  }
 }
 $94 = HEAP32[(5276)>>2]|0;
 $95 = ($94|0)==(0);
 $96 = HEAP32[(5828)>>2]|0;
 if ($95) {
  HEAP32[$vararg_buffer4>>2] = $96;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $numpoints$2;
  _qh_fprintf($fp,9219,12112,$vararg_buffer4);
 } else {
  $97 = (($96) + 1)|0;
  HEAP32[$vararg_buffer>>2] = (6116);
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = (5856);
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $numpoints$2;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $97;
  _qh_fprintf($fp,9218,12920,$vararg_buffer);
 }
 $98 = HEAP32[$points>>2]|0;
 $99 = ($98|0)==(0|0);
 if (!($99)) {
  $100 = ((($98)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_qh_setsize($98)|0);
  $103 = ($102|0)>(0);
  if ($103) {
   $point$113 = $101;$point_i$112 = 0;
   while(1) {
    $104 = ($point$113|0)==(0|0);
    if (!($104)) {
     $105 = HEAP32[(5276)>>2]|0;
     $106 = ($105|0)==(0);
     if (!($106)) {
      _qh_fprintf($fp,9220,12584,$vararg_buffer8);
     }
     _qh_printpoint($fp,0,$point$113);
    }
    $107 = (($point_i$112) + 1)|0;
    $108 = HEAP32[$points>>2]|0;
    $109 = (((($108)) + 4|0) + ($107<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $exitcond = ($107|0)==($102|0);
    if ($exitcond) {
     break;
    } else {
     $point$113 = $110;$point_i$112 = $107;
    }
   }
  }
 }
 $111 = HEAP32[(5276)>>2]|0;
 $112 = ($111|0)==(0);
 if ($112) {
  _qh_settempfree($points);
  STACKTOP = sp;return;
 }
 _qh_fprintf($fp,9221,14464,$vararg_buffer10);
 _qh_settempfree($points);
 STACKTOP = sp;return;
}
function _qh_printvneighbors($fp,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coplanar_points = 0, $exitcond = 0, $facet$014 = 0, $numcoplanars = 0, $numfacets = 0, $numridges = 0, $numsimplicial = 0, $numtricoplanars = 0, $pointp$012 = 0, $pointp$19 = 0, $totneighbors = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vertex$07 = 0, $vertex_i$06 = 0, $vertex_points = 0, $vertexp$017 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $numfacets = sp + 72|0;
 $numsimplicial = sp + 76|0;
 $numridges = sp + 48|0;
 $totneighbors = sp + 52|0;
 $numcoplanars = sp + 56|0;
 $numtricoplanars = sp + 60|0;
 $vertices = sp + 64|0;
 $vertex_points = sp + 68|0;
 $coplanar_points = sp + 44|0;
 $0 = HEAP32[(5836)>>2]|0;
 $1 = HEAP32[(7748)>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = (($2) + ($0))|0;
 _qh_countfacets($facetlist,$facets,$printall,$numfacets,$numsimplicial,$totneighbors,$numridges,$numcoplanars,$numtricoplanars);
 HEAP32[$vararg_buffer>>2] = $3;
 _qh_fprintf($fp,9248,12104,$vararg_buffer);
 _qh_vertexneighbors();
 $4 = (_qh_facetvertices($facetlist,$facets,$printall)|0);
 HEAP32[$vertices>>2] = $4;
 $5 = (_qh_settemp($3)|0);
 HEAP32[$vertex_points>>2] = $5;
 $6 = (_qh_settemp($3)|0);
 HEAP32[$coplanar_points>>2] = $6;
 $7 = HEAP32[$vertex_points>>2]|0;
 _qh_setzero($7,0,$3);
 $8 = HEAP32[$coplanar_points>>2]|0;
 _qh_setzero($8,0,$3);
 $9 = HEAP32[$vertices>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $17 = $12;$vertexp$017 = $11;
   while(1) {
    $14 = ((($vertexp$017)) + 4|0);
    $15 = HEAP32[$vertex_points>>2]|0;
    $16 = ((($17)) + 8|0);
    $18 = HEAP32[$16>>2]|0;
    _qh_point_add($15,$18,$17);
    $19 = HEAP32[$14>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break;
    } else {
     $17 = $19;$vertexp$017 = $14;
    }
   }
  }
 }
 $21 = ($facetlist|0)==(0|0);
 L6: do {
  if (!($21)) {
   $facet$014 = $facetlist;
   while(1) {
    $22 = ((($facet$014)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if ($24) {
     break L6;
    }
    $25 = ((($facet$014)) + 68|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if (!($27)) {
     $28 = ((($26)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0|0);
     if (!($30)) {
      $33 = $29;$pointp$012 = $28;
      while(1) {
       $31 = ((($pointp$012)) + 4|0);
       $32 = HEAP32[$coplanar_points>>2]|0;
       _qh_point_add($32,$33,$facet$014);
       $34 = HEAP32[$31>>2]|0;
       $35 = ($34|0)==(0|0);
       if ($35) {
        break;
       } else {
        $33 = $34;$pointp$012 = $31;
       }
      }
     }
    }
    $36 = HEAP32[$22>>2]|0;
    $37 = ($36|0)==(0|0);
    if ($37) {
     break;
    } else {
     $facet$014 = $36;
    }
   }
  }
 } while(0);
 $38 = ($facets|0)==(0|0);
 if (!($38)) {
  $39 = ((($facets)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   $42 = ((($39)) + 4|0);
   $44 = $40;$48 = $42;
   while(1) {
    $43 = ((($44)) + 68|0);
    $45 = HEAP32[$43>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $51 = ((($45)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if (!($53)) {
      $56 = $52;$pointp$19 = $51;
      while(1) {
       $54 = ((($pointp$19)) + 4|0);
       $55 = HEAP32[$coplanar_points>>2]|0;
       _qh_point_add($55,$56,$44);
       $57 = HEAP32[$54>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        break;
       } else {
        $56 = $57;$pointp$19 = $54;
       }
      }
     }
    }
    $47 = ((($48)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     break;
    } else {
     $44 = $49;$48 = $47;
    }
   }
  }
 }
 $59 = HEAP32[$vertex_points>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  _qh_settempfree($coplanar_points);
  _qh_settempfree($vertex_points);
  _qh_settempfree($vertices);
  STACKTOP = sp;return;
 }
 $61 = ((($59)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (_qh_setsize($59)|0);
 $64 = ($63|0)>(0);
 if ($64) {
  $vertex$07 = $62;$vertex_i$06 = 0;
 } else {
  _qh_settempfree($coplanar_points);
  _qh_settempfree($vertex_points);
  _qh_settempfree($vertices);
  STACKTOP = sp;return;
 }
 while(1) {
  $65 = ($vertex$07|0)==(0|0);
  do {
   if ($65) {
    $93 = HEAP32[$coplanar_points>>2]|0;
    $94 = (((($93)) + 4|0) + ($vertex_i$06<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     _qh_fprintf($fp,9253,15776,$vararg_buffer12);
     break;
    }
    $97 = ((($95)) + 72|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $101 = ((($95)) + 76|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (0 - ($102))|0;
     $104 = $103;
    } else {
     $100 = (($98) + -1)|0;
     $104 = $100;
    }
    HEAP32[$vararg_buffer9>>2] = $104;
    _qh_fprintf($fp,9252,15768,$vararg_buffer9);
   } else {
    $66 = ((($vertex$07)) + 12|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_qh_setsize($67)|0);
    HEAP32[$vararg_buffer1>>2] = $68;
    _qh_fprintf($fp,9249,15760,$vararg_buffer1);
    $69 = HEAP32[(5828)>>2]|0;
    $70 = ($69|0)==(3);
    if ($70) {
     _qh_order_vertexneighbors($vertex$07);
    } else {
     $71 = ($69|0)>(3);
     if ($71) {
      $72 = HEAP32[$66>>2]|0;
      $73 = ((($72)) + 4|0);
      _qsort($73,$68,4,1);
     }
    }
    $74 = HEAP32[$66>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     $76 = ((($74)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($77|0)==(0|0);
     if (!($78)) {
      $79 = ((($76)) + 4|0);
      $81 = $77;$90 = $79;
      while(1) {
       $80 = ((($81)) + 72|0);
       $82 = HEAP32[$80>>2]|0;
       $83 = ($82|0)==(0);
       if ($83) {
        $85 = ((($81)) + 76|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = (0 - ($86))|0;
        $88 = $87;
       } else {
        $84 = (($82) + -1)|0;
        $88 = $84;
       }
       HEAP32[$vararg_buffer4>>2] = $88;
       _qh_fprintf($fp,9250,36672,$vararg_buffer4);
       $89 = ((($90)) + 4|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ($91|0)==(0|0);
       if ($92) {
        break;
       } else {
        $81 = $91;$90 = $89;
       }
      }
     }
    }
    _qh_fprintf($fp,9251,56128,$vararg_buffer7);
   }
  } while(0);
  $105 = (($vertex_i$06) + 1)|0;
  $106 = HEAP32[$vertex_points>>2]|0;
  $107 = (((($106)) + 4|0) + ($105<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $exitcond = ($105|0)==($63|0);
  if ($exitcond) {
   break;
  } else {
   $vertex$07 = $108;$vertex_i$06 = $105;
  }
 }
 _qh_settempfree($coplanar_points);
 _qh_settempfree($vertex_points);
 _qh_settempfree($vertices);
 STACKTOP = sp;return;
}
function _qh_printvoronoi($fp,$format,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $$lcssa = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa119 = 0, $$lcssa122 = 0, $$lcssa124 = 0, $$lcssa127 = 0, $$lcssa128 = 0, $$numneighbors$0 = 0, $$numneighbors$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond69 = 0, $facet$035 = 0, $facetp$0 = 0, $facetp$0$ph = 0, $isLower = 0;
 var $k$0 = 0, $k$039 = 0, $k$040 = 0, $k$1 = 0, $k$142 = 0, $k$143 = 0, $neighborp$0 = 0, $neighborp$0$ph = 0, $neighborp$1 = 0, $neighborp$1$ph = 0, $not$ = 0, $numcenters = 0, $numinf$0 = 0, $numinf$0$lcssa = 0, $numinf$0$lcssa125 = 0, $numinf$0$ph = 0, $numinf$2 = 0, $numinf$2$lcssa115 = 0, $numinf$2$ph = 0, $numinf$3 = 0;
 var $numinf$4$ph29 = 0, $numneighbors$0$ph = 0, $numneighbors$0$ph$lcssa = 0, $numneighbors$2$ph = 0, $numneighbors$3 = 0, $numneighbors$3$ = 0, $numvertices$047 = 0, $numvertices$1 = 0, $numvertices$2 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr34 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vertex$050 = 0, $vertex$132 = 0, $vertex_i$048 = 0, $vertex_i$131 = 0;
 var $vertices = 0, $vid$034 = 0, $vid$1 = 0, $vid$2 = 0, $vid$3 = 0, $vid$4$ph = 0, $vid$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer49 = sp + 8|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp;
 $vararg_buffer21 = sp + 24|0;
 $vararg_buffer17 = sp + 80|0;
 $vararg_buffer15 = sp + 16|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer2 = sp + 56|0;
 $vararg_buffer = sp + 72|0;
 $numcenters = sp + 148|0;
 $vertices = sp + 140|0;
 $isLower = sp + 144|0;
 $0 = HEAP32[(7552)>>2]|0;
 $1 = (_qh_markvoronoi($facetlist,$facets,$printall,$isLower,$numcenters)|0);
 HEAP32[$vertices>>2] = $1;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $numvertices$2 = 0;
 } else {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_qh_setsize($1)|0);
  $6 = ($5|0)>(0);
  if ($6) {
   $numvertices$047 = 0;$vertex$050 = $4;$vertex_i$048 = 0;
   while(1) {
    $7 = ($vertex$050|0)==(0|0);
    if ($7) {
     $numvertices$1 = $numvertices$047;
    } else {
     $8 = (($numvertices$047) + 1)|0;
     $9 = ((($vertex$050)) + 12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ($10|0)==(0|0);
     if ($11) {
      $numvertices$1 = $8;
     } else {
      $12 = ((($10)) + 4|0);
      $neighborp$0$ph = $12;$numinf$0$ph = 0;$numneighbors$0$ph = 0;
      L8: while(1) {
       $neighborp$0 = $neighborp$0$ph;$numinf$0 = $numinf$0$ph;
       while(1) {
        $13 = ((($neighborp$0)) + 4|0);
        $14 = HEAP32[$neighborp$0>>2]|0;
        $15 = ($14|0)==(0|0);
        if ($15) {
         $numinf$0$lcssa = $numinf$0;$numneighbors$0$ph$lcssa = $numneighbors$0$ph;
         break L8;
        }
        $16 = ((($14)) + 72|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==(0);
        if ($18) {
         $neighborp$0 = $13;$numinf$0 = 1;
        } else {
         $$lcssa127 = $13;$$lcssa128 = $17;$numinf$0$lcssa125 = $numinf$0;
         break;
        }
       }
       $19 = ($$lcssa128>>>0)<($0>>>0);
       $20 = $19&1;
       $$numneighbors$0 = (($20) + ($numneighbors$0$ph))|0;
       $neighborp$0$ph = $$lcssa127;$numinf$0$ph = $numinf$0$lcssa125;$numneighbors$0$ph = $$numneighbors$0;
      }
      $21 = ($numinf$0$lcssa|0)==(0);
      $22 = ($numneighbors$0$ph$lcssa|0)!=(0);
      $or$cond = $22 | $21;
      if ($or$cond) {
       $numvertices$1 = $8;
      } else {
       $23 = HEAP32[$vertices>>2]|0;
       $24 = (((($23)) + 4|0) + ($vertex_i$048<<2)|0);
       HEAP32[$24>>2] = 0;
       $numvertices$1 = $numvertices$047;
      }
     }
    }
    $25 = (($vertex_i$048) + 1)|0;
    $26 = HEAP32[$vertices>>2]|0;
    $27 = (((($26)) + 4|0) + ($25<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $exitcond69 = ($25|0)==($5|0);
    if ($exitcond69) {
     $numvertices$2 = $numvertices$1;
     break;
    } else {
     $numvertices$047 = $numvertices$1;$vertex$050 = $28;$vertex_i$048 = $25;
    }
   }
  } else {
   $numvertices$2 = 0;
  }
 }
 $29 = ($format|0)==(7);
 if ($29) {
  $30 = HEAP32[$numcenters>>2]|0;
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $numvertices$2;
  _qh_fprintf($fp,9254,15784,$vararg_buffer);
  $31 = HEAP32[(5828)>>2]|0;
  $k$039 = (($31) + -1)|0;
  $32 = ($k$039|0)==(0);
  if (!($32)) {
   $k$040 = $k$039;
   while(1) {
    HEAPF64[$vararg_buffer7>>3] = 0.0;
    _qh_fprintf($fp,9256,11216,$vararg_buffer7);
    $k$0 = (($k$040) + -1)|0;
    $40 = ($k$0|0)==(0);
    if ($40) {
     break;
    } else {
     $k$040 = $k$0;
    }
   }
  }
  _qh_fprintf($fp,9257,15872,$vararg_buffer10);
 } else {
  $33 = HEAP32[(5828)>>2]|0;
  $34 = (($33) + -1)|0;
  $35 = HEAP32[$numcenters>>2]|0;
  $36 = HEAP32[$vertices>>2]|0;
  $37 = (_qh_setsize($36)|0);
  HEAP32[$vararg_buffer2>>2] = $34;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $35;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $37;
  _qh_fprintf($fp,9255,15856,$vararg_buffer2);
  $38 = HEAP32[(5828)>>2]|0;
  $k$142 = (($38) + -1)|0;
  $39 = ($k$142|0)==(0);
  if (!($39)) {
   $k$143 = $k$142;
   while(1) {
    HEAPF64[$vararg_buffer12>>3] = -10.101000000000001;
    _qh_fprintf($fp,9258,11216,$vararg_buffer12);
    $k$1 = (($k$143) + -1)|0;
    $41 = ($k$1|0)==(0);
    if ($41) {
     break;
    } else {
     $k$143 = $k$1;
    }
   }
  }
  _qh_fprintf($fp,9259,56128,$vararg_buffer15);
 }
 $42 = ($facetlist|0)==(0|0);
 L30: do {
  if ($42) {
   $vid$3 = 1;
  } else {
   $facet$035 = $facetlist;$vid$034 = 1;
   while(1) {
    $43 = ((($facet$035)) + 48|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(0|0);
    if ($45) {
     $vid$3 = $vid$034;
     break L30;
    }
    $46 = ((($facet$035)) + 72|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0);
    $49 = ($47>>>0)<($0>>>0);
    $or$cond2 = $48 & $49;
    if ($or$cond2) {
     if ($29) {
      $50 = (($vid$034) + 1)|0;
      $51 = ((($facet$035)) + 76|0);
      $52 = HEAP32[$51>>2]|0;
      HEAP32[$vararg_buffer17>>2] = $vid$034;
      $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
      HEAP32[$vararg_ptr20>>2] = $52;
      _qh_fprintf($fp,9260,15896,$vararg_buffer17);
      $vid$1 = $50;
     } else {
      $vid$1 = $vid$034;
     }
     _qh_printcenter($fp,$format,0,$facet$035);
     $vid$2 = $vid$1;
    } else {
     $vid$2 = $vid$034;
    }
    $53 = HEAP32[$43>>2]|0;
    $54 = ($53|0)==(0|0);
    if ($54) {
     $vid$3 = $vid$2;
     break;
    } else {
     $facet$035 = $53;$vid$034 = $vid$2;
    }
   }
  }
 } while(0);
 $55 = ($facets|0)==(0|0);
 L41: do {
  if (!($55)) {
   $56 = ((($facets)) + 4|0);
   $facetp$0$ph = $56;$vid$4$ph = $vid$3;
   while(1) {
    $facetp$0 = $facetp$0$ph;
    while(1) {
     $57 = ((($facetp$0)) + 4|0);
     $58 = HEAP32[$facetp$0>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      break L41;
     }
     $60 = ((($58)) + 72|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)!=(0);
     $63 = ($61>>>0)<($0>>>0);
     $or$cond3 = $62 & $63;
     if ($or$cond3) {
      $$lcssa122 = $57;$$lcssa124 = $58;
      break;
     } else {
      $facetp$0 = $57;
     }
    }
    if ($29) {
     $64 = (($vid$4$ph) + 1)|0;
     $65 = ((($$lcssa124)) + 76|0);
     $66 = HEAP32[$65>>2]|0;
     HEAP32[$vararg_buffer21>>2] = $vid$4$ph;
     $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
     HEAP32[$vararg_ptr24>>2] = $66;
     _qh_fprintf($fp,9261,15896,$vararg_buffer21);
     $vid$5 = $64;
    } else {
     $vid$5 = $vid$4$ph;
    }
    _qh_printcenter($fp,$format,0,$$lcssa124);
    $facetp$0$ph = $$lcssa122;$vid$4$ph = $vid$5;
   }
  }
 } while(0);
 $67 = HEAP32[$vertices>>2]|0;
 $68 = ($67|0)==(0|0);
 if (!($68)) {
  $69 = ((($67)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (_qh_setsize($67)|0);
  $72 = ($71|0)>(0);
  if ($72) {
   $vertex$132 = $70;$vertex_i$131 = 0;
   while(1) {
    $73 = ($vertex$132|0)!=(0|0);
    L57: do {
     if ($73) {
      $74 = HEAP32[(5828)>>2]|0;
      $75 = ($74|0)==(3);
      if ($75) {
       _qh_order_vertexneighbors($vertex$132);
      } else {
       $76 = ($74|0)>(3);
       if ($76) {
        $77 = ((($vertex$132)) + 12|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ((($78)) + 4|0);
        $80 = (_qh_setsize($78)|0);
        _qsort($79,$80,4,1);
       }
      }
      $81 = ((($vertex$132)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0|0);
      if ($83) {
       $numinf$3 = 0;$numneighbors$3 = 0;
      } else {
       $84 = ((($82)) + 4|0);
       $neighborp$1$ph = $84;$numinf$2$ph = 0;$numneighbors$2$ph = 0;
       while(1) {
        $neighborp$1 = $neighborp$1$ph;$numinf$2 = $numinf$2$ph;
        while(1) {
         $85 = ((($neighborp$1)) + 4|0);
         $86 = HEAP32[$neighborp$1>>2]|0;
         $87 = ($86|0)==(0|0);
         if ($87) {
          $numinf$3 = $numinf$2;$numneighbors$3 = $numneighbors$2$ph;
          break L57;
         }
         $88 = ((($86)) + 72|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = ($89|0)==(0);
         if ($90) {
          $neighborp$1 = $85;$numinf$2 = 1;
         } else {
          $$lcssa = $89;$$lcssa116 = $85;$numinf$2$lcssa115 = $numinf$2;
          break;
         }
        }
        $91 = ($$lcssa>>>0)<($0>>>0);
        $92 = $91&1;
        $$numneighbors$2 = (($92) + ($numneighbors$2$ph))|0;
        $neighborp$1$ph = $$lcssa116;$numinf$2$ph = $numinf$2$lcssa115;$numneighbors$2$ph = $$numneighbors$2;
       }
      }
     } else {
      $numinf$3 = 0;$numneighbors$3 = 0;
     }
    } while(0);
    do {
     if ($29) {
      if (!($73)) {
       HEAP32[$vararg_buffer35>>2] = $vertex_i$131;
       _qh_fprintf($fp,9265,15928,$vararg_buffer35);
       break;
      }
      HEAP32[$vararg_buffer25>>2] = $numneighbors$3;
      _qh_fprintf($fp,9262,15760,$vararg_buffer25);
      $93 = ((($vertex$132)) + 12|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($94|0)==(0|0);
      if (!($95)) {
       $96 = ((($94)) + 4|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = ($97|0)==(0|0);
       if (!($98)) {
        $99 = ((($96)) + 4|0);
        $101 = $97;$106 = $99;
        while(1) {
         $100 = ((($101)) + 72|0);
         $102 = HEAP32[$100>>2]|0;
         $103 = ($102|0)!=(0);
         $104 = ($102>>>0)<($0>>>0);
         $or$cond4 = $103 & $104;
         if ($or$cond4) {
          HEAP32[$vararg_buffer28>>2] = $102;
          _qh_fprintf($fp,9263,36672,$vararg_buffer28);
         }
         $105 = ((($106)) + 4|0);
         $107 = HEAP32[$106>>2]|0;
         $108 = ($107|0)==(0|0);
         if ($108) {
          break;
         } else {
          $101 = $107;$106 = $105;
         }
        }
       }
      }
      $109 = ((($vertex$132)) + 16|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = $115 & 16777215;
      HEAP32[$vararg_buffer31>>2] = $vertex_i$131;
      $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
      HEAP32[$vararg_ptr34>>2] = $116;
      _qh_fprintf($fp,9264,15912,$vararg_buffer31);
     } else {
      $not$ = ($numinf$3|0)!=(0);
      $117 = $not$&1;
      $numneighbors$3$ = (($117) + ($numneighbors$3))|0;
      HEAP32[$vararg_buffer38>>2] = $numneighbors$3$;
      _qh_fprintf($fp,9266,15760,$vararg_buffer38);
      L87: do {
       if ($73) {
        $118 = ((($vertex$132)) + 12|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = ($119|0)==(0|0);
        if (!($120)) {
         $121 = ((($119)) + 4|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ($122|0)==(0|0);
         if (!($123)) {
          $124 = ((($121)) + 4|0);
          $142 = $122;$143 = $124;$numinf$4$ph29 = $numinf$3;
          while(1) {
           $126 = $142;$135 = $143;
           while(1) {
            $125 = ((($126)) + 72|0);
            $127 = HEAP32[$125>>2]|0;
            $128 = ($127|0)==(0);
            if ($128) {
             $$lcssa117 = $135;$$lcssa119 = $127;
             break;
            }
            $133 = ($127>>>0)<($0>>>0);
            if ($133) {
             HEAP32[$vararg_buffer44>>2] = $127;
             _qh_fprintf($fp,9268,36672,$vararg_buffer44);
            }
            $134 = ((($135)) + 4|0);
            $136 = HEAP32[$135>>2]|0;
            $137 = ($136|0)==(0|0);
            if ($137) {
             break L87;
            } else {
             $126 = $136;$135 = $134;
            }
           }
           $129 = ($numinf$4$ph29|0)==(0);
           if (!($129)) {
            HEAP32[$vararg_buffer41>>2] = $$lcssa119;
            _qh_fprintf($fp,9267,36672,$vararg_buffer41);
           }
           $130 = ((($$lcssa117)) + 4|0);
           $131 = HEAP32[$$lcssa117>>2]|0;
           $132 = ($131|0)==(0|0);
           if ($132) {
            break;
           } else {
            $142 = $131;$143 = $130;$numinf$4$ph29 = 0;
           }
          }
         }
        }
       }
      } while(0);
      _qh_fprintf($fp,9269,56128,$vararg_buffer47);
     }
    } while(0);
    $138 = (($vertex_i$131) + 1)|0;
    $139 = HEAP32[$vertices>>2]|0;
    $140 = (((($139)) + 4|0) + ($138<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $exitcond = ($138|0)==($71|0);
    if ($exitcond) {
     break;
    } else {
     $vertex$132 = $141;$vertex_i$131 = $138;
    }
   }
  }
 }
 if (!($29)) {
  _qh_settempfree($vertices);
  STACKTOP = sp;return;
 }
 _qh_fprintf($fp,9270,14456,$vararg_buffer49);
 _qh_settempfree($vertices);
 STACKTOP = sp;return;
}
function _qh_printvdiagram($fp,$format,$facetlist,$facets,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $innerouter$0 = 0, $isLower = 0, $numcenters = 0, $printvridge$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 20|0;
 $numcenters = sp + 12|0;
 $isLower = sp + 16|0;
 if ((($format|0) == 26)) {
  $innerouter$0 = 0;$printvridge$0 = 1;
 } else if ((($format|0) == 9)) {
  $innerouter$0 = 1;$printvridge$0 = 2;
 } else if ((($format|0) == 12)) {
  $innerouter$0 = 2;$printvridge$0 = 2;
 } else {
  $0 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $format;
  _qh_fprintf($0,6219,15960,$vararg_buffer);
  _qh_errexit(1,0,0);
  // unreachable;
 }
 $1 = (_qh_markvoronoi($facetlist,$facets,$printall,$isLower,$numcenters)|0);
 HEAP32[$vertices>>2] = $1;
 $2 = (_qh_printvdiagram2(0,0,$1,$innerouter$0,0)|0);
 HEAP32[$vararg_buffer1>>2] = $2;
 _qh_fprintf($fp,9231,12104,$vararg_buffer1);
 $3 = HEAP32[$vertices>>2]|0;
 (_qh_printvdiagram2($fp,$printvridge$0,$3,$innerouter$0,1)|0);
 _qh_settempfree($vertices);
 STACKTOP = sp;return;
}
function _qh_printline3geom($fp,$pointA,$pointB,$color) {
 $fp = $fp|0;
 $pointA = $pointA|0;
 $pointB = $pointB|0;
 $color = $color|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $pA = 0, $pB = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 144|0;
 $vararg_buffer23 = sp + 136|0;
 $vararg_buffer20 = sp + 128|0;
 $vararg_buffer17 = sp + 120|0;
 $vararg_buffer14 = sp + 112|0;
 $vararg_buffer12 = sp + 104|0;
 $vararg_buffer9 = sp + 96|0;
 $vararg_buffer6 = sp + 56|0;
 $vararg_buffer3 = sp + 48|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $pA = sp;
 $pB = sp + 64|0;
 _qh_projectdim3($pointA,$pA);
 _qh_projectdim3($pointB,$pB);
 $0 = +HEAPF64[$pA>>3];
 $1 = +HEAPF64[$pB>>3];
 $2 = $0 - $1;
 $3 = (+Math_abs((+$2)));
 $4 = $3 > 0.001;
 if ($4) {
  label = 4;
 } else {
  $5 = ((($pA)) + 8|0);
  $6 = +HEAPF64[$5>>3];
  $7 = ((($pB)) + 8|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $6 - $8;
  $10 = (+Math_abs((+$9)));
  $11 = $10 > 0.001;
  if ($11) {
   label = 4;
  } else {
   $12 = ((($pA)) + 16|0);
   $13 = +HEAPF64[$12>>3];
   $14 = ((($pB)) + 16|0);
   $15 = +HEAPF64[$14>>3];
   $16 = $13 - $15;
   $17 = (+Math_abs((+$16)));
   $18 = $17 > 0.001;
   if ($18) {
    label = 4;
   } else {
    _qh_fprintf($fp,9207,16048,$vararg_buffer12);
   }
  }
 }
 if ((label|0) == 4) {
  _qh_fprintf($fp,9204,16032,$vararg_buffer);
  $19 = +HEAPF64[$pB>>3];
  HEAPF64[$vararg_buffer1>>3] = $19;
  _qh_fprintf($fp,9205,13136,$vararg_buffer1);
  $20 = ((($pB)) + 8|0);
  $21 = +HEAPF64[$20>>3];
  HEAPF64[$vararg_buffer3>>3] = $21;
  _qh_fprintf($fp,9205,13136,$vararg_buffer3);
  $22 = ((($pB)) + 16|0);
  $23 = +HEAPF64[$22>>3];
  HEAPF64[$vararg_buffer6>>3] = $23;
  _qh_fprintf($fp,9205,13136,$vararg_buffer6);
  $24 = (_qh_pointid($pointB)|0);
  HEAP32[$vararg_buffer9>>2] = $24;
  _qh_fprintf($fp,9206,13144,$vararg_buffer9);
 }
 $25 = +HEAPF64[$pA>>3];
 HEAPF64[$vararg_buffer14>>3] = $25;
 _qh_fprintf($fp,9208,13136,$vararg_buffer14);
 $26 = ((($pA)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 HEAPF64[$vararg_buffer17>>3] = $27;
 _qh_fprintf($fp,9208,13136,$vararg_buffer17);
 $28 = ((($pA)) + 16|0);
 $29 = +HEAPF64[$28>>3];
 HEAPF64[$vararg_buffer20>>3] = $29;
 _qh_fprintf($fp,9208,13136,$vararg_buffer20);
 $30 = (_qh_pointid($pointA)|0);
 HEAP32[$vararg_buffer23>>2] = $30;
 _qh_fprintf($fp,9209,13144,$vararg_buffer23);
 $31 = +HEAPF64[$color>>3];
 $32 = ((($color)) + 8|0);
 $33 = +HEAPF64[$32>>3];
 $34 = ((($color)) + 16|0);
 $35 = +HEAPF64[$34>>3];
 HEAPF64[$vararg_buffer26>>3] = $31;
 $vararg_ptr29 = ((($vararg_buffer26)) + 8|0);
 HEAPF64[$vararg_ptr29>>3] = $33;
 $vararg_ptr30 = ((($vararg_buffer26)) + 16|0);
 HEAPF64[$vararg_ptr30>>3] = $35;
 _qh_fprintf($fp,9210,16064,$vararg_buffer26);
 STACKTOP = sp;return;
}
function _qh_printneighborhood($fp,$format,$facetA,$facetB,$printall) {
 $fp = $fp|0;
 $format = $format|0;
 $facetA = $facetA|0;
 $facetB = $facetB|0;
 $printall = $printall|0;
 var $$facetB = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$01 = 0;
 var $facets = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $facets = sp;
 $0 = ($format|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[(7500)>>2]|0;
 _qh_findgood_all($1);
 $2 = ($facetA|0)==($facetB|0);
 $$facetB = $2 ? 0 : $facetB;
 $3 = ((($facetA)) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_qh_setsize($4)|0);
 $6 = $5 << 1;
 $7 = (($6) + 2)|0;
 $8 = (_qh_settemp($7)|0);
 HEAP32[$facets>>2] = $8;
 $9 = HEAP32[(7720)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(7720)>>2] = $10;
 $11 = ($facetA|0)==(0|0);
 if (!($11)) {
  $12 = ($printall|0)==(0);
  $13 = ($$facetB|0)==(0|0);
  $facet$01 = $facetA;
  while(1) {
   $14 = ((($facet$01)) + 72|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[(7720)>>2]|0;
   $17 = ($15|0)==($16|0);
   if (!($17)) {
    HEAP32[$14>>2] = $16;
    _qh_setappend($facets,$facet$01);
   }
   $18 = ((($facet$01)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = ((($19)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $24 = ((($21)) + 4|0);
     $26 = $22;$31 = $24;
     while(1) {
      $25 = ((($26)) + 72|0);
      $27 = HEAP32[$25>>2]|0;
      $28 = HEAP32[(7720)>>2]|0;
      $29 = ($27|0)==($28|0);
      do {
       if (!($29)) {
        HEAP32[$25>>2] = $28;
        if ($12) {
         $34 = (_qh_skipfacet($26)|0);
         $35 = ($34|0)==(0);
         if (!($35)) {
          break;
         }
        }
        _qh_setappend($facets,$26);
       }
      } while(0);
      $30 = ((($31)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)==(0|0);
      if ($33) {
       break;
      } else {
       $26 = $32;$31 = $30;
      }
     }
    }
   }
   $not$ = ($facet$01|0)!=($facetA|0);
   $36 = $13 | $not$;
   if ($36) {
    break;
   } else {
    $facet$01 = $$facetB;
   }
  }
 }
 $37 = HEAP32[$facets>>2]|0;
 _qh_printfacets($fp,$format,0,$37,$printall);
 _qh_settempfree($facets);
 STACKTOP = sp;return;
}
function _qh_printvridge($fp,$vertex,$vertexA,$centers,$unbounded) {
 $fp = $fp|0;
 $vertex = $vertex|0;
 $vertexA = $vertexA|0;
 $centers = $centers|0;
 $unbounded = $unbounded|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facetp$01 = 0, $vararg_buffer = 0;
 var $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = (_qh_setsize($centers)|0);
 $1 = (($0) + 2)|0;
 $2 = ((($vertex)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_qh_pointid($3)|0);
 $5 = ((($vertexA)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_qh_pointid($6)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 _qh_fprintf($fp,9275,16088,$vararg_buffer);
 $8 = ($centers|0)==(0|0);
 if ($8) {
  _qh_fprintf($fp,9277,56128,$vararg_buffer6);
  STACKTOP = sp;return;
 }
 $9 = ((($centers)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _qh_fprintf($fp,9277,56128,$vararg_buffer6);
  STACKTOP = sp;return;
 } else {
  $14 = $10;$facetp$01 = $9;
 }
 while(1) {
  $12 = ((($facetp$01)) + 4|0);
  $13 = ((($14)) + 72|0);
  $15 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $15;
  _qh_fprintf($fp,9276,36672,$vararg_buffer3);
  $16 = HEAP32[$12>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   break;
  } else {
   $14 = $16;$facetp$01 = $12;
  }
 }
 _qh_fprintf($fp,9277,56128,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _qh_printvnorm($fp,$vertex,$vertexA,$centers,$unbounded) {
 $fp = $fp|0;
 $vertex = $vertex|0;
 $vertexA = $vertexA|0;
 $centers = $centers|0;
 $unbounded = $unbounded|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$01 = 0, $offset = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $offset = sp + 32|0;
 $0 = (_qh_detvnorm($vertex,$vertexA,$centers,$offset)|0);
 $1 = HEAP32[(5828)>>2]|0;
 $2 = (($1) + 2)|0;
 $3 = ((($vertex)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_qh_pointid($4)|0);
 $6 = ((($vertexA)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_qh_pointid($7)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $8;
 _qh_fprintf($fp,9271,16104,$vararg_buffer);
 $9 = HEAP32[(5828)>>2]|0;
 $10 = ($9|0)>(1);
 if ($10) {
  $k$01 = 0;
 } else {
  $17 = +HEAPF64[$offset>>3];
  HEAPF64[$vararg_buffer6>>3] = $17;
  _qh_fprintf($fp,9273,11216,$vararg_buffer6);
  _qh_fprintf($fp,9274,56128,$vararg_buffer9);
  STACKTOP = sp;return;
 }
 while(1) {
  $11 = (($0) + ($k$01<<3)|0);
  $12 = +HEAPF64[$11>>3];
  HEAPF64[$vararg_buffer3>>3] = $12;
  _qh_fprintf($fp,9272,11216,$vararg_buffer3);
  $13 = (($k$01) + 1)|0;
  $14 = HEAP32[(5828)>>2]|0;
  $15 = (($14) + -1)|0;
  $16 = ($13|0)<($15|0);
  if ($16) {
   $k$01 = $13;
  } else {
   break;
  }
 }
 $17 = +HEAPF64[$offset>>3];
 HEAPF64[$vararg_buffer6>>3] = $17;
 _qh_fprintf($fp,9273,11216,$vararg_buffer6);
 _qh_fprintf($fp,9274,56128,$vararg_buffer9);
 STACKTOP = sp;return;
}
function _qh_printvdiagram2($fp,$printvridge,$vertices,$innerouter,$inorder) {
 $fp = $fp|0;
 $printvridge = $printvridge|0;
 $vertices = $vertices|0;
 $innerouter = $innerouter|0;
 $inorder = $inorder|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $totcount$02 = 0, $totcount$1 = 0, $totcount$2 = 0, $vertex$0 = 0;
 var $vertex$04 = 0, $vertex$05 = 0, $vertex$13 = 0, $vertex_i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vertex$04 = HEAP32[(7540)>>2]|0;
 $0 = ($vertex$04|0)==(0|0);
 L1: do {
  if (!($0)) {
   $vertex$05 = $vertex$04;
   while(1) {
    $1 = HEAP32[$vertex$05>>2]|0;
    $2 = ($1|0)==(0|0);
    if ($2) {
     break L1;
    }
    $3 = ((($vertex$05)) + 16|0);
    $4 = $3;
    $5 = $4;
    $6 = HEAP32[$5>>2]|0;
    $7 = (($4) + 4)|0;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & -268435457;
    $11 = $3;
    $12 = $11;
    HEAP32[$12>>2] = $6;
    $13 = (($11) + 4)|0;
    $14 = $13;
    HEAP32[$14>>2] = $10;
    $vertex$0 = HEAP32[$vertex$05>>2]|0;
    $15 = ($vertex$0|0)==(0|0);
    if ($15) {
     break;
    } else {
     $vertex$05 = $vertex$0;
    }
   }
  }
 } while(0);
 $16 = ($vertices|0)==(0|0);
 if ($16) {
  $totcount$2 = 0;
  return ($totcount$2|0);
 }
 $17 = ((($vertices)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_qh_setsize($vertices)|0);
 $20 = ($19|0)>(0);
 if ($20) {
  $totcount$02 = 0;$vertex$13 = $18;$vertex_i$01 = 0;
 } else {
  $totcount$2 = 0;
  return ($totcount$2|0);
 }
 while(1) {
  $21 = ($vertex$13|0)==(0|0);
  do {
   if ($21) {
    $totcount$1 = $totcount$02;
   } else {
    $22 = HEAP32[(5332)>>2]|0;
    $23 = ($22|0)>(0);
    if ($23) {
     $24 = ((($vertex$13)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (_qh_pointid($25)|0);
     $27 = (($26) + 1)|0;
     $28 = HEAP32[(5332)>>2]|0;
     $29 = ($27|0)==($28|0);
     if (!($29)) {
      $totcount$1 = $totcount$02;
      break;
     }
    }
    $30 = (_qh_eachvoronoi($fp,$printvridge,$vertex$13,0,$innerouter,$inorder)|0);
    $31 = (($30) + ($totcount$02))|0;
    $totcount$1 = $31;
   }
  } while(0);
  $32 = (($vertex_i$01) + 1)|0;
  $33 = (((($vertices)) + 4|0) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $exitcond = ($32|0)==($19|0);
  if ($exitcond) {
   $totcount$2 = $totcount$1;
   break;
  } else {
   $totcount$02 = $totcount$1;$vertex$13 = $34;$vertex_i$01 = $32;
  }
 }
 return ($totcount$2|0);
}
function _qh_qhull() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_clock()|0);
 HEAP32[(7580)>>2] = $0;
 _qh_initbuild();
 _qh_buildhull();
 $1 = HEAP32[(21224)>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = HEAP32[(21224)>>2]|0;
  $6 = (_qh_setsize($5)|0);
  HEAP32[$vararg_buffer>>2] = $6;
  _qh_fprintf($4,6164,16120,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $7 = (_clock()|0);
 $8 = HEAP32[(7580)>>2]|0;
 $9 = (($7) - ($8))|0;
 HEAP32[(7580)>>2] = $9;
 HEAP32[(7700)>>2] = 1;
 $10 = HEAP32[(5344)>>2]|0;
 $11 = ($10|0)>(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($12,1036,16184,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _qh_buildhull() {
 var $$in = 0, $$lcssa = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $facet = 0, $or$cond = 0, $or$cond10 = 0, $or$cond6 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vertex$0 = 0, $vertex$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $facet = sp + 44|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,1037,16216,$vararg_buffer);
 }
 $3 = HEAP32[(7500)>>2]|0;
 HEAP32[$facet>>2] = $3;
 $4 = ($3|0)==(0);
 L4: do {
  if ($4) {
   $vertex$0$in = (7540);
  } else {
   $$in = $3;
   while(1) {
    $5 = $$in;
    $6 = ((($5)) + 48|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $vertex$0$in = (7540);
     break L4;
    }
    $9 = ((($5)) + 80|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 & 3072;
    $12 = ($11|0)==(0);
    if (!($12)) {
     break;
    }
    $17 = HEAP32[$facet>>2]|0;
    $18 = ((($17)) + 48|0);
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$facet>>2] = $19;
    $20 = ($19|0)==(0);
    if ($20) {
     $vertex$0$in = (7540);
     break L4;
    } else {
     $$in = $19;
    }
   }
   $13 = HEAP32[(7480)>>2]|0;
   $14 = ((($5)) + 76|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $15;
   _qh_fprintf($13,6165,16248,$vararg_buffer1);
   $16 = HEAP32[$facet>>2]|0;
   _qh_errexit(5,$16,0);
   // unreachable;
  }
 } while(0);
 while(1) {
  $vertex$0 = HEAP32[$vertex$0$in>>2]|0;
  $21 = ($vertex$0|0)==(0|0);
  if ($21) {
   label = 17;
   break;
  }
  $22 = HEAP32[$vertex$0>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   label = 17;
   break;
  }
  $24 = ((($vertex$0)) + 16|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)<(0);
  if ($31) {
   label = 11;
   break;
  }
  $34 = ((($vertex$0)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_qh_pointid($35)|0);
  $37 = HEAP32[(5736)>>2]|0;
  $38 = ($37|0)>(0);
  $39 = (($37) + -1)|0;
  $40 = ($36|0)==($39|0);
  $or$cond6 = $38 & $40;
  if ($or$cond6) {
   $$lcssa17 = $36;
   label = 15;
   break;
  }
  $41 = ($37|0)<(0);
  $42 = $37 ^ -1;
  $43 = ($36|0)==($42|0);
  $or$cond8 = $41 & $43;
  if ($or$cond8) {
   $$lcssa17 = $36;
   label = 15;
   break;
  }
  $44 = HEAP32[(5732)>>2]|0;
  $45 = ($44|0)>(0);
  $46 = (($44) + -1)|0;
  $47 = ($36|0)==($46|0);
  $or$cond10 = $45 & $47;
  if ($or$cond10) {
   $$lcssa17 = $36;
   label = 15;
   break;
  } else {
   $vertex$0$in = $vertex$0;
  }
 }
 if ((label|0) == 11) {
  $32 = HEAP32[(7480)>>2]|0;
  $33 = $30 & 16777215;
  HEAP32[$vararg_buffer3>>2] = $33;
  _qh_fprintf($32,6166,16328,$vararg_buffer3);
  _qh_errprint(55888,0,0,0,$vertex$0);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  $48 = HEAP32[(5344)>>2]|0;
  $49 = ($48|0)>(0);
  if (!($49)) {
   STACKTOP = sp;return;
  }
  $50 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $$lcssa17;
  _qh_fprintf($50,1038,16400,$vararg_buffer6);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  $51 = HEAP32[(7500)>>2]|0;
  HEAP32[(7508)>>2] = $51;
  while(1) {
   $52 = (_qh_nextfurthest($facet)|0);
   $53 = ($52|0)!=(0|0);
   if (!($53)) {
    $$lcssa = $53;
    break;
   }
   $54 = HEAP32[(7560)>>2]|0;
   $55 = (($54) + -1)|0;
   HEAP32[(7560)>>2] = $55;
   $56 = HEAP32[$facet>>2]|0;
   $57 = HEAP32[(5448)>>2]|0;
   $58 = (_qh_addpoint($52,$56,$57)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $$lcssa = $53;
    break;
   }
  }
  $60 = HEAP32[(7032)>>2]|0;
  $61 = ($60|0)==(0);
  if (!($61)) {
   _qh_outcoplanar();
  }
  $62 = HEAP32[(7560)>>2]|0;
  $63 = ($62|0)==(0);
  $or$cond = $$lcssa | $63;
  if (!($or$cond)) {
   $64 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer9>>2] = $62;
   _qh_fprintf($64,6167,16456,$vararg_buffer9);
   _qh_errexit(5,0,0);
   // unreachable;
  }
  $65 = HEAP32[(5344)>>2]|0;
  $66 = ($65|0)>(0);
  if (!($66)) {
   STACKTOP = sp;return;
  }
  $67 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($67,1039,16536,$vararg_buffer12);
  STACKTOP = sp;return;
 }
}
function _qh_addpoint($furthest,$facet,$checkdist) {
 $furthest = $furthest|0;
 $facet = $facet|0;
 $checkdist = $checkdist|0;
 var $$0 = 0, $$07 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $goodhorizon = 0, $goodvisible = 0, $isoutside = 0, $newfacet$0 = 0, $newfacet$08 = 0, $newfacet$09 = 0, $newfacet$1 = 0;
 var $numpart = 0, $numpoints = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp;
 $goodvisible = sp + 56|0;
 $goodhorizon = sp + 40|0;
 $dist = sp + 8|0;
 $isoutside = sp + 44|0;
 $numpart = sp + 48|0;
 $numpoints = sp + 52|0;
 HEAP32[$isoutside>>2] = 0;
 HEAP32[(7624)>>2] = 0;
 $0 = (_qh_pointid($furthest)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  _qh_setappend((7748),$furthest);
 }
 $2 = ($facet|0)==(0|0);
 if ($2) {
  $3 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($3,6213,16584,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $4 = ($checkdist|0)==(0);
 if ($4) {
  $$07 = $facet;
 } else {
  $5 = (_qh_findbest($furthest,$facet,0,0,0,$dist,$isoutside,$numpart)|0);
  $6 = HEAP32[$numpart>>2]|0;
  $7 = HEAP32[(44504)>>2]|0;
  $8 = (($7) + ($6))|0;
  HEAP32[(44504)>>2] = $8;
  $9 = HEAP32[$isoutside>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = HEAP32[(44384)>>2]|0;
   $12 = (($11) + 1)|0;
   HEAP32[(44384)>>2] = $12;
   $13 = ((($5)) + 80|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 | 262144;
   HEAP32[$13>>2] = $15;
   _qh_partitioncoplanar($furthest,$5,$dist);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$07 = $5;
  }
 }
 _qh_buildtracing($furthest,$$07);
 $16 = HEAP32[(5736)>>2]|0;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = HEAP32[(7596)>>2]|0;
  $19 = $16 ^ -1;
  $20 = ($18|0)==($19|0);
  if ($20) {
   $21 = ((($$07)) + 80|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 | 262144;
   HEAP32[$21>>2] = $23;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _qh_findhorizon($furthest,$$07,$goodvisible,$goodhorizon);
 $24 = HEAP32[(5444)>>2]|0;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = HEAP32[$goodvisible>>2]|0;
  $27 = HEAP32[$goodhorizon>>2]|0;
  $28 = (0 - ($27))|0;
  $29 = ($26|0)!=($28|0);
  $30 = HEAP32[(7600)>>2]|0;
  $31 = ($30|0)!=(0|0);
  $or$cond = $29 | $31;
  if (!($or$cond)) {
   $32 = HEAP32[(44368)>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[(44368)>>2] = $33;
   $34 = ((($$07)) + 80|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 | 262144;
   HEAP32[$34>>2] = $36;
   _qh_resetlists(0,1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $37 = HEAP32[(44568)>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[(44568)>>2] = $38;
 $39 = HEAP32[(7568)>>2]|0;
 $40 = (_qh_makenewfacets($furthest)|0);
 _qh_makenewplanes();
 $41 = HEAP32[(7568)>>2]|0;
 $42 = (($41) - ($39))|0;
 $43 = (+($42|0));
 $44 = HEAP32[(7552)>>2]|0;
 $45 = HEAP32[(7520)>>2]|0;
 $46 = (($44) - ($45))|0;
 $47 = (+($46|0));
 $48 = HEAP32[(5828)>>2]|0;
 $49 = (+($48|0));
 $50 = $47 * $49;
 $51 = HEAP32[(7556)>>2]|0;
 $52 = (+($51|0));
 $53 = $50 / $52;
 $54 = $43 - $53;
 $55 = +HEAPF64[(44288)>>3];
 $56 = $55 + $54;
 HEAPF64[(44288)>>3] = $56;
 $57 = $54 * $54;
 $58 = +HEAPF64[(44296)>>3];
 $59 = $58 + $57;
 HEAPF64[(44296)>>3] = $59;
 $60 = HEAP32[(5444)>>2]|0;
 $61 = ($60|0)==(0);
 do {
  if (!($61)) {
   $62 = HEAP32[(7512)>>2]|0;
   $63 = HEAP32[$goodhorizon>>2]|0;
   $64 = (_qh_findgood($62,$63)|0);
   $65 = ($64|0)!=(0);
   $66 = HEAP32[(7600)>>2]|0;
   $67 = ($66|0)!=(0|0);
   $or$cond3 = $65 | $67;
   if ($or$cond3) {
    $$pr = HEAP32[(5444)>>2]|0;
    $78 = ($$pr|0)==(0);
    if ($78) {
     break;
    }
    _qh_attachnewfacets();
    break;
   }
   $newfacet$08 = HEAP32[(7512)>>2]|0;
   $68 = ($newfacet$08|0)==(0|0);
   L28: do {
    if (!($68)) {
     $newfacet$09 = $newfacet$08;
     while(1) {
      $69 = ((($newfacet$09)) + 48|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(0|0);
      if ($71) {
       break L28;
      }
      _qh_delfacet($newfacet$09);
      $newfacet$0 = HEAP32[$69>>2]|0;
      $72 = ($newfacet$0|0)==(0|0);
      if ($72) {
       break;
      } else {
       $newfacet$09 = $newfacet$0;
      }
     }
    }
   } while(0);
   _qh_delvertex($40);
   _qh_resetlists(1,1);
   $73 = HEAP32[(44376)>>2]|0;
   $74 = (($73) + 1)|0;
   HEAP32[(44376)>>2] = $74;
   $75 = ((($$07)) + 80|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 | 262144;
   HEAP32[$75>>2] = $77;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _qh_matchnewfacets();
 _qh_updatevertices();
 $79 = HEAP32[(5732)>>2]|0;
 $80 = ($79|0)==(0);
 if (!($80)) {
  $81 = HEAP32[(7596)>>2]|0;
  $82 = (($79) + -1)|0;
  $83 = ($81|0)==($82|0);
  if ($83) {
   $84 = ((($$07)) + 80|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $85 | 262144;
   HEAP32[$84>>2] = $86;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[(7660)>>2] = 0;
 $87 = HEAP32[(5460)>>2]|0;
 $88 = HEAP32[(5384)>>2]|0;
 $89 = $88 | $87;
 $90 = ($89|0)==(0);
 L40: do {
  if ($90) {
   $104 = HEAP32[(5268)>>2]|0;
   $105 = ($104|0)==(0);
   if (!($105)) {
    HEAP32[(7660)>>2] = 1;
   }
  } else {
   $91 = +HEAPF64[(5400)>>3];
   $92 = +HEAPF64[(5288)>>3];
   _qh_premerge($40,$91,$92);
   $93 = HEAP32[(44768)>>2]|0;
   $94 = ($93|0)>(50);
   if ($94) {
    HEAP32[(7660)>>2] = 1;
    break;
   }
   $95 = HEAP32[(7512)>>2]|0;
   $newfacet$1 = $95;
   while(1) {
    $96 = ($newfacet$1|0)==(0|0);
    if ($96) {
     break L40;
    }
    $97 = ((($newfacet$1)) + 48|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     break L40;
    }
    $100 = ((($newfacet$1)) + 80|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 8192;
    $103 = ($102|0)==(0);
    if ($103) {
     break;
    } else {
     $newfacet$1 = $98;
    }
   }
   HEAP32[(7660)>>2] = 1;
  }
 } while(0);
 _qh_partitionvisible(0,$numpoints);
 HEAP32[(7660)>>2] = 0;
 HEAP32[(7664)>>2] = 0;
 $106 = HEAP32[(44528)>>2]|0;
 $107 = (($106) + 1)|0;
 HEAP32[(44528)>>2] = $107;
 $108 = HEAP32[$numpoints>>2]|0;
 $109 = (+($108|0));
 $110 = HEAP32[(5828)>>2]|0;
 $111 = (+($110|0));
 $112 = HEAP32[(5836)>>2]|0;
 $113 = HEAP32[(7556)>>2]|0;
 $114 = (($112) - ($113))|0;
 $115 = (+($114|0));
 $116 = $111 * $115;
 $117 = (+($113|0));
 $118 = $116 / $117;
 $119 = $109 - $118;
 $120 = +HEAPF64[(44536)>>3];
 $121 = $120 + $119;
 HEAPF64[(44536)>>3] = $121;
 $122 = $119 * $119;
 $123 = +HEAPF64[(44544)>>3];
 $124 = $123 + $122;
 HEAPF64[(44544)>>3] = $124;
 _qh_deletevisible();
 $125 = HEAP32[(44088)>>2]|0;
 $126 = HEAP32[(7556)>>2]|0;
 $127 = ($125|0)<($126|0);
 if ($127) {
  HEAP32[(44088)>>2] = $126;
 }
 HEAP32[(7656)>>2] = 0;
 $128 = HEAP32[(5344)>>2]|0;
 $129 = ($128|0)>(3);
 do {
  if ($129) {
   $130 = HEAP32[(7552)>>2]|0;
   $131 = ($130|0)<(2000);
   if ($131) {
    _qh_printlists();
   }
   $132 = HEAP32[(7512)>>2]|0;
   _qh_printfacetlist($132,0,1);
   $133 = HEAP32[(7500)>>2]|0;
   _qh_checkpolygon($133);
  } else {
   $134 = HEAP32[(5280)>>2]|0;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[(7552)>>2]|0;
    $137 = ($136|0)<(50);
    if ($137) {
     $138 = HEAP32[(7500)>>2]|0;
     _qh_checkpolygon($138);
     break;
    } else {
     $139 = HEAP32[(7512)>>2]|0;
     _qh_checkpolygon($139);
     break;
    }
   }
  }
 } while(0);
 $140 = HEAP32[(5736)>>2]|0;
 $141 = ($140|0)>(0);
 if ($141) {
  $142 = HEAP32[(7596)>>2]|0;
  $143 = (($140) + -1)|0;
  $144 = ($142|0)==($143|0);
  if ($144) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _qh_resetlists(1,1);
 $145 = HEAP32[(5344)>>2]|0;
 $146 = ($145|0)>(1);
 if (!($146)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $147 = HEAP32[(7480)>>2]|0;
 $148 = (_qh_pointid($furthest)|0);
 HEAP32[$vararg_buffer1>>2] = $148;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $42;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 HEAPF64[$vararg_ptr4>>3] = $54;
 $vararg_ptr5 = ((($vararg_buffer1)) + 16|0);
 HEAPF64[$vararg_ptr5>>3] = $119;
 _qh_fprintf($147,2056,16672,$vararg_buffer1);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _qh_partitioncoplanar($point,$facet,$dist) {
 $point = $point|0;
 $facet = $facet|0;
 $dist = $dist|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bestdist = 0, $bestfacet$0 = 0, $bestfacet$1 = 0, $dist2 = 0, $isoutside = 0, $numpart = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer23 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp + 40|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer10 = sp + 80|0;
 $vararg_buffer4 = sp + 56|0;
 $vararg_buffer = sp + 16|0;
 $bestdist = sp + 8|0;
 $dist2 = sp;
 $numpart = sp + 132|0;
 $isoutside = sp + 128|0;
 HEAPF64[$dist2>>3] = 0.0;
 HEAP32[$numpart>>2] = 0;
 HEAP32[(7732)>>2] = 1;
 $0 = ($dist|0)!=(0|0);
 do {
  if ($0) {
   $44 = +HEAPF64[$dist>>3];
   HEAPF64[$bestdist>>3] = $44;
   $bestfacet$1 = $facet;
  } else {
   $1 = HEAP32[(7660)>>2]|0;
   $2 = ($1|0)==(0);
   if ($2) {
    $4 = HEAP32[(5304)>>2]|0;
    $5 = (_qh_findbest($point,$facet,1,0,$4,$bestdist,$isoutside,$numpart)|0);
    $bestfacet$0 = $5;
   } else {
    $3 = (_qh_findbestnew($point,$facet,$bestdist,1,$isoutside,$numpart)|0);
    $bestfacet$0 = $3;
   }
   $6 = HEAP32[(44776)>>2]|0;
   $7 = (($6) + 1)|0;
   HEAP32[(44776)>>2] = $7;
   $8 = HEAP32[$numpart>>2]|0;
   $9 = HEAP32[(44472)>>2]|0;
   $10 = (($9) + ($8))|0;
   HEAP32[(44472)>>2] = $10;
   $11 = HEAP32[(5304)>>2]|0;
   $12 = HEAP32[(5356)>>2]|0;
   $13 = $12 | $11;
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = HEAP32[(5824)>>2]|0;
    $16 = ($15|0)==(0);
    $17 = +HEAPF64[$bestdist>>3];
    if ($16) {
     $31 = +HEAPF64[(5376)>>3];
     $32 = -$31;
     $33 = $17 < $32;
     if (!($33)) {
      $bestfacet$1 = $bestfacet$0;
      break;
     }
     $34 = HEAP32[(5344)>>2]|0;
     $35 = ($34|0)>(3);
     if ($35) {
      $36 = HEAP32[(7480)>>2]|0;
      $37 = (_qh_pointid($point)|0);
      $38 = ((($bestfacet$0)) + 76|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = +HEAPF64[$bestdist>>3];
      $41 = HEAP32[(7660)>>2]|0;
      HEAP32[$vararg_buffer4>>2] = $37;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $39;
      $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
      HEAPF64[$vararg_ptr8>>3] = $40;
      $vararg_ptr9 = ((($vararg_buffer4)) + 16|0);
      HEAP32[$vararg_ptr9>>2] = $41;
      _qh_fprintf($36,4063,16848,$vararg_buffer4);
     }
     $42 = HEAP32[(43456)>>2]|0;
     $43 = (($42) + 1)|0;
     HEAP32[(43456)>>2] = $43;
     STACKTOP = sp;return;
    } else {
     $18 = +HEAPF64[(7040)>>3];
     $19 = -$18;
     $20 = $17 < $19;
     if (!($20)) {
      $bestfacet$1 = $bestfacet$0;
      break;
     }
     $21 = HEAP32[(43456)>>2]|0;
     $22 = (($21) + 1)|0;
     HEAP32[(43456)>>2] = $22;
     $23 = HEAP32[(5344)>>2]|0;
     $24 = ($23|0)>(3);
     if (!($24)) {
      STACKTOP = sp;return;
     }
     $25 = HEAP32[(7480)>>2]|0;
     $26 = (_qh_pointid($point)|0);
     $27 = ((($bestfacet$0)) + 76|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = +HEAPF64[$bestdist>>3];
     $30 = HEAP32[(7660)>>2]|0;
     HEAP32[$vararg_buffer>>2] = $26;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $28;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAPF64[$vararg_ptr2>>3] = $29;
     $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
     HEAP32[$vararg_ptr3>>2] = $30;
     _qh_fprintf($25,4062,16752,$vararg_buffer);
     STACKTOP = sp;return;
    }
   } else {
    $bestfacet$1 = $bestfacet$0;
   }
  }
 } while(0);
 $45 = +HEAPF64[$bestdist>>3];
 $46 = +HEAPF64[(7632)>>3];
 $47 = $45 > $46;
 if ($47) {
  $48 = ($bestfacet$1|0)==($facet|0);
  $or$cond = $0 | $48;
  if (!($or$cond)) {
   $49 = HEAP32[(44464)>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[(44464)>>2] = $50;
   $51 = ((($facet)) + 24|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($bestfacet$1)) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (+_qh_getangle($52,$54));
   $56 = $55 < 0.0;
   if ($56) {
    $57 = HEAP32[(44480)>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[(44480)>>2] = $58;
    $59 = HEAP32[(5344)>>2]|0;
    $60 = ($59|0)>(1);
    if ($60) {
     $61 = HEAP32[(7480)>>2]|0;
     $62 = (_qh_pointid($point)|0);
     $63 = ((($facet)) + 76|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ((($bestfacet$1)) + 76|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = +HEAPF64[$bestdist>>3];
     HEAP32[$vararg_buffer10>>2] = $62;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $64;
     $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
     HEAP32[$vararg_ptr14>>2] = $66;
     $vararg_ptr15 = ((($vararg_buffer10)) + 16|0);
     HEAPF64[$vararg_ptr15>>3] = $67;
     _qh_fprintf($61,2058,16928,$vararg_buffer10);
    }
    $68 = HEAP32[(7660)>>2]|0;
    HEAP32[(7660)>>2] = 0;
    _qh_partitionpoint($point,$bestfacet$1);
    HEAP32[(7660)>>2] = $68;
    STACKTOP = sp;return;
   }
  }
  $69 = +HEAPF64[$bestdist>>3];
  HEAPF64[(7632)>>3] = $69;
  $70 = +HEAPF64[$bestdist>>3];
  $71 = +HEAPF64[(5760)>>3];
  $72 = $70 > $71;
  if ($72) {
   $73 = HEAP32[(7480)>>2]|0;
   $74 = (_qh_pointid($point)|0);
   $75 = ((($facet)) + 76|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = +HEAPF64[$bestdist>>3];
   $78 = ((($bestfacet$1)) + 76|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = HEAP32[(7596)>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $74;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $76;
   $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
   HEAPF64[$vararg_ptr20>>3] = $77;
   $vararg_ptr21 = ((($vararg_buffer16)) + 16|0);
   HEAP32[$vararg_ptr21>>2] = $79;
   $vararg_ptr22 = ((($vararg_buffer16)) + 20|0);
   HEAP32[$vararg_ptr22>>2] = $80;
   _qh_fprintf($73,8122,17032,$vararg_buffer16);
   _qh_errprint(17128,$facet,$bestfacet$1,0,0);
  }
 }
 $81 = HEAP32[(5352)>>2]|0;
 $82 = HEAP32[(5356)>>2]|0;
 $83 = (($82) + ($81))|0;
 $84 = HEAP32[(5824)>>2]|0;
 $85 = (0 - ($84))|0;
 $86 = ($83|0)==($85|0);
 do {
  if (!($86)) {
   $87 = ((($bestfacet$1)) + 68|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (_qh_setlast($88)|0);
   $90 = ($89|0)==(0|0);
   if (!($90)) {
    $91 = HEAP32[(43360)>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[(43360)>>2] = $92;
    _qh_distplane($89,$bestfacet$1,$dist2);
    $93 = +HEAPF64[$dist2>>3];
    $94 = +HEAPF64[$bestdist>>3];
    $95 = $93 < $94;
    if (!($95)) {
     _qh_setappend2ndlast($87,$point);
     break;
    }
   }
   _qh_setappend($87,$point);
  }
 } while(0);
 $96 = HEAP32[(5344)>>2]|0;
 $97 = ($96|0)>(3);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = HEAP32[(7480)>>2]|0;
 $99 = (_qh_pointid($point)|0);
 $100 = ((($bestfacet$1)) + 76|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = +HEAPF64[$bestdist>>3];
 HEAP32[$vararg_buffer23>>2] = $99;
 $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
 HEAP32[$vararg_ptr26>>2] = $101;
 $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
 HEAPF64[$vararg_ptr27>>3] = $102;
 _qh_fprintf($98,4064,17136,$vararg_buffer23);
 STACKTOP = sp;return;
}
function _qh_buildtracing($furthest,$facet) {
 $furthest = $furthest|0;
 $facet = $facet|0;
 var $$0 = 0, $$07 = 0, $$08 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0;
 var $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $dist = 0, $or$cond = 0, $timedata = 0, $vararg_buffer = 0, $vararg_buffer24 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0;
 var $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vertex$0 = 0, $vertex$04 = 0, $vertex$05 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer24 = sp + 128|0;
 $vararg_buffer9 = sp;
 $vararg_buffer = sp + 72|0;
 $dist = sp + 120|0;
 $timedata = sp + 176|0;
 HEAPF64[$dist>>3] = 0.0;
 $0 = HEAP32[(5656)>>2]|0;
 HEAP32[(7788)>>2] = $0;
 HEAP32[(5656)>>2] = 0;
 $1 = ($furthest|0)==(0|0);
 if ($1) {
  (_time(($timedata|0))|0);
  $2 = (_localtime(($timedata|0))|0);
  $3 = (_clock()|0);
  $4 = (+($3>>>0));
  $5 = HEAP32[(7580)>>2]|0;
  $6 = (+($5>>>0));
  $7 = $4 - $6;
  $8 = $7 / 1.0E+6;
  $9 = HEAP32[(44768)>>2]|0;
  $10 = HEAP32[(43504)>>2]|0;
  $11 = (($9) - ($10))|0;
  $12 = HEAP32[(43496)>>2]|0;
  $13 = (($11) + ($12))|0;
  $14 = HEAP32[(7480)>>2]|0;
  $15 = ((($2)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = $8;
  $21 = HEAP32[(7568)>>2]|0;
  $22 = (($21) + -1)|0;
  $23 = HEAP32[(7552)>>2]|0;
  $24 = HEAP32[(7556)>>2]|0;
  $25 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $19;
  $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
  HEAPF64[$vararg_ptr3>>3] = $20;
  $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr4>>2] = $22;
  $vararg_ptr5 = ((($vararg_buffer)) + 28|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $vararg_ptr6 = ((($vararg_buffer)) + 32|0);
  HEAP32[$vararg_ptr6>>2] = $23;
  $vararg_ptr7 = ((($vararg_buffer)) + 36|0);
  HEAP32[$vararg_ptr7>>2] = $24;
  $vararg_ptr8 = ((($vararg_buffer)) + 40|0);
  HEAP32[$vararg_ptr8>>2] = $25;
  _qh_fprintf($14,8118,17224,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $26 = (_qh_pointid($furthest)|0);
 $27 = HEAP32[(5756)>>2]|0;
 $28 = ($27|0)==($26|0);
 if ($28) {
  $29 = HEAP32[(5748)>>2]|0;
  HEAP32[(5344)>>2] = $29;
  $30 = HEAP32[(5748)>>2]|0;
  HEAP32[(21232)>>2] = $30;
 } else {
  $31 = ($27|0)!=(-1);
  $32 = +HEAPF64[(5760)>>3];
  $33 = $32 < 8.9884656743115785E+307;
  $or$cond = $31 & $33;
  if ($or$cond) {
   HEAP32[(5344)>>2] = 0;
   HEAP32[(21232)>>2] = 0;
  }
 }
 $34 = HEAP32[(5692)>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  label = 12;
 } else {
  $36 = HEAP32[(7568)>>2]|0;
  $37 = (($36) + -1)|0;
  $38 = HEAP32[(7824)>>2]|0;
  $39 = (($38) + ($34))|0;
  $40 = ($37>>>0)>($39>>>0);
  if ($40) {
   HEAP32[(7824)>>2] = $37;
   (_time(($timedata|0))|0);
   $41 = (_localtime(($timedata|0))|0);
   $42 = (_clock()|0);
   $43 = (+($42>>>0));
   $44 = HEAP32[(7580)>>2]|0;
   $45 = (+($44>>>0));
   $46 = $43 - $45;
   $47 = $46 / 1.0E+6;
   $48 = HEAP32[(44768)>>2]|0;
   $49 = HEAP32[(43504)>>2]|0;
   $50 = (($48) - ($49))|0;
   $51 = HEAP32[(43496)>>2]|0;
   $52 = (($50) + ($51))|0;
   $53 = HEAP32[(43616)>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[(43616)>>2] = $54;
   _qh_distplane($furthest,$facet,$dist);
   $55 = HEAP32[(7480)>>2]|0;
   $56 = ((($41)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($41)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$41>>2]|0;
   $61 = $47;
   $62 = HEAP32[(7568)>>2]|0;
   $63 = (($62) + -1)|0;
   $64 = HEAP32[(7552)>>2]|0;
   $65 = HEAP32[(7556)>>2]|0;
   $66 = HEAP32[(7560)>>2]|0;
   $67 = (($66) + 1)|0;
   $68 = HEAP32[(7576)>>2]|0;
   $69 = $68 & 16777215;
   $70 = +HEAPF64[$dist>>3];
   $71 = ($facet|0)==(0|0);
   if ($71) {
    $74 = -1;
   } else {
    $72 = ((($facet)) + 76|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $73;
   }
   HEAP32[$vararg_buffer9>>2] = $57;
   $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
   HEAP32[$vararg_ptr12>>2] = $59;
   $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
   HEAP32[$vararg_ptr13>>2] = $60;
   $vararg_ptr14 = ((($vararg_buffer9)) + 16|0);
   HEAPF64[$vararg_ptr14>>3] = $61;
   $vararg_ptr15 = ((($vararg_buffer9)) + 24|0);
   HEAP32[$vararg_ptr15>>2] = $63;
   $vararg_ptr16 = ((($vararg_buffer9)) + 28|0);
   HEAP32[$vararg_ptr16>>2] = $52;
   $vararg_ptr17 = ((($vararg_buffer9)) + 32|0);
   HEAP32[$vararg_ptr17>>2] = $64;
   $vararg_ptr18 = ((($vararg_buffer9)) + 36|0);
   HEAP32[$vararg_ptr18>>2] = $65;
   $vararg_ptr19 = ((($vararg_buffer9)) + 40|0);
   HEAP32[$vararg_ptr19>>2] = $67;
   $vararg_ptr20 = ((($vararg_buffer9)) + 44|0);
   HEAP32[$vararg_ptr20>>2] = $26;
   $vararg_ptr21 = ((($vararg_buffer9)) + 48|0);
   HEAP32[$vararg_ptr21>>2] = $69;
   $vararg_ptr22 = ((($vararg_buffer9)) + 56|0);
   HEAPF64[$vararg_ptr22>>3] = $70;
   $vararg_ptr23 = ((($vararg_buffer9)) + 64|0);
   HEAP32[$vararg_ptr23>>2] = $74;
   _qh_fprintf($55,8119,17384,$vararg_buffer9);
  } else {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $75 = HEAP32[(5344)>>2]|0;
  $76 = ($75|0)>(0);
  if ($76) {
   $77 = (_clock()|0);
   $78 = (+($77>>>0));
   $79 = HEAP32[(7580)>>2]|0;
   $80 = (+($79>>>0));
   $81 = $78 - $80;
   $82 = $81 / 1.0E+6;
   _qh_distplane($furthest,$facet,$dist);
   $83 = HEAP32[(7480)>>2]|0;
   $84 = HEAP32[(7576)>>2]|0;
   $85 = $84 & 16777215;
   $86 = HEAP32[(7552)>>2]|0;
   $87 = +HEAPF64[$dist>>3];
   $88 = ($facet|0)==(0|0);
   if ($88) {
    $95 = -1;
   } else {
    $89 = ((($facet)) + 76|0);
    $90 = HEAP32[$89>>2]|0;
    $95 = $90;
   }
   $91 = HEAP32[(7560)>>2]|0;
   $92 = (($91) + 1)|0;
   $93 = $82;
   $94 = HEAP32[(7596)>>2]|0;
   HEAP32[$vararg_buffer24>>2] = $26;
   $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
   HEAP32[$vararg_ptr27>>2] = $85;
   $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
   HEAP32[$vararg_ptr28>>2] = $86;
   $vararg_ptr29 = ((($vararg_buffer24)) + 16|0);
   HEAPF64[$vararg_ptr29>>3] = $87;
   $vararg_ptr30 = ((($vararg_buffer24)) + 24|0);
   HEAP32[$vararg_ptr30>>2] = $95;
   $vararg_ptr31 = ((($vararg_buffer24)) + 28|0);
   HEAP32[$vararg_ptr31>>2] = $92;
   $vararg_ptr32 = ((($vararg_buffer24)) + 32|0);
   HEAPF64[$vararg_ptr32>>3] = $93;
   $vararg_ptr33 = ((($vararg_buffer24)) + 40|0);
   HEAP32[$vararg_ptr33>>2] = $94;
   _qh_fprintf($83,8120,17592,$vararg_buffer24);
  }
 }
 $96 = HEAP32[(44936)>>2]|0;
 $97 = HEAP32[(7720)>>2]|0;
 $98 = (($97|0) / 2)&-1;
 $99 = ($96|0)<($98|0);
 if ($99) {
  HEAP32[(44936)>>2] = $98;
  $$pr = HEAP32[(7720)>>2]|0;
  $100 = $$pr;
 } else {
  $100 = $97;
 }
 $101 = ($100|0)<(0);
 L26: do {
  if ($101) {
   $102 = HEAP32[(44928)>>2]|0;
   $103 = (($102) + 1)|0;
   HEAP32[(44928)>>2] = $103;
   HEAP32[(7720)>>2] = 0;
   $$07 = HEAP32[(7500)>>2]|0;
   $104 = ($$07|0)==(0|0);
   if (!($104)) {
    $$08 = $$07;
    while(1) {
     $105 = ((($$08)) + 48|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==(0|0);
     if ($107) {
      break L26;
     }
     $108 = ((($$08)) + 72|0);
     HEAP32[$108>>2] = 0;
     $$0 = HEAP32[$105>>2]|0;
     $109 = ($$0|0)==(0|0);
     if ($109) {
      break;
     } else {
      $$08 = $$0;
     }
    }
   }
  }
 } while(0);
 $110 = HEAP32[(44968)>>2]|0;
 $111 = HEAP32[(7724)>>2]|0;
 $112 = $111 >>> 1;
 $113 = $112 & 1073741823;
 $114 = ($110|0)<($113|0);
 if ($114) {
  HEAP32[(44968)>>2] = $113;
 }
 $115 = HEAP32[(7724)>>2]|0;
 $116 = $115 & 1073741824;
 $117 = ($116|0)==(0);
 L35: do {
  if (!($117)) {
   $118 = HEAP32[(44960)>>2]|0;
   $119 = (($118) + 1)|0;
   HEAP32[(44960)>>2] = $119;
   $120 = HEAP32[(7724)>>2]|0;
   $121 = $120 & -2147483648;
   HEAP32[(7724)>>2] = $121;
   $vertex$04 = HEAP32[(7540)>>2]|0;
   $122 = ($vertex$04|0)==(0|0);
   if (!($122)) {
    $vertex$05 = $vertex$04;
    while(1) {
     $123 = HEAP32[$vertex$05>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      break L35;
     }
     $125 = ((($vertex$05)) + 16|0);
     $126 = $125;
     $127 = $126;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($126) + 4)|0;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $132 = $128 & -2147483648;
     $133 = $125;
     $134 = $133;
     HEAP32[$134>>2] = $132;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $131;
     $vertex$0 = HEAP32[$vertex$05>>2]|0;
     $137 = ($vertex$0|0)==(0|0);
     if ($137) {
      break;
     } else {
      $vertex$05 = $vertex$0;
     }
    }
   }
  }
 } while(0);
 HEAP32[(7596)>>2] = $26;
 $138 = HEAP32[(7788)>>2]|0;
 HEAP32[(5656)>>2] = $138;
 STACKTOP = sp;return;
}
function _qh_findhorizon($point,$facet,$goodvisible,$goodhorizon) {
 $point = $point|0;
 $facet = $facet|0;
 $goodvisible = $goodvisible|0;
 $goodhorizon = $goodhorizon|0;
 var $$lcssa = 0, $$lcssa61 = 0, $$lcssa63 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $coplanar$0$lcssa = 0, $coplanar$015 = 0, $coplanar$1$ph10 = 0, $coplanar$2 = 0;
 var $coplanar$3 = 0, $dist = 0, $numhorizon$0$lcssa = 0, $numhorizon$014 = 0, $numhorizon$1$ph9 = 0, $numhorizon$2 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, $visible$0 = 0, $visible$013 = 0, $visible$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer10 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $dist = sp + 48|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = (_qh_pointid($point)|0);
  $4 = ((($facet)) + 76|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $3;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  _qh_fprintf($2,1040,17712,$vararg_buffer);
 }
 HEAP32[$goodhorizon>>2] = 0;
 HEAP32[$goodvisible>>2] = 0;
 $6 = HEAP32[(44808)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(44808)>>2] = $7;
 _qh_removefacet($facet);
 _qh_appendfacet($facet);
 HEAP32[(7520)>>2] = 1;
 $8 = ((($facet)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 524288;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = HEAP32[$goodvisible>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$goodvisible>>2] = $13;
 }
 HEAP32[(7516)>>2] = $facet;
 $14 = HEAP32[$8>>2]|0;
 $15 = $14 | 2048;
 HEAP32[$8>>2] = $15;
 $16 = ((($facet)) + 32|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[(5344)>>2]|0;
 $18 = ($17|0)>(3);
 if ($18) {
  _qh_errprint(17768,$facet,0,0,0);
 }
 $19 = HEAP32[(7720)>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[(7720)>>2] = $20;
 $visible$013 = HEAP32[(7516)>>2]|0;
 $21 = ($visible$013|0)==(0|0);
 if ($21) {
  _qh_precision(18000);
  $118 = HEAP32[(7480)>>2]|0;
  $119 = (_qh_pointid($point)|0);
  HEAP32[$vararg_buffer10>>2] = $119;
  _qh_fprintf($118,6168,18016,$vararg_buffer10);
  $120 = HEAP32[(7500)>>2]|0;
  _qh_printfacetlist($120,0,1);
  _qh_errexit(3,0,0);
  // unreachable;
 } else {
  $coplanar$015 = 0;$numhorizon$014 = 0;$visible$016 = $visible$013;
 }
 while(1) {
  $22 = ((($visible$016)) + 80|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2048;
  $25 = ($24|0)==(0);
  if ($25) {
   $coplanar$0$lcssa = $coplanar$015;$numhorizon$0$lcssa = $numhorizon$014;
   break;
  }
  $26 = $23 & 512;
  $27 = ($26|0)==(0);
  $28 = HEAP32[(5776)>>2]|0;
  $29 = ($28|0)!=(0);
  $or$cond = $27 | $29;
  if (!($or$cond)) {
   label = 10;
   break;
  }
  $31 = HEAP32[(7720)>>2]|0;
  $32 = ((($visible$016)) + 72|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($visible$016)) + 60|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  L16: do {
   if ($35) {
    $coplanar$3 = $coplanar$015;$numhorizon$2 = $numhorizon$014;
   } else {
    $36 = ((($34)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(0|0);
    if ($38) {
     $coplanar$3 = $coplanar$015;$numhorizon$2 = $numhorizon$014;
    } else {
     $39 = ((($36)) + 4|0);
     $131 = $37;$132 = $39;$coplanar$1$ph10 = $coplanar$015;$numhorizon$1$ph9 = $numhorizon$014;
     while(1) {
      $41 = $131;$46 = $132;
      while(1) {
       $40 = ((($41)) + 72|0);
       $42 = HEAP32[$40>>2]|0;
       $43 = HEAP32[(7720)>>2]|0;
       $44 = ($42|0)==($43|0);
       if (!($44)) {
        HEAP32[$40>>2] = $43;
        $49 = HEAP32[(44440)>>2]|0;
        $50 = (($49) + 1)|0;
        HEAP32[(44440)>>2] = $50;
        _qh_distplane($point,$41,$dist);
        $51 = +HEAPF64[$dist>>3];
        $52 = +HEAPF64[(5424)>>3];
        $53 = $51 > $52;
        if (!($53)) {
         $$lcssa = $41;$$lcssa61 = $46;$$lcssa63 = $51;
         break;
        }
        $54 = HEAP32[(44808)>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[(44808)>>2] = $55;
        _qh_removefacet($41);
        _qh_appendfacet($41);
        $56 = ((($41)) + 80|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = $57 | 2048;
        HEAP32[$56>>2] = $58;
        $59 = ((($41)) + 32|0);
        HEAP32[$59>>2] = 0;
        $60 = HEAP32[(7520)>>2]|0;
        $61 = (($60) + 1)|0;
        HEAP32[(7520)>>2] = $61;
        $62 = HEAP32[$56>>2]|0;
        $63 = $62 & 524288;
        $64 = ($63|0)==(0);
        if (!($64)) {
         $65 = HEAP32[$goodvisible>>2]|0;
         $66 = (($65) + 1)|0;
         HEAP32[$goodvisible>>2] = $66;
        }
        $67 = HEAP32[(5344)>>2]|0;
        $68 = ($67|0)>(3);
        if ($68) {
         _qh_errprint(17768,$41,0,0,0);
        }
       }
       $45 = ((($46)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        $coplanar$3 = $coplanar$1$ph10;$numhorizon$2 = $numhorizon$1$ph9;
        break L16;
       } else {
        $41 = $47;$46 = $45;
       }
      }
      $69 = +HEAPF64[(5376)>>3];
      $70 = -$69;
      $71 = $$lcssa63 > $70;
      $72 = ((($$lcssa)) + 80|0);
      $73 = HEAP32[$72>>2]|0;
      if ($71) {
       $74 = $73 | 16777216;
       HEAP32[$72>>2] = $74;
       $75 = HEAP32[(43448)>>2]|0;
       $76 = (($75) + 1)|0;
       HEAP32[(43448)>>2] = $76;
       _qh_precision(17872);
       $77 = (($coplanar$1$ph10) + 1)|0;
       $78 = HEAP32[(5392)>>2]|0;
       $79 = ($78|0)==(0);
       do {
        if (!($79)) {
         $80 = +HEAPF64[$dist>>3];
         $81 = $80 > 0.0;
         if (!($81)) {
          $91 = +HEAPF64[(7648)>>3];
          $92 = $91 > $80;
          if (!($92)) {
           break;
          }
          HEAPF64[(7648)>>3] = $80;
          break;
         }
         $82 = +HEAPF64[(7632)>>3];
         $83 = $82 < $80;
         if ($83) {
          HEAPF64[(7632)>>3] = $80;
         }
         $84 = +HEAPF64[(7640)>>3];
         $85 = +HEAPF64[$dist>>3];
         $86 = $84 < $85;
         if ($86) {
          HEAPF64[(7640)>>3] = $85;
         }
         $87 = ((($$lcssa)) + 8|0);
         $88 = +HEAPF64[$87>>3];
         $89 = +HEAPF64[$dist>>3];
         $90 = $88 < $89;
         if ($90) {
          HEAPF64[$87>>3] = $89;
         }
        }
       } while(0);
       $93 = HEAP32[(5344)>>2]|0;
       $94 = ($93|0)>(1);
       if ($94) {
        $95 = HEAP32[(7480)>>2]|0;
        $96 = (_qh_pointid($point)|0);
        $97 = ((($$lcssa)) + 76|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = +HEAPF64[$dist>>3];
        $100 = +HEAPF64[(5424)>>3];
        HEAP32[$vararg_buffer4>>2] = $96;
        $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
        HEAP32[$vararg_ptr7>>2] = $98;
        $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
        HEAPF64[$vararg_ptr8>>3] = $99;
        $vararg_ptr9 = ((($vararg_buffer4)) + 16|0);
        HEAPF64[$vararg_ptr9>>3] = $100;
        _qh_fprintf($95,2057,17896,$vararg_buffer4);
        $coplanar$2 = $77;
       } else {
        $coplanar$2 = $77;
       }
      } else {
       $101 = $73 & -16777217;
       HEAP32[$72>>2] = $101;
       $coplanar$2 = $coplanar$1$ph10;
      }
      $102 = HEAP32[(44760)>>2]|0;
      $103 = (($102) + 1)|0;
      HEAP32[(44760)>>2] = $103;
      $104 = (($numhorizon$1$ph9) + 1)|0;
      $105 = HEAP32[$72>>2]|0;
      $106 = $105 & 524288;
      $107 = ($106|0)==(0);
      if (!($107)) {
       $108 = HEAP32[$goodhorizon>>2]|0;
       $109 = (($108) + 1)|0;
       HEAP32[$goodhorizon>>2] = $109;
      }
      $110 = HEAP32[(5344)>>2]|0;
      $111 = ($110|0)>(3);
      if ($111) {
       _qh_errprint(17992,$$lcssa,0,0,0);
      }
      $112 = ((($$lcssa61)) + 4|0);
      $113 = HEAP32[$$lcssa61>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $coplanar$3 = $coplanar$2;$numhorizon$2 = $104;
       break;
      } else {
       $131 = $113;$132 = $112;$coplanar$1$ph10 = $coplanar$2;$numhorizon$1$ph9 = $104;
      }
     }
    }
   }
  } while(0);
  $115 = ((($visible$016)) + 48|0);
  $visible$0 = HEAP32[$115>>2]|0;
  $116 = ($visible$0|0)==(0|0);
  if ($116) {
   $coplanar$0$lcssa = $coplanar$3;$numhorizon$0$lcssa = $numhorizon$2;
   break;
  } else {
   $coplanar$015 = $coplanar$3;$numhorizon$014 = $numhorizon$2;$visible$016 = $visible$0;
  }
 }
 if ((label|0) == 10) {
  $30 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($30,6230,17776,$vararg_buffer2);
  _qh_errexit(5,$visible$016,0);
  // unreachable;
 }
 $117 = ($numhorizon$0$lcssa|0)==(0);
 if ($117) {
  _qh_precision(18000);
  $118 = HEAP32[(7480)>>2]|0;
  $119 = (_qh_pointid($point)|0);
  HEAP32[$vararg_buffer10>>2] = $119;
  _qh_fprintf($118,6168,18016,$vararg_buffer10);
  $120 = HEAP32[(7500)>>2]|0;
  _qh_printfacetlist($120,0,1);
  _qh_errexit(3,0,0);
  // unreachable;
 }
 $121 = HEAP32[(5344)>>2]|0;
 $122 = ($121|0)>(0);
 if ($122) {
  $123 = HEAP32[(7480)>>2]|0;
  $124 = HEAP32[$goodhorizon>>2]|0;
  $125 = HEAP32[(7520)>>2]|0;
  $126 = HEAP32[$goodvisible>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $numhorizon$0$lcssa;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $124;
  $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
  HEAP32[$vararg_ptr17>>2] = $125;
  $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
  HEAP32[$vararg_ptr18>>2] = $126;
  $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
  HEAP32[$vararg_ptr19>>2] = $coplanar$0$lcssa;
  _qh_fprintf($123,1041,18112,$vararg_buffer13);
 }
 $127 = HEAP32[(5344)>>2]|0;
 $128 = ($127|0)>(3);
 $129 = HEAP32[(7552)>>2]|0;
 $130 = ($129|0)<(50);
 $or$cond3 = $128 & $130;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 _qh_printlists();
 STACKTOP = sp;return;
}
function _qh_partitionvisible($allpoints,$numoutside) {
 $allpoints = $allpoints|0;
 $numoutside = $numoutside|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $coplanar$0$lcssa = 0, $coplanar$017 = 0, $coplanar$1 = 0, $count$07 = 0, $newfacet$0$ = 0;
 var $newfacet$0$lcssa = 0, $newfacet$06 = 0, $pointp$013 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $visible$0 = 0, $visible$016 = 0, $visible$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5448)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = +HEAPF64[(5248)>>3];
  $3 = +HEAPF64[(7640)>>3];
  $4 = $2 < $3;
  if ($4) {
   HEAPF64[(5248)>>3] = $3;
  }
 }
 HEAP32[$numoutside>>2] = 0;
 $visible$016 = HEAP32[(7516)>>2]|0;
 $5 = ($visible$016|0)==(0|0);
 L5: do {
  if ($5) {
   $coplanar$0$lcssa = 0;
  } else {
   $6 = ($allpoints|0)==(0);
   $coplanar$017 = 0;$visible$018 = $visible$016;
   while(1) {
    $7 = ((($visible$018)) + 80|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8 & 2048;
    $10 = ($9|0)==(0);
    if ($10) {
     $coplanar$0$lcssa = $coplanar$017;
     break L5;
    }
    $11 = ((($visible$018)) + 64|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $14 = ((($visible$018)) + 68|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      $coplanar$1 = $coplanar$017;
     } else {
      label = 9;
     }
    } else {
     label = 9;
    }
    if ((label|0) == 9) {
     label = 0;
     $17 = ((($visible$018)) + 32|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     L14: do {
      if ($19) {
       $$lcssa = 0;$newfacet$0$lcssa = 0;
      } else {
       $count$07 = 0;$newfacet$06 = $18;
       while(1) {
        $20 = ((($newfacet$06)) + 80|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = $21 & 2048;
        $23 = ($22|0)==(0);
        if ($23) {
         $$lcssa = 1;$newfacet$0$lcssa = $newfacet$06;
         break L14;
        }
        $24 = ((($newfacet$06)) + 32|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = (($count$07) + 1)|0;
        $27 = HEAP32[(7568)>>2]|0;
        $28 = ($count$07>>>0)>($27>>>0);
        if ($28) {
         _qh_infiniteloop($visible$018);
        }
        $29 = ($25|0)==(0|0);
        if ($29) {
         $$lcssa = 0;$newfacet$0$lcssa = 0;
         break;
        } else {
         $count$07 = $26;$newfacet$06 = $25;
        }
       }
      }
     } while(0);
     $30 = HEAP32[(7512)>>2]|0;
     $newfacet$0$ = $$lcssa ? $newfacet$0$lcssa : $30;
     $31 = HEAP32[(7504)>>2]|0;
     $32 = ($newfacet$0$|0)==($31|0);
     if ($32) {
      break;
     }
     $34 = HEAP32[$11>>2]|0;
     $35 = ($34|0)==(0|0);
     if (!($35)) {
      $36 = (_qh_setsize($34)|0);
      $37 = HEAP32[$numoutside>>2]|0;
      $38 = (($37) + ($36))|0;
      HEAP32[$numoutside>>2] = $38;
      $39 = HEAP32[(7560)>>2]|0;
      $40 = (($39) - ($36))|0;
      HEAP32[(7560)>>2] = $40;
      $41 = HEAP32[$11>>2]|0;
      $42 = ($41|0)==(0|0);
      if (!($42)) {
       $43 = ((($41)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(0|0);
       if (!($45)) {
        $47 = $44;$pointp$013 = $43;
        while(1) {
         $46 = ((($pointp$013)) + 4|0);
         _qh_partitionpoint($47,$newfacet$0$);
         $48 = HEAP32[$46>>2]|0;
         $49 = ($48|0)==(0|0);
         if ($49) {
          break;
         } else {
          $47 = $48;$pointp$013 = $46;
         }
        }
       }
      }
     }
     $50 = ((($visible$018)) + 68|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0|0);
     if ($52) {
      $coplanar$1 = $coplanar$017;
     } else {
      $53 = HEAP32[(5352)>>2]|0;
      $54 = HEAP32[(5356)>>2]|0;
      $55 = (($54) + ($53))|0;
      $56 = HEAP32[(5824)>>2]|0;
      $57 = (0 - ($56))|0;
      $58 = ($55|0)==($57|0);
      if ($58) {
       $coplanar$1 = $coplanar$017;
      } else {
       $59 = (_qh_setsize($51)|0);
       $60 = (($59) + ($coplanar$017))|0;
       $61 = HEAP32[$50>>2]|0;
       $62 = ($61|0)==(0|0);
       if ($62) {
        $coplanar$1 = $60;
       } else {
        $63 = ((($61)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ($64|0)==(0|0);
        if ($65) {
         $coplanar$1 = $60;
        } else {
         $66 = ((($63)) + 4|0);
         $67 = $64;$69 = $66;
         while(1) {
          if ($6) {
           _qh_partitioncoplanar($67,$newfacet$0$,0);
          } else {
           _qh_partitionpoint($67,$newfacet$0$);
          }
          $68 = ((($69)) + 4|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = ($70|0)==(0|0);
          if ($71) {
           $coplanar$1 = $60;
           break;
          } else {
           $67 = $70;$69 = $68;
          }
         }
        }
       }
      }
     }
    }
    $72 = ((($visible$018)) + 48|0);
    $visible$0 = HEAP32[$72>>2]|0;
    $73 = ($visible$0|0)==(0|0);
    if ($73) {
     $coplanar$0$lcssa = $coplanar$1;
     break L5;
    } else {
     $coplanar$017 = $coplanar$1;$visible$018 = $visible$0;
    }
   }
   $33 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($33,6170,18192,$vararg_buffer);
   _qh_errexit(3,0,0);
   // unreachable;
  }
 } while(0);
 $74 = HEAP32[(7752)>>2]|0;
 $75 = ($74|0)==(0|0);
 if (!($75)) {
  $76 = ((($74)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)==(0|0);
  if (!($78)) {
   $79 = ((($76)) + 4|0);
   $80 = ($allpoints|0)==(0);
   $82 = $77;$87 = $79;
   while(1) {
    $81 = ((($82)) + 8|0);
    $83 = HEAP32[$81>>2]|0;
    $84 = ($83|0)==(0|0);
    do {
     if (!($84)) {
      $85 = HEAP32[(7512)>>2]|0;
      if ($80) {
       _qh_partitioncoplanar($83,$85,0);
       break;
      } else {
       _qh_partitionpoint($83,$85);
       break;
      }
     }
    } while(0);
    $86 = ((($87)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    if ($89) {
     break;
    } else {
     $82 = $88;$87 = $86;
    }
   }
  }
 }
 $90 = HEAP32[(5344)>>2]|0;
 $91 = ($90|0)>(0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = HEAP32[(7480)>>2]|0;
 $93 = HEAP32[$numoutside>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $93;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $coplanar$0$lcssa;
 _qh_fprintf($92,1043,18312,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _qh_nextfurthest($visible) {
 $visible = $visible|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa66 = 0, $$lcssa67 = 0, $$lcssa71 = 0, $$lcssa72 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0;
 var $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $facet$0 = 0, $facet$1 = 0, $facet$1$in = 0, $facet$1$in$ph = 0, $facet$215 = 0, $facet$215$lcssa65 = 0, $idx$016 = 0, $idx$016$lcssa64 = 0, $idx$1 = 0, $idx$2 = 0, $or$cond = 0, $outcoplanar$0$ph = 0, $outcoplanar$2 = 0, $size$0 = 0, $size$1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7508)>>2]|0;
 $1 = HEAP32[(7504)>>2]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $4 = $0;
 }
 L3: while(1) {
  $3 = ((($4)) + 64|0);
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $7 = ((($4)) + 48|0);
    $8 = HEAP32[$7>>2]|0;
    HEAP32[(7508)>>2] = $8;
   } else {
    $12 = HEAP32[$5>>2]|0;
    $13 = (((($5)) + 4|0) + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    $16 = (($14) + -1)|0;
    $size$0 = $15 ? $12 : $16;
    $17 = ($size$0|0)==(0);
    if ($17) {
     _qh_setfree($3);
     $18 = ((($4)) + 48|0);
     $19 = HEAP32[$18>>2]|0;
     HEAP32[(7508)>>2] = $19;
     break;
    }
    $20 = HEAP32[(7032)>>2]|0;
    $21 = ($20|0)==(0);
    if (!($21)) {
     $22 = ((($4)) + 80|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $23 & 262144;
     $25 = ($24|0)==(0);
     if (!($25)) {
      _qh_furthestout($4);
     }
     $26 = +HEAPF64[$4>>3];
     $27 = +HEAPF64[(5248)>>3];
     $28 = $26 < $27;
     if ($28) {
      $29 = ((($4)) + 48|0);
      $30 = HEAP32[$29>>2]|0;
      HEAP32[(7508)>>2] = $30;
      break;
     }
    }
    $31 = HEAP32[(5688)>>2]|0;
    $32 = HEAP32[(5792)>>2]|0;
    $33 = $32 | $31;
    $34 = ($33|0)==(0);
    if ($34) {
     $$lcssa67 = $4;
     label = 13;
     break L3;
    }
    $41 = ($31|0)==(0);
    if (!($41)) {
     label = 17;
     break L3;
    }
    $87 = HEAP32[(7504)>>2]|0;
    $88 = ((($87)) + 44|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($89)) + 64|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (_qh_setdellast($91)|0);
    $93 = ($92|0)==(0|0);
    if (!($93)) {
     $$lcssa71 = $89;$$lcssa72 = $92;
     label = 37;
     break L3;
    }
    $94 = HEAP32[$90>>2]|0;
    $95 = ($94|0)==(0|0);
    if (!($95)) {
     _qh_setfree($90);
    }
    _qh_removefacet($89);
    _qh_prependfacet($89,(7500));
   }
  } while(0);
  $9 = HEAP32[(7508)>>2]|0;
  $10 = HEAP32[(7504)>>2]|0;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $$0 = 0;
   label = 38;
   break;
  } else {
   $4 = $9;
  }
 }
 if ((label|0) == 13) {
  $35 = HEAP32[(5452)>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   $facet$0 = $$lcssa67;
  } else {
   _qh_furthestnext();
   $37 = HEAP32[(7508)>>2]|0;
   $facet$0 = $37;
  }
  HEAP32[$visible>>2] = $facet$0;
  $38 = ((($facet$0)) + 64|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_qh_setdellast($39)|0);
  $$0 = $40;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 17) {
  $42 = HEAP32[(7032)>>2]|0;
  $43 = ($42|0)==(0);
  L35: do {
   if ($43) {
    $outcoplanar$2 = 0;
   } else {
    $facet$1$in$ph = (7500);$outcoplanar$0$ph = 0;
    while(1) {
     $44 = HEAP32[(7508)>>2]|0;
     $facet$1$in = $facet$1$in$ph;
     while(1) {
      $facet$1 = HEAP32[$facet$1$in>>2]|0;
      $45 = ($facet$1|0)==(0|0);
      if ($45) {
       $outcoplanar$2 = $outcoplanar$0$ph;
       break L35;
      }
      $46 = ((($facet$1)) + 48|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      $49 = ($facet$1|0)==($44|0);
      $or$cond = $48 | $49;
      if ($or$cond) {
       $outcoplanar$2 = $outcoplanar$0$ph;
       break L35;
      }
      $50 = ((($facet$1)) + 64|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       $facet$1$in = $46;
      } else {
       $$lcssa = $46;$$lcssa63 = $51;
       break;
      }
     }
     $53 = (_qh_setsize($$lcssa63)|0);
     $54 = (($53) + ($outcoplanar$0$ph))|0;
     $facet$1$in$ph = $$lcssa;$outcoplanar$0$ph = $54;
    }
   }
  } while(0);
  $55 = (_qh_rand()|0);
  $56 = (+($55|0));
  $57 = $56 / 2147483647.0;
  $58 = HEAP32[(7560)>>2]|0;
  $59 = (($58) - ($outcoplanar$2))|0;
  $60 = (+($59|0));
  $61 = $57 * $60;
  $62 = (+Math_floor((+$61)));
  $63 = (~~(($62)));
  $64 = HEAP32[(7508)>>2]|0;
  $65 = ($64|0)==(0|0);
  L44: do {
   if ($65) {
    $idx$2 = $63;
   } else {
    $facet$215 = $64;$idx$016 = $63;
    L45: while(1) {
     $66 = ((($facet$215)) + 48|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0|0);
     if ($68) {
      $idx$2 = $idx$016;
      break L44;
     }
     $69 = ((($facet$215)) + 64|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0|0);
     do {
      if ($71) {
       $idx$1 = $idx$016;
      } else {
       $72 = HEAP32[$70>>2]|0;
       $73 = (((($70)) + 4|0) + ($72<<2)|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(0);
       $76 = (($74) + -1)|0;
       $size$1 = $75 ? $72 : $76;
       $77 = ($size$1|0)==(0);
       if ($77) {
        _qh_setfree($69);
        $idx$1 = $idx$016;
        break;
       }
       $78 = ($idx$016|0)<($size$1|0);
       if ($78) {
        $$lcssa66 = $69;$facet$215$lcssa65 = $facet$215;$idx$016$lcssa64 = $idx$016;
        break L45;
       }
       $81 = (($idx$016) - ($size$1))|0;
       $idx$1 = $81;
      }
     } while(0);
     $82 = HEAP32[$66>>2]|0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      $idx$2 = $idx$1;
      break L44;
     } else {
      $facet$215 = $82;$idx$016 = $idx$1;
     }
    }
    HEAP32[$visible>>2] = $facet$215$lcssa65;
    $79 = HEAP32[$$lcssa66>>2]|0;
    $80 = (_qh_setdelnth($79,$idx$016$lcssa64)|0);
    $$0 = $80;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $84 = HEAP32[(7480)>>2]|0;
  $85 = HEAP32[(7560)>>2]|0;
  $86 = (($idx$2) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $85;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $86;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr2>>3] = $57;
  _qh_fprintf($84,6169,18408,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 else if ((label|0) == 37) {
  HEAP32[$visible>>2] = $$lcssa71;
  $$0 = $$lcssa72;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _qh_errexit2($exitcode,$facet,$otherfacet) {
 $exitcode = $exitcode|0;
 $facet = $facet|0;
 $otherfacet = $otherfacet|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _qh_errprint(55888,$facet,$otherfacet,0,0);
 _qh_errexit($exitcode,0,0);
 // unreachable;
}
function _qh_precision($reason) {
 $reason = $reason|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $notlhs = 0, $notrhs = 0, $or$cond3$not = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7584)>>2]|0;
 $1 = HEAP32[(5460)>>2]|0;
 $2 = HEAP32[(5384)>>2]|0;
 $3 = $2 | $1;
 $notlhs = ($3|0)==(0);
 $notrhs = ($0|0)!=(0);
 $or$cond3$not = $notrhs & $notlhs;
 $4 = +HEAPF64[(7616)>>3];
 $5 = $4 < 8.9884656743115785E+307;
 $or$cond5 = $5 & $or$cond3$not;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[(5344)>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  _longjmp(((7276)|0),3);
  // unreachable;
 }
 $8 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $reason;
 _qh_fprintf($8,26,18520,$vararg_buffer);
 _longjmp(((7276)|0),3);
 // unreachable;
}
function _qh_partitionall($vertices,$points,$numpoints) {
 $vertices = $vertices|0;
 $points = $points|0;
 $numpoints = $numpoints|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestdist$028 = 0.0, $bestdist$121 = 0.0, $bestdist$2 = 0.0, $bestdist$2$lcssa = 0.0, $bestdist$312 = 0.0, $bestdist$313 = 0.0, $bestpoint$018 = 0, $bestpoint$1 = 0, $bestpoint$1$lcssa = 0, $dist = 0, $exitcond = 0;
 var $exitcond42 = 0, $facet$0 = 0, $facet$025 = 0, $facet$029 = 0, $i$038 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $point$036 = 0, $point$117 = 0, $point$215 = 0, $point_end$026 = 0, $point_end$120 = 0, $point_end$2 = 0, $point_end$2$lcssa = 0, $point_end$310 = 0, $point_end$311 = 0, $point_i$019 = 0, $point_i$116 = 0;
 var $pointp$037 = 0, $pointset = 0, $remaining$027 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $pointset = sp + 12|0;
 $dist = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,1042,18568,$vararg_buffer);
 }
 $3 = (_qh_settemp($numpoints)|0);
 HEAP32[$pointset>>2] = $3;
 HEAP32[(7560)>>2] = 0;
 $4 = ($numpoints|0)==(0);
 if (!($4)) {
  $5 = HEAP32[$pointset>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[(5828)>>2]|0;
  $i$038 = $numpoints;$point$036 = $points;$pointp$037 = $6;
  while(1) {
   $8 = (($i$038) + -1)|0;
   $9 = ((($pointp$037)) + 4|0);
   HEAP32[$pointp$037>>2] = $point$036;
   $10 = (($point$036) + ($7<<3)|0);
   $11 = ($8|0)==(0);
   if ($11) {
    break;
   } else {
    $i$038 = $8;$point$036 = $10;$pointp$037 = $9;
   }
  }
 }
 $12 = HEAP32[$pointset>>2]|0;
 _qh_settruncate($12,$numpoints);
 $13 = ($vertices|0)==(0|0);
 if (!($13)) {
  $14 = ((($vertices)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($14)) + 4|0);
   $19 = $15;$26 = $17;
   while(1) {
    $18 = ((($19)) + 8|0);
    $20 = HEAP32[$18>>2]|0;
    $21 = (_qh_pointid($20)|0);
    $22 = ($21|0)>(-1);
    if ($22) {
     $23 = HEAP32[$pointset>>2]|0;
     $24 = (((($23)) + 4|0) + ($21<<2)|0);
     HEAP32[$24>>2] = 0;
    }
    $25 = ((($26)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     break;
    } else {
     $19 = $27;$26 = $25;
    }
   }
  }
 }
 $29 = HEAP32[(5324)>>2]|0;
 $30 = (_qh_pointid($29)|0);
 $31 = ($30|0)>(-1);
 if ($31) {
  $32 = HEAP32[(5732)>>2]|0;
  $33 = (($32) + -1)|0;
  $34 = ($33|0)==($30|0);
  if (!($34)) {
   $35 = HEAP32[(5736)>>2]|0;
   $36 = $35 ^ -1;
   $37 = ($30|0)==($36|0);
   if (!($37)) {
    $38 = HEAP32[$pointset>>2]|0;
    $39 = (((($38)) + 4|0) + ($30<<2)|0);
    HEAP32[$39>>2] = 0;
   }
  }
 }
 $40 = HEAP32[(5336)>>2]|0;
 $41 = HEAP32[(5444)>>2]|0;
 $notlhs = ($40|0)==(0|0);
 $notrhs = ($41|0)==(0);
 $or$cond$not = $notlhs | $notrhs;
 $42 = HEAP32[(5392)>>2]|0;
 $43 = ($42|0)!=(0);
 $or$cond3 = $or$cond$not | $43;
 if (!($or$cond3)) {
  $44 = (_qh_pointid($40)|0);
  $45 = ($44|0)>(-1);
  if ($45) {
   $46 = HEAP32[$pointset>>2]|0;
   $47 = (((($46)) + 4|0) + ($44<<2)|0);
   HEAP32[$47>>2] = 0;
  }
 }
 $48 = HEAP32[(5268)>>2]|0;
 $49 = ($48|0)==(0);
 L27: do {
  if ($49) {
   $50 = HEAP32[(44768)>>2]|0;
   $51 = ($50|0)>(50);
   $52 = $51 ? 2.0 : 1.0;
   $53 = HEAP32[(5392)>>2]|0;
   $54 = ($53|0)!=(0);
   $55 = $54 ? 2.0 : 1.0;
   $56 = +HEAPF64[(5248)>>3];
   $57 = $56 * $55;
   $58 = +HEAPF64[(7632)>>3];
   $59 = $57 < $58;
   $$ = $59 ? $58 : $57;
   $60 = $52 * $$;
   $61 = HEAP32[(5836)>>2]|0;
   $62 = HEAP32[(5828)>>2]|0;
   $63 = (($61) + -1)|0;
   $64 = (($63) - ($62))|0;
   HEAP32[(44784)>>2] = $64;
   $facet$025 = HEAP32[(7500)>>2]|0;
   $65 = ($facet$025|0)==(0|0);
   if (!($65)) {
    $66 = HEAP32[(7552)>>2]|0;
    $bestdist$028 = -1.7976931348623157E+308;$facet$029 = $facet$025;$point_end$026 = $numpoints;$remaining$027 = $66;
    while(1) {
     $67 = ((($facet$029)) + 48|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(0|0);
     if ($69) {
      break L27;
     }
     $70 = (($remaining$027) + -1)|0;
     $71 = (($point_end$026|0) / ($remaining$027|0))&-1;
     $72 = (($71) + 100)|0;
     $73 = (_qh_setnew($72)|0);
     $74 = ((($facet$029)) + 64|0);
     HEAP32[$74>>2] = $73;
     $75 = HEAP32[$pointset>>2]|0;
     $76 = ($75|0)==(0|0);
     if ($76) {
      $bestdist$313 = $bestdist$028;$point_end$311 = 0;
      label = 35;
     } else {
      $77 = ((($75)) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (_qh_setsize($75)|0);
      $80 = ($79|0)>(0);
      if ($80) {
       $bestdist$121 = $bestdist$028;$bestpoint$018 = 0;$point$117 = $78;$point_end$120 = 0;$point_i$019 = 0;
       while(1) {
        $81 = ($point$117|0)==(0|0);
        do {
         if ($81) {
          $bestdist$2 = $bestdist$121;$bestpoint$1 = $bestpoint$018;$point_end$2 = $point_end$120;
         } else {
          $82 = HEAP32[(44512)>>2]|0;
          $83 = (($82) + 1)|0;
          HEAP32[(44512)>>2] = $83;
          _qh_distplane($point$117,$facet$029,$dist);
          $84 = +HEAPF64[$dist>>3];
          $85 = $84 < $60;
          if ($85) {
           $86 = (($point_end$120) + 1)|0;
           $87 = HEAP32[$pointset>>2]|0;
           $88 = (((($87)) + 4|0) + ($point_end$120<<2)|0);
           HEAP32[$88>>2] = $point$117;
           $bestdist$2 = $bestdist$121;$bestpoint$1 = $bestpoint$018;$point_end$2 = $86;
           break;
          }
          $89 = HEAP32[(7560)>>2]|0;
          $90 = (($89) + 1)|0;
          HEAP32[(7560)>>2] = $90;
          $91 = ($bestpoint$018|0)==(0|0);
          $92 = +HEAPF64[$dist>>3];
          if ($91) {
           $bestdist$2 = $92;$bestpoint$1 = $point$117;$point_end$2 = $point_end$120;
          } else {
           $93 = $92 > $bestdist$121;
           if ($93) {
            _qh_setappend($74,$bestpoint$018);
            $94 = +HEAPF64[$dist>>3];
            $bestdist$2 = $94;$bestpoint$1 = $point$117;$point_end$2 = $point_end$120;
            break;
           } else {
            _qh_setappend($74,$point$117);
            $bestdist$2 = $bestdist$121;$bestpoint$1 = $bestpoint$018;$point_end$2 = $point_end$120;
            break;
           }
          }
         }
        } while(0);
        $95 = (($point_i$019) + 1)|0;
        $96 = HEAP32[$pointset>>2]|0;
        $97 = (((($96)) + 4|0) + ($95<<2)|0);
        $98 = HEAP32[$97>>2]|0;
        $exitcond42 = ($95|0)==($79|0);
        if ($exitcond42) {
         $bestdist$2$lcssa = $bestdist$2;$bestpoint$1$lcssa = $bestpoint$1;$point_end$2$lcssa = $point_end$2;
         break;
        } else {
         $bestdist$121 = $bestdist$2;$bestpoint$018 = $bestpoint$1;$point$117 = $98;$point_end$120 = $point_end$2;$point_i$019 = $95;
        }
       }
       $99 = ($bestpoint$1$lcssa|0)==(0|0);
       if ($99) {
        $bestdist$313 = $bestdist$2$lcssa;$point_end$311 = $point_end$2$lcssa;
        label = 35;
       } else {
        _qh_setappend($74,$bestpoint$1$lcssa);
        HEAPF64[$facet$029>>3] = $bestdist$2$lcssa;
        $bestdist$312 = $bestdist$2$lcssa;$point_end$310 = $point_end$2$lcssa;
       }
      } else {
       $bestdist$313 = $bestdist$028;$point_end$311 = 0;
       label = 35;
      }
     }
     if ((label|0) == 35) {
      label = 0;
      _qh_setfree($74);
      $bestdist$312 = $bestdist$313;$point_end$310 = $point_end$311;
     }
     $100 = HEAP32[$pointset>>2]|0;
     _qh_settruncate($100,$point_end$310);
     $facet$0 = HEAP32[$67>>2]|0;
     $101 = ($facet$0|0)==(0|0);
     if ($101) {
      break;
     } else {
      $bestdist$028 = $bestdist$312;$facet$029 = $facet$0;$point_end$026 = $point_end$310;$remaining$027 = $70;
     }
    }
   }
  }
 } while(0);
 $102 = HEAP32[(5268)>>2]|0;
 $103 = HEAP32[(5392)>>2]|0;
 $104 = $103 | $102;
 $105 = HEAP32[(5352)>>2]|0;
 $106 = $104 | $105;
 $107 = HEAP32[(5356)>>2]|0;
 $108 = $106 | $107;
 $109 = ($108|0)==(0);
 if (!($109)) {
  HEAP32[(7660)>>2] = 1;
  $110 = HEAP32[$pointset>>2]|0;
  $111 = ($110|0)==(0|0);
  if (!($111)) {
   $112 = ((($110)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (_qh_setsize($110)|0);
   $115 = ($114|0)>(0);
   if ($115) {
    $point$215 = $113;$point_i$116 = 0;
    while(1) {
     $116 = ($point$215|0)==(0|0);
     if (!($116)) {
      $117 = HEAP32[(7500)>>2]|0;
      _qh_partitionpoint($point$215,$117);
     }
     $118 = (($point_i$116) + 1)|0;
     $119 = HEAP32[$pointset>>2]|0;
     $120 = (((($119)) + 4|0) + ($118<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $exitcond = ($118|0)==($114|0);
     if ($exitcond) {
      break;
     } else {
      $point$215 = $121;$point_i$116 = $118;
     }
    }
   }
  }
  HEAP32[(7660)>>2] = 0;
 }
 $122 = HEAP32[(44504)>>2]|0;
 $123 = HEAP32[(44512)>>2]|0;
 $124 = (($123) + ($122))|0;
 HEAP32[(44512)>>2] = $124;
 HEAP32[(44504)>>2] = 0;
 _qh_settempfree($pointset);
 $125 = HEAP32[(5344)>>2]|0;
 $126 = ($125|0)>(3);
 if (!($126)) {
  STACKTOP = sp;return;
 }
 $127 = HEAP32[(7500)>>2]|0;
 _qh_printfacetlist($127,0,1);
 STACKTOP = sp;return;
}
function _qh_partitionpoint($point,$facet) {
 $point = $point|0;
 $facet = $facet|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $bestdist = 0, $bestfacet$0 = 0;
 var $isoutside = 0, $numpart = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer3 = sp;
 $vararg_buffer = sp + 8|0;
 $bestdist = sp + 24|0;
 $isoutside = sp + 52|0;
 $numpart = sp + 48|0;
 $0 = HEAP32[(7660)>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[(5268)>>2]|0;
 if ($1) {
  $4 = (_qh_findbest($point,$facet,$2,1,0,$bestdist,$isoutside,$numpart)|0);
  $bestfacet$0 = $4;
 } else {
  $3 = (_qh_findbestnew($point,$facet,$bestdist,$2,$isoutside,$numpart)|0);
  $bestfacet$0 = $3;
 }
 $5 = HEAP32[(44784)>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[(44784)>>2] = $6;
 $7 = HEAP32[$numpart>>2]|0;
 $8 = HEAP32[(44504)>>2]|0;
 $9 = (($8) + ($7))|0;
 HEAP32[(44504)>>2] = $9;
 $10 = HEAP32[(7032)>>2]|0;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   label = 13;
  } else {
   $12 = HEAP32[(5304)>>2]|0;
   $13 = ($12|0)==(0);
   $14 = HEAP32[$isoutside>>2]|0;
   $15 = ($14|0)!=(0);
   $or$cond = $13 | $15;
   if (!($or$cond)) {
    $16 = +HEAPF64[$bestdist>>3];
    $17 = +HEAPF64[(5376)>>3];
    $18 = -$17;
    $19 = !($16 >= $18);
    if (!($19)) {
     _qh_precision(18632);
    }
   }
   $20 = HEAP32[(5824)>>2]|0;
   $21 = ($20|0)==(0);
   $22 = +HEAPF64[$bestdist>>3];
   if ($21) {
    $26 = +HEAPF64[(5376)>>3];
    $27 = -$26;
    $28 = !($22 >= $27);
    if ($28) {
     label = 13;
     break;
    }
    HEAP32[$isoutside>>2] = 1;
    break;
   } else {
    $23 = +HEAPF64[(7040)>>3];
    $24 = -$23;
    $25 = !($22 >= $24);
    if ($25) {
     label = 13;
     break;
    }
    HEAP32[$isoutside>>2] = 1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $$pr = HEAP32[$isoutside>>2]|0;
  $29 = ($$pr|0)==(0);
  if ($29) {
   $56 = HEAP32[(5304)>>2]|0;
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = +HEAPF64[$bestdist>>3];
    $59 = +HEAPF64[(5376)>>3];
    $60 = -$59;
    $61 = !($58 >= $60);
    if ($61) {
     $79 = HEAP32[(5824)>>2]|0;
     $80 = ($79|0)==(0);
     if (!($80)) {
      $81 = +HEAPF64[(7040)>>3];
      $82 = -$81;
      $83 = $58 > $82;
      if ($83) {
       $84 = HEAP32[(44520)>>2]|0;
       $85 = (($84) + 1)|0;
       HEAP32[(44520)>>2] = $85;
       _qh_partitioncoplanar($point,$bestfacet$0,$bestdist);
       STACKTOP = sp;return;
      }
     }
     $86 = HEAP32[(44496)>>2]|0;
     $87 = (($86) + 1)|0;
     HEAP32[(44496)>>2] = $87;
     $88 = HEAP32[(5344)>>2]|0;
     $89 = ($88|0)>(3);
     if ($89) {
      $90 = HEAP32[(7480)>>2]|0;
      $91 = (_qh_pointid($point)|0);
      $92 = ((($bestfacet$0)) + 76|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = +HEAPF64[$bestdist>>3];
      HEAP32[$vararg_buffer7>>2] = $91;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $93;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAPF64[$vararg_ptr11>>3] = $94;
      _qh_fprintf($90,4067,18848,$vararg_buffer7);
     }
     $95 = HEAP32[(5356)>>2]|0;
     $96 = ($95|0)==(0);
     if ($96) {
      STACKTOP = sp;return;
     }
     _qh_partitioncoplanar($point,$bestfacet$0,$bestdist);
     STACKTOP = sp;return;
    }
   }
   $62 = HEAP32[(43464)>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[(43464)>>2] = $63;
   $64 = HEAP32[(5304)>>2]|0;
   $65 = ($64|0)==(0);
   if (!($65)) {
    _qh_precision(18752);
   }
   $66 = HEAP32[(5352)>>2]|0;
   $67 = HEAP32[(5824)>>2]|0;
   $68 = (0 - ($67))|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = +HEAPF64[$bestdist>>3];
    $71 = +HEAPF64[(7632)>>3];
    $72 = $70 > $71;
    if (!($72)) {
     $73 = HEAP32[(5344)>>2]|0;
     $74 = ($73|0)>(3);
     if (!($74)) {
      STACKTOP = sp;return;
     }
     $75 = HEAP32[(7480)>>2]|0;
     $76 = (_qh_pointid($point)|0);
     $77 = ((($bestfacet$0)) + 76|0);
     $78 = HEAP32[$77>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $76;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $78;
     _qh_fprintf($75,4066,18776,$vararg_buffer3);
     STACKTOP = sp;return;
    }
   }
   _qh_partitioncoplanar($point,$bestfacet$0,$bestdist);
   STACKTOP = sp;return;
  }
 }
 $30 = ((($bestfacet$0)) + 64|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 do {
  if ($32) {
   label = 16;
  } else {
   $33 = (_qh_setlast($31)|0);
   $34 = ($33|0)==(0|0);
   if ($34) {
    label = 16;
   } else {
    $40 = +HEAPF64[$bestfacet$0>>3];
    $41 = +HEAPF64[$bestdist>>3];
    $42 = $40 < $41;
    if ($42) {
     _qh_setappend($30,$point);
     $43 = +HEAPF64[$bestdist>>3];
     HEAPF64[$bestfacet$0>>3] = $43;
     break;
    } else {
     _qh_setappend2ndlast($30,$point);
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  _qh_setappend($30,$point);
  $35 = ((($bestfacet$0)) + 80|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & 1024;
  $38 = ($37|0)==(0);
  if ($38) {
   _qh_removefacet($bestfacet$0);
   _qh_appendfacet($bestfacet$0);
  }
  $39 = +HEAPF64[$bestdist>>3];
  HEAPF64[$bestfacet$0>>3] = $39;
 }
 $44 = HEAP32[(7560)>>2]|0;
 $45 = (($44) + 1)|0;
 HEAP32[(7560)>>2] = $45;
 $46 = HEAP32[(5344)>>2]|0;
 $47 = ($46|0)>(3);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = HEAP32[(7480)>>2]|0;
 $49 = (_qh_pointid($point)|0);
 $50 = ((($bestfacet$0)) + 76|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($bestfacet$0)) + 80|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 >>> 10;
 $55 = $54 & 1;
 HEAP32[$vararg_buffer>>2] = $49;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $51;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $55;
 _qh_fprintf($48,4065,18672,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_printsummary($fp) {
 $fp = $fp|0;
 var $$ = 0, $$15 = 0, $$16 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0;
 var $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0;
 var $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $facet$0 = 0, $facet$0$in = 0, $facet$0$in$ph = 0, $facet$0$in$ph21 = 0, $facet$0$lcssa44 = 0, $facet$0$lcssa44$lcssa = 0, $goodused$0 = 0, $innerplane = 0, $nonsimplicial$0$ = 0;
 var $nonsimplicial$0$ph = 0, $nonsimplicial$0$ph$lcssa = 0, $not$ = 0, $not$17 = 0, $not$18 = 0, $numcoplanars$0 = 0, $numcoplanars$0$lcssa = 0, $numcoplanars$0$ph = 0, $numcoplanars$0$ph20 = 0, $numcoplanars$1 = 0, $numcoplanars$1$lcssa = 0, $numcoplanars$1$lcssa$lcssa = 0, $numtricoplanars$0$ = 0, $numtricoplanars$0$ph = 0, $numtricoplanars$0$ph22 = 0, $numtricoplanars$0$ph22$lcssa = 0, $numtricoplanars$0$ph22$lcssa46 = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $outerplane = 0, $s$0 = 0, $s$1 = 0, $size$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer12 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0, $vararg_buffer127 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0;
 var $vararg_buffer136 = 0, $vararg_buffer139 = 0, $vararg_buffer142 = 0, $vararg_buffer146 = 0, $vararg_buffer149 = 0, $vararg_buffer15 = 0, $vararg_buffer153 = 0, $vararg_buffer157 = 0, $vararg_buffer161 = 0, $vararg_buffer164 = 0, $vararg_buffer166 = 0, $vararg_buffer170 = 0, $vararg_buffer173 = 0, $vararg_buffer175 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer58 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer82 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0;
 var $vararg_ptr102 = 0, $vararg_ptr109 = 0, $vararg_ptr11 = 0, $vararg_ptr145 = 0, $vararg_ptr152 = 0, $vararg_ptr156 = 0, $vararg_ptr160 = 0, $vararg_ptr169 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr3 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr61 = 0, $vararg_ptr7 = 0, $vararg_ptr71 = 0, $vararg_ptr81 = 0;
 var $vararg_ptr85 = 0, $vararg_ptr92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer175 = sp + 480|0;
 $vararg_buffer173 = sp + 472|0;
 $vararg_buffer170 = sp + 464|0;
 $vararg_buffer166 = sp + 448|0;
 $vararg_buffer164 = sp + 440|0;
 $vararg_buffer161 = sp + 432|0;
 $vararg_buffer157 = sp + 416|0;
 $vararg_buffer153 = sp + 400|0;
 $vararg_buffer149 = sp + 384|0;
 $vararg_buffer146 = sp + 376|0;
 $vararg_buffer142 = sp + 360|0;
 $vararg_buffer139 = sp + 352|0;
 $vararg_buffer136 = sp + 344|0;
 $vararg_buffer133 = sp + 336|0;
 $vararg_buffer130 = sp + 328|0;
 $vararg_buffer127 = sp + 320|0;
 $vararg_buffer124 = sp + 312|0;
 $vararg_buffer121 = sp + 304|0;
 $vararg_buffer118 = sp + 296|0;
 $vararg_buffer115 = sp + 288|0;
 $vararg_buffer113 = sp + 280|0;
 $vararg_buffer110 = sp + 272|0;
 $vararg_buffer106 = sp + 264|0;
 $vararg_buffer103 = sp + 256|0;
 $vararg_buffer99 = sp + 248|0;
 $vararg_buffer96 = sp + 240|0;
 $vararg_buffer93 = sp + 232|0;
 $vararg_buffer89 = sp + 224|0;
 $vararg_buffer86 = sp + 216|0;
 $vararg_buffer82 = sp + 96|0;
 $vararg_buffer78 = sp + 88|0;
 $vararg_buffer75 = sp + 80|0;
 $vararg_buffer72 = sp + 72|0;
 $vararg_buffer68 = sp + 64|0;
 $vararg_buffer65 = sp + 56|0;
 $vararg_buffer62 = sp + 48|0;
 $vararg_buffer58 = sp + 32|0;
 $vararg_buffer54 = sp + 24|0;
 $vararg_buffer50 = sp + 16|0;
 $vararg_buffer47 = sp + 8|0;
 $vararg_buffer44 = sp;
 $vararg_buffer41 = sp + 40|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer25 = sp + 128|0;
 $vararg_buffer21 = sp + 136|0;
 $vararg_buffer18 = sp + 144|0;
 $vararg_buffer15 = sp + 152|0;
 $vararg_buffer12 = sp + 160|0;
 $vararg_buffer8 = sp + 168|0;
 $vararg_buffer4 = sp + 176|0;
 $vararg_buffer1 = sp + 184|0;
 $vararg_buffer = sp + 192|0;
 $outerplane = sp + 200|0;
 $innerplane = sp + 208|0;
 $0 = HEAP32[(43568)>>2]|0;
 $1 = HEAP32[(5836)>>2]|0;
 $2 = HEAP32[(7748)>>2]|0;
 $3 = (_qh_setsize($2)|0);
 $4 = (($3) + ($1))|0;
 $5 = HEAP32[(7556)>>2]|0;
 $6 = HEAP32[(7752)>>2]|0;
 $7 = (_qh_setsize($6)|0);
 $8 = (($5) - ($7))|0;
 $9 = HEAP32[(5324)>>2]|0;
 $10 = (_qh_pointid($9)|0);
 $facet$0$in$ph = (7500);$nonsimplicial$0$ph = 0;$numcoplanars$0$ph = 0;$numtricoplanars$0$ph = 0;
 L1: while(1) {
  $facet$0$in$ph21 = $facet$0$in$ph;$numcoplanars$0$ph20 = $numcoplanars$0$ph;$numtricoplanars$0$ph22 = $numtricoplanars$0$ph;
  while(1) {
   $facet$0$in = $facet$0$in$ph21;$numcoplanars$0 = $numcoplanars$0$ph20;
   while(1) {
    $facet$0 = HEAP32[$facet$0$in>>2]|0;
    $11 = ($facet$0|0)==(0|0);
    if ($11) {
     $nonsimplicial$0$ph$lcssa = $nonsimplicial$0$ph;$numcoplanars$0$lcssa = $numcoplanars$0;$numtricoplanars$0$ph22$lcssa = $numtricoplanars$0$ph22;
     break L1;
    }
    $12 = ((($facet$0)) + 48|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if ($14) {
     $nonsimplicial$0$ph$lcssa = $nonsimplicial$0$ph;$numcoplanars$0$lcssa = $numcoplanars$0;$numtricoplanars$0$ph22$lcssa = $numtricoplanars$0$ph22;
     break L1;
    }
    $15 = ((($facet$0)) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $numcoplanars$1 = $numcoplanars$0;
    } else {
     $18 = (_qh_setsize($16)|0);
     $19 = (($18) + ($numcoplanars$0))|0;
     $numcoplanars$1 = $19;
    }
    $20 = ((($facet$0)) + 80|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 & 524288;
    $23 = ($22|0)==(0);
    if ($23) {
     $facet$0$in = $12;$numcoplanars$0 = $numcoplanars$1;
    } else {
     $$lcssa = $12;$$lcssa45 = $21;$facet$0$lcssa44 = $facet$0;$numcoplanars$1$lcssa = $numcoplanars$1;
     break;
    }
   }
   $24 = $$lcssa45 & 8192;
   $25 = ($24|0)==(0);
   if ($25) {
    $$lcssa$lcssa = $$lcssa;$facet$0$lcssa44$lcssa = $facet$0$lcssa44;$numcoplanars$1$lcssa$lcssa = $numcoplanars$1$lcssa;$numtricoplanars$0$ph22$lcssa46 = $numtricoplanars$0$ph22;
    break;
   }
   $26 = $$lcssa45 & 268435968;
   $not$ = ($26|0)==(268435968);
   $27 = $not$&1;
   $numtricoplanars$0$ = (($27) + ($numtricoplanars$0$ph22))|0;
   $facet$0$in$ph21 = $$lcssa;$numcoplanars$0$ph20 = $numcoplanars$1$lcssa;$numtricoplanars$0$ph22 = $numtricoplanars$0$;
  }
  $28 = ((($facet$0$lcssa44$lcssa)) + 52|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_qh_setsize($29)|0);
  $31 = HEAP32[(5828)>>2]|0;
  $not$17 = ($30|0)!=($31|0);
  $32 = $not$17&1;
  $nonsimplicial$0$ = (($32) + ($nonsimplicial$0$ph))|0;
  $facet$0$in$ph = $$lcssa$lcssa;$nonsimplicial$0$ph = $nonsimplicial$0$;$numcoplanars$0$ph = $numcoplanars$1$lcssa$lcssa;$numtricoplanars$0$ph = $numtricoplanars$0$ph22$lcssa46;
 }
 $33 = ($10|0)>(-1);
 if ($33) {
  $34 = HEAP32[(5732)>>2]|0;
  $35 = (($34) + -1)|0;
  $36 = ($35|0)==($10|0);
  if ($36) {
   $size$0 = $4;
  } else {
   $37 = HEAP32[(5736)>>2]|0;
   $38 = $37 ^ -1;
   $not$18 = ($10|0)!=($38|0);
   $39 = $not$18 << 31 >> 31;
   $$ = (($39) + ($4))|0;
   $size$0 = $$;
  }
 } else {
  $size$0 = $4;
 }
 $40 = HEAP32[(5732)>>2]|0;
 $41 = HEAP32[(5736)>>2]|0;
 $42 = $41 | $40;
 $43 = ($42|0)==(0);
 if (!($43)) {
  _qh_fprintf($fp,9288,18928,$vararg_buffer);
 }
 $44 = HEAP32[(5780)>>2]|0;
 $45 = ($44|0)==(0);
 do {
  if ($45) {
   $51 = HEAP32[(5304)>>2]|0;
   $52 = ($51|0)==(0);
   if ($52) {
    $58 = HEAP32[(7564)>>2]|0;
    $goodused$0 = $58;
    break;
   } else {
    $53 = HEAP32[(5332)>>2]|0;
    $54 = HEAP32[(5320)>>2]|0;
    $55 = (($54) + ($53))|0;
    $56 = HEAP32[(5328)>>2]|0;
    $57 = (($55) + ($56))|0;
    $goodused$0 = $57;
    break;
   }
  } else {
   $46 = HEAP32[(5332)>>2]|0;
   $47 = HEAP32[(5320)>>2]|0;
   $48 = (($47) + ($46))|0;
   $49 = HEAP32[(5728)>>2]|0;
   $50 = (($48) + ($49))|0;
   $goodused$0 = $50;
  }
 } while(0);
 $59 = HEAP32[(44768)>>2]|0;
 $60 = HEAP32[(43504)>>2]|0;
 $61 = (($59) - ($60))|0;
 $62 = HEAP32[(43496)>>2]|0;
 $63 = (($61) + ($62))|0;
 $64 = HEAP32[(5796)>>2]|0;
 $65 = ($64|0)==(0);
 do {
  if ($65) {
   $82 = HEAP32[(5304)>>2]|0;
   $83 = ($82|0)==(0);
   if (!($83)) {
    $84 = HEAP32[(5780)>>2]|0;
    $85 = ($84|0)==(0);
    $86 = HEAP32[(5828)>>2]|0;
    if ($85) {
     HEAP32[$vararg_buffer33>>2] = $size$0;
     $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
     HEAP32[$vararg_ptr36>>2] = $86;
     _qh_fprintf($fp,9298,19552,$vararg_buffer33);
    } else {
     HEAP32[$vararg_buffer29>>2] = $size$0;
     $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
     HEAP32[$vararg_ptr32>>2] = $86;
     _qh_fprintf($fp,9297,19464,$vararg_buffer29);
    }
    $87 = HEAP32[(5260)>>2]|0;
    $88 = ($87|0)!=(0);
    $89 = $88 ? 19152 : 56512;
    HEAP32[$vararg_buffer37>>2] = $89;
    $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
    HEAP32[$vararg_ptr40>>2] = $8;
    _qh_fprintf($fp,9299,19624,$vararg_buffer37);
    $90 = ($0|0)==(0);
    if (!($90)) {
     HEAP32[$vararg_buffer41>>2] = $0;
     _qh_fprintf($fp,9300,19216,$vararg_buffer41);
    }
    $91 = (($numcoplanars$0$lcssa) - ($0))|0;
    $92 = ($91|0)>(0);
    if ($92) {
     HEAP32[$vararg_buffer44>>2] = $91;
     _qh_fprintf($fp,9301,19272,$vararg_buffer44);
    } else {
     $93 = (($size$0) - ($8))|0;
     $94 = (($93) - ($0))|0;
     $95 = ($94|0)>(0);
     if ($95) {
      HEAP32[$vararg_buffer47>>2] = $94;
      _qh_fprintf($fp,9302,19312,$vararg_buffer47);
     }
    }
    $96 = ($goodused$0|0)!=(0);
    $97 = $96 ? 19360 : 56512;
    $98 = HEAP32[(7564)>>2]|0;
    HEAP32[$vararg_buffer50>>2] = $97;
    $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
    HEAP32[$vararg_ptr53>>2] = $98;
    _qh_fprintf($fp,9303,19656,$vararg_buffer50);
    $99 = ($nonsimplicial$0$ph$lcssa|0)==(0);
    if ($99) {
     break;
    }
    HEAP32[$vararg_buffer54>>2] = $97;
    $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
    HEAP32[$vararg_ptr57>>2] = $nonsimplicial$0$ph$lcssa;
    _qh_fprintf($fp,9304,19696,$vararg_buffer54);
    break;
   }
   $100 = HEAP32[(5340)>>2]|0;
   $101 = ($100|0)==(0);
   $102 = HEAP32[(5828)>>2]|0;
   if ($101) {
    HEAP32[$vararg_buffer82>>2] = $size$0;
    $vararg_ptr85 = ((($vararg_buffer82)) + 4|0);
    HEAP32[$vararg_ptr85>>2] = $102;
    _qh_fprintf($fp,9312,20128,$vararg_buffer82);
    HEAP32[$vararg_buffer86>>2] = $8;
    _qh_fprintf($fp,9313,20168,$vararg_buffer86);
    $115 = ($numcoplanars$0$lcssa|0)==(0);
    if (!($115)) {
     $116 = HEAP32[(5356)>>2]|0;
     $117 = ($116|0)!=(0);
     $118 = HEAP32[(5352)>>2]|0;
     $119 = ($118|0)!=(0);
     $or$cond5 = $117 & $119;
     $$16 = $117 ? 20200 : 20216;
     $s$1 = $or$cond5 ? 20232 : $$16;
     HEAP32[$vararg_buffer89>>2] = $s$1;
     $vararg_ptr92 = ((($vararg_buffer89)) + 4|0);
     HEAP32[$vararg_ptr92>>2] = $numcoplanars$0$lcssa;
     _qh_fprintf($fp,9314,20256,$vararg_buffer89);
    }
    $120 = HEAP32[(7552)>>2]|0;
    $121 = HEAP32[(7520)>>2]|0;
    $122 = (($120) - ($121))|0;
    HEAP32[$vararg_buffer93>>2] = $122;
    _qh_fprintf($fp,9315,20288,$vararg_buffer93);
    $123 = ($goodused$0|0)!=(0);
    if ($123) {
     $124 = HEAP32[(7564)>>2]|0;
     HEAP32[$vararg_buffer96>>2] = $124;
     _qh_fprintf($fp,9316,20312,$vararg_buffer96);
    }
    $125 = ($nonsimplicial$0$ph$lcssa|0)==(0);
    if ($125) {
     break;
    }
    $126 = $123 ? 19360 : 56512;
    HEAP32[$vararg_buffer99>>2] = $126;
    $vararg_ptr102 = ((($vararg_buffer99)) + 4|0);
    HEAP32[$vararg_ptr102>>2] = $nonsimplicial$0$ph$lcssa;
    _qh_fprintf($fp,9317,20344,$vararg_buffer99);
    break;
   } else {
    HEAP32[$vararg_buffer58>>2] = $size$0;
    $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
    HEAP32[$vararg_ptr61>>2] = $102;
    _qh_fprintf($fp,9305,19752,$vararg_buffer58);
    HEAP32[$vararg_buffer62>>2] = $size$0;
    _qh_fprintf($fp,9306,19824,$vararg_buffer62);
    HEAP32[$vararg_buffer65>>2] = $8;
    _qh_fprintf($fp,9307,19856,$vararg_buffer65);
    $103 = ($numcoplanars$0$lcssa|0)==(0);
    if (!($103)) {
     $104 = HEAP32[(5356)>>2]|0;
     $105 = ($104|0)!=(0);
     $106 = HEAP32[(5352)>>2]|0;
     $107 = ($106|0)!=(0);
     $or$cond3 = $105 & $107;
     $$15 = $105 ? 19904 : 19920;
     $s$0 = $or$cond3 ? 19928 : $$15;
     HEAP32[$vararg_buffer68>>2] = $s$0;
     $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
     HEAP32[$vararg_ptr71>>2] = $numcoplanars$0$lcssa;
     _qh_fprintf($fp,9308,19952,$vararg_buffer68);
    }
    $108 = HEAP32[(7552)>>2]|0;
    $109 = HEAP32[(7520)>>2]|0;
    $110 = (($108) - ($109))|0;
    HEAP32[$vararg_buffer72>>2] = $110;
    _qh_fprintf($fp,9309,19984,$vararg_buffer72);
    $111 = ($goodused$0|0)!=(0);
    if ($111) {
     $112 = HEAP32[(7564)>>2]|0;
     HEAP32[$vararg_buffer75>>2] = $112;
     _qh_fprintf($fp,9310,20024,$vararg_buffer75);
    }
    $113 = ($nonsimplicial$0$ph$lcssa|0)==(0);
    if ($113) {
     break;
    }
    $114 = $111 ? 19360 : 56512;
    HEAP32[$vararg_buffer78>>2] = $114;
    $vararg_ptr81 = ((($vararg_buffer78)) + 4|0);
    HEAP32[$vararg_ptr81>>2] = $nonsimplicial$0$ph$lcssa;
    _qh_fprintf($fp,9311,20072,$vararg_buffer78);
    break;
   }
  } else {
   $66 = HEAP32[(5780)>>2]|0;
   $67 = ($66|0)==(0);
   $68 = HEAP32[(5828)>>2]|0;
   if ($67) {
    HEAP32[$vararg_buffer4>>2] = $size$0;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $68;
    _qh_fprintf($fp,9290,19088,$vararg_buffer4);
   } else {
    HEAP32[$vararg_buffer1>>2] = $size$0;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $68;
    _qh_fprintf($fp,9289,19008,$vararg_buffer1);
   }
   $69 = HEAP32[(5260)>>2]|0;
   $70 = ($69|0)!=(0);
   $71 = $70 ? 19152 : 56512;
   HEAP32[$vararg_buffer8>>2] = $71;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $8;
   _qh_fprintf($fp,9291,19176,$vararg_buffer8);
   $72 = ($0|0)==(0);
   if (!($72)) {
    HEAP32[$vararg_buffer12>>2] = $0;
    _qh_fprintf($fp,9292,19216,$vararg_buffer12);
   }
   $73 = (($numcoplanars$0$lcssa) - ($0))|0;
   $74 = ($73|0)>(0);
   if ($74) {
    HEAP32[$vararg_buffer15>>2] = $73;
    _qh_fprintf($fp,9293,19272,$vararg_buffer15);
   } else {
    $75 = (($size$0) - ($8))|0;
    $76 = (($75) - ($0))|0;
    $77 = ($76|0)>(0);
    if ($77) {
     HEAP32[$vararg_buffer18>>2] = $76;
     _qh_fprintf($fp,9294,19312,$vararg_buffer18);
    }
   }
   $78 = ($goodused$0|0)!=(0);
   $79 = $78 ? 19360 : 56512;
   $80 = HEAP32[(7564)>>2]|0;
   HEAP32[$vararg_buffer21>>2] = $79;
   $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
   HEAP32[$vararg_ptr24>>2] = $80;
   _qh_fprintf($fp,9295,19368,$vararg_buffer21);
   $81 = ($nonsimplicial$0$ph$lcssa|0)==(0);
   if (!($81)) {
    HEAP32[$vararg_buffer25>>2] = $79;
    $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
    HEAP32[$vararg_ptr28>>2] = $nonsimplicial$0$ph$lcssa;
    _qh_fprintf($fp,9296,19408,$vararg_buffer25);
   }
  }
 } while(0);
 $127 = ($numtricoplanars$0$ph22$lcssa|0)==(0);
 if (!($127)) {
  HEAP32[$vararg_buffer103>>2] = $numtricoplanars$0$ph22$lcssa;
  _qh_fprintf($fp,9318,20392,$vararg_buffer103);
 }
 HEAP32[$vararg_buffer106>>2] = (6116);
 $vararg_ptr109 = ((($vararg_buffer106)) + 4|0);
 HEAP32[$vararg_ptr109>>2] = (5856);
 _qh_fprintf($fp,9319,20432,$vararg_buffer106);
 $128 = HEAP32[(5704)>>2]|0;
 $129 = ($128|0)==(-2147483648);
 if ($129) {
  _qh_fprintf($fp,9321,55760,$vararg_buffer113);
 } else {
  HEAP32[$vararg_buffer110>>2] = $128;
  _qh_fprintf($fp,9320,20464,$vararg_buffer110);
 }
 $130 = HEAP32[(44568)>>2]|0;
 HEAP32[$vararg_buffer115>>2] = $130;
 _qh_fprintf($fp,9322,20472,$vararg_buffer115);
 $131 = HEAP32[(44736)>>2]|0;
 HEAP32[$vararg_buffer118>>2] = $131;
 _qh_fprintf($fp,9323,20512,$vararg_buffer118);
 $132 = HEAP32[(5304)>>2]|0;
 $133 = ($132|0)==(0);
 if (!($133)) {
  $134 = HEAP32[(7552)>>2]|0;
  $135 = HEAP32[(7520)>>2]|0;
  $136 = (($134) - ($135))|0;
  HEAP32[$vararg_buffer121>>2] = $136;
  _qh_fprintf($fp,9324,20552,$vararg_buffer121);
 }
 $137 = HEAP32[(44504)>>2]|0;
 $138 = HEAP32[(44512)>>2]|0;
 $139 = (($138) + ($137))|0;
 $140 = HEAP32[(44440)>>2]|0;
 $141 = (($139) + ($140))|0;
 $142 = HEAP32[(44472)>>2]|0;
 $143 = (($141) + ($142))|0;
 HEAP32[$vararg_buffer124>>2] = $143;
 _qh_fprintf($fp,9325,20584,$vararg_buffer124);
 $144 = ($63|0)==(0);
 if (!($144)) {
  $145 = HEAP32[(43320)>>2]|0;
  $146 = HEAP32[(43344)>>2]|0;
  $147 = (($146) + ($145))|0;
  $148 = HEAP32[(43600)>>2]|0;
  $149 = (($147) + ($148))|0;
  $150 = HEAP32[(43592)>>2]|0;
  $151 = (($149) + ($150))|0;
  $152 = HEAP32[(43648)>>2]|0;
  $153 = (($151) + ($152))|0;
  HEAP32[$vararg_buffer127>>2] = $153;
  _qh_fprintf($fp,9330,20632,$vararg_buffer127);
  $154 = HEAP32[(43352)>>2]|0;
  HEAP32[$vararg_buffer130>>2] = $154;
  _qh_fprintf($fp,9331,20680,$vararg_buffer130);
  HEAP32[$vararg_buffer133>>2] = $63;
  _qh_fprintf($fp,9332,20728,$vararg_buffer133);
 }
 $155 = HEAP32[(5688)>>2]|0;
 $156 = ($155|0)==(0);
 $157 = HEAP32[(7700)>>2]|0;
 $158 = ($157|0)!=(0);
 $or$cond7 = $156 & $158;
 if ($or$cond7) {
  $159 = HEAP32[(7580)>>2]|0;
  $160 = (+($159>>>0));
  $161 = $160 / 1.0E+6;
  $162 = $161;
  HEAPF64[(43480)>>3] = $162;
  HEAPF64[$vararg_buffer136>>3] = $162;
  _qh_fprintf($fp,9333,20760,$vararg_buffer136);
 }
 $163 = HEAP32[(5700)>>2]|0;
 $164 = ($163|0)==(0);
 do {
  if ($164) {
   $175 = +HEAPF64[(7616)>>3];
   $176 = $175 < 8.9884656743115785E+307;
   if ($176) {
    $177 = HEAP32[(44616)>>2]|0;
    $178 = ($177|0)==(0);
    if ($178) {
     HEAPF64[$vararg_buffer146>>3] = $175;
     _qh_fprintf($fp,9336,20920,$vararg_buffer146);
     break;
    } else {
     HEAP32[$vararg_buffer142>>2] = $177;
     $vararg_ptr145 = ((($vararg_buffer142)) + 8|0);
     HEAPF64[$vararg_ptr145>>3] = $175;
     _qh_fprintf($fp,9335,20872,$vararg_buffer142);
     break;
    }
   }
  } else {
   $165 = HEAP32[(5460)>>2]|0;
   $166 = HEAP32[(5384)>>2]|0;
   $167 = $166 | $165;
   $168 = ($167|0)==(0);
   if ($168) {
    $169 = HEAP32[(44616)>>2]|0;
    $170 = (+($169|0));
    $171 = $170 * 100.0;
    $172 = HEAP32[(7588)>>2]|0;
    $173 = (+($172|0));
    $174 = $171 / $173;
    HEAPF64[$vararg_buffer139>>3] = $174;
    _qh_fprintf($fp,9334,20816,$vararg_buffer139);
   }
  }
 } while(0);
 $179 = +HEAPF64[(7704)>>3];
 $180 = $179 != 0.0;
 if ($180) {
  $181 = HEAP32[(44768)>>2]|0;
  $182 = ($181|0)!=(0);
  $183 = $182 ? 20952 : 20968;
  HEAP32[$vararg_buffer149>>2] = $183;
  $vararg_ptr152 = ((($vararg_buffer149)) + 8|0);
  HEAPF64[$vararg_ptr152>>3] = $179;
  _qh_fprintf($fp,9337,20976,$vararg_buffer149);
 }
 $184 = +HEAPF64[(7712)>>3];
 $185 = $184 != 0.0;
 if ($185) {
  $186 = HEAP32[(44768)>>2]|0;
  $187 = ($186|0)!=(0);
  $188 = $187 ? 20952 : 20968;
  HEAP32[$vararg_buffer153>>2] = $188;
  $vararg_ptr156 = ((($vararg_buffer153)) + 8|0);
  HEAPF64[$vararg_ptr156>>3] = $184;
  _qh_fprintf($fp,9338,21008,$vararg_buffer153);
 }
 $189 = HEAP32[(5392)>>2]|0;
 $190 = ($189|0)==(0);
 if ($190) {
  _qh_fprintf($fp,9345,56128,$vararg_buffer175);
  STACKTOP = sp;return;
 }
 _qh_outerinner(0,$outerplane,$innerplane);
 $191 = +HEAPF64[$outerplane>>3];
 $192 = +HEAPF64[(6952)>>3];
 $193 = $192 * 2.0;
 $194 = $191 > $193;
 do {
  if ($194) {
   $195 = HEAP32[(7700)>>2]|0;
   $196 = ($195|0)!=(0);
   $197 = $196 ? 56512 : 21040;
   HEAP32[$vararg_buffer157>>2] = $197;
   $vararg_ptr160 = ((($vararg_buffer157)) + 8|0);
   HEAPF64[$vararg_ptr160>>3] = $191;
   _qh_fprintf($fp,9339,21048,$vararg_buffer157);
   $198 = +HEAPF64[$outerplane>>3];
   $199 = +HEAPF64[(7048)>>3];
   $200 = +HEAPF64[(6952)>>3];
   $201 = $199 + $200;
   $202 = $198 / $201;
   $203 = $202 > 0.050000000000000003;
   if ($203) {
    $204 = $199 * 2.0;
    $205 = +HEAPF64[(5248)>>3];
    $206 = $204 > $205;
    $207 = +HEAPF64[(7616)>>3];
    $208 = $207 > 8.9884656743115785E+307;
    $or$cond11 = $206 & $208;
    if ($or$cond11) {
     HEAPF64[$vararg_buffer161>>3] = $202;
     _qh_fprintf($fp,9340,21104,$vararg_buffer161);
     break;
    }
   }
   _qh_fprintf($fp,9341,56128,$vararg_buffer164);
  }
 } while(0);
 $209 = +HEAPF64[$innerplane>>3];
 $210 = +HEAPF64[(6952)>>3];
 $211 = $210 * -2.0;
 $212 = $209 < $211;
 if (!($212)) {
  _qh_fprintf($fp,9345,56128,$vararg_buffer175);
  STACKTOP = sp;return;
 }
 $213 = HEAP32[(7700)>>2]|0;
 $214 = ($213|0)!=(0);
 $215 = $214 ? 56512 : 21040;
 HEAP32[$vararg_buffer166>>2] = $215;
 $vararg_ptr169 = ((($vararg_buffer166)) + 8|0);
 HEAPF64[$vararg_ptr169>>3] = $209;
 _qh_fprintf($fp,9342,21120,$vararg_buffer166);
 $216 = +HEAPF64[$innerplane>>3];
 $217 = -$216;
 $218 = +HEAPF64[(7048)>>3];
 $219 = +HEAPF64[(6952)>>3];
 $220 = $218 + $219;
 $221 = $217 / $220;
 $222 = $221 > 0.050000000000000003;
 $223 = +HEAPF64[(7616)>>3];
 $224 = $223 > 8.9884656743115785E+307;
 $or$cond13 = $222 & $224;
 if ($or$cond13) {
  HEAPF64[$vararg_buffer170>>3] = $221;
  _qh_fprintf($fp,9343,21104,$vararg_buffer170);
  _qh_fprintf($fp,9345,56128,$vararg_buffer175);
  STACKTOP = sp;return;
 } else {
  _qh_fprintf($fp,9344,56128,$vararg_buffer173);
  _qh_fprintf($fp,9345,56128,$vararg_buffer175);
  STACKTOP = sp;return;
 }
}
function _qh_memalloc($insize) {
 $insize = $insize|0;
 var $$0 = 0, $$val = 0, $$val3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $bufsize$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp;
 $vararg_buffer22 = sp + 8|0;
 $vararg_buffer15 = sp + 16|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 80|0;
 $0 = ($insize|0)<(0);
 if ($0) {
  $1 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $insize;
  _qh_fprintf($1,6235,21296,$vararg_buffer);
  _qh_errexit(4,0,0);
  // unreachable;
 }
 $2 = HEAP32[(21192)>>2]|0;
 $3 = ($2|0)<($insize|0);
 $4 = HEAP32[(21208)>>2]|0;
 if ($3) {
  $79 = ($4|0)==(0|0);
  if ($79) {
   $80 = HEAP32[(21228)>>2]|0;
   _qh_fprintf($80,6081,21680,$vararg_buffer22);
   _qh_errexit(5,0,0);
   // unreachable;
  }
  $81 = HEAP32[(21244)>>2]|0;
  $82 = (($81) + 1)|0;
  HEAP32[(21244)>>2] = $82;
  $83 = HEAP32[(21268)>>2]|0;
  $84 = (($83) + ($insize))|0;
  HEAP32[(21268)>>2] = $84;
  $85 = HEAP32[(21272)>>2]|0;
  $86 = ($85|0)<($84|0);
  if ($86) {
   HEAP32[(21272)>>2] = $84;
  }
  $87 = (_qh_malloc($insize)|0);
  $88 = ($87|0)==(0|0);
  if ($88) {
   $89 = HEAP32[(21228)>>2]|0;
   HEAP32[$vararg_buffer24>>2] = $insize;
   _qh_fprintf($89,6082,21752,$vararg_buffer24);
   _qh_errexit(4,0,0);
   // unreachable;
  }
  $90 = HEAP32[(21232)>>2]|0;
  $91 = ($90|0)>(4);
  if (!($91)) {
   $$0 = $87;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[(21228)>>2]|0;
  $93 = HEAP32[(21244)>>2]|0;
  $94 = HEAP32[(21252)>>2]|0;
  $95 = (($94) + ($93))|0;
  $96 = HEAP32[(21268)>>2]|0;
  $97 = (($93) - ($94))|0;
  HEAP32[$vararg_buffer27>>2] = $87;
  $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $95;
  $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
  HEAP32[$vararg_ptr31>>2] = $insize;
  $vararg_ptr32 = ((($vararg_buffer27)) + 12|0);
  HEAP32[$vararg_ptr32>>2] = $96;
  $vararg_ptr33 = ((($vararg_buffer27)) + 16|0);
  HEAP32[$vararg_ptr33>>2] = $97;
  _qh_fprintf($92,8057,21824,$vararg_buffer27);
  $$0 = $87;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($4) + ($insize<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(21204)>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[(21276)>>2]|0;
 $11 = (($10) + ($9))|0;
 HEAP32[(21276)>>2] = $11;
 $12 = HEAP32[(21200)>>2]|0;
 $13 = (($12) + ($6<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = HEAP32[(21236)>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[(21236)>>2] = $17;
  $18 = HEAP32[(21264)>>2]|0;
  $19 = (($18) - ($9))|0;
  HEAP32[(21264)>>2] = $19;
  $20 = HEAP32[$13>>2]|0;
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$13>>2] = $21;
  $22 = HEAP32[(21240)>>2]|0;
  $23 = HEAP32[(21236)>>2]|0;
  $24 = (($23) + ($22))|0;
  $25 = HEAP32[(21248)>>2]|0;
  $26 = HEAP32[(21232)>>2]|0;
  $27 = ($26|0)>(4);
  if (!($27)) {
   $$0 = $14;
   STACKTOP = sp;return ($$0|0);
  }
  $28 = (($24) + ($25))|0;
  $29 = HEAP32[(21228)>>2]|0;
  $30 = HEAP32[(21276)>>2]|0;
  $31 = (($24) - ($25))|0;
  HEAP32[$vararg_buffer1>>2] = $14;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $28;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $9;
  $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $30;
  $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $31;
  _qh_fprintf($29,8141,21392,$vararg_buffer1);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = HEAP32[(21240)>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[(21240)>>2] = $33;
 $34 = HEAP32[(21220)>>2]|0;
 $35 = ($9|0)>($34|0);
 if ($35) {
  $36 = HEAP32[(21260)>>2]|0;
  $37 = (($36) + ($34))|0;
  HEAP32[(21260)>>2] = $37;
  $38 = HEAP32[(21212)>>2]|0;
  $39 = ($38|0)==(0|0);
  $$val = HEAP32[(21180)>>2]|0;
  $$val3 = HEAP32[21176>>2]|0;
  $bufsize$0 = $39 ? $$val : $$val3;
  $40 = (_qh_malloc($bufsize$0)|0);
  $41 = ($40|0)==(0|0);
  if ($41) {
   $42 = HEAP32[(21228)>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $bufsize$0;
   _qh_fprintf($42,6080,21448,$vararg_buffer8);
   _qh_errexit(4,0,0);
   // unreachable;
  }
  $43 = HEAP32[(21212)>>2]|0;
  HEAP32[$40>>2] = $43;
  HEAP32[(21212)>>2] = $40;
  $44 = HEAP32[(21196)>>2]|0;
  $45 = (($44) + 4)|0;
  $46 = $44 ^ -1;
  $47 = $45 & $46;
  $48 = (($40) + ($47)|0);
  HEAP32[(21216)>>2] = $48;
  $49 = (($bufsize$0) - ($47))|0;
  HEAP32[(21220)>>2] = $49;
  $50 = HEAP32[(21256)>>2]|0;
  $51 = (($49) + ($50))|0;
  HEAP32[(21256)>>2] = $51;
  $52 = HEAP32[(21276)>>2]|0;
  $53 = HEAP32[(21264)>>2]|0;
  $54 = HEAP32[(21260)>>2]|0;
  $55 = HEAP32[(21220)>>2]|0;
  $56 = (($52) - ($9))|0;
  $57 = (($56) + ($53))|0;
  $58 = (($57) + ($54))|0;
  $59 = (($58) + ($55))|0;
  $60 = ($51|0)==($59|0);
  if (!($60)) {
   $61 = HEAP32[(21228)>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $51;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $59;
   _qh_fprintf($61,6212,21544,$vararg_buffer11);
   _qh_errexit(4,0,0);
   // unreachable;
  }
 }
 $62 = HEAP32[(21216)>>2]|0;
 $63 = (($62) + ($9)|0);
 HEAP32[(21216)>>2] = $63;
 $64 = HEAP32[(21220)>>2]|0;
 $65 = (($64) - ($9))|0;
 HEAP32[(21220)>>2] = $65;
 $66 = (($9) - ($insize))|0;
 $67 = HEAP32[(21280)>>2]|0;
 $68 = (($66) + ($67))|0;
 HEAP32[(21280)>>2] = $68;
 $69 = HEAP32[(21240)>>2]|0;
 $70 = HEAP32[(21236)>>2]|0;
 $71 = (($70) + ($69))|0;
 $72 = HEAP32[(21248)>>2]|0;
 $73 = HEAP32[(21232)>>2]|0;
 $74 = ($73|0)>(4);
 if (!($74)) {
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $75 = (($71) + ($72))|0;
 $76 = HEAP32[(21228)>>2]|0;
 $77 = HEAP32[(21276)>>2]|0;
 $78 = (($71) - ($72))|0;
 HEAP32[$vararg_buffer15>>2] = $62;
 $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
 HEAP32[$vararg_ptr18>>2] = $75;
 $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
 HEAP32[$vararg_ptr19>>2] = $9;
 $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
 HEAP32[$vararg_ptr20>>2] = $77;
 $vararg_ptr21 = ((($vararg_buffer15)) + 16|0);
 HEAP32[$vararg_ptr21>>2] = $78;
 _qh_fprintf($76,8140,21624,$vararg_buffer15);
 $$0 = $62;
 STACKTOP = sp;return ($$0|0);
}
function _qh_memfree($object,$insize) {
 $object = $object|0;
 $insize = $insize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $0 = ($object|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[(21192)>>2]|0;
 $2 = ($1|0)<($insize|0);
 if ($2) {
  $28 = HEAP32[(21252)>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[(21252)>>2] = $29;
  $30 = HEAP32[(21268)>>2]|0;
  $31 = (($30) - ($insize))|0;
  HEAP32[(21268)>>2] = $31;
  _qh_free($object);
  $32 = HEAP32[(21232)>>2]|0;
  $33 = ($32|0)>(4);
  if (!($33)) {
   STACKTOP = sp;return;
  }
  $34 = HEAP32[(21228)>>2]|0;
  $35 = HEAP32[(21244)>>2]|0;
  $36 = HEAP32[(21252)>>2]|0;
  $37 = (($36) + ($35))|0;
  $38 = HEAP32[(21268)>>2]|0;
  $39 = (($35) - ($36))|0;
  HEAP32[$vararg_buffer5>>2] = $object;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $37;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $insize;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $38;
  $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
  HEAP32[$vararg_ptr11>>2] = $39;
  _qh_fprintf($34,8058,21936,$vararg_buffer5);
  STACKTOP = sp;return;
 } else {
  $3 = HEAP32[(21248)>>2]|0;
  $4 = (($3) + 1)|0;
  HEAP32[(21248)>>2] = $4;
  $5 = HEAP32[(21208)>>2]|0;
  $6 = (($5) + ($insize<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[(21204)>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[(21264)>>2]|0;
  $12 = (($11) + ($10))|0;
  HEAP32[(21264)>>2] = $12;
  $13 = HEAP32[(21276)>>2]|0;
  $14 = (($13) - ($10))|0;
  HEAP32[(21276)>>2] = $14;
  $15 = HEAP32[(21200)>>2]|0;
  $16 = (($15) + ($7<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$object>>2] = $17;
  HEAP32[$16>>2] = $object;
  $18 = HEAP32[(21240)>>2]|0;
  $19 = HEAP32[(21236)>>2]|0;
  $20 = (($19) + ($18))|0;
  $21 = HEAP32[(21248)>>2]|0;
  $22 = HEAP32[(21232)>>2]|0;
  $23 = ($22|0)>(4);
  if (!($23)) {
   STACKTOP = sp;return;
  }
  $24 = (($20) + ($21))|0;
  $25 = HEAP32[(21228)>>2]|0;
  $26 = HEAP32[(21276)>>2]|0;
  $27 = (($20) - ($21))|0;
  HEAP32[$vararg_buffer>>2] = $object;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $26;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $27;
  _qh_fprintf($25,8142,21880,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _qh_meminit($ferr) {
 $ferr = $ferr|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=21176; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(21228)>>2] = $ferr;
 return;
}
function _qh_meminitbuffers($tracelevel,$alignment,$numsizes,$bufsize,$bufinit) {
 $tracelevel = $tracelevel|0;
 $alignment = $alignment|0;
 $numsizes = $numsizes|0;
 $bufsize = $bufsize|0;
 $bufinit = $bufinit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[(21232)>>2] = $tracelevel;
 HEAP32[(21188)>>2] = $numsizes;
 HEAP32[21176>>2] = $bufsize;
 HEAP32[(21180)>>2] = $bufinit;
 $0 = (($alignment) + -1)|0;
 HEAP32[(21196)>>2] = $0;
 $1 = (_calloc($numsizes,4)|0);
 HEAP32[(21204)>>2] = $1;
 $2 = (_calloc($numsizes,4)|0);
 HEAP32[(21200)>>2] = $2;
 $3 = HEAP32[(21204)>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($2|0)!=(0|0);
 $or$cond = $5 & $4;
 if (!($or$cond)) {
  $6 = HEAP32[(21228)>>2]|0;
  _qh_fprintf($6,6086,21992,$vararg_buffer);
  _qh_errexit(4,0,0);
  // unreachable;
 }
 $7 = HEAP32[(21232)>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[(21228)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $alignment;
 _qh_fprintf($9,8059,22040,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _qh_memsetup() {
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $k$12 = 0;
 var $or$cond = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(21204)>>2]|0;
 $1 = HEAP32[(21184)>>2]|0;
 _qsort($0,$1,4,4);
 $2 = HEAP32[(21184)>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = HEAP32[(21204)>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[(21192)>>2] = $6;
 $7 = HEAP32[21176>>2]|0;
 $8 = ($6|0)<($7|0);
 $9 = HEAP32[(21180)>>2]|0;
 $10 = ($6|0)<($9|0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  $11 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $9;
  _qh_fprintf($11,6087,22104,$vararg_buffer);
  _qh_errexit(4,0,0);
  // unreachable;
 }
 $12 = HEAP32[(21192)>>2]|0;
 $13 = $12 << 2;
 $14 = (($13) + 4)|0;
 $15 = (_qh_malloc($14)|0);
 HEAP32[(21208)>>2] = $15;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = HEAP32[(21228)>>2]|0;
  _qh_fprintf($17,6088,22200,$vararg_buffer3);
  _qh_errexit(4,0,0);
  // unreachable;
 }
 $18 = HEAP32[(21192)>>2]|0;
 $19 = ($18|0)==(-1);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[(21208)>>2]|0;
 $25 = $18;
 while(1) {
  $24 = (($20) + ($25<<2)|0);
  HEAP32[$24>>2] = $25;
  $26 = (($25) + -1)|0;
  $27 = ($25|0)==(0);
  if ($27) {
   break;
  } else {
   $25 = $26;
  }
 }
 $$pr = HEAP32[(21192)>>2]|0;
 $21 = ($$pr|0)<(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[(21208)>>2]|0;
 $23 = HEAP32[(21204)>>2]|0;
 $i$03 = 0;$k$12 = 0;
 while(1) {
  $28 = (($22) + ($k$12<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($23) + ($i$03<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)>($31|0);
  $33 = $32&1;
  $storemerge = (($33) + ($i$03))|0;
  HEAP32[$28>>2] = $storemerge;
  $34 = (($k$12) + 1)|0;
  $35 = HEAP32[(21192)>>2]|0;
  $36 = ($k$12|0)<($35|0);
  if ($36) {
   $i$03 = $storemerge;$k$12 = $34;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _qh_memsize($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $k$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(21192)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[(21228)>>2]|0;
  _qh_fprintf($2,6089,22248,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $3 = HEAP32[(21196)>>2]|0;
 $4 = (($3) + ($size))|0;
 $5 = $3 ^ -1;
 $6 = $4 & $5;
 $7 = HEAP32[(21184)>>2]|0;
 $8 = HEAP32[(21204)>>2]|0;
 $k$0 = $7;
 while(1) {
  $9 = (($k$0) + -1)|0;
  $10 = ($k$0|0)==(0);
  if ($10) {
   break;
  }
  $11 = (($8) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($6|0);
  if ($13) {
   label = 9;
   break;
  } else {
   $k$0 = $9;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[(21184)>>2]|0;
 $15 = HEAP32[(21188)>>2]|0;
 $16 = ($14|0)<($15|0);
 if ($16) {
  $17 = (($14) + 1)|0;
  HEAP32[(21184)>>2] = $17;
  $18 = HEAP32[(21204)>>2]|0;
  $19 = (($18) + ($14<<2)|0);
  HEAP32[$19>>2] = $6;
  STACKTOP = sp;return;
 } else {
  $20 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $15;
  _qh_fprintf($20,7060,22304,$vararg_buffer1);
  STACKTOP = sp;return;
 }
}
function _qh_memstatistics($fp) {
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$lcssa = 0, $count$08 = 0, $count$1$lcssa = 0, $count$12 = 0, $i$014 = 0;
 var $i$14 = 0, $object$0 = 0, $object$07 = 0, $object$09 = 0, $object$1 = 0, $object$11 = 0, $object$13 = 0, $totfree$0$lcssa = 0, $totfree$015 = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr28 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer25 = sp;
 $vararg_buffer23 = sp + 8|0;
 $vararg_buffer19 = sp + 16|0;
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 96|0;
 $0 = HEAP32[(21184)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(21200)>>2]|0;
  $3 = HEAP32[(21204)>>2]|0;
  $4 = HEAP32[(21184)>>2]|0;
  $i$014 = 0;$totfree$015 = 0;
  while(1) {
   $5 = (($2) + ($i$014<<2)|0);
   $object$07 = HEAP32[$5>>2]|0;
   $6 = ($object$07|0)==(0|0);
   if ($6) {
    $count$0$lcssa = 0;
   } else {
    $count$08 = 0;$object$09 = $object$07;
    while(1) {
     $7 = (($count$08) + 1)|0;
     $object$0 = HEAP32[$object$09>>2]|0;
     $8 = ($object$0|0)==(0|0);
     if ($8) {
      $count$0$lcssa = $7;
      break;
     } else {
      $count$08 = $7;$object$09 = $object$0;
     }
    }
   }
   $9 = (($3) + ($i$014<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = Math_imul($10, $count$0$lcssa)|0;
   $12 = (($11) + ($totfree$015))|0;
   $13 = (($i$014) + 1)|0;
   $14 = ($13|0)<($4|0);
   if ($14) {
    $i$014 = $13;$totfree$015 = $12;
   } else {
    $totfree$0$lcssa = $12;
    break;
   }
  }
 } else {
  $totfree$0$lcssa = 0;
 }
 $15 = HEAP32[(21264)>>2]|0;
 $16 = ($totfree$0$lcssa|0)==($15|0);
 if (!($16)) {
  $17 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $totfree$0$lcssa;
  _qh_fprintf($17,6211,22376,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $18 = HEAP32[(21236)>>2]|0;
 $19 = HEAP32[(21240)>>2]|0;
 $20 = HEAP32[(21244)>>2]|0;
 $21 = HEAP32[(21248)>>2]|0;
 $22 = HEAP32[(21252)>>2]|0;
 $23 = HEAP32[(21276)>>2]|0;
 $24 = HEAP32[(21264)>>2]|0;
 $25 = HEAP32[(21260)>>2]|0;
 $26 = HEAP32[(21220)>>2]|0;
 $27 = (($26) + ($25))|0;
 $28 = HEAP32[(21280)>>2]|0;
 $29 = HEAP32[(21272)>>2]|0;
 $30 = HEAP32[(21268)>>2]|0;
 $31 = (($20) - ($22))|0;
 $32 = HEAP32[(21256)>>2]|0;
 $33 = HEAP32[21176>>2]|0;
 $34 = HEAP32[(21180)>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $18;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $19;
 $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $20;
 $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
 HEAP32[$vararg_ptr7>>2] = $21;
 $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
 HEAP32[$vararg_ptr8>>2] = $22;
 $vararg_ptr9 = ((($vararg_buffer2)) + 20|0);
 HEAP32[$vararg_ptr9>>2] = $23;
 $vararg_ptr10 = ((($vararg_buffer2)) + 24|0);
 HEAP32[$vararg_ptr10>>2] = $24;
 $vararg_ptr11 = ((($vararg_buffer2)) + 28|0);
 HEAP32[$vararg_ptr11>>2] = $27;
 $vararg_ptr12 = ((($vararg_buffer2)) + 32|0);
 HEAP32[$vararg_ptr12>>2] = $28;
 $vararg_ptr13 = ((($vararg_buffer2)) + 36|0);
 HEAP32[$vararg_ptr13>>2] = $29;
 $vararg_ptr14 = ((($vararg_buffer2)) + 40|0);
 HEAP32[$vararg_ptr14>>2] = $30;
 $vararg_ptr15 = ((($vararg_buffer2)) + 44|0);
 HEAP32[$vararg_ptr15>>2] = $31;
 $vararg_ptr16 = ((($vararg_buffer2)) + 48|0);
 HEAP32[$vararg_ptr16>>2] = $32;
 $vararg_ptr17 = ((($vararg_buffer2)) + 52|0);
 HEAP32[$vararg_ptr17>>2] = $33;
 $vararg_ptr18 = ((($vararg_buffer2)) + 56|0);
 HEAP32[$vararg_ptr18>>2] = $34;
 _qh_fprintf($fp,9278,22456,$vararg_buffer2);
 $35 = HEAP32[(21284)>>2]|0;
 $36 = ($35|0)==(0);
 if (!($36)) {
  $37 = HEAP32[(21288)>>2]|0;
  $38 = (+($37|0));
  $39 = (+($35|0));
  $40 = $38 / $39;
  $41 = $40;
  HEAP32[$vararg_buffer19>>2] = $35;
  $vararg_ptr22 = ((($vararg_buffer19)) + 8|0);
  HEAPF64[$vararg_ptr22>>3] = $41;
  _qh_fprintf($fp,9279,22936,$vararg_buffer19);
  _qh_fprintf($fp,9280,22992,$vararg_buffer23);
 }
 $42 = HEAP32[(21184)>>2]|0;
 $43 = ($42|0)>(0);
 if ($43) {
  $i$14 = 0;
 } else {
  _qh_fprintf($fp,9282,55760,$vararg_buffer29);
  STACKTOP = sp;return;
 }
 while(1) {
  $44 = HEAP32[(21200)>>2]|0;
  $45 = (($44) + ($i$14<<2)|0);
  $object$11 = HEAP32[$45>>2]|0;
  $46 = ($object$11|0)==(0|0);
  if ($46) {
   $count$1$lcssa = 0;
  } else {
   $count$12 = 0;$object$13 = $object$11;
   while(1) {
    $47 = (($count$12) + 1)|0;
    $object$1 = HEAP32[$object$13>>2]|0;
    $48 = ($object$1|0)==(0|0);
    if ($48) {
     $count$1$lcssa = $47;
     break;
    } else {
     $count$12 = $47;$object$13 = $object$1;
    }
   }
  }
  $49 = HEAP32[(21204)>>2]|0;
  $50 = (($49) + ($i$14<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$vararg_buffer25>>2] = $51;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $count$1$lcssa;
  _qh_fprintf($fp,9281,23024,$vararg_buffer25);
  $52 = (($i$14) + 1)|0;
  $53 = HEAP32[(21184)>>2]|0;
  $54 = ($52|0)<($53|0);
  if ($54) {
   $i$14 = $52;
  } else {
   break;
  }
 }
 _qh_fprintf($fp,9282,55760,$vararg_buffer29);
 STACKTOP = sp;return;
}
function _qh_intcompare($i,$j) {
 $i = $i|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$i>>2]|0;
 $1 = HEAP32[$j>>2]|0;
 $2 = (($0) - ($1))|0;
 return ($2|0);
}
function _qh_premerge($apex,$maxcentrum,$maxangle) {
 $apex = $apex|0;
 $maxcentrum = +$maxcentrum;
 $maxangle = +$maxangle;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newfacet$0 = 0, $newfacet$06 = 0, $newfacet$07 = 0, $or$cond = 0, $or$cond3 = 0, $othermerge = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $othermerge = sp + 24|0;
 HEAP32[$othermerge>>2] = 0;
 $0 = HEAP32[(6904)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (_qh_checkzero(0)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   STACKTOP = sp;return;
  }
 }
 $4 = HEAP32[(5344)>>2]|0;
 $5 = ($4|0)>(1);
 if ($5) {
  $6 = HEAP32[(7480)>>2]|0;
  $7 = ((($apex)) + 16|0);
  $8 = $7;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 16777215;
  $15 = HEAP32[(7512)>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $19 = -1;
  } else {
   $17 = ((($15)) + 76|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18;
  }
  HEAPF64[$vararg_buffer>>3] = $maxcentrum;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $maxangle;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr2>>2] = $14;
  $vararg_ptr3 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr3>>2] = $19;
  _qh_fprintf($6,2008,23032,$vararg_buffer);
 }
 $20 = HEAP32[(5344)>>2]|0;
 $21 = ($20|0)>(3);
 $22 = HEAP32[(7552)>>2]|0;
 $23 = ($22|0)<(50);
 $or$cond = $21 & $23;
 if ($or$cond) {
  _qh_printlists();
 }
 HEAPF64[(6936)>>3] = $maxcentrum;
 HEAPF64[(6944)>>3] = $maxangle;
 $24 = HEAP32[(7496)>>2]|0;
 $25 = (_qh_settemp($24)|0);
 HEAP32[(7740)>>2] = $25;
 $26 = HEAP32[(7496)>>2]|0;
 $27 = (_qh_settemp($26)|0);
 HEAP32[(7736)>>2] = $27;
 $28 = HEAP32[(5828)>>2]|0;
 $29 = ($28|0)>(2);
 $30 = HEAP32[(7512)>>2]|0;
 if ($29) {
  _qh_mark_dupridges($30);
  $31 = HEAP32[(7512)>>2]|0;
  _qh_mergecycle_all($31,$othermerge);
  _qh_forcedmerges($othermerge);
  $newfacet$06 = HEAP32[(7512)>>2]|0;
  $32 = ($newfacet$06|0)==(0|0);
  L16: do {
   if (!($32)) {
    $newfacet$07 = $newfacet$06;
    while(1) {
     $33 = ((($newfacet$07)) + 48|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      break L16;
     }
     $36 = ((($newfacet$07)) + 80|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 4202496;
     $39 = ($38|0)==(0);
     if ($39) {
      _qh_degen_redundant_neighbors($newfacet$07,0);
     }
     $newfacet$0 = HEAP32[$33>>2]|0;
     $40 = ($newfacet$0|0)==(0|0);
     if ($40) {
      break;
     } else {
      $newfacet$07 = $newfacet$0;
     }
    }
   }
  } while(0);
  $41 = (_qh_merge_degenredundant()|0);
  $42 = ($41|0)==(0);
  if (!($42)) {
   HEAP32[$othermerge>>2] = 1;
  }
 } else {
  _qh_mergecycle_all($30,$othermerge);
 }
 $43 = HEAP32[(7512)>>2]|0;
 _qh_flippedmerges($43,$othermerge);
 $44 = HEAP32[(5384)>>2]|0;
 $45 = ($44|0)==(0);
 $46 = HEAP32[(44768)>>2]|0;
 $47 = ($46|0)!=(0);
 $or$cond3 = $45 | $47;
 if ($or$cond3) {
  $48 = HEAP32[(44560)>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[(44560)>>2] = $49;
  HEAP32[(7688)>>2] = 0;
  $50 = HEAP32[(7512)>>2]|0;
  _qh_getmergeset_initial($50);
  $51 = HEAP32[$othermerge>>2]|0;
  _qh_all_merges($51,0);
 }
 _qh_settempfree((7736));
 _qh_settempfree((7740));
 STACKTOP = sp;return;
}
function _qh_checkzero($testall) {
 $testall = $testall|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa116 = 0, $$lcssa119 = 0, $$lcssa127 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $facet$0 = 0, $facet$0$lcssa131 = 0;
 var $facet$132 = 0, $facet$132130 = 0, $facetlist$0 = 0, $horizon$0$ph29 = 0, $horizon$1 = 0, $neighbor$1 = 0, $neighbor_i$0$ph30 = 0, $neighbor_i$027 = 0, $or$cond = 0, $or$cond6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr3 = 0, $vertex$0 = 0, $vertexp$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $dist = sp + 24|0;
 $0 = ($testall|0)!=(0);
 if ($0) {
  $1 = HEAP32[(7500)>>2]|0;
  $facetlist$0 = $1;
 } else {
  $2 = HEAP32[(7512)>>2]|0;
  $3 = ($2|0)==(0|0);
  L4: do {
   if (!($3)) {
    $facet$0 = $2;
    while(1) {
     $4 = ($facet$0|0)==(0|0);
     if ($4) {
      break L4;
     }
     $5 = ((($facet$0)) + 48|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($6|0)==(0|0);
     if ($7) {
      break L4;
     }
     $8 = ((($facet$0)) + 60|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($9)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($11)) + 80|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = $13 & 8192;
     $15 = ($14|0)==(0);
     if ($15) {
      $facet$0$lcssa131 = $facet$0;
      break;
     }
     $16 = ((($facet$0)) + 80|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 & 2162688;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $facet$0$lcssa131 = $facet$0;
      break;
     }
     $20 = ((($facet$0)) + 24|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $facet$0$lcssa131 = $facet$0;
      break;
     } else {
      $facet$0 = $6;
     }
    }
    HEAP32[(7728)>>2] = 0;
    $129 = HEAP32[(5344)>>2]|0;
    $130 = ($129|0)>(1);
    if (!($130)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $131 = HEAP32[(7480)>>2]|0;
    $132 = ((($facet$0$lcssa131)) + 76|0);
    $133 = HEAP32[$132>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $133;
    _qh_fprintf($131,2013,23288,$vararg_buffer4);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $23 = HEAP32[(5384)>>2]|0;
  $24 = ($23|0)!=(0);
  $25 = HEAP32[(7728)>>2]|0;
  $26 = ($25|0)!=(0);
  $or$cond = $24 & $26;
  if ($or$cond) {
   $27 = HEAP32[(5344)>>2]|0;
   $28 = ($27|0)>(1);
   if (!($28)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $29 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($29,2011,23112,$vararg_buffer);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $facetlist$0 = $2;
  }
 }
 $30 = ($facetlist$0|0)==(0|0);
 L23: do {
  if (!($30)) {
   $facet$132 = $facetlist$0;
   L24: while(1) {
    $31 = ((($facet$132)) + 48|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     break L23;
    }
    $34 = HEAP32[(7724)>>2]|0;
    $35 = (($34) + 1)|0;
    $36 = $35 & 2147483647;
    $37 = $34 & -2147483648;
    $38 = $36 | $37;
    HEAP32[(7724)>>2] = $38;
    $39 = ((($facet$132)) + 60|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0|0);
    L27: do {
     if ($41) {
      $horizon$1 = 0;
     } else {
      $42 = ((($40)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $horizon$1 = 0;
      } else {
       $45 = ((($42)) + 4|0);
       $46 = ((($facet$132)) + 52|0);
       $150 = $43;$151 = $45;$horizon$0$ph29 = 0;$neighbor_i$0$ph30 = 0;
       while(1) {
        $75 = $150;$86 = $151;$neighbor_i$027 = $neighbor_i$0$ph30;
        while(1) {
         $50 = $neighbor_i$027 | $testall;
         $51 = ($50|0)==(0);
         $52 = (($neighbor_i$027) + 1)|0;
         if ($51) {
          $$lcssa = $75;$$lcssa116 = $86;$$lcssa119 = $52;
          break;
         }
         $53 = HEAP32[$46>>2]|0;
         $54 = (((($53)) + 4|0) + ($neighbor_i$027<<2)|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = HEAP32[(7724)>>2]|0;
         $57 = ((($55)) + 16|0);
         $58 = $57;
         $59 = $58;
         $60 = HEAP32[$59>>2]|0;
         $61 = (($58) + 4)|0;
         $62 = $61;
         $63 = HEAP32[$62>>2]|0;
         $64 = $56 & 2147483647;
         $65 = $60 & -2147483648;
         $66 = $65 | $64;
         $67 = $57;
         $68 = $67;
         HEAP32[$68>>2] = $66;
         $69 = (($67) + 4)|0;
         $70 = $69;
         HEAP32[$70>>2] = $63;
         $71 = HEAP32[(43648)>>2]|0;
         $72 = (($71) + 1)|0;
         HEAP32[(43648)>>2] = $72;
         $73 = ((($55)) + 8|0);
         $74 = HEAP32[$73>>2]|0;
         _qh_distplane($74,$75,$dist);
         $76 = +HEAPF64[$dist>>3];
         $77 = +HEAPF64[(6952)>>3];
         $78 = -$77;
         $79 = !($76 >= $78);
         if (!($79)) {
          HEAP32[(7728)>>2] = 0;
          $80 = HEAP32[(5384)>>2]|0;
          $81 = ($80|0)==(0);
          $or$cond6 = $0 | $81;
          if ($or$cond6) {
           $facet$132130 = $facet$132;$neighbor$1 = $75;$vertex$0 = $55;
           break L24;
          }
          $82 = +HEAPF64[$dist>>3];
          $83 = +HEAPF64[(6952)>>3];
          $84 = $82 > $83;
          if ($84) {
           $facet$132130 = $facet$132;$neighbor$1 = $75;$vertex$0 = $55;
           break L24;
          }
         }
         $85 = ((($86)) + 4|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = ($87|0)==(0|0);
         if ($88) {
          $horizon$1 = $horizon$0$ph29;
          break L27;
         } else {
          $75 = $87;$86 = $85;$neighbor_i$027 = $52;
         }
        }
        $47 = ((($$lcssa116)) + 4|0);
        $48 = HEAP32[$$lcssa116>>2]|0;
        $49 = ($48|0)==(0|0);
        if ($49) {
         $horizon$1 = $$lcssa;
         break;
        } else {
         $150 = $48;$151 = $47;$horizon$0$ph29 = $$lcssa;$neighbor_i$0$ph30 = $$lcssa119;
        }
       }
      }
     }
    } while(0);
    L41: do {
     if (!($0)) {
      $89 = ((($horizon$1)) + 52|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)==(0|0);
      if (!($91)) {
       $92 = ((($90)) + 4|0);
       $93 = HEAP32[(7724)>>2]|0;
       $vertexp$0 = $92;
       while(1) {
        $94 = HEAP32[$vertexp$0>>2]|0;
        $95 = ($94|0)==(0|0);
        if ($95) {
         break L41;
        }
        $96 = ((($vertexp$0)) + 4|0);
        $97 = ((($94)) + 16|0);
        $98 = $97;
        $99 = $98;
        $100 = HEAP32[$99>>2]|0;
        $101 = (($98) + 4)|0;
        $102 = $101;
        $103 = HEAP32[$102>>2]|0;
        $104 = $100 ^ $93;
        $105 = $104 & 2147483647;
        $106 = ($105|0)==(0);
        if ($106) {
         $vertexp$0 = $96;
        } else {
         $$lcssa127 = $94;
         break;
        }
       }
       $107 = HEAP32[(43648)>>2]|0;
       $108 = (($107) + 1)|0;
       HEAP32[(43648)>>2] = $108;
       $109 = ((($$lcssa127)) + 8|0);
       $110 = HEAP32[$109>>2]|0;
       _qh_distplane($110,$facet$132,$dist);
       $111 = +HEAPF64[$dist>>3];
       $112 = +HEAPF64[(6952)>>3];
       $113 = -$112;
       $114 = !($111 >= $113);
       if (!($114)) {
        HEAP32[(7728)>>2] = 0;
        $115 = HEAP32[(5384)>>2]|0;
        $116 = ($115|0)==(0);
        if ($116) {
         $facet$132130 = $facet$132;$neighbor$1 = 0;$vertex$0 = $$lcssa127;
         break L24;
        }
        $117 = +HEAPF64[$dist>>3];
        $118 = +HEAPF64[(6952)>>3];
        $119 = $117 > $118;
        if ($119) {
         $facet$132130 = $facet$132;$neighbor$1 = 0;$vertex$0 = $$lcssa127;
         break L24;
        }
       }
      }
     }
    } while(0);
    $120 = HEAP32[$31>>2]|0;
    $121 = ($120|0)==(0|0);
    if ($121) {
     break L23;
    } else {
     $facet$132 = $120;
    }
   }
   $134 = HEAP32[(5344)>>2]|0;
   $135 = ($134|0)>(1);
   if (!($135)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $136 = HEAP32[(7480)>>2]|0;
   $137 = ((($facet$132130)) + 76|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ((($neighbor$1)) + 76|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($vertex$0)) + 16|0);
   $142 = $141;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = (($142) + 4)|0;
   $146 = $145;
   $147 = HEAP32[$146>>2]|0;
   $148 = $147 & 16777215;
   $149 = +HEAPF64[$dist>>3];
   HEAP32[$vararg_buffer7>>2] = $138;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $140;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $148;
   $vararg_ptr12 = ((($vararg_buffer7)) + 16|0);
   HEAPF64[$vararg_ptr12>>3] = $149;
   _qh_fprintf($136,2014,23336,$vararg_buffer7);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $122 = HEAP32[(5344)>>2]|0;
 $123 = ($122|0)>(1);
 if (!($123)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $124 = HEAP32[(7480)>>2]|0;
 $125 = HEAP32[(5384)>>2]|0;
 $126 = ($125|0)==(0);
 $127 = $0 | $126;
 $128 = $127 ? 23176 : 23192;
 HEAP32[$vararg_buffer1>>2] = $testall;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $128;
 _qh_fprintf($124,2012,23240,$vararg_buffer1);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _qh_mark_dupridges($facetlist) {
 $facetlist = $facetlist|0;
 var $$lcssa25 = 0, $$lcssa26 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$011 = 0, $facet$18 = 0, $magicptr = 0, $neighborp$0 = 0, $neighborp$0$ph = 0, $nummerge$0$lcssa = 0, $nummerge$012 = 0, $nummerge$1$ph = 0, $nummerge$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,4028,23408,$vararg_buffer);
 }
 $3 = ($facetlist|0)!=(0|0);
 if ($3) {
  $facet$011 = $facetlist;$nummerge$012 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = ((($facet$011)) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $nummerge$0$lcssa = $nummerge$012;
   break;
  }
  $7 = ((($facet$011)) + 80|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2097152;
  $10 = ($9|0)==(0);
  L9: do {
   if ($10) {
    $nummerge$2 = $nummerge$012;
   } else {
    $11 = ((($facet$011)) + 60|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $nummerge$2 = $nummerge$012;
    } else {
     $14 = ((($12)) + 4|0);
     $neighborp$0$ph = $14;$nummerge$1$ph = $nummerge$012;
     while(1) {
      $neighborp$0 = $neighborp$0$ph;
      while(1) {
       $15 = ((($neighborp$0)) + 4|0);
       $16 = HEAP32[$neighborp$0>>2]|0;
       $magicptr = $16;
       if ((($magicptr|0) == 2)) {
        $17 = HEAP32[$7>>2]|0;
        $18 = $17 | 4194304;
        HEAP32[$7>>2] = $18;
        $neighborp$0 = $15;
        continue;
       } else if ((($magicptr|0) == 0)) {
        $nummerge$2 = $nummerge$1$ph;
        break L9;
       }
       $19 = ((($16)) + 80|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = $20 & 2097152;
       $22 = ($21|0)==(0);
       if ($22) {
        $neighborp$0 = $15;
        continue;
       }
       $23 = ((($16)) + 60|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (_qh_setin($24,$facet$011)|0);
       $26 = ($25|0)==(0);
       if ($26) {
        $$lcssa25 = $15;$$lcssa26 = $16;
        break;
       } else {
        $neighborp$0 = $15;
       }
      }
      _qh_appendmergeset($facet$011,$$lcssa26,5,0);
      $27 = HEAP32[$7>>2]|0;
      $28 = $27 | 12582912;
      HEAP32[$7>>2] = $28;
      $29 = (($nummerge$1$ph) + 1)|0;
      $neighborp$0$ph = $$lcssa25;$nummerge$1$ph = $29;
     }
    }
   }
  } while(0);
  $30 = HEAP32[$4>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($31) {
   $nummerge$0$lcssa = $nummerge$2;
   break;
  } else {
   $facet$011 = $30;$nummerge$012 = $nummerge$2;
  }
 }
 $32 = ($nummerge$0$lcssa|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 L26: do {
  if ($3) {
   $facet$18 = $facetlist;
   while(1) {
    $33 = ((($facet$18)) + 48|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     break L26;
    }
    $36 = ((($facet$18)) + 80|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 & 12582912;
    $39 = ($38|0)==(4194304);
    if ($39) {
     _qh_makeridges($facet$18);
    }
    $40 = HEAP32[$33>>2]|0;
    $41 = ($40|0)==(0|0);
    if ($41) {
     break;
    } else {
     $facet$18 = $40;
    }
   }
  }
 } while(0);
 $42 = HEAP32[(7736)>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  $44 = ((($42)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   $47 = ((($44)) + 4|0);
   $49 = $45;$59 = $47;
   while(1) {
    $48 = ((($49)) + 16|0);
    $50 = HEAP32[$48>>2]|0;
    $51 = ($50|0)==(5);
    if ($51) {
     $52 = ((($49)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($53)) + 60|0);
     $55 = ((($49)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     _qh_setappend($54,$56);
     $57 = HEAP32[$55>>2]|0;
     _qh_makeridges($57);
    }
    $58 = ((($59)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     break;
    } else {
     $49 = $60;$59 = $58;
    }
   }
  }
 }
 $62 = HEAP32[(5344)>>2]|0;
 $63 = ($62|0)>(0);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $64 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $nummerge$0$lcssa;
 _qh_fprintf($64,1012,23456,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _qh_mergecycle_all($facetlist,$wasmerge) {
 $facetlist = $facetlist|0;
 $wasmerge = $wasmerge|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $cycles$0$ph = 0, $cycles$0$ph$lcssa = 0, $facet$0 = 0, $facet$0$lcssa21 = 0, $facet$0$ph = 0, $facets$0$lcssa = 0, $facets$08 = 0, $facets$1 = 0, $fold = 0, $nextfacet$0$lcssa = 0, $nextfacet$09 = 0, $nextfacet$1 = 0, $prev$06 = 0, $prev$1 = 0, $same$07 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,2031,23504,$vararg_buffer);
  $cycles$0$ph = 0;$facet$0$ph = $facetlist;
 } else {
  $cycles$0$ph = 0;$facet$0$ph = $facetlist;
 }
 L3: while(1) {
  $facet$0 = $facet$0$ph;
  while(1) {
   $3 = ($facet$0|0)==(0|0);
   if ($3) {
    $cycles$0$ph$lcssa = $cycles$0$ph;
    break L3;
   }
   $4 = ((($facet$0)) + 48|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $cycles$0$ph$lcssa = $cycles$0$ph;
    break L3;
   }
   $7 = ((($facet$0)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$lcssa = $5;$facet$0$lcssa21 = $facet$0;
    break;
   } else {
    $facet$0 = $5;
   }
  }
  $10 = ((($facet$0$lcssa21)) + 80|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 33554432;
  $13 = ($12|0)==(0);
  if ($13) {
   label = 8;
   break;
  }
  $17 = ((($facet$0$lcssa21)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($facet$0$lcssa21)) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==($facet$0$lcssa21|0);
  if ($23) {
   $25 = HEAP32[(44456)>>2]|0;
   $26 = (($25) + 1)|0;
   HEAP32[(44456)>>2] = $26;
   $27 = ((($facet$0$lcssa21)) + 52|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($28|0)==(0|0);
   if (!($31)) {
    $32 = HEAP32[$29>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     $34 = ((($29)) + 4|0);
     $35 = $32;$50 = $34;
     while(1) {
      $36 = ($35|0)==($30|0);
      if (!($36)) {
       $37 = ((($35)) + 16|0);
       $38 = $37;
       $39 = $38;
       $40 = HEAP32[$39>>2]|0;
       $41 = (($38) + 4)|0;
       $42 = $41;
       $43 = HEAP32[$42>>2]|0;
       $44 = $43 | 536870912;
       $45 = $37;
       $46 = $45;
       HEAP32[$46>>2] = $40;
       $47 = (($45) + 4)|0;
       $48 = $47;
       HEAP32[$48>>2] = $44;
      }
      $49 = ((($50)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $35 = $51;$50 = $49;
      }
     }
    }
   }
   $53 = ((($20)) + 32|0);
   HEAP32[$53>>2] = 0;
   _qh_mergefacet($facet$0$lcssa21,$20,0,0,1);
   $nextfacet$1 = $$lcssa;
  } else {
   $24 = ($22|0)==(0|0);
   if ($24) {
    $facets$0$lcssa = 0;
   } else {
    $facets$08 = 0;$prev$06 = $facet$0$lcssa21;$same$07 = $22;
    while(1) {
     $55 = ((($same$07)) + 32|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ((($same$07)) + 80|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = $58 & 67110912;
     $60 = ($59|0)==(0);
     if (!($60)) {
      _qh_infiniteloop($same$07);
     }
     $61 = HEAP32[$57>>2]|0;
     $62 = $61 | 67108864;
     HEAP32[$57>>2] = $62;
     $63 = ((($same$07)) + 24|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==(0|0);
     if ($65) {
      $68 = (($facets$08) + 1)|0;
      $facets$1 = $68;$prev$1 = $same$07;
     } else {
      $66 = HEAP32[$55>>2]|0;
      $67 = ((($prev$06)) + 32|0);
      HEAP32[$67>>2] = $66;
      HEAP32[$55>>2] = 0;
      $facets$1 = $facets$08;$prev$1 = $prev$06;
     }
     $69 = ($same$07|0)==($facet$0$lcssa21|0);
     $$ = $69 ? 0 : $56;
     $70 = ($$|0)==(0|0);
     if ($70) {
      $facets$0$lcssa = $facets$1;
      break;
     } else {
      $facets$08 = $facets$1;$prev$06 = $prev$1;$same$07 = $$;
     }
    }
   }
   $54 = ($$lcssa|0)==(0|0);
   L34: do {
    if ($54) {
     $nextfacet$0$lcssa = 0;
    } else {
     $nextfacet$09 = $$lcssa;
     while(1) {
      $71 = ((($nextfacet$09)) + 80|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $72 & 67108864;
      $74 = ($73|0)==(0);
      if ($74) {
       $nextfacet$0$lcssa = $nextfacet$09;
       break L34;
      }
      $75 = ((($nextfacet$09)) + 48|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==(0|0);
      if ($77) {
       $nextfacet$0$lcssa = 0;
       break;
      } else {
       $nextfacet$09 = $76;
      }
     }
    }
   } while(0);
   $78 = ((($20)) + 32|0);
   HEAP32[$78>>2] = 0;
   _qh_mergecycle($facet$0$lcssa21,$20);
   $79 = ((($20)) + 80|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 & 511;
   $82 = (($81) + ($facets$0$lcssa))|0;
   $83 = ($82|0)>(511);
   if ($83) {
    $84 = $80 | 511;
    $storemerge = $84;
   } else {
    $fold = (($80) + ($facets$0$lcssa))|0;
    $85 = $fold & 511;
    $86 = $80 & -512;
    $87 = $85 | $86;
    $storemerge = $87;
   }
   HEAP32[$79>>2] = $storemerge;
   $88 = HEAP32[(43504)>>2]|0;
   $89 = (($88) + 1)|0;
   HEAP32[(43504)>>2] = $89;
   $90 = HEAP32[(43496)>>2]|0;
   $91 = (($90) + ($facets$0$lcssa))|0;
   HEAP32[(43496)>>2] = $91;
   $92 = HEAP32[(43488)>>2]|0;
   $93 = ($92|0)<($facets$0$lcssa|0);
   if ($93) {
    HEAP32[(43488)>>2] = $facets$0$lcssa;
    $nextfacet$1 = $nextfacet$0$lcssa;
   } else {
    $nextfacet$1 = $nextfacet$0$lcssa;
   }
  }
  $94 = (($cycles$0$ph) + 1)|0;
  $cycles$0$ph = $94;$facet$0$ph = $nextfacet$1;
 }
 if ((label|0) == 8) {
  $14 = HEAP32[(7480)>>2]|0;
  $15 = ((($facet$0$lcssa21)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  _qh_fprintf($14,6225,23536,$vararg_buffer1);
  _qh_errexit(5,$facet$0$lcssa21,0);
  // unreachable;
 }
 $95 = ($cycles$0$ph$lcssa|0)==(0);
 if (!($95)) {
  HEAP32[$wasmerge>>2] = 1;
 }
 $96 = HEAP32[(5344)>>2]|0;
 $97 = ($96|0)>(0);
 if (!($97)) {
  STACKTOP = sp;return;
 }
 $98 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $cycles$0$ph$lcssa;
 _qh_fprintf($98,1013,23600,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _qh_forcedmerges($wasmerge) {
 $wasmerge = $wasmerge|0;
 var $$lcssa57 = 0, $$lcssa59 = 0, $$lcssa60 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dist1$0 = 0.0, $facet1$0 = 0, $facet1$0$lcssa = 0, $facet1$0$lcssa$lcssa = 0, $facet1$010 = 0, $facet1$09 = 0, $facet1$1 = 0, $facet2$0$lcssa = 0, $facet2$0$lcssa$lcssa = 0, $facet2$012 = 0, $maxdist1 = 0, $maxdist2 = 0, $mindist1 = 0, $mindist2 = 0, $numflip$0$ph$lcssa = 0, $numflip$0$ph22 = 0, $numflip$1 = 0, $numflip$224 = 0;
 var $nummerge$0$ph$lcssa = 0, $nummerge$0$ph21 = 0, $nummerge$1 = 0, $nummerge$215 = 0, $othermerges = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer6 = sp + 64|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 40|0;
 $mindist1 = sp + 24|0;
 $mindist2 = sp + 16|0;
 $maxdist1 = sp + 8|0;
 $maxdist2 = sp;
 $othermerges = sp + 96|0;
 $0 = HEAP32[(5768)>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = HEAP32[(44768)>>2]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  $4 = HEAP32[(5748)>>2]|0;
  HEAP32[(5344)>>2] = $4;
  HEAP32[(21232)>>2] = $4;
 }
 $5 = HEAP32[(5344)>>2]|0;
 $6 = ($5|0)>(3);
 if ($6) {
  $7 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($7,4025,23680,$vararg_buffer);
 }
 $8 = (_qh_settemppop()|0);
 HEAP32[$othermerges>>2] = $8;
 $9 = HEAP32[(7496)>>2]|0;
 $10 = (_qh_settemp($9)|0);
 HEAP32[(7736)>>2] = $10;
 $11 = HEAP32[$othermerges>>2]|0;
 _qh_settemppush($11);
 $12 = HEAP32[$othermerges>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  _qh_settempfree($othermerges);
  $numflip$224 = 0;$nummerge$215 = 0;
 } else {
  $14 = ((($12)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  L10: do {
   if ($16) {
    $numflip$0$ph$lcssa = 0;$nummerge$0$ph$lcssa = 0;
   } else {
    $17 = ((($14)) + 4|0);
    $116 = $15;$117 = $17;$numflip$0$ph22 = 0;$nummerge$0$ph21 = 0;
    while(1) {
     $19 = $116;$46 = $117;
     while(1) {
      $18 = ((($19)) + 16|0);
      $20 = HEAP32[$18>>2]|0;
      $21 = ($20|0)==(5);
      if ($21) {
       $22 = ((($19)) + 8|0);
       $23 = ((($19)) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $facet1$09 = HEAP32[$22>>2]|0;
       $25 = ((($facet1$09)) + 80|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = $26 & 2048;
       $28 = ($27|0)==(0);
       if ($28) {
        $facet1$0$lcssa = $facet1$09;
       } else {
        $facet1$010 = $facet1$09;
        while(1) {
         $33 = ((($facet1$010)) + 32|0);
         $facet1$0 = HEAP32[$33>>2]|0;
         $34 = ((($facet1$0)) + 80|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = $35 & 2048;
         $37 = ($36|0)==(0);
         if ($37) {
          $facet1$0$lcssa = $facet1$0;
          break;
         } else {
          $facet1$010 = $facet1$0;
         }
        }
       }
       $29 = ((($24)) + 80|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = $30 & 2048;
       $32 = ($31|0)==(0);
       if ($32) {
        $facet2$0$lcssa = $24;
       } else {
        $facet2$012 = $24;
        while(1) {
         $38 = ((($facet2$012)) + 32|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ((($39)) + 80|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = $41 & 2048;
         $43 = ($42|0)==(0);
         if ($43) {
          $facet2$0$lcssa = $39;
          break;
         } else {
          $facet2$012 = $39;
         }
        }
       }
       $44 = ($facet1$0$lcssa|0)==($facet2$0$lcssa|0);
       if (!($44)) {
        $$lcssa57 = $46;$$lcssa59 = $22;$$lcssa60 = $23;$facet1$0$lcssa$lcssa = $facet1$0$lcssa;$facet2$0$lcssa$lcssa = $facet2$0$lcssa;
        break;
       }
      }
      $45 = ((($46)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       $numflip$0$ph$lcssa = $numflip$0$ph22;$nummerge$0$ph$lcssa = $nummerge$0$ph21;
       break L10;
      } else {
       $19 = $47;$46 = $45;
      }
     }
     $49 = ((($facet2$0$lcssa$lcssa)) + 60|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (_qh_setin($50,$facet1$0$lcssa$lcssa)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      $53 = HEAP32[(7480)>>2]|0;
      $54 = HEAP32[$$lcssa59>>2]|0;
      $55 = ((($54)) + 76|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = HEAP32[$$lcssa60>>2]|0;
      $58 = ((($57)) + 76|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($facet1$0$lcssa$lcssa)) + 76|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ((($facet2$0$lcssa$lcssa)) + 76|0);
      $63 = HEAP32[$62>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $56;
      $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr3>>2] = $59;
      $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
      HEAP32[$vararg_ptr4>>2] = $61;
      $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
      HEAP32[$vararg_ptr5>>2] = $63;
      _qh_fprintf($53,6096,23704,$vararg_buffer1);
      _qh_errexit2(5,$facet1$0$lcssa$lcssa,$facet2$0$lcssa$lcssa);
     }
     $64 = HEAP32[(5768)>>2]|0;
     $65 = (($64) + -1)|0;
     $66 = HEAP32[(44768)>>2]|0;
     $67 = ($65|0)==($66|0);
     if ($67) {
      $68 = HEAP32[(5748)>>2]|0;
      HEAP32[(5344)>>2] = $68;
      HEAP32[(21232)>>2] = $68;
     }
     $69 = (+_qh_getdistance($facet1$0$lcssa$lcssa,$facet2$0$lcssa$lcssa,$mindist1,$maxdist1));
     $70 = (+_qh_getdistance($facet2$0$lcssa$lcssa,$facet1$0$lcssa$lcssa,$mindist2,$maxdist2));
     $71 = HEAP32[(5344)>>2]|0;
     $72 = ($71|0)==(0);
     if (!($72)) {
      $73 = HEAP32[(7480)>>2]|0;
      $74 = ((($facet1$0$lcssa$lcssa)) + 76|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($facet2$0$lcssa$lcssa)) + 76|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = HEAP32[(7596)>>2]|0;
      HEAP32[$vararg_buffer6>>2] = $75;
      $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $77;
      $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
      HEAPF64[$vararg_ptr10>>3] = $69;
      $vararg_ptr11 = ((($vararg_buffer6)) + 16|0);
      HEAPF64[$vararg_ptr11>>3] = $70;
      $vararg_ptr12 = ((($vararg_buffer6)) + 24|0);
      HEAP32[$vararg_ptr12>>2] = $78;
      _qh_fprintf($73,16,23832,$vararg_buffer6);
     }
     $79 = $69 < $70;
     if ($79) {
      _qh_mergefacet($facet1$0$lcssa$lcssa,$facet2$0$lcssa$lcssa,$mindist1,$maxdist1,0);
      $dist1$0 = $69;$facet1$1 = $facet1$0$lcssa$lcssa;
     } else {
      _qh_mergefacet($facet2$0$lcssa$lcssa,$facet1$0$lcssa$lcssa,$mindist2,$maxdist2,0);
      $dist1$0 = $70;$facet1$1 = $facet2$0$lcssa$lcssa;
     }
     $80 = ((($facet1$1)) + 80|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $81 & 65536;
     $83 = ($82|0)==(0);
     if ($83) {
      $87 = (($nummerge$0$ph21) + 1)|0;
      $numflip$1 = $numflip$0$ph22;$nummerge$1 = $87;
     } else {
      $84 = HEAP32[(44144)>>2]|0;
      $85 = (($84) + 1)|0;
      HEAP32[(44144)>>2] = $85;
      $86 = (($numflip$0$ph22) + 1)|0;
      $numflip$1 = $86;$nummerge$1 = $nummerge$0$ph21;
     }
     $88 = HEAP32[(5632)>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(43776)>>2]|0;
      $91 = (($90) + 1)|0;
      HEAP32[(43776)>>2] = $91;
      $92 = +HEAPF64[(43792)>>3];
      $93 = $dist1$0 + $92;
      HEAPF64[(43792)>>3] = $93;
      $94 = +HEAPF64[(43784)>>3];
      $95 = $94 < $dist1$0;
      if ($95) {
       HEAPF64[(43784)>>3] = $dist1$0;
      }
     }
     $96 = ((($$lcssa57)) + 4|0);
     $97 = HEAP32[$$lcssa57>>2]|0;
     $98 = ($97|0)==(0|0);
     if ($98) {
      $numflip$0$ph$lcssa = $numflip$1;$nummerge$0$ph$lcssa = $nummerge$1;
      break;
     } else {
      $116 = $97;$117 = $96;$numflip$0$ph22 = $numflip$1;$nummerge$0$ph21 = $nummerge$1;
     }
    }
   }
  } while(0);
  $$pr = HEAP32[$othermerges>>2]|0;
  $99 = ($$pr|0)==(0|0);
  if (!($99)) {
   $100 = ((($$pr)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==(0|0);
   if (!($102)) {
    $103 = ((($100)) + 4|0);
    $105 = $101;$109 = $103;
    while(1) {
     $104 = ((($105)) + 16|0);
     $106 = HEAP32[$104>>2]|0;
     $107 = ($106|0)==(5);
     if ($107) {
      _qh_memfree($105,24);
     } else {
      _qh_setappend((7736),$105);
     }
     $108 = ((($109)) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      break;
     } else {
      $105 = $110;$109 = $108;
     }
    }
   }
  }
  _qh_settempfree($othermerges);
  $112 = ($nummerge$0$ph$lcssa|0)==(0);
  if ($112) {
   $numflip$224 = $numflip$0$ph$lcssa;$nummerge$215 = 0;
  } else {
   HEAP32[$wasmerge>>2] = 1;
   $numflip$224 = $numflip$0$ph$lcssa;$nummerge$215 = $nummerge$0$ph$lcssa;
  }
 }
 $113 = HEAP32[(5344)>>2]|0;
 $114 = ($113|0)>(0);
 if (!($114)) {
  STACKTOP = sp;return;
 }
 $115 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $nummerge$215;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $numflip$224;
 _qh_fprintf($115,1011,23936,$vararg_buffer13);
 STACKTOP = sp;return;
}
function _qh_degen_redundant_neighbors($facet,$delfacet) {
 $facet = $facet|0;
 $delfacet = $delfacet|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $facet$delfacet = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vertexp$04 = 0, $vertexp$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($delfacet|0)==(0|0);
  if ($5) {
   $8 = -1;
  } else {
   $6 = ((($delfacet)) + 76|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7;
  }
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  _qh_fprintf($2,4022,24024,$vararg_buffer);
 }
 $9 = ((($facet)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_qh_setsize($10)|0);
 $12 = HEAP32[(5828)>>2]|0;
 $13 = ($11|0)<($12|0);
 if ($13) {
  _qh_appendmergeset($facet,$facet,6,0);
  $14 = HEAP32[(5344)>>2]|0;
  $15 = ($14|0)>(1);
  if ($15) {
   $16 = HEAP32[(7480)>>2]|0;
   $17 = ((($facet)) + 76|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $18;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $11;
   _qh_fprintf($16,2017,24096,$vararg_buffer2);
  }
 }
 $19 = ($delfacet|0)==(0|0);
 $facet$delfacet = $19 ? $facet : $delfacet;
 $20 = HEAP32[(7724)>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = $21 & 2147483647;
 $23 = $20 & -2147483648;
 $24 = $22 | $23;
 HEAP32[(7724)>>2] = $24;
 $25 = ((($facet)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $28 = ((($26)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   $34 = $29;$vertexp$04 = $28;
   while(1) {
    $31 = ((($vertexp$04)) + 4|0);
    $32 = HEAP32[(7724)>>2]|0;
    $33 = ((($34)) + 16|0);
    $35 = $33;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = (($35) + 4)|0;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = $32 & 2147483647;
    $42 = $37 & -2147483648;
    $43 = $42 | $41;
    $44 = $33;
    $45 = $44;
    HEAP32[$45>>2] = $43;
    $46 = (($44) + 4)|0;
    $47 = $46;
    HEAP32[$47>>2] = $40;
    $48 = HEAP32[$31>>2]|0;
    $49 = ($48|0)==(0|0);
    if ($49) {
     break;
    } else {
     $34 = $48;$vertexp$04 = $31;
    }
   }
  }
 }
 $50 = ((($facet$delfacet)) + 60|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = ((($51)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  $56 = ((($53)) + 4|0);
  $57 = ((($facet)) + 76|0);
  $58 = $54;$61 = $56;
  while(1) {
   $59 = ($58|0)==($facet|0);
   L23: do {
    if (!($59)) {
     $64 = ((($58)) + 52|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==(0|0);
     L25: do {
      if (!($66)) {
       $67 = ((($65)) + 4|0);
       $68 = HEAP32[(7724)>>2]|0;
       $vertexp$1 = $67;
       while(1) {
        $69 = HEAP32[$vertexp$1>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         break L25;
        }
        $71 = ((($vertexp$1)) + 4|0);
        $72 = ((($69)) + 16|0);
        $73 = $72;
        $74 = $73;
        $75 = HEAP32[$74>>2]|0;
        $76 = (($73) + 4)|0;
        $77 = $76;
        $78 = HEAP32[$77>>2]|0;
        $79 = $75 ^ $68;
        $80 = $79 & 2147483647;
        $81 = ($80|0)==(0);
        if ($81) {
         $vertexp$1 = $71;
        } else {
         break L23;
        }
       }
      }
     } while(0);
     _qh_appendmergeset($58,$facet,7,0);
     $82 = HEAP32[(5344)>>2]|0;
     $83 = ($82|0)>(1);
     if ($83) {
      $84 = HEAP32[(7480)>>2]|0;
      $85 = ((($58)) + 76|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = HEAP32[$57>>2]|0;
      HEAP32[$vararg_buffer6>>2] = $86;
      $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $87;
      _qh_fprintf($84,2018,24168,$vararg_buffer6);
     }
    }
   } while(0);
   $60 = ((($61)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0|0);
   if ($63) {
    break;
   } else {
    $58 = $62;$61 = $60;
   }
  }
 }
 $$pr = HEAP32[$50>>2]|0;
 $88 = ($$pr|0)==(0|0);
 if ($88) {
  STACKTOP = sp;return;
 }
 $89 = ((($$pr)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 if ($91) {
  STACKTOP = sp;return;
 }
 $92 = ((($89)) + 4|0);
 $93 = ((($facet)) + 76|0);
 $94 = $90;$97 = $92;
 while(1) {
  $95 = ($94|0)==($facet|0);
  if (!($95)) {
   $100 = ((($94)) + 60|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (_qh_setsize($101)|0);
   $103 = HEAP32[(5828)>>2]|0;
   $104 = ($102|0)<($103|0);
   if ($104) {
    _qh_appendmergeset($94,$94,6,0);
    $105 = HEAP32[(5344)>>2]|0;
    $106 = ($105|0)>(1);
    if ($106) {
     $107 = HEAP32[(7480)>>2]|0;
     $108 = ((($94)) + 76|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = HEAP32[$93>>2]|0;
     HEAP32[$vararg_buffer10>>2] = $109;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $102;
     $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
     HEAP32[$vararg_ptr14>>2] = $110;
     _qh_fprintf($107,2019,24232,$vararg_buffer10);
    }
   }
  }
  $96 = ((($97)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(0|0);
  if ($99) {
   break;
  } else {
   $94 = $98;$97 = $96;
  }
 }
 STACKTOP = sp;return;
}
function _qh_merge_degenredundant() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $facet2$0$lcssa = 0, $facet2$02 = 0, $maxdist = 0, $mindist = 0, $nummerges$0$be = 0, $nummerges$0$lcssa = 0, $nummerges$04 = 0, $vararg_buffer = 0;
 var $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer9 = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $dist = sp + 32|0;
 $mindist = sp + 40|0;
 $maxdist = sp + 48|0;
 $0 = HEAP32[(7740)>>2]|0;
 $1 = (_qh_setdellast($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $nummerges$0$lcssa = 0;
  STACKTOP = sp;return ($nummerges$0$lcssa|0);
 } else {
  $4 = $1;$nummerges$04 = 0;
 }
 while(1) {
  $3 = ((($4)) + 8|0);
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($4)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($4)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  _qh_memfree($4,24);
  $10 = ((($5)) + 80|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 2048;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $11 & 1073741823;
    HEAP32[$10>>2] = $14;
    $15 = HEAP32[(5768)>>2]|0;
    $16 = (($15) + -1)|0;
    $17 = HEAP32[(44768)>>2]|0;
    $18 = ($16|0)==($17|0);
    if ($18) {
     $19 = HEAP32[(5748)>>2]|0;
     HEAP32[(5344)>>2] = $19;
     HEAP32[(21232)>>2] = $19;
    }
    $20 = ($9|0)==(7);
    if ($20) {
     $21 = HEAP32[(44280)>>2]|0;
     $22 = (($21) + 1)|0;
     HEAP32[(44280)>>2] = $22;
     $23 = ((($7)) + 80|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $24 & 2048;
     $26 = ($25|0)==(0);
     if ($26) {
      $facet2$0$lcssa = $7;
     } else {
      $27 = ((($5)) + 76|0);
      $facet2$02 = $7;
      while(1) {
       $28 = ((($facet2$02)) + 32|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)==(0|0);
       if ($30) {
        $31 = HEAP32[(7480)>>2]|0;
        $32 = HEAP32[$27>>2]|0;
        $33 = ((($facet2$02)) + 76|0);
        $34 = HEAP32[$33>>2]|0;
        HEAP32[$vararg_buffer>>2] = $32;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $34;
        _qh_fprintf($31,6097,24320,$vararg_buffer);
        _qh_errexit2(5,$5,$facet2$02);
       }
       $35 = HEAP32[$28>>2]|0;
       $36 = ((($35)) + 80|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = $37 & 2048;
       $39 = ($38|0)==(0);
       if ($39) {
        $facet2$0$lcssa = $35;
        break;
       } else {
        $facet2$02 = $35;
       }
      }
     }
     $40 = ($5|0)==($facet2$0$lcssa|0);
     if ($40) {
      _qh_degen_redundant_facet($5);
      $nummerges$0$be = $nummerges$04;
      break;
     }
     $44 = HEAP32[(5344)>>2]|0;
     $45 = ($44|0)>(1);
     if ($45) {
      $46 = HEAP32[(7480)>>2]|0;
      $47 = ((($5)) + 76|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($facet2$0$lcssa)) + 76|0);
      $50 = HEAP32[$49>>2]|0;
      HEAP32[$vararg_buffer2>>2] = $48;
      $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $50;
      _qh_fprintf($46,2025,24416,$vararg_buffer2);
     }
     _qh_mergefacet($5,$facet2$0$lcssa,0,0,0);
     $51 = (($nummerges$04) + 1)|0;
     $nummerges$0$be = $51;
     break;
    }
    $52 = ((($5)) + 60|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_qh_setsize($53)|0);
    $55 = ($54|0)==(0);
    if (!($55)) {
     $109 = HEAP32[(5828)>>2]|0;
     $110 = ($54|0)<($109|0);
     if (!($110)) {
      $nummerges$0$be = $nummerges$04;
      break;
     }
     $111 = (_qh_findbestneighbor($5,$dist,$mindist,$maxdist)|0);
     $112 = HEAP32[(5344)>>2]|0;
     $113 = ($112|0)>(1);
     if ($113) {
      $114 = HEAP32[(7480)>>2]|0;
      $115 = ((($5)) + 76|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ((($111)) + 76|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = +HEAPF64[$dist>>3];
      HEAP32[$vararg_buffer13>>2] = $116;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $54;
      $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
      HEAP32[$vararg_ptr17>>2] = $118;
      $vararg_ptr18 = ((($vararg_buffer13)) + 16|0);
      HEAPF64[$vararg_ptr18>>3] = $119;
      _qh_fprintf($114,2028,24624,$vararg_buffer13);
     }
     _qh_mergefacet($5,$111,$mindist,$maxdist,0);
     $120 = (($nummerges$04) + 1)|0;
     $121 = HEAP32[(5632)>>2]|0;
     $122 = ($121|0)==(0);
     if ($122) {
      $nummerges$0$be = $120;
      break;
     }
     $123 = HEAP32[(43520)>>2]|0;
     $124 = (($123) + 1)|0;
     HEAP32[(43520)>>2] = $124;
     $125 = +HEAPF64[$dist>>3];
     $126 = +HEAPF64[(43536)>>3];
     $127 = $125 + $126;
     HEAPF64[(43536)>>3] = $127;
     $128 = +HEAPF64[(43528)>>3];
     $129 = +HEAPF64[$dist>>3];
     $130 = $128 < $129;
     if (!($130)) {
      $nummerges$0$be = $120;
      break;
     }
     HEAPF64[(43528)>>3] = $129;
     $nummerges$0$be = $120;
     break;
    }
    $56 = HEAP32[(43552)>>2]|0;
    $57 = (($56) + 1)|0;
    HEAP32[(43552)>>2] = $57;
    $58 = HEAP32[(5344)>>2]|0;
    $59 = ($58|0)>(1);
    if ($59) {
     $60 = HEAP32[(7480)>>2]|0;
     $61 = ((($5)) + 76|0);
     $62 = HEAP32[$61>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $62;
     _qh_fprintf($60,2026,24488,$vararg_buffer6);
    }
    _qh_willdelete($5,0);
    $63 = ((($5)) + 52|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0|0);
    if (!($65)) {
     $66 = ((($64)) + 4|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0|0);
     if (!($68)) {
      $69 = ((($66)) + 4|0);
      $70 = ((($5)) + 76|0);
      $105 = $69;$72 = $67;
      while(1) {
       $71 = ((($72)) + 12|0);
       $73 = HEAP32[$71>>2]|0;
       (_qh_setdel($73,$5)|0);
       $74 = HEAP32[$71>>2]|0;
       $75 = ((($74)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(0|0);
       if ($77) {
        $78 = HEAP32[(43544)>>2]|0;
        $79 = (($78) + 1)|0;
        HEAP32[(43544)>>2] = $79;
        $80 = HEAP32[(5344)>>2]|0;
        $81 = ($80|0)>(1);
        if ($81) {
         $82 = HEAP32[(7480)>>2]|0;
         $83 = ((($72)) + 16|0);
         $84 = $83;
         $85 = $84;
         $86 = HEAP32[$85>>2]|0;
         $87 = (($84) + 4)|0;
         $88 = $87;
         $89 = HEAP32[$88>>2]|0;
         $90 = $89 & 16777215;
         $91 = HEAP32[$70>>2]|0;
         HEAP32[$vararg_buffer9>>2] = $90;
         $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
         HEAP32[$vararg_ptr12>>2] = $91;
         _qh_fprintf($82,2027,24552,$vararg_buffer9);
        }
        $92 = ((($72)) + 16|0);
        $93 = $92;
        $94 = $93;
        $95 = HEAP32[$94>>2]|0;
        $96 = (($93) + 4)|0;
        $97 = $96;
        $98 = HEAP32[$97>>2]|0;
        $99 = $98 | 1073741824;
        $100 = $92;
        $101 = $100;
        HEAP32[$101>>2] = $95;
        $102 = (($100) + 4)|0;
        $103 = $102;
        HEAP32[$103>>2] = $99;
        _qh_setappend((7752),$72);
       }
       $104 = ((($105)) + 4|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($106|0)==(0|0);
       if ($107) {
        break;
       } else {
        $105 = $104;$72 = $106;
       }
      }
     }
    }
    $108 = (($nummerges$04) + 1)|0;
    $nummerges$0$be = $108;
   } else {
    $nummerges$0$be = $nummerges$04;
   }
  } while(0);
  $41 = HEAP32[(7740)>>2]|0;
  $42 = (_qh_setdellast($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   $nummerges$0$lcssa = $nummerges$0$be;
   break;
  } else {
   $4 = $42;$nummerges$04 = $nummerges$0$be;
  }
 }
 STACKTOP = sp;return ($nummerges$0$lcssa|0);
}
function _qh_flippedmerges($facetlist,$wasmerge) {
 $facetlist = $facetlist|0;
 $wasmerge = $wasmerge|0;
 var $$lcssa = 0, $$lcssa38 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $dist = 0, $facet$011 = 0, $maxdist = 0;
 var $mindist = 0, $nummerge$0$ph$lcssa = 0, $nummerge$0$ph9 = 0, $nummerge$124 = 0, $othermerges = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 56|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $dist = sp + 32|0;
 $mindist = sp + 40|0;
 $maxdist = sp + 48|0;
 $othermerges = sp + 60|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,4024,24704,$vararg_buffer);
 }
 $3 = ($facetlist|0)==(0|0);
 L4: do {
  if (!($3)) {
   $facet$011 = $facetlist;
   while(1) {
    $4 = ((($facet$011)) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     break L4;
    }
    $7 = ((($facet$011)) + 80|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8 & 67584;
    $10 = ($9|0)==(65536);
    if ($10) {
     _qh_appendmergeset($facet$011,$facet$011,4,0);
    }
    $11 = HEAP32[$4>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    } else {
     $facet$011 = $11;
    }
   }
  }
 } while(0);
 $13 = (_qh_settemppop()|0);
 HEAP32[$othermerges>>2] = $13;
 $14 = HEAP32[(7496)>>2]|0;
 $15 = (_qh_settemp($14)|0);
 HEAP32[(7736)>>2] = $15;
 $16 = HEAP32[$othermerges>>2]|0;
 _qh_settemppush($16);
 $17 = HEAP32[$othermerges>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _qh_settempfree($othermerges);
  $nummerge$124 = 0;
 } else {
  $19 = ((($17)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  L14: do {
   if ($21) {
    $nummerge$0$ph$lcssa = 0;
   } else {
    $22 = ((($19)) + 4|0);
    $92 = $20;$93 = $22;$nummerge$0$ph9 = 0;
    while(1) {
     $24 = $92;$30 = $93;
     while(1) {
      $23 = ((($24)) + 8|0);
      $25 = HEAP32[$23>>2]|0;
      $26 = ((($24)) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(4);
      if ($28) {
       $33 = ((($25)) + 80|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 & 2048;
       $36 = ($35|0)==(0);
       if ($36) {
        $$lcssa = $30;$$lcssa38 = $25;
        break;
       }
      }
      $29 = ((($30)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       $nummerge$0$ph$lcssa = $nummerge$0$ph9;
       break L14;
      } else {
       $24 = $31;$30 = $29;
      }
     }
     $37 = HEAP32[(5768)>>2]|0;
     $38 = (($37) + -1)|0;
     $39 = HEAP32[(44768)>>2]|0;
     $40 = ($38|0)==($39|0);
     if ($40) {
      $41 = HEAP32[(5748)>>2]|0;
      HEAP32[(5344)>>2] = $41;
      HEAP32[(21232)>>2] = $41;
     }
     $42 = (_qh_findbestneighbor($$lcssa38,$dist,$mindist,$maxdist)|0);
     $43 = HEAP32[(5344)>>2]|0;
     $44 = ($43|0)==(0);
     if (!($44)) {
      $45 = HEAP32[(7480)>>2]|0;
      $46 = ((($$lcssa38)) + 76|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($42)) + 76|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = +HEAPF64[$dist>>3];
      $51 = HEAP32[(7596)>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $47;
      $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr3>>2] = $49;
      $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
      HEAPF64[$vararg_ptr4>>3] = $50;
      $vararg_ptr5 = ((($vararg_buffer1)) + 16|0);
      HEAP32[$vararg_ptr5>>2] = $51;
      _qh_fprintf($45,15,24736,$vararg_buffer1);
     }
     _qh_mergefacet($$lcssa38,$42,$mindist,$maxdist,0);
     $52 = (($nummerge$0$ph9) + 1)|0;
     $53 = HEAP32[(5632)>>2]|0;
     $54 = ($53|0)==(0);
     if (!($54)) {
      $55 = HEAP32[(43816)>>2]|0;
      $56 = (($55) + 1)|0;
      HEAP32[(43816)>>2] = $56;
      $57 = +HEAPF64[$dist>>3];
      $58 = +HEAPF64[(43832)>>3];
      $59 = $57 + $58;
      HEAPF64[(43832)>>3] = $59;
      $60 = +HEAPF64[(43824)>>3];
      $61 = +HEAPF64[$dist>>3];
      $62 = $60 < $61;
      if ($62) {
       HEAPF64[(43824)>>3] = $61;
      }
     }
     (_qh_merge_degenredundant()|0);
     $63 = ((($$lcssa)) + 4|0);
     $64 = HEAP32[$$lcssa>>2]|0;
     $65 = ($64|0)==(0|0);
     if ($65) {
      $nummerge$0$ph$lcssa = $52;
      break;
     } else {
      $92 = $64;$93 = $63;$nummerge$0$ph9 = $52;
     }
    }
   }
  } while(0);
  $$pr = HEAP32[$othermerges>>2]|0;
  $66 = ($$pr|0)==(0|0);
  if (!($66)) {
   $67 = ((($$pr)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(0|0);
   if (!($69)) {
    $70 = ((($67)) + 4|0);
    $72 = $68;$85 = $70;
    while(1) {
     $71 = ((($72)) + 8|0);
     $73 = HEAP32[$71>>2]|0;
     $74 = ((($73)) + 80|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $75 & 2048;
     $77 = ($76|0)==(0);
     if ($77) {
      $78 = ((($72)) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ((($79)) + 80|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $81 & 2048;
      $83 = ($82|0)==(0);
      if ($83) {
       _qh_setappend((7736),$72);
      } else {
       label = 29;
      }
     } else {
      label = 29;
     }
     if ((label|0) == 29) {
      label = 0;
      _qh_memfree($72,24);
     }
     $84 = ((($85)) + 4|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)==(0|0);
     if ($87) {
      break;
     } else {
      $72 = $86;$85 = $84;
     }
    }
   }
  }
  _qh_settempfree($othermerges);
  $88 = ($nummerge$0$ph$lcssa|0)==(0);
  if ($88) {
   $nummerge$124 = 0;
  } else {
   HEAP32[$wasmerge>>2] = 1;
   $nummerge$124 = $nummerge$0$ph$lcssa;
  }
 }
 $89 = HEAP32[(5344)>>2]|0;
 $90 = ($89|0)>(0);
 if (!($90)) {
  STACKTOP = sp;return;
 }
 $91 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $nummerge$124;
 _qh_fprintf($91,1010,24808,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _qh_getmergeset_initial($facetlist) {
 $facetlist = $facetlist|0;
 var $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $facet$06 = 0;
 var $ridgep$0 = 0, $ridgep$14 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7720)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(7720)>>2] = $1;
 $2 = ($facetlist|0)==(0|0);
 L1: do {
  if (!($2)) {
   $facet$06 = $facetlist;
   while(1) {
    $3 = ((($facet$06)) + 48|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)==(0|0);
    if ($5) {
     break L1;
    }
    $6 = HEAP32[(7720)>>2]|0;
    $7 = ((($facet$06)) + 72|0);
    HEAP32[$7>>2] = $6;
    $8 = ((($facet$06)) + 80|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 | 134217728;
    HEAP32[$8>>2] = $10;
    $11 = ((($facet$06)) + 60|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     $14 = ((($12)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     if (!($16)) {
      $17 = ((($14)) + 4|0);
      $19 = $15;$43 = $17;
      while(1) {
       $18 = ((($19)) + 72|0);
       $20 = HEAP32[$18>>2]|0;
       $21 = HEAP32[(7720)>>2]|0;
       $22 = ($20|0)==($21|0);
       L10: do {
        if (!($22)) {
         $23 = (_qh_test_appendmerge($facet$06,$19)|0);
         $24 = ($23|0)==(0);
         if (!($24)) {
          $25 = ((($19)) + 56|0);
          $26 = HEAP32[$25>>2]|0;
          $27 = ($26|0)==(0|0);
          if (!($27)) {
           $28 = ((($26)) + 4|0);
           $ridgep$0 = $28;
           while(1) {
            $29 = ((($ridgep$0)) + 4|0);
            $30 = HEAP32[$ridgep$0>>2]|0;
            $31 = ($30|0)==(0|0);
            if ($31) {
             break L10;
            }
            $32 = ((($30)) + 4|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = ($33|0)==($19|0);
            if ($34) {
             $35 = ((($30)) + 8|0);
             $36 = HEAP32[$35>>2]|0;
             $38 = $36;
            } else {
             $38 = $33;
            }
            $37 = ($facet$06|0)==($38|0);
            if ($37) {
             $$lcssa13 = $30;
             break;
            } else {
             $ridgep$0 = $29;
            }
           }
           $39 = ((($$lcssa13)) + 12|0);
           $40 = HEAP32[$39>>2]|0;
           $41 = $40 | 67108864;
           HEAP32[$39>>2] = $41;
          }
         }
        }
       } while(0);
       $42 = ((($43)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($44|0)==(0|0);
       if ($45) {
        break;
       } else {
        $19 = $44;$43 = $42;
       }
      }
     }
    }
    $46 = ((($facet$06)) + 56|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if (!($48)) {
     $49 = ((($47)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0|0);
     if (!($51)) {
      $54 = $50;$ridgep$14 = $49;
      while(1) {
       $52 = ((($ridgep$14)) + 4|0);
       $53 = ((($54)) + 12|0);
       $55 = HEAP32[$53>>2]|0;
       $56 = $55 | 33554432;
       HEAP32[$53>>2] = $56;
       $57 = HEAP32[$52>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        break;
       } else {
        $54 = $57;$ridgep$14 = $52;
       }
      }
     }
    }
    $59 = HEAP32[$3>>2]|0;
    $60 = ($59|0)==(0|0);
    if ($60) {
     break;
    } else {
     $facet$06 = $59;
    }
   }
  }
 } while(0);
 $61 = HEAP32[(7736)>>2]|0;
 $62 = (_qh_setsize($61)|0);
 $63 = HEAP32[(5236)>>2]|0;
 $64 = ($63|0)==(0);
 $65 = HEAP32[(7736)>>2]|0;
 $66 = ((($65)) + 4|0);
 if ($64) {
  _qsort($66,$62,4,6);
 } else {
  _qsort($66,$62,4,5);
 }
 $67 = HEAP32[(7688)>>2]|0;
 $68 = ($67|0)==(0);
 if ($68) {
  $71 = HEAP32[(44160)>>2]|0;
  $72 = (($71) + ($62))|0;
  HEAP32[(44160)>>2] = $72;
  $73 = HEAP32[(44168)>>2]|0;
  $74 = ($73|0)<($62|0);
  if ($74) {
   HEAP32[(44168)>>2] = $62;
  }
 } else {
  $69 = HEAP32[(44176)>>2]|0;
  $70 = (($69) + ($62))|0;
  HEAP32[(44176)>>2] = $70;
 }
 $75 = HEAP32[(5344)>>2]|0;
 $76 = ($75|0)>(1);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $62;
 _qh_fprintf($77,2022,24880,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_all_merges($othermerge,$vneighbors) {
 $othermerge = $othermerge|0;
 $vneighbors = $vneighbors|0;
 var $$$0 = 0, $$0 = 0, $$1 = 0, $$122 = 0, $$2 = 0, $$lcssa = 0, $$lcssa175 = 0, $$lcssa177 = 0, $$lcssa187 = 0, $$lcssa189 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $isreduce$0 = 0, $numconcave$0 = 0, $numconcave$1$lcssa = 0, $numconcave$1$lcssa$lcssa = 0, $numconcave$171 = 0, $numconcave$2$ph$lcssa31 = 0, $numconcave$2$ph$ph61 = 0, $numconcave$2$ph46 = 0, $numconcave$2$ph46$lcssa = 0, $numcoplanar$0 = 0, $numcoplanar$1$lcssa = 0, $numcoplanar$1$lcssa$lcssa = 0, $numcoplanar$170 = 0, $numcoplanar$2$ph$ph$lcssa = 0, $numcoplanar$2$ph$ph60 = 0, $numdegenredun$0 = 0, $numdegenredun$1$lcssa = 0;
 var $numdegenredun$1$lcssa$lcssa = 0, $numdegenredun$172 = 0, $numdegenredun$2$ph$lcssa32 = 0, $numdegenredun$2$ph$ph62 = 0, $numdegenredun$2$ph47 = 0, $numnewmerges$0 = 0, $numnewmerges$1$lcssa = 0, $numnewmerges$173 = 0, $numnewmerges$2$ph$lcssa33 = 0, $numnewmerges$2$ph$ph63 = 0, $numnewmerges$2$ph48 = 0, $numnewmerges$3 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond24 = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vertex$0 = 0, $vertex$080 = 0, $vertex$081 = 0, $wasmerge$0$lcssa = 0, $wasmerge$069 = 0, $wasmerge$1$ph$lcssa30 = 0, $wasmerge$1$ph$ph59 = 0, $wasmerge$1$ph45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = HEAP32[(7512)>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $7 = -1;
  } else {
   $5 = ((($3)) + 76|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6;
  }
  HEAP32[$vararg_buffer>>2] = $7;
  _qh_fprintf($2,2010,24928,$vararg_buffer);
 }
 $8 = ($vneighbors|0)==(0);
 $$0 = $othermerge;$numconcave$0 = 0;$numcoplanar$0 = 0;$numdegenredun$0 = 0;$numnewmerges$0 = 0;
 L7: while(1) {
  $9 = HEAP32[(7736)>>2]|0;
  $10 = (_qh_setsize($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $numconcave$1$lcssa = $numconcave$0;$numcoplanar$1$lcssa = $numcoplanar$0;$numdegenredun$1$lcssa = $numdegenredun$0;$numnewmerges$1$lcssa = $numnewmerges$0;$wasmerge$0$lcssa = 0;
  } else {
   $numconcave$171 = $numconcave$0;$numcoplanar$170 = $numcoplanar$0;$numdegenredun$172 = $numdegenredun$0;$numnewmerges$173 = $numnewmerges$0;$wasmerge$069 = 0;
   while(1) {
    $12 = HEAP32[(7736)>>2]|0;
    $13 = (_qh_setdellast($12)|0);
    $14 = ($13|0)==(0|0);
    L12: do {
     if ($14) {
      $numconcave$2$ph$lcssa31 = $numconcave$171;$numcoplanar$2$ph$ph$lcssa = $numcoplanar$170;$numdegenredun$2$ph$lcssa32 = $numdegenredun$172;$numnewmerges$2$ph$lcssa33 = $numnewmerges$173;$wasmerge$1$ph$lcssa30 = $wasmerge$069;
     } else {
      $111 = $13;$numconcave$2$ph$ph61 = $numconcave$171;$numcoplanar$2$ph$ph60 = $numcoplanar$170;$numdegenredun$2$ph$ph62 = $numdegenredun$172;$numnewmerges$2$ph$ph63 = $numnewmerges$173;$wasmerge$1$ph$ph59 = $wasmerge$069;
      while(1) {
       $112 = $111;$numconcave$2$ph46 = $numconcave$2$ph$ph61;$numdegenredun$2$ph47 = $numdegenredun$2$ph$ph62;$numnewmerges$2$ph48 = $numnewmerges$2$ph$ph63;$wasmerge$1$ph45 = $wasmerge$1$ph$ph59;
       while(1) {
        $16 = $112;
        while(1) {
         $15 = ((($16)) + 8|0);
         $17 = HEAP32[$15>>2]|0;
         $18 = ((($16)) + 12|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = ((($16)) + 16|0);
         $21 = HEAP32[$20>>2]|0;
         _qh_memfree($16,24);
         $22 = ((($17)) + 80|0);
         $23 = HEAP32[$22>>2]|0;
         $24 = $23 & 2048;
         $25 = ($24|0)==(0);
         if ($25) {
          $26 = ((($19)) + 80|0);
          $27 = HEAP32[$26>>2]|0;
          $28 = $27 & 2048;
          $29 = ($28|0)==(0);
          if ($29) {
           $30 = $23 & 134218752;
           $31 = ($30|0)==(1024);
           $32 = $27 & 134218752;
           $33 = ($32|0)==(1024);
           $or$cond24 = $31 | $33;
           if (!($or$cond24)) {
            $$lcssa = $17;$$lcssa175 = $19;$$lcssa177 = $21;
            break;
           }
           $34 = HEAP32[(5388)>>2]|0;
           $35 = ($34|0)!=(0);
           $36 = ($21>>>0)<(3);
           $or$cond = $36 & $35;
           if (!($or$cond)) {
            $$lcssa = $17;$$lcssa175 = $19;$$lcssa177 = $21;
            break;
           }
          }
         }
         $37 = HEAP32[(7736)>>2]|0;
         $38 = (_qh_setdellast($37)|0);
         $39 = ($38|0)==(0|0);
         if ($39) {
          $numconcave$2$ph$lcssa31 = $numconcave$2$ph46;$numcoplanar$2$ph$ph$lcssa = $numcoplanar$2$ph$ph60;$numdegenredun$2$ph$lcssa32 = $numdegenredun$2$ph47;$numnewmerges$2$ph$lcssa33 = $numnewmerges$2$ph48;$wasmerge$1$ph$lcssa30 = $wasmerge$1$ph45;
          break L12;
         } else {
          $16 = $38;
         }
        }
        _qh_merge_nonconvex($$lcssa,$$lcssa175,$$lcssa177);
        $40 = (_qh_merge_degenredundant()|0);
        $41 = (($40) + ($numdegenredun$2$ph47))|0;
        $42 = (($numnewmerges$2$ph48) + 1)|0;
        $43 = ($$lcssa177|0)==(3);
        if (!($43)) {
         $$lcssa187 = $41;$$lcssa189 = $42;$numconcave$2$ph46$lcssa = $numconcave$2$ph46;
         break;
        }
        $44 = (($numconcave$2$ph46) + 1)|0;
        $45 = HEAP32[(7736)>>2]|0;
        $46 = (_qh_setdellast($45)|0);
        $47 = ($46|0)==(0|0);
        if ($47) {
         $numconcave$2$ph$lcssa31 = $44;$numcoplanar$2$ph$ph$lcssa = $numcoplanar$2$ph$ph60;$numdegenredun$2$ph$lcssa32 = $41;$numnewmerges$2$ph$lcssa33 = $42;$wasmerge$1$ph$lcssa30 = 1;
         break L12;
        } else {
         $112 = $46;$numconcave$2$ph46 = $44;$numdegenredun$2$ph47 = $41;$numnewmerges$2$ph48 = $42;$wasmerge$1$ph45 = 1;
        }
       }
       $48 = (($numcoplanar$2$ph$ph60) + 1)|0;
       $49 = HEAP32[(7736)>>2]|0;
       $50 = (_qh_setdellast($49)|0);
       $51 = ($50|0)==(0|0);
       if ($51) {
        $numconcave$2$ph$lcssa31 = $numconcave$2$ph46$lcssa;$numcoplanar$2$ph$ph$lcssa = $48;$numdegenredun$2$ph$lcssa32 = $$lcssa187;$numnewmerges$2$ph$lcssa33 = $$lcssa189;$wasmerge$1$ph$lcssa30 = 1;
        break;
       } else {
        $111 = $50;$numconcave$2$ph$ph61 = $numconcave$2$ph46$lcssa;$numcoplanar$2$ph$ph60 = $48;$numdegenredun$2$ph$ph62 = $$lcssa187;$numnewmerges$2$ph$ph63 = $$lcssa189;$wasmerge$1$ph$ph59 = 1;
       }
      }
     }
    } while(0);
    $52 = HEAP32[(7688)>>2]|0;
    $53 = ($52|0)!=(0);
    $54 = HEAP32[(5828)>>2]|0;
    $55 = ($54|0)<(6);
    $or$cond3 = $53 & $55;
    $56 = ($numnewmerges$2$ph$lcssa33|0)>(2);
    $or$cond5 = $56 & $or$cond3;
    if ($or$cond5) {
     (_qh_reducevertices()|0);
     $numnewmerges$3 = 0;
    } else {
     $numnewmerges$3 = $numnewmerges$2$ph$lcssa33;
    }
    $57 = HEAP32[(7512)>>2]|0;
    _qh_getmergeset($57);
    $58 = HEAP32[(7736)>>2]|0;
    $59 = (_qh_setsize($58)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $numconcave$1$lcssa = $numconcave$2$ph$lcssa31;$numcoplanar$1$lcssa = $numcoplanar$2$ph$ph$lcssa;$numdegenredun$1$lcssa = $numdegenredun$2$ph$lcssa32;$numnewmerges$1$lcssa = $numnewmerges$3;$wasmerge$0$lcssa = $wasmerge$1$ph$lcssa30;
     break;
    } else {
     $numconcave$171 = $numconcave$2$ph$lcssa31;$numcoplanar$170 = $numcoplanar$2$ph$ph$lcssa;$numdegenredun$172 = $numdegenredun$2$ph$lcssa32;$numnewmerges$173 = $numnewmerges$3;$wasmerge$069 = $wasmerge$1$ph$lcssa30;
    }
   }
  }
  $61 = HEAP32[(6900)>>2]|0;
  $62 = ($61|0)==(0);
  do {
   if ($62) {
    $$2 = $$0;
   } else {
    $63 = HEAP32[(5828)>>2]|0;
    $64 = ($63|0)>(3);
    $65 = HEAP32[(7688)>>2]|0;
    $66 = ($65|0)!=(0);
    $or$cond7 = $64 & $66;
    L34: do {
     if ($or$cond7) {
      $vertex$080 = HEAP32[(7540)>>2]|0;
      $67 = ($vertex$080|0)==(0|0);
      if ($67) {
       $isreduce$0 = 1;
      } else {
       $vertex$081 = $vertex$080;
       while(1) {
        $68 = HEAP32[$vertex$081>>2]|0;
        $69 = ($68|0)==(0|0);
        if ($69) {
         $isreduce$0 = 1;
         break L34;
        }
        $70 = ((($vertex$081)) + 16|0);
        $71 = $70;
        $72 = $71;
        $73 = HEAP32[$72>>2]|0;
        $74 = (($71) + 4)|0;
        $75 = $74;
        $76 = HEAP32[$75>>2]|0;
        $77 = $76 | 536870912;
        $78 = $70;
        $79 = $78;
        HEAP32[$79>>2] = $73;
        $80 = (($78) + 4)|0;
        $81 = $80;
        HEAP32[$81>>2] = $77;
        $vertex$0 = HEAP32[$vertex$081>>2]|0;
        $82 = ($vertex$0|0)==(0|0);
        if ($82) {
         $isreduce$0 = 1;
         break;
        } else {
         $vertex$081 = $vertex$0;
        }
       }
      }
     } else {
      $isreduce$0 = 0;
     }
    } while(0);
    $83 = $wasmerge$0$lcssa | $$0;
    $84 = ($83|0)==(0);
    if ($84) {
     $$1 = $$0;
     label = 28;
    } else {
     $85 = HEAP32[(5384)>>2]|0;
     $86 = ($85|0)==(0);
     $87 = HEAP32[(7688)>>2]|0;
     $88 = ($87|0)!=(0);
     $or$cond11 = $86 | $88;
     $89 = HEAP32[(5828)>>2]|0;
     $90 = ($89|0)<(6);
     $or$cond13 = $or$cond11 & $90;
     $$$0 = $or$cond13 ? 0 : $$0;
     if ($or$cond13) {
      $$122 = $$$0;
     } else {
      $$1 = $$$0;
      label = 28;
     }
    }
    if ((label|0) == 28) {
     label = 0;
     $91 = ($isreduce$0|0)==(0);
     if ($91) {
      $$2 = $$1;
      break;
     } else {
      $$122 = $$1;
     }
    }
    $92 = (_qh_reducevertices()|0);
    $93 = ($92|0)==(0);
    if ($93) {
     $$2 = $$122;
    } else {
     $94 = HEAP32[(7512)>>2]|0;
     _qh_getmergeset($94);
     $$0 = $$122;$numconcave$0 = $numconcave$1$lcssa;$numcoplanar$0 = $numcoplanar$1$lcssa;$numdegenredun$0 = $numdegenredun$1$lcssa;$numnewmerges$0 = $numnewmerges$1$lcssa;
     continue L7;
    }
   }
  } while(0);
  if ($8) {
   $numconcave$1$lcssa$lcssa = $numconcave$1$lcssa;$numcoplanar$1$lcssa$lcssa = $numcoplanar$1$lcssa;$numdegenredun$1$lcssa$lcssa = $numdegenredun$1$lcssa;
   break;
  }
  $95 = (_qh_test_vneighbors()|0);
  $96 = ($95|0)==(0);
  if ($96) {
   $numconcave$1$lcssa$lcssa = $numconcave$1$lcssa;$numcoplanar$1$lcssa$lcssa = $numcoplanar$1$lcssa;$numdegenredun$1$lcssa$lcssa = $numdegenredun$1$lcssa;
   break;
  } else {
   $$0 = $$2;$numconcave$0 = $numconcave$1$lcssa;$numcoplanar$0 = $numcoplanar$1$lcssa;$numdegenredun$0 = $numdegenredun$1$lcssa;$numnewmerges$0 = $numnewmerges$1$lcssa;
  }
 }
 $97 = HEAP32[(5280)>>2]|0;
 $98 = ($97|0)==(0);
 $99 = HEAP32[(5384)>>2]|0;
 $100 = ($99|0)!=(0);
 $or$cond15 = $98 | $100;
 if (!($or$cond15)) {
  $101 = HEAP32[(5656)>>2]|0;
  HEAP32[(7788)>>2] = $101;
  HEAP32[(5656)>>2] = 0;
  $102 = HEAP32[(7512)>>2]|0;
  _qh_checkconvex($102,0);
  $103 = HEAP32[(7788)>>2]|0;
  HEAP32[(5656)>>2] = $103;
 }
 $104 = HEAP32[(5344)>>2]|0;
 $105 = ($104|0)>(0);
 if ($105) {
  $106 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $numcoplanar$1$lcssa$lcssa;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $numconcave$1$lcssa$lcssa;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $numdegenredun$1$lcssa$lcssa;
  _qh_fprintf($106,1009,24992,$vararg_buffer1);
 }
 $107 = HEAP32[(5344)>>2]|0;
 $108 = ($107|0)>(3);
 $109 = HEAP32[(7552)>>2]|0;
 $110 = ($109|0)<(50);
 $or$cond17 = $108 & $110;
 if (!($or$cond17)) {
  STACKTOP = sp;return;
 }
 _qh_printlists();
 STACKTOP = sp;return;
}
function _qh_reducevertices() {
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa135 = 0, $$lcssa138 = 0, $$lcssa140 = 0, $$lcssa143 = 0, $$vertexp$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $degenredun$0 = 0, $degenredun$0150 = 0, $newfacet$0 = 0, $newfacet$020 = 0, $newfacet$021 = 0, $newfacet$1 = 0, $newfacet$123 = 0, $newfacet$12329 = 0, $newfacet$12331 = 0, $newfacet$124 = 0, $newfacet$124$lcssa134 = 0, $not$ = 0;
 var $numrename$0 = 0, $numrename$1$ph = 0, $numrename$1$ph146 = 0, $numshare$0 = 0, $numshare$1$ph$lcssa = 0, $numshare$1$ph$lcssa152 = 0, $numshare$1$ph30 = 0, $numshare$2$ = 0, $numshare$2$ph = 0, $numshare$2$ph$lcssa = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vertex$0 = 0, $vertex$0$in$ph = 0, $vertex$033 = 0, $vertex$034 = 0, $vertexp$0 = 0, $vertexp$0$lcssa136 = 0, $vertexp$0$ph = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = ($0|0)==(2);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_qh_merge_degenredundant()|0);
 $not$ = ($2|0)!=(0);
 $$ = $not$&1;
 $degenredun$0 = $$;$numrename$0 = 0;$numshare$0 = 0;
 L4: while(1) {
  $newfacet$020 = HEAP32[(7512)>>2]|0;
  $3 = ($newfacet$020|0)==(0|0);
  L6: do {
   if (!($3)) {
    $newfacet$021 = $newfacet$020;
    while(1) {
     $4 = ((($newfacet$021)) + 48|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = ($5|0)==(0|0);
     if ($6) {
      break L6;
     }
     $7 = ((($newfacet$021)) + 80|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = $8 & 536870912;
     $10 = ($9|0)==(0);
     if (!($10)) {
      $12 = HEAP32[(5416)>>2]|0;
      $13 = ($12|0)==(0);
      if ($13) {
       $14 = $8 & -536870913;
       HEAP32[$7>>2] = $14;
      }
      (_qh_remove_extravertices($newfacet$021)|0);
     }
     $newfacet$0 = HEAP32[$4>>2]|0;
     $11 = ($newfacet$0|0)==(0|0);
     if ($11) {
      break;
     } else {
      $newfacet$021 = $newfacet$0;
     }
    }
   }
  } while(0);
  $15 = HEAP32[(5416)>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $$0 = 0;
   label = 33;
   break;
  }
  $newfacet$12329 = HEAP32[(7512)>>2]|0;
  $17 = ($newfacet$12329|0)==(0|0);
  L18: do {
   if ($17) {
    $numshare$1$ph$lcssa = $numshare$0;
   } else {
    $newfacet$12331 = $newfacet$12329;$numshare$1$ph30 = $numshare$0;
    while(1) {
     $newfacet$124 = $newfacet$12331;
     while(1) {
      $19 = ((($newfacet$124)) + 48|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0|0);
      if ($21) {
       $numshare$1$ph$lcssa = $numshare$1$ph30;
       break L18;
      }
      $22 = ((($newfacet$124)) + 80|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = $23 & 536870912;
      $25 = ($24|0)==(0);
      if (!($25)) {
       $26 = $23 & -536870913;
       HEAP32[$22>>2] = $26;
       $27 = ((($newfacet$124)) + 52|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(0|0);
       if (!($29)) {
        $$lcssa = $28;$$lcssa135 = $19;$newfacet$124$lcssa134 = $newfacet$124;
        break;
       }
      }
      $newfacet$1 = HEAP32[$19>>2]|0;
      $30 = ($newfacet$1|0)==(0|0);
      if ($30) {
       $numshare$1$ph$lcssa = $numshare$1$ph30;
       break L18;
      } else {
       $newfacet$124 = $newfacet$1;
      }
     }
     $31 = ((($$lcssa)) + 4|0);
     $numshare$2$ph = $numshare$1$ph30;$vertexp$0$ph = $31;
     L28: while(1) {
      $vertexp$0 = $vertexp$0$ph;
      while(1) {
       $32 = ((($vertexp$0)) + 4|0);
       $33 = HEAP32[$vertexp$0>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        $numshare$2$ph$lcssa = $numshare$2$ph;
        break L28;
       }
       $35 = ((($33)) + 16|0);
       $36 = $35;
       $37 = $36;
       $38 = HEAP32[$37>>2]|0;
       $39 = (($36) + 4)|0;
       $40 = $39;
       $41 = HEAP32[$40>>2]|0;
       $42 = $41 & 536870912;
       $43 = (0)==(0);
       $44 = ($42|0)==(0);
       $45 = $43 & $44;
       if ($45) {
        $vertexp$0 = $32;
       } else {
        $$lcssa138 = $32;$$lcssa140 = $33;$vertexp$0$lcssa136 = $vertexp$0;
        break;
       }
      }
      $46 = (_qh_rename_sharedvertex($$lcssa140,$newfacet$124$lcssa134)|0);
      $47 = ($46|0)==(0|0);
      $48 = $47&1;
      $49 = $48 ^ 1;
      $numshare$2$ = (($49) + ($numshare$2$ph))|0;
      $$vertexp$0 = $47 ? $$lcssa138 : $vertexp$0$lcssa136;
      $numshare$2$ph = $numshare$2$;$vertexp$0$ph = $$vertexp$0;
     }
     $newfacet$123 = HEAP32[$$lcssa135>>2]|0;
     $18 = ($newfacet$123|0)==(0|0);
     if ($18) {
      $numshare$1$ph$lcssa = $numshare$2$ph$lcssa;
      break;
     } else {
      $newfacet$12331 = $newfacet$123;$numshare$1$ph30 = $numshare$2$ph$lcssa;
     }
    }
   }
  } while(0);
  $numrename$1$ph = $numrename$0;$vertex$0$in$ph = (7548);
  while(1) {
   $vertex$033 = HEAP32[$vertex$0$in$ph>>2]|0;
   $76 = ($vertex$033|0)==(0|0);
   if ($76) {
    $degenredun$0150 = $degenredun$0;$numrename$1$ph146 = $numrename$1$ph;$numshare$1$ph$lcssa152 = $numshare$1$ph$lcssa;
    break L4;
   } else {
    $vertex$034 = $vertex$033;
   }
   while(1) {
    $50 = HEAP32[$vertex$034>>2]|0;
    $51 = ($50|0)==(0|0);
    if ($51) {
     $degenredun$0150 = $degenredun$0;$numrename$1$ph146 = $numrename$1$ph;$numshare$1$ph$lcssa152 = $numshare$1$ph$lcssa;
     break L4;
    }
    $52 = ((($vertex$034)) + 16|0);
    $53 = $52;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 & 1610612736;
    $60 = (0)==(0);
    $61 = ($59|0)==(536870912);
    $62 = $60 & $61;
    if ($62) {
     $64 = $58 & -536870913;
     $65 = $52;
     $66 = $65;
     HEAP32[$66>>2] = $55;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     $69 = HEAP32[(5828)>>2]|0;
     $70 = ($69|0)>(3);
     if ($70) {
      $71 = (_qh_redundant_vertex($vertex$034)|0);
      $72 = ($71|0)==(0|0);
      if (!($72)) {
       $$lcssa143 = $vertex$034;
       break;
      }
     }
    }
    $vertex$0 = HEAP32[$vertex$034>>2]|0;
    $63 = ($vertex$0|0)==(0|0);
    if ($63) {
     $degenredun$0150 = $degenredun$0;$numrename$1$ph146 = $numrename$1$ph;$numshare$1$ph$lcssa152 = $numshare$1$ph$lcssa;
     break L4;
    } else {
     $vertex$034 = $vertex$0;
    }
   }
   $73 = (($numrename$1$ph) + 1)|0;
   $74 = (_qh_merge_degenredundant()|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $numrename$1$ph = $73;$vertex$0$in$ph = $$lcssa143;
   } else {
    $degenredun$0 = 1;$numrename$0 = $73;$numshare$0 = $numshare$1$ph$lcssa;
    continue L4;
   }
  }
 }
 if ((label|0) == 33) {
  STACKTOP = sp;return ($$0|0);
 }
 $77 = HEAP32[(5344)>>2]|0;
 $78 = ($77|0)>(0);
 if (!($78)) {
  $$0 = $degenredun$0150;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $numshare$1$ph$lcssa152;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $numrename$1$ph146;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $degenredun$0150;
 _qh_fprintf($79,1014,25088,$vararg_buffer);
 $$0 = $degenredun$0150;
 STACKTOP = sp;return ($$0|0);
}
function _qh_merge_nonconvex($facet1,$facet2,$mergetype) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 $mergetype = $mergetype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $9 = 0, $dist = 0, $dist2 = 0, $facet1$facet2 = 0, $facet2$facet1 = 0, $maxdist = 0, $maxdist2 = 0, $mindist = 0, $mindist2 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer = sp;
 $dist = sp + 16|0;
 $dist2 = sp + 24|0;
 $mindist = sp + 32|0;
 $mindist2 = sp + 40|0;
 $maxdist = sp + 48|0;
 $maxdist2 = sp + 56|0;
 $0 = HEAP32[(5768)>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = HEAP32[(44768)>>2]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  $4 = HEAP32[(5748)>>2]|0;
  HEAP32[(5344)>>2] = $4;
  HEAP32[(21232)>>2] = $4;
 }
 $5 = HEAP32[(5344)>>2]|0;
 $6 = ($5|0)>(2);
 if ($6) {
  $7 = HEAP32[(7480)>>2]|0;
  $8 = HEAP32[(44768)>>2]|0;
  $9 = (($8) + 1)|0;
  $10 = ((($facet1)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($facet2)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $13;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $mergetype;
  _qh_fprintf($7,3003,25176,$vararg_buffer);
 }
 $14 = ((($facet1)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 1024;
 $17 = ($16|0)==(0);
 $facet2$facet1 = $17 ? $facet2 : $facet1;
 $facet1$facet2 = $17 ? $facet1 : $facet2;
 $18 = (_qh_findbestneighbor($facet2$facet1,$dist,$mindist,$maxdist)|0);
 $19 = (_qh_findbestneighbor($facet1$facet2,$dist2,$mindist2,$maxdist2)|0);
 $20 = +HEAPF64[$dist>>3];
 $21 = +HEAPF64[$dist2>>3];
 $22 = $20 < $21;
 L7: do {
  if ($22) {
   _qh_mergefacet($facet2$facet1,$18,$mindist,$maxdist,0);
  } else {
   $23 = HEAP32[(5264)>>2]|0;
   $24 = ($23|0)==(0);
   do {
    if (!($24)) {
     $25 = ((($facet1$facet2)) + 80|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $26 & 1024;
     $28 = ($27|0)==(0);
     if ($28) {
      $29 = +HEAPF64[$mindist>>3];
      $30 = +HEAPF64[(5376)>>3];
      $31 = -$30;
      $32 = !($29 >= $31);
      if ($32) {
       label = 11;
      } else {
       $33 = +HEAPF64[$maxdist>>3];
       $34 = +HEAPF64[(7632)>>3];
       $35 = !($33 <= $34);
       if ($35) {
        label = 11;
       }
      }
      if ((label|0) == 11) {
       $36 = +HEAPF64[$dist>>3];
       $37 = $36 * 1.5;
       $38 = +HEAPF64[$dist2>>3];
       $39 = $37 < $38;
       if (!($39)) {
        break;
       }
      }
      $40 = HEAP32[(43280)>>2]|0;
      $41 = (($40) + 1)|0;
      HEAP32[(43280)>>2] = $41;
      $42 = +HEAPF64[$dist>>3];
      $43 = +HEAPF64[(43296)>>3];
      $44 = $42 + $43;
      HEAPF64[(43296)>>3] = $44;
      $45 = +HEAPF64[(43288)>>3];
      $46 = +HEAPF64[$dist>>3];
      $47 = $45 < $46;
      if ($47) {
       HEAPF64[(43288)>>3] = $46;
      }
      $48 = HEAP32[(5344)>>2]|0;
      $49 = ($48|0)>(1);
      if ($49) {
       $50 = HEAP32[(7480)>>2]|0;
       $51 = ((($facet1$facet2)) + 76|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = +HEAPF64[$dist2>>3];
       $54 = ((($facet2$facet1)) + 76|0);
       $55 = HEAP32[$54>>2]|0;
       HEAP32[$vararg_buffer4>>2] = $52;
       $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
       HEAPF64[$vararg_ptr7>>3] = $53;
       $vararg_ptr8 = ((($vararg_buffer4)) + 16|0);
       HEAP32[$vararg_ptr8>>2] = $55;
       $vararg_ptr9 = ((($vararg_buffer4)) + 24|0);
       HEAPF64[$vararg_ptr9>>3] = $53;
       _qh_fprintf($50,2029,25232,$vararg_buffer4);
      }
      _qh_mergefacet($facet2$facet1,$18,$mindist,$maxdist,0);
      break L7;
     }
    }
   } while(0);
   _qh_mergefacet($facet1$facet2,$19,$mindist2,$maxdist2,0);
   $56 = +HEAPF64[$dist2>>3];
   HEAPF64[$dist>>3] = $56;
  }
 } while(0);
 $57 = HEAP32[(5632)>>2]|0;
 $58 = ($57|0)==(0);
 if ($58) {
  STACKTOP = sp;return;
 }
 if ((($mergetype|0) == 2)) {
  $59 = HEAP32[43192>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[43192>>2] = $60;
  $61 = +HEAPF64[$dist>>3];
  $62 = +HEAPF64[(43208)>>3];
  $63 = $61 + $62;
  HEAPF64[(43208)>>3] = $63;
  $64 = +HEAPF64[(43200)>>3];
  $65 = +HEAPF64[$dist>>3];
  $66 = $64 < $65;
  if (!($66)) {
   STACKTOP = sp;return;
  }
  HEAPF64[(43200)>>3] = $65;
  STACKTOP = sp;return;
 } else if ((($mergetype|0) == 3)) {
  $67 = HEAP32[(43368)>>2]|0;
  $68 = (($67) + 1)|0;
  HEAP32[(43368)>>2] = $68;
  $69 = +HEAPF64[$dist>>3];
  $70 = +HEAPF64[(43384)>>3];
  $71 = $69 + $70;
  HEAPF64[(43384)>>3] = $71;
  $72 = +HEAPF64[(43376)>>3];
  $73 = +HEAPF64[$dist>>3];
  $74 = $72 < $73;
  if (!($74)) {
   STACKTOP = sp;return;
  }
  HEAPF64[(43376)>>3] = $73;
  STACKTOP = sp;return;
 } else {
  $75 = HEAP32[(43408)>>2]|0;
  $76 = (($75) + 1)|0;
  HEAP32[(43408)>>2] = $76;
  $77 = +HEAPF64[$dist>>3];
  $78 = +HEAPF64[(43424)>>3];
  $79 = $77 + $78;
  HEAPF64[(43424)>>3] = $79;
  $80 = +HEAPF64[(43416)>>3];
  $81 = +HEAPF64[$dist>>3];
  $82 = $80 < $81;
  if (!($82)) {
   STACKTOP = sp;return;
  }
  HEAPF64[(43416)>>3] = $81;
  STACKTOP = sp;return;
 }
}
function _qh_getmergeset($facetlist) {
 $facetlist = $facetlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $facet$05 = 0, $neighborp$03 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(7736)>>2]|0;
 (_qh_setsize($0)|0);
 $1 = HEAP32[(5344)>>2]|0;
 $2 = ($1|0)>(3);
 if ($2) {
  $3 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($3,4026,25328,$vararg_buffer);
 }
 $4 = HEAP32[(7720)>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[(7720)>>2] = $5;
 $6 = ($facetlist|0)==(0|0);
 L4: do {
  if (!($6)) {
   $facet$05 = $facetlist;
   while(1) {
    $7 = ((($facet$05)) + 48|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     break L4;
    }
    $10 = ((($facet$05)) + 80|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 134217728;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[(7720)>>2]|0;
     $15 = ((($facet$05)) + 72|0);
     HEAP32[$15>>2] = $14;
     $16 = HEAP32[$10>>2]|0;
     $17 = $16 | 134217728;
     HEAP32[$10>>2] = $17;
     $18 = ((($facet$05)) + 60|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==(0|0);
     if (!($20)) {
      $21 = ((($19)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(0|0);
      if (!($23)) {
       $26 = $22;$neighborp$03 = $21;
       while(1) {
        $24 = ((($neighborp$03)) + 4|0);
        $25 = ((($26)) + 80|0);
        $27 = HEAP32[$25>>2]|0;
        $28 = $27 & -16385;
        HEAP32[$25>>2] = $28;
        $29 = HEAP32[$24>>2]|0;
        $30 = ($29|0)==(0|0);
        if ($30) {
         break;
        } else {
         $26 = $29;$neighborp$03 = $24;
        }
       }
      }
     }
     $31 = ((($facet$05)) + 56|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if (!($33)) {
      $34 = ((($32)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(0|0);
      if (!($36)) {
       $37 = ((($34)) + 4|0);
       $39 = $35;$70 = $37;
       while(1) {
        $38 = ((($39)) + 12|0);
        $40 = HEAP32[$38>>2]|0;
        $41 = $40 & 100663296;
        $42 = ($41|0)==(33554432);
        do {
         if (!($42)) {
          $43 = ((($39)) + 4|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = ($44|0)==($facet$05|0);
          if ($45) {
           $46 = ((($39)) + 8|0);
           $47 = HEAP32[$46>>2]|0;
           $49 = $47;
          } else {
           $49 = $44;
          }
          $48 = ((($49)) + 80|0);
          $50 = HEAP32[$48>>2]|0;
          $51 = $50 & 16384;
          $52 = ($51|0)==(0);
          if (!($52)) {
           $53 = HEAP32[$38>>2]|0;
           $54 = $53 & -100663297;
           $55 = $54 | 33554432;
           HEAP32[$38>>2] = $55;
           break;
          }
          $56 = ((($49)) + 72|0);
          $57 = HEAP32[$56>>2]|0;
          $58 = HEAP32[(7720)>>2]|0;
          $59 = ($57|0)==($58|0);
          if (!($59)) {
           $60 = HEAP32[$38>>2]|0;
           $61 = $60 & -100663297;
           $62 = $61 | 33554432;
           HEAP32[$38>>2] = $62;
           $63 = HEAP32[$48>>2]|0;
           $64 = $63 | 16384;
           HEAP32[$48>>2] = $64;
           $65 = (_qh_test_appendmerge($facet$05,$49)|0);
           $66 = ($65|0)==(0);
           if (!($66)) {
            $67 = HEAP32[$38>>2]|0;
            $68 = $67 | 67108864;
            HEAP32[$38>>2] = $68;
           }
          }
         }
        } while(0);
        $69 = ((($70)) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ($71|0)==(0|0);
        if ($72) {
         break;
        } else {
         $39 = $71;$70 = $69;
        }
       }
      }
     }
    }
    $73 = HEAP32[$7>>2]|0;
    $74 = ($73|0)==(0|0);
    if ($74) {
     break;
    } else {
     $facet$05 = $73;
    }
   }
  }
 } while(0);
 $75 = HEAP32[(7736)>>2]|0;
 $76 = (_qh_setsize($75)|0);
 $77 = HEAP32[(5236)>>2]|0;
 $78 = ($77|0)==(0);
 $79 = HEAP32[(7736)>>2]|0;
 $80 = ((($79)) + 4|0);
 if ($78) {
  _qsort($80,$76,4,6);
 } else {
  _qsort($80,$76,4,5);
 }
 $81 = HEAP32[(7688)>>2]|0;
 $82 = ($81|0)==(0);
 if ($82) {
  $85 = HEAP32[(44200)>>2]|0;
  $86 = (($85) + ($76))|0;
  HEAP32[(44200)>>2] = $86;
  $87 = HEAP32[(44208)>>2]|0;
  $88 = ($87|0)<($76|0);
  if ($88) {
   HEAP32[(44208)>>2] = $76;
  }
 } else {
  $83 = HEAP32[(44216)>>2]|0;
  $84 = (($83) + ($76))|0;
  HEAP32[(44216)>>2] = $84;
 }
 $89 = HEAP32[(5344)>>2]|0;
 $90 = ($89|0)>(1);
 if (!($90)) {
  STACKTOP = sp;return;
 }
 $91 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $76;
 _qh_fprintf($91,2021,25360,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _qh_test_vneighbors() {
 var $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa87 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $neighborp$013 = 0, $newfacet$0 = 0, $newfacet$018 = 0, $newfacet$019 = 0, $newfacet$1 = 0, $newfacet$1$in = 0;
 var $newfacet$1$in$ph$ph = 0, $newfacet$1$lcssa77 = 0, $newfacet$1$lcssa77$lcssa = 0, $not$ = 0, $nummerges$0$ph$ph = 0, $nummerges$0$ph$ph$lcssa = 0, $nummerges$1$ph$ph$be = 0, $nummerges$1$ph$ph59 = 0, $nummerges$2$ = 0, $nummerges$2$ph16 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,1015,25400,$vararg_buffer);
 }
 $3 = HEAP32[(6900)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _qh_vertexneighbors();
 }
 $newfacet$018 = HEAP32[(7512)>>2]|0;
 $5 = ($newfacet$018|0)==(0|0);
 L7: do {
  if ($5) {
   $newfacet$1$in$ph$ph = (7512);$nummerges$0$ph$ph = 0;
  } else {
   $newfacet$019 = $newfacet$018;
   while(1) {
    $6 = ((($newfacet$019)) + 48|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $newfacet$1$in$ph$ph = (7512);$nummerges$0$ph$ph = 0;
     break L7;
    }
    $9 = ((($newfacet$019)) + 80|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 & -16385;
    HEAP32[$9>>2] = $11;
    $newfacet$0 = HEAP32[$6>>2]|0;
    $12 = ($newfacet$0|0)==(0|0);
    if ($12) {
     $newfacet$1$in$ph$ph = (7512);$nummerges$0$ph$ph = 0;
     break;
    } else {
     $newfacet$019 = $newfacet$0;
    }
   }
  }
 } while(0);
 L11: while(1) {
  $newfacet$1$in = $newfacet$1$in$ph$ph;
  while(1) {
   $newfacet$1 = HEAP32[$newfacet$1$in>>2]|0;
   $13 = ($newfacet$1|0)==(0|0);
   if ($13) {
    $nummerges$0$ph$ph$lcssa = $nummerges$0$ph$ph;
    break L11;
   }
   $14 = ((($newfacet$1)) + 48|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $nummerges$0$ph$ph$lcssa = $nummerges$0$ph$ph;
    break L11;
   }
   $17 = ((($newfacet$1)) + 80|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 | 16384;
   HEAP32[$17>>2] = $19;
   $20 = HEAP32[(7720)>>2]|0;
   $21 = (($20) + 1)|0;
   HEAP32[(7720)>>2] = $21;
   $22 = ((($newfacet$1)) + 72|0);
   HEAP32[$22>>2] = $20;
   $23 = ((($newfacet$1)) + 60|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    $26 = ((($24)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if (!($28)) {
     $29 = HEAP32[(7720)>>2]|0;
     $neighborp$013 = $26;
     while(1) {
      $30 = ((($neighborp$013)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       break;
      } else {
       $neighborp$013 = $30;
      }
     }
     HEAP32[$22>>2] = $29;
    }
   }
   $33 = ((($newfacet$1)) + 52|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $newfacet$1$in = $14;
    continue;
   } else {
    $$lcssa = $14;$$lcssa78 = $34;$newfacet$1$lcssa77 = $newfacet$1;
   }
   $36 = ((($$lcssa78)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $newfacet$1$in = $$lcssa;
   } else {
    $$lcssa$lcssa = $$lcssa;$$lcssa79 = $36;$$lcssa80 = $37;$newfacet$1$lcssa77$lcssa = $newfacet$1$lcssa77;
    break;
   }
  }
  $39 = ((($$lcssa79)) + 4|0);
  $80 = $$lcssa80;$81 = $39;$nummerges$1$ph$ph59 = $nummerges$0$ph$ph;
  while(1) {
   $44 = $80;$48 = $81;
   while(1) {
    $43 = ((($44)) + 12|0);
    $45 = HEAP32[$43>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $51 = ((($45)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if (!($53)) {
      $$lcssa81 = $48;$$lcssa83 = $51;$$lcssa84 = $52;
      break;
     }
    }
    $47 = ((($48)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $newfacet$1$in$ph$ph = $$lcssa$lcssa;$nummerges$0$ph$ph = $nummerges$1$ph$ph59;
     continue L11;
    } else {
     $44 = $49;$48 = $47;
    }
   }
   $54 = ((($$lcssa83)) + 4|0);
   $82 = $$lcssa84;$83 = $54;$nummerges$2$ph16 = $nummerges$1$ph$ph59;
   L34: while(1) {
    $55 = HEAP32[(7720)>>2]|0;
    $57 = $82;$65 = $83;
    while(1) {
     $56 = ((($57)) + 80|0);
     $58 = HEAP32[$56>>2]|0;
     $59 = $58 & 16384;
     $60 = ($59|0)==(0);
     if ($60) {
      $61 = ((($57)) + 72|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==($55|0);
      if (!($63)) {
       $$lcssa85 = $57;$$lcssa87 = $65;
       break;
      }
     }
     $64 = ((($65)) + 4|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==(0|0);
     if ($67) {
      $nummerges$1$ph$ph$be = $nummerges$2$ph16;
      break L34;
     } else {
      $57 = $66;$65 = $64;
     }
    }
    $68 = (_qh_test_appendmerge($newfacet$1$lcssa77$lcssa,$$lcssa85)|0);
    $not$ = ($68|0)!=(0);
    $69 = $not$&1;
    $nummerges$2$ = (($69) + ($nummerges$2$ph16))|0;
    $70 = ((($$lcssa87)) + 4|0);
    $71 = HEAP32[$$lcssa87>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $nummerges$1$ph$ph$be = $nummerges$2$;
     break;
    } else {
     $82 = $71;$83 = $70;$nummerges$2$ph16 = $nummerges$2$;
    }
   }
   $40 = ((($$lcssa81)) + 4|0);
   $41 = HEAP32[$$lcssa81>>2]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $newfacet$1$in$ph$ph = $$lcssa$lcssa;$nummerges$0$ph$ph = $nummerges$1$ph$ph$be;
    continue L11;
   } else {
    $80 = $41;$81 = $40;$nummerges$1$ph$ph59 = $nummerges$1$ph$ph$be;
   }
  }
 }
 $73 = HEAP32[(44744)>>2]|0;
 $74 = (($73) + ($nummerges$0$ph$ph$lcssa))|0;
 HEAP32[(44744)>>2] = $74;
 $75 = HEAP32[(5344)>>2]|0;
 $76 = ($75|0)>(0);
 if (!($76)) {
  $78 = ($nummerges$0$ph$ph$lcssa|0)>(0);
  $79 = $78&1;
  STACKTOP = sp;return ($79|0);
 }
 $77 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $nummerges$0$ph$ph$lcssa;
 _qh_fprintf($77,1016,25464,$vararg_buffer1);
 $78 = ($nummerges$0$ph$ph$lcssa|0)>(0);
 $79 = $78&1;
 STACKTOP = sp;return ($79|0);
}
function _qh_appendmergeset($facet,$neighbor,$mergetype,$angle) {
 $facet = $facet|0;
 $neighbor = $neighbor|0;
 $mergetype = $mergetype|0;
 $angle = $angle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($facet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $1 & 1073741824;
 $4 = ($3|0)!=(0);
 $5 = ($mergetype|0)==(6);
 $or$cond = $5 & $4;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = (_qh_memalloc(24)|0);
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $facet;
 $8 = ((($6)) + 12|0);
 HEAP32[$8>>2] = $neighbor;
 $9 = ((($6)) + 16|0);
 HEAP32[$9>>2] = $mergetype;
 $10 = ($angle|0)!=(0|0);
 $11 = HEAP32[(5236)>>2]|0;
 $12 = ($11|0)!=(0);
 $or$cond3 = $10 & $12;
 if ($or$cond3) {
  $13 = +HEAPF64[$angle>>3];
  HEAPF64[$6>>3] = $13;
 }
 $14 = ($mergetype>>>0)<(6);
 if ($14) {
  _qh_setappend((7736),$6);
  STACKTOP = sp;return;
 }
 if ($5) {
  $15 = HEAP32[$0>>2]|0;
  $16 = $15 | 1073741824;
  HEAP32[$0>>2] = $16;
  $17 = HEAP32[(7740)>>2]|0;
  $18 = (_qh_setlast($17)|0);
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $20 = ((($18)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(6);
   if (!($22)) {
    _qh_setaddnth((7740),0,$6);
    STACKTOP = sp;return;
   }
  }
  _qh_setappend((7740),$6);
  STACKTOP = sp;return;
 }
 $23 = ($mergetype|0)==(7);
 $24 = HEAP32[$0>>2]|0;
 if ($23) {
  $25 = $24 | -2147483648;
  HEAP32[$0>>2] = $25;
  _qh_setappend((7740),$6);
  STACKTOP = sp;return;
 }
 $26 = ($24|0)<(0);
 if ($26) {
  label = 16;
 } else {
  $27 = ((($neighbor)) + 80|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)<(0);
  if ($29) {
   label = 16;
  }
 }
 if ((label|0) == 16) {
  $30 = HEAP32[(7480)>>2]|0;
  $31 = ((($facet)) + 76|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($neighbor)) + 76|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$vararg_buffer>>2] = $32;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $34;
  _qh_fprintf($30,6092,25528,$vararg_buffer);
  _qh_errexit2(5,$facet,$neighbor);
 }
 $35 = ((($facet)) + 52|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($neighbor)) + 52|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (_qh_setequal($36,$38)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = HEAP32[(7480)>>2]|0;
  $42 = ((($facet)) + 76|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($neighbor)) + 76|0);
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $43;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $45;
  _qh_fprintf($41,6093,25608,$vararg_buffer2);
  _qh_errexit2(5,$facet,$neighbor);
 }
 $46 = HEAP32[$0>>2]|0;
 $47 = $46 | -2147483648;
 HEAP32[$0>>2] = $47;
 $48 = ((($neighbor)) + 80|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 | -2147483648;
 HEAP32[$48>>2] = $50;
 _qh_setappend((7740),$6);
 STACKTOP = sp;return;
}
function _qh_basevertices($samecycle) {
 $samecycle = $samecycle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $same$02 = 0, $vararg_buffer = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $vertices = sp + 4|0;
 $0 = HEAP32[(7496)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$vertices>>2] = $1;
 $2 = ((($samecycle)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[(7724)>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = $7 & 2147483647;
 $9 = $6 & -2147483648;
 $10 = $8 | $9;
 HEAP32[(7724)>>2] = $10;
 $11 = ((($5)) + 16|0);
 $12 = $11;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $7 & 2147483647;
 $19 = $14 & -2147483648;
 $20 = $18 | $19;
 $21 = $11;
 $22 = $21;
 HEAP32[$22>>2] = $20;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $17;
 $25 = ((($samecycle)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 L1: do {
  if (!($27)) {
   $same$02 = $26;
   while(1) {
    $28 = ((($same$02)) + 80|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 4194304;
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = ((($same$02)) + 52|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if (!($34)) {
      $35 = ((($33)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ($36|0)==(0|0);
      if (!($37)) {
       $38 = ((($35)) + 4|0);
       $40 = $36;$67 = $38;
       while(1) {
        $39 = ((($40)) + 16|0);
        $41 = $39;
        $42 = $41;
        $43 = HEAP32[$42>>2]|0;
        $44 = (($41) + 4)|0;
        $45 = $44;
        $46 = HEAP32[$45>>2]|0;
        $47 = HEAP32[(7724)>>2]|0;
        $48 = $43 ^ $47;
        $49 = $48 & 2147483647;
        $50 = ($49|0)==(0);
        if (!($50)) {
         _qh_setappend($vertices,$40);
         $51 = HEAP32[(7724)>>2]|0;
         $52 = $39;
         $53 = $52;
         $54 = HEAP32[$53>>2]|0;
         $55 = (($52) + 4)|0;
         $56 = $55;
         $57 = HEAP32[$56>>2]|0;
         $58 = $51 & 2147483647;
         $59 = $54 & -2147483648;
         $60 = $57 & -268435457;
         $61 = $59 | $58;
         $62 = $39;
         $63 = $62;
         HEAP32[$63>>2] = $61;
         $64 = (($62) + 4)|0;
         $65 = $64;
         HEAP32[$65>>2] = $60;
        }
        $66 = ((($67)) + 4|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(0|0);
        if ($69) {
         break;
        } else {
         $40 = $68;$67 = $66;
        }
       }
      }
     }
    }
    $70 = ($same$02|0)==($samecycle|0);
    if ($70) {
     break L1;
    }
    $71 = ((($same$02)) + 32|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0|0);
    if ($73) {
     break;
    } else {
     $same$02 = $72;
    }
   }
  }
 } while(0);
 $74 = HEAP32[(5344)>>2]|0;
 $75 = ($74|0)>(3);
 if (!($75)) {
  $79 = HEAP32[$vertices>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $76 = HEAP32[(7480)>>2]|0;
 $77 = HEAP32[$vertices>>2]|0;
 $78 = (_qh_setsize($77)|0);
 HEAP32[$vararg_buffer>>2] = $78;
 _qh_fprintf($76,4019,25704,$vararg_buffer);
 $79 = HEAP32[$vertices>>2]|0;
 STACKTOP = sp;return ($79|0);
}
function _qh_compareangle($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p1>>2]|0;
 $1 = HEAP32[$p2>>2]|0;
 $2 = +HEAPF64[$0>>3];
 $3 = +HEAPF64[$1>>3];
 $4 = $2 > $3;
 $5 = $4 ? 1 : -1;
 return ($5|0);
}
function _qh_comparemerge($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p1>>2]|0;
 $1 = HEAP32[$p2>>2]|0;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 return ($6|0);
}
function _qh_comparevisit($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p1>>2]|0;
 $1 = HEAP32[$p2>>2]|0;
 $2 = ((($0)) + 16|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $5 & 2147483647;
 $10 = ((($1)) + 16|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $13 & 2147483647;
 $18 = (($9) - ($17))|0;
 return ($18|0);
}
function _qh_copynonconvex($atridge) {
 $atridge = $atridge|0;
 var $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ridgep$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($atridge)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($atridge)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($5)) + 4|0);
 $ridgep$0 = $7;
 while(1) {
  $8 = ((($ridgep$0)) + 4|0);
  $9 = HEAP32[$ridgep$0>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 9;
   break;
  }
  $11 = ((($9)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($1|0);
  if ($13) {
   $14 = ((($9)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $17 = $15;
  } else {
   $17 = $12;
  }
  $16 = ($3|0)!=($17|0);
  $18 = ($9|0)==($atridge|0);
  $or$cond = $18 | $16;
  if ($or$cond) {
   $ridgep$0 = $8;
  } else {
   $$lcssa6 = $9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $19 = ((($$lcssa6)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 | 67108864;
 HEAP32[$19>>2] = $21;
 $22 = HEAP32[(5344)>>2]|0;
 $23 = ($22|0)>(3);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[(7480)>>2]|0;
 $25 = ((($atridge)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 16777215;
 $28 = $20 & 16777215;
 HEAP32[$vararg_buffer>>2] = $27;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $28;
 _qh_fprintf($24,4020,25744,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_degen_redundant_facet($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vertexp$07 = 0, $vertexp$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _qh_fprintf($2,4021,25800,$vararg_buffer);
 }
 $5 = ((($facet)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 L4: do {
  if (!($7)) {
   $8 = ((($6)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = ((($8)) + 4|0);
    $12 = ((($facet)) + 52|0);
    $14 = $11;$23 = $9;
    L7: while(1) {
     $17 = HEAP32[(7724)>>2]|0;
     $18 = (($17) + 1)|0;
     $19 = $18 & 2147483647;
     $20 = $17 & -2147483648;
     $21 = $19 | $20;
     HEAP32[(7724)>>2] = $21;
     $22 = ((($23)) + 52|0);
     $24 = HEAP32[$22>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      $26 = ((($24)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(0|0);
      if (!($28)) {
       $32 = $27;$vertexp$07 = $26;
       while(1) {
        $29 = ((($vertexp$07)) + 4|0);
        $30 = HEAP32[(7724)>>2]|0;
        $31 = ((($32)) + 16|0);
        $33 = $31;
        $34 = $33;
        $35 = HEAP32[$34>>2]|0;
        $36 = (($33) + 4)|0;
        $37 = $36;
        $38 = HEAP32[$37>>2]|0;
        $39 = $30 & 2147483647;
        $40 = $35 & -2147483648;
        $41 = $40 | $39;
        $42 = $31;
        $43 = $42;
        HEAP32[$43>>2] = $41;
        $44 = (($42) + 4)|0;
        $45 = $44;
        HEAP32[$45>>2] = $38;
        $46 = HEAP32[$29>>2]|0;
        $47 = ($46|0)==(0|0);
        if ($47) {
         break;
        } else {
         $32 = $46;$vertexp$07 = $29;
        }
       }
      }
     }
     $48 = HEAP32[$12>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      $65 = $23;
      break;
     }
     $50 = ((($48)) + 4|0);
     $51 = HEAP32[(7724)>>2]|0;
     $vertexp$1 = $50;
     while(1) {
      $52 = HEAP32[$vertexp$1>>2]|0;
      $53 = ($52|0)==(0|0);
      if ($53) {
       $65 = $23;
       break L7;
      }
      $54 = ((($vertexp$1)) + 4|0);
      $55 = ((($52)) + 16|0);
      $56 = $55;
      $57 = $56;
      $58 = HEAP32[$57>>2]|0;
      $59 = (($56) + 4)|0;
      $60 = $59;
      $61 = HEAP32[$60>>2]|0;
      $62 = $58 ^ $51;
      $63 = $62 & 2147483647;
      $64 = ($63|0)==(0);
      if ($64) {
       $vertexp$1 = $54;
      } else {
       break;
      }
     }
     $13 = ((($14)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     if ($16) {
      break L4;
     } else {
      $14 = $13;$23 = $15;
     }
    }
    _qh_appendmergeset($facet,$65,7,0);
    $66 = HEAP32[(5344)>>2]|0;
    $67 = ($66|0)>(1);
    if (!($67)) {
     STACKTOP = sp;return;
    }
    $68 = HEAP32[(7480)>>2]|0;
    $69 = ((($facet)) + 76|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($65)) + 76|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $70;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $72;
    _qh_fprintf($68,2015,25864,$vararg_buffer1);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $73 = HEAP32[$5>>2]|0;
 $74 = (_qh_setsize($73)|0);
 $75 = HEAP32[(5828)>>2]|0;
 $76 = ($74|0)<($75|0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 _qh_appendmergeset($facet,$facet,6,0);
 $77 = HEAP32[(5344)>>2]|0;
 $78 = ($77|0)>(1);
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $79 = HEAP32[(7480)>>2]|0;
 $80 = ((($facet)) + 76|0);
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $81;
 _qh_fprintf($79,2016,25928,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _qh_find_newvertex($oldvertex,$vertices,$ridges) {
 $oldvertex = $oldvertex|0;
 $vertices = $vertices|0;
 $ridges = $ridges|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $hash = 0, $newridges = 0, $ridgep$030 = 0, $ridgep$221 = 0, $ridgep$3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vertex$010 = 0, $vertexp$032 = 0;
 var $vertexp$128 = 0, $vertexp$225 = 0, $vertexp$3$ph24 = 0, $vertexp$3$ph24$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 24|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $newridges = sp + 68|0;
 $hash = sp + 64|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($oldvertex)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 16777215;
  HEAP32[$vararg_buffer>>2] = $10;
  _qh_fprintf($2,8063,25984,$vararg_buffer);
  $11 = ($vertices|0)==(0|0);
  if (!($11)) {
   $12 = ((($vertices)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    $18 = $13;$vertexp$032 = $12;
    while(1) {
     $15 = ((($vertexp$032)) + 4|0);
     $16 = HEAP32[(7480)>>2]|0;
     $17 = ((($18)) + 16|0);
     $19 = $17;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $22 = (($19) + 4)|0;
     $23 = $22;
     $24 = HEAP32[$23>>2]|0;
     $25 = $24 & 16777215;
     HEAP32[$vararg_buffer1>>2] = $25;
     _qh_fprintf($16,8064,40632,$vararg_buffer1);
     $26 = HEAP32[$15>>2]|0;
     $27 = ($26|0)==(0|0);
     if ($27) {
      break;
     } else {
      $18 = $26;$vertexp$032 = $15;
     }
    }
   }
  }
  $28 = ($ridges|0)==(0|0);
  if (!($28)) {
   $29 = ((($ridges)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $35 = $30;$ridgep$030 = $29;
    while(1) {
     $32 = ((($ridgep$030)) + 4|0);
     $33 = HEAP32[(7480)>>2]|0;
     $34 = ((($35)) + 12|0);
     $36 = HEAP32[$34>>2]|0;
     $37 = $36 & 16777215;
     HEAP32[$vararg_buffer4>>2] = $37;
     _qh_fprintf($33,8065,26040,$vararg_buffer4);
     $38 = HEAP32[$32>>2]|0;
     $39 = ($38|0)==(0|0);
     if ($39) {
      break;
     } else {
      $35 = $38;$ridgep$030 = $32;
     }
    }
   }
  }
  $40 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($40,8066,56128,$vararg_buffer7);
 }
 $41 = ($vertices|0)!=(0|0);
 if ($41) {
  $42 = ((($vertices)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $47 = $43;$vertexp$128 = $42;
   while(1) {
    $45 = ((($vertexp$128)) + 4|0);
    $46 = ((($47)) + 16|0);
    $48 = $46;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = $50 & -2147483648;
    $55 = $46;
    $56 = $55;
    HEAP32[$56>>2] = $54;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $53;
    $59 = HEAP32[$45>>2]|0;
    $60 = ($59|0)==(0|0);
    if ($60) {
     break;
    } else {
     $47 = $59;$vertexp$128 = $45;
    }
   }
  }
 }
 $61 = ($ridges|0)!=(0|0);
 if ($61) {
  $62 = ((($ridges)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0|0);
  if (!($64)) {
   $65 = ((($62)) + 4|0);
   $67 = $63;$70 = $65;
   while(1) {
    $66 = HEAP32[$67>>2]|0;
    $68 = ($66|0)==(0|0);
    if (!($68)) {
     $73 = ((($66)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(0|0);
     if (!($75)) {
      $78 = $74;$vertexp$225 = $73;
      while(1) {
       $76 = ((($vertexp$225)) + 4|0);
       $77 = ((($78)) + 16|0);
       $79 = $77;
       $80 = $79;
       $81 = HEAP32[$80>>2]|0;
       $82 = (($79) + 4)|0;
       $83 = $82;
       $84 = HEAP32[$83>>2]|0;
       $85 = (($81) + 1)|0;
       $86 = $85 & 2147483647;
       $87 = $81 & -2147483648;
       $88 = $86 | $87;
       $89 = $77;
       $90 = $89;
       HEAP32[$90>>2] = $88;
       $91 = (($89) + 4)|0;
       $92 = $91;
       HEAP32[$92>>2] = $84;
       $93 = HEAP32[$76>>2]|0;
       $94 = ($93|0)==(0|0);
       if ($94) {
        break;
       } else {
        $78 = $93;$vertexp$225 = $76;
       }
      }
     }
    }
    $69 = ((($70)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     break;
    } else {
     $67 = $71;$70 = $69;
    }
   }
  }
 }
 L30: do {
  if ($41) {
   $95 = ((($vertices)) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(0|0);
   if (!($97)) {
    $98 = ((($vertices)) + 8|0);
    $99 = ((($vertices)) + 8|0);
    $100 = $99;
    $102 = $98;$218 = $96;$vertexp$3$ph24 = $95;
    while(1) {
     $105 = $102;
     $106 = (($105) - ($100))|0;
     $107 = $106 >> 2;
     $109 = $218;
     while(1) {
      $108 = ((($109)) + 16|0);
      $110 = $108;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = $112 & 2147483647;
      $117 = ($116|0)==(0);
      $118 = (0)==(0);
      $119 = $117 & $118;
      if (!($119)) {
       break;
      }
      (_qh_setdelnth($vertices,$107)|0);
      $120 = HEAP32[$vertexp$3$ph24>>2]|0;
      $121 = ($120|0)==(0|0);
      if ($121) {
       break L30;
      } else {
       $109 = $120;
      }
     }
     $101 = ((($102)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(0|0);
     if ($104) {
      break;
     } else {
      $vertexp$3$ph24$phi = $102;$102 = $101;$218 = $103;$vertexp$3$ph24 = $vertexp$3$ph24$phi;
     }
    }
   }
  }
 } while(0);
 $122 = (_qh_setsize($ridges)|0);
 $123 = HEAP32[(7724)>>2]|0;
 $124 = (($123) + ($122))|0;
 $125 = $124 & 2147483647;
 $126 = $123 & -2147483648;
 $127 = $125 | $126;
 HEAP32[(7724)>>2] = $127;
 $128 = (_qh_setsize($vertices)|0);
 $129 = ($128|0)==(0);
 if ($129) {
  $130 = HEAP32[(5344)>>2]|0;
  $131 = ($130|0)>(3);
  if (!($131)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $132 = HEAP32[(7480)>>2]|0;
  $133 = ((($oldvertex)) + 16|0);
  $134 = $133;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) + 4)|0;
  $138 = $137;
  $139 = HEAP32[$138>>2]|0;
  $140 = $139 & 16777215;
  HEAP32[$vararg_buffer9>>2] = $140;
  _qh_fprintf($132,4023,26048,$vararg_buffer9);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $141 = ((($vertices)) + 4|0);
 $142 = (_qh_setsize($vertices)|0);
 _qsort($141,$142,4,7);
 $143 = HEAP32[(5632)>>2]|0;
 $144 = ($143|0)==(0);
 if (!($144)) {
  $145 = (_qh_setsize($vertices)|0);
  $146 = HEAP32[(44016)>>2]|0;
  $147 = (($146) + 1)|0;
  HEAP32[(44016)>>2] = $147;
  $148 = HEAP32[(44048)>>2]|0;
  $149 = (($148) + ($145))|0;
  HEAP32[(44048)>>2] = $149;
  $150 = HEAP32[(44032)>>2]|0;
  $151 = ($150|0)<($145|0);
  if ($151) {
   HEAP32[(44032)>>2] = $145;
  }
 }
 $152 = (_qh_setsize($ridges)|0);
 $153 = (_qh_newhashtable($152)|0);
 if ($61) {
  $154 = ((($ridges)) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)==(0|0);
  if (!($156)) {
   $159 = $155;$ridgep$221 = $154;
   while(1) {
    $157 = ((($ridgep$221)) + 4|0);
    $158 = HEAP32[(7744)>>2]|0;
    _qh_hashridge($158,$153,$159,$oldvertex);
    $160 = HEAP32[$157>>2]|0;
    $161 = ($160|0)==(0|0);
    if ($161) {
     break;
    } else {
     $159 = $160;$ridgep$221 = $157;
    }
   }
  }
 }
 L56: do {
  if ($41) {
   $162 = HEAP32[$141>>2]|0;
   $163 = ($162|0)==(0|0);
   if ($163) {
    label = 47;
   } else {
    $164 = ((($141)) + 4|0);
    $165 = $162;$178 = $164;
    L59: while(1) {
     $166 = (_qh_vertexridges($165)|0);
     HEAP32[$newridges>>2] = $166;
     $167 = ($166|0)==(0|0);
     if ($167) {
      $$lcssa = $165;
      label = 39;
      break;
     }
     $168 = ((($166)) + 4|0);
     $ridgep$3 = $168;
     while(1) {
      $169 = HEAP32[$ridgep$3>>2]|0;
      $170 = ($169|0)==(0|0);
      if ($170) {
       $$lcssa45 = $165;
       label = 44;
       break L59;
      }
      $171 = ((($ridgep$3)) + 4|0);
      $172 = HEAP32[(7744)>>2]|0;
      $173 = (_qh_hashridge_find($172,$153,$169,$165,$oldvertex,$hash)|0);
      $174 = ($173|0)==(0|0);
      if ($174) {
       $ridgep$3 = $171;
      } else {
       break;
      }
     }
     $175 = HEAP32[(43800)>>2]|0;
     $176 = (($175) + 1)|0;
     HEAP32[(43800)>>2] = $176;
     _qh_settempfree($newridges);
     $177 = ((($178)) + 4|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ($179|0)==(0|0);
     if ($180) {
      label = 47;
      break L56;
     } else {
      $165 = $179;$178 = $177;
     }
    }
    if ((label|0) == 39) {
     _qh_settempfree($newridges);
     $186 = $$lcssa;
    }
    else if ((label|0) == 44) {
     _qh_settempfree($newridges);
     $181 = ($$lcssa45|0)==(0|0);
     if ($181) {
      label = 47;
      break;
     } else {
      $186 = $$lcssa45;
     }
    }
    $182 = HEAP32[(5344)>>2]|0;
    $183 = ($182|0)>(1);
    if ($183) {
     $184 = HEAP32[(7480)>>2]|0;
     $185 = ((($186)) + 16|0);
     $187 = $185;
     $188 = $187;
     $189 = HEAP32[$188>>2]|0;
     $190 = (($187) + 4)|0;
     $191 = $190;
     $192 = HEAP32[$191>>2]|0;
     $193 = $192 & 16777215;
     $194 = ((($oldvertex)) + 16|0);
     $195 = $194;
     $196 = $195;
     $197 = HEAP32[$196>>2]|0;
     $198 = (($195) + 4)|0;
     $199 = $198;
     $200 = HEAP32[$199>>2]|0;
     $201 = $200 & 16777215;
     $202 = (_qh_setsize($vertices)|0);
     $203 = (_qh_setsize($ridges)|0);
     HEAP32[$vararg_buffer12>>2] = $193;
     $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr15>>2] = $201;
     $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
     HEAP32[$vararg_ptr16>>2] = $202;
     $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
     HEAP32[$vararg_ptr17>>2] = $203;
     _qh_fprintf($184,2020,26104,$vararg_buffer12);
     $vertex$010 = $186;
    } else {
     $vertex$010 = $186;
    }
   }
  } else {
   label = 47;
  }
 } while(0);
 if ((label|0) == 47) {
  $204 = HEAP32[(43880)>>2]|0;
  $205 = (($204) + 1)|0;
  HEAP32[(43880)>>2] = $205;
  $206 = HEAP32[(5344)>>2]|0;
  $207 = ($206|0)==(0);
  if ($207) {
   $vertex$010 = 0;
  } else {
   $208 = HEAP32[(7480)>>2]|0;
   $209 = ((($oldvertex)) + 16|0);
   $210 = $209;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $213 = (($210) + 4)|0;
   $214 = $213;
   $215 = HEAP32[$214>>2]|0;
   $216 = $215 & 16777215;
   $217 = HEAP32[(7596)>>2]|0;
   HEAP32[$vararg_buffer18>>2] = $216;
   $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
   HEAP32[$vararg_ptr21>>2] = $217;
   _qh_fprintf($208,14,26184,$vararg_buffer18);
   $vertex$010 = 0;
  }
 }
 _qh_setfree((7744));
 $$0 = $vertex$010;
 STACKTOP = sp;return ($$0|0);
}
function _qh_hashridge($hashtable,$hashsize,$ridge,$oldvertex) {
 $hashtable = $hashtable|0;
 $hashsize = $hashsize|0;
 $ridge = $ridge|0;
 $oldvertex = $oldvertex|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ridge>>2]|0;
 $1 = HEAP32[(5828)>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_qh_gethash($hashsize,$0,$2,0,$oldvertex)|0);
 $4 = (((($hashtable)) + 4|0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if ($6) {
   $$lcssa = $4;
  } else {
   $7 = $5;$hash$02 = $3;
   while(1) {
    $8 = ($7|0)==($ridge|0);
    if ($8) {
     break;
    }
    $9 = (($hash$02) + 1)|0;
    $10 = ($9|0)==($hashsize|0);
    $$ = $10 ? 0 : $9;
    $11 = (((($hashtable)) + 4|0) + ($$<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$lcssa = $11;
     break L1;
    } else {
     $7 = $12;$hash$02 = $$;
    }
   }
   return;
  }
 } while(0);
 HEAP32[$$lcssa>>2] = $ridge;
 return;
}
function _qh_vertexridges($vertex) {
 $vertex = $vertex|0;
 var $$pr = 0, $$pr4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $neighborp$02 = 0, $ridges = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ridges = sp + 8|0;
 $0 = HEAP32[(7496)>>2]|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$ridges>>2] = $1;
 $2 = HEAP32[(7720)>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[(7720)>>2] = $3;
 $4 = ((($vertex)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if (!($6)) {
   $7 = ((($5)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $10 = HEAP32[(7720)>>2]|0;
    $13 = $8;$neighborp$02 = $7;
    while(1) {
     $11 = ((($neighborp$02)) + 4|0);
     $12 = ((($13)) + 72|0);
     HEAP32[$12>>2] = $10;
     $14 = HEAP32[$11>>2]|0;
     $15 = ($14|0)==(0|0);
     if ($15) {
      break;
     } else {
      $13 = $14;$neighborp$02 = $11;
     }
    }
   }
   $$pr = HEAP32[$4>>2]|0;
   $16 = ($$pr|0)==(0|0);
   if (!($16)) {
    $17 = ((($$pr)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0|0);
    if (!($19)) {
     $20 = ((($17)) + 4|0);
     $22 = $20;$24 = $18;
     while(1) {
      $21 = HEAP32[$22>>2]|0;
      $23 = ($21|0)==(0|0);
      if ($23) {
       break L1;
      }
      _qh_vertexridges_facet($vertex,$24,$ridges);
      $$pr4 = HEAP32[$22>>2]|0;
      $25 = ((($22)) + 4|0);
      $26 = ($$pr4|0)==(0|0);
      if ($26) {
       break;
      } else {
       $22 = $25;$24 = $$pr4;
      }
     }
    }
   }
  }
 } while(0);
 $27 = HEAP32[(5632)>>2]|0;
 $28 = HEAP32[(5344)>>2]|0;
 $29 = $28 | $27;
 $30 = ($29|0)==(0);
 if ($30) {
  $50 = HEAP32[$ridges>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $31 = HEAP32[$ridges>>2]|0;
 $32 = (_qh_setsize($31)|0);
 $33 = HEAP32[(44880)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(44880)>>2] = $34;
 $35 = HEAP32[(44888)>>2]|0;
 $36 = (($35) + ($32))|0;
 HEAP32[(44888)>>2] = $36;
 $37 = HEAP32[(44896)>>2]|0;
 $38 = ($37|0)<($32|0);
 if ($38) {
  HEAP32[(44896)>>2] = $32;
 }
 $39 = HEAP32[(5344)>>2]|0;
 $40 = ($39|0)>(2);
 if (!($40)) {
  $50 = HEAP32[$ridges>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $41 = HEAP32[(7480)>>2]|0;
 $42 = ((($vertex)) + 16|0);
 $43 = $42;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + 4)|0;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & 16777215;
 HEAP32[$vararg_buffer>>2] = $32;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $49;
 _qh_fprintf($41,3011,26272,$vararg_buffer);
 $50 = HEAP32[$ridges>>2]|0;
 STACKTOP = sp;return ($50|0);
}
function _qh_hashridge_find($hashtable,$hashsize,$ridge,$vertex,$oldvertex,$hashslot) {
 $hashtable = $hashtable|0;
 $hashsize = $hashsize|0;
 $ridge = $ridge|0;
 $vertex = $vertex|0;
 $oldvertex = $oldvertex|0;
 $hashslot = $hashslot|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash$0$lcssa = 0, $hash$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$hashslot>>2] = 0;
 $0 = HEAP32[(43984)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(43984)>>2] = $1;
 $2 = HEAP32[$ridge>>2]|0;
 $3 = HEAP32[(5828)>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = (_qh_gethash($hashsize,$2,$4,0,$vertex)|0);
 $6 = (((($hashtable)) + 4|0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $hash$0$lcssa = $5;
  } else {
   $9 = $7;$hash$03 = $5;
   while(1) {
    $10 = ($9|0)==($ridge|0);
    if ($10) {
     HEAP32[$hashslot>>2] = -1;
    } else {
     $11 = HEAP32[(43992)>>2]|0;
     $12 = (($11) + 1)|0;
     HEAP32[(43992)>>2] = $12;
     $13 = HEAP32[$ridge>>2]|0;
     $14 = HEAP32[$9>>2]|0;
     $15 = (_qh_setequal_except($13,$vertex,$14,$oldvertex)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $$0 = $9;
      break;
     }
    }
    $17 = (($hash$03) + 1)|0;
    $18 = ($17|0)==($hashsize|0);
    $$ = $18 ? 0 : $17;
    $19 = (((($hashtable)) + 4|0) + ($$<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $hash$0$lcssa = $$;
     break L1;
    } else {
     $9 = $20;$hash$03 = $$;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $22 = HEAP32[$hashslot>>2]|0;
 $23 = ($22|0)==(0);
 if (!($23)) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$hashslot>>2] = $hash$0$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _qh_findbest_test($testcentrum,$facet,$neighbor,$bestfacet,$distp,$mindistp,$maxdistp) {
 $testcentrum = $testcentrum|0;
 $facet = $facet|0;
 $neighbor = $neighbor|0;
 $bestfacet = $bestfacet|0;
 $distp = $distp|0;
 $mindistp = $mindistp|0;
 $maxdistp = $maxdistp|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0;
 var $dist = 0, $maxdist = 0, $mindist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dist = sp + 16|0;
 $mindist = sp;
 $maxdist = sp + 8|0;
 $0 = ($testcentrum|0)==(0);
 do {
  if ($0) {
   $13 = (+_qh_getdistance($facet,$neighbor,$mindist,$maxdist));
   HEAPF64[$dist>>3] = $13;
  } else {
   $1 = HEAP32[(43320)>>2]|0;
   $2 = (($1) + 1)|0;
   HEAP32[(43320)>>2] = $2;
   $3 = ((($facet)) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   _qh_distplane($4,$neighbor,$dist);
   $5 = HEAP32[(5828)>>2]|0;
   $6 = (+($5|0));
   $7 = +HEAPF64[$dist>>3];
   $8 = $7 * $6;
   HEAPF64[$dist>>3] = $8;
   $9 = $8 < 0.0;
   if ($9) {
    HEAPF64[$maxdist>>3] = 0.0;
    $10 = +HEAPF64[$dist>>3];
    HEAPF64[$mindist>>3] = $10;
    $11 = -$10;
    HEAPF64[$dist>>3] = $11;
    break;
   } else {
    HEAPF64[$mindist>>3] = 0.0;
    $12 = +HEAPF64[$dist>>3];
    HEAPF64[$maxdist>>3] = $12;
    break;
   }
  }
 } while(0);
 $14 = +HEAPF64[$dist>>3];
 $15 = +HEAPF64[$distp>>3];
 $16 = $14 < $15;
 if (!($16)) {
  STACKTOP = sp;return;
 }
 HEAP32[$bestfacet>>2] = $neighbor;
 $17 = +HEAPF64[$mindist>>3];
 HEAPF64[$mindistp>>3] = $17;
 $18 = +HEAPF64[$maxdist>>3];
 HEAPF64[$maxdistp>>3] = $18;
 $19 = +HEAPF64[$dist>>3];
 HEAPF64[$distp>>3] = $19;
 STACKTOP = sp;return;
}
function _qh_findbestneighbor($facet,$distp,$mindistp,$maxdistp) {
 $facet = $facet|0;
 $distp = $distp|0;
 $mindistp = $mindistp|0;
 $maxdistp = $maxdistp|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $bestfacet = 0, $neighborp$03 = 0, $nonconvex$01 = 0, $testcentrum$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $bestfacet = sp + 48|0;
 HEAP32[$bestfacet>>2] = 0;
 $0 = ((($facet)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_qh_setsize($1)|0);
 HEAPF64[$distp>>3] = 1.7976931348623157E+308;
 $3 = HEAP32[(5828)>>2]|0;
 $4 = $3 << 1;
 $5 = (($4) + 20)|0;
 $6 = ($2|0)>($5|0);
 if ($6) {
  $7 = HEAP32[(43312)>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[(43312)>>2] = $8;
  $9 = ((($facet)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = (_qh_getcentrum($facet)|0);
   HEAP32[$9>>2] = $12;
   $testcentrum$0 = 1;
  } else {
   $testcentrum$0 = 1;
  }
 } else {
  $testcentrum$0 = 0;
 }
 $13 = HEAP32[(5828)>>2]|0;
 $14 = (($13) + 15)|0;
 $15 = ($2|0)>($14|0);
 if ($15) {
  $16 = ((($facet)) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = ((($17)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if (!($21)) {
    $22 = ((($19)) + 4|0);
    $24 = $20;$35 = $22;
    while(1) {
     $23 = ((($24)) + 12|0);
     $25 = HEAP32[$23>>2]|0;
     $26 = $25 & 67108864;
     $27 = ($26|0)==(0);
     if (!($27)) {
      $28 = ((($24)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==($facet|0);
      if ($30) {
       $31 = ((($24)) + 8|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = $32;
      } else {
       $33 = $29;
      }
      _qh_findbest_test($testcentrum$0,$facet,$33,$bestfacet,$distp,$mindistp,$maxdistp);
     }
     $34 = ((($35)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      break;
     } else {
      $24 = $36;$35 = $34;
     }
    }
   }
  }
 }
 $38 = HEAP32[$bestfacet>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $40 = ((($facet)) + 60|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = ((($41)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if (!($45)) {
    $47 = $44;$neighborp$03 = $43;
    while(1) {
     $46 = ((($neighborp$03)) + 4|0);
     _qh_findbest_test($testcentrum$0,$facet,$47,$bestfacet,$distp,$mindistp,$maxdistp);
     $48 = HEAP32[$46>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      break;
     } else {
      $47 = $48;$neighborp$03 = $46;
     }
    }
   }
  }
  $$pr = HEAP32[$bestfacet>>2]|0;
  $50 = ($$pr|0)==(0|0);
  if ($50) {
   $51 = HEAP32[(7480)>>2]|0;
   $52 = ((($facet)) + 76|0);
   $53 = HEAP32[$52>>2]|0;
   HEAP32[$vararg_buffer>>2] = $53;
   _qh_fprintf($51,6095,26320,$vararg_buffer);
   _qh_errexit(5,$facet,0);
   // unreachable;
  } else {
   $nonconvex$01 = 0;
  }
 } else {
  $nonconvex$01 = 1;
 }
 $54 = ($testcentrum$0|0)==(0);
 if (!($54)) {
  $55 = HEAP32[$bestfacet>>2]|0;
  (+_qh_getdistance($facet,$55,$mindistp,$maxdistp));
 }
 $56 = HEAP32[(5344)>>2]|0;
 $57 = ($56|0)>(2);
 if (!($57)) {
  $67 = HEAP32[$bestfacet>>2]|0;
  STACKTOP = sp;return ($67|0);
 }
 $58 = HEAP32[(7480)>>2]|0;
 $59 = HEAP32[$bestfacet>>2]|0;
 $60 = ((($59)) + 76|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($facet)) + 76|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = +HEAPF64[$distp>>3];
 $65 = +HEAPF64[$mindistp>>3];
 $66 = +HEAPF64[$maxdistp>>3];
 HEAP32[$vararg_buffer1>>2] = $61;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $63;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $testcentrum$0;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $nonconvex$01;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAPF64[$vararg_ptr7>>3] = $64;
 $vararg_ptr8 = ((($vararg_buffer1)) + 24|0);
 HEAPF64[$vararg_ptr8>>3] = $65;
 $vararg_ptr9 = ((($vararg_buffer1)) + 32|0);
 HEAPF64[$vararg_ptr9>>3] = $66;
 _qh_fprintf($58,3002,26392,$vararg_buffer1);
 $67 = HEAP32[$bestfacet>>2]|0;
 STACKTOP = sp;return ($67|0);
}
function _qh_mergefacet($facet1,$facet2,$mindist,$maxdist,$mergeapex) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 $mindist = $mindist|0;
 $maxdist = $maxdist|0;
 $mergeapex = $mergeapex|0;
 var $$ = 0.0, $$not = 0, $$not5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $brmerge = 0, $mergemax$0 = 0.0, $mergemin$0 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $storemerge = 0, $traceonce$0 = 0, $tracerestore$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vertexp$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp;
 $vararg_buffer23 = sp + 8|0;
 $vararg_buffer19 = sp + 16|0;
 $vararg_buffer12 = sp + 24|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 104|0;
 $0 = ((($facet1)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 512;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($facet2)) + 80|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 512;
  $7 = ($6|0)==(0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $8 = HEAP32[(5776)>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($10,6226,26504,$vararg_buffer);
   _qh_errexit2(5,$facet1,$facet2);
  }
  $11 = ((($facet2)) + 80|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 512;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = $12 & -268435969;
   HEAP32[$11>>2] = $15;
  }
 }
 $16 = HEAP32[(44768)>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[(44768)>>2] = $17;
 $18 = HEAP32[(5696)>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = HEAP32[(7688)>>2]|0;
 $21 = ($20|0)!=(0);
 $or$cond = $19 & $21;
 if ($or$cond) {
  $22 = HEAP32[(7828)>>2]|0;
  $23 = (($22) + ($18))|0;
  $24 = ($16|0)<($23|0);
  if (!($24)) {
   _qh_tracemerging();
  }
 }
 $25 = HEAP32[(7588)>>2]|0;
 $26 = HEAP32[(5700)>>2]|0;
 $27 = ($25|0)<($26|0);
 L14: do {
  if ($27) {
   $traceonce$0 = 0;$tracerestore$0 = 0;
  } else {
   $28 = ($mindist|0)==(0|0);
   do {
    if (!($28)) {
     $29 = +HEAPF64[$mindist>>3];
     $30 = -$29;
     $31 = +HEAPF64[(5760)>>3];
     $32 = $31 < $30;
     if (!($32)) {
      $33 = +HEAPF64[$maxdist>>3];
      $34 = $33 > $31;
      if (!($34)) {
       break;
      }
     }
     $35 = HEAP32[(5748)>>2]|0;
     HEAP32[(5344)>>2] = $35;
     $36 = HEAP32[(7480)>>2]|0;
     $37 = HEAP32[(44768)>>2]|0;
     $38 = +HEAPF64[$mindist>>3];
     $39 = -$38;
     $40 = +HEAPF64[$maxdist>>3];
     $41 = $40 > $39;
     $$ = $41 ? $40 : $39;
     $42 = ((($facet1)) + 76|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ((($facet2)) + 76|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = HEAP32[(7596)>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $37;
     $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
     HEAPF64[$vararg_ptr3>>3] = $$;
     $vararg_ptr4 = ((($vararg_buffer1)) + 16|0);
     HEAP32[$vararg_ptr4>>2] = $43;
     $vararg_ptr5 = ((($vararg_buffer1)) + 20|0);
     HEAP32[$vararg_ptr5>>2] = $45;
     $vararg_ptr6 = ((($vararg_buffer1)) + 24|0);
     HEAP32[$vararg_ptr6>>2] = $46;
     _qh_fprintf($36,8075,26600,$vararg_buffer1);
     $traceonce$0 = 1;$tracerestore$0 = 0;
     break L14;
    }
   } while(0);
   $47 = HEAP32[(7528)>>2]|0;
   $48 = ($47|0)==($facet1|0);
   $49 = ($47|0)==($facet2|0);
   $or$cond4 = $48 | $49;
   if ($or$cond4) {
    $50 = HEAP32[(5344)>>2]|0;
    HEAP32[(5344)>>2] = 4;
    $51 = HEAP32[(7480)>>2]|0;
    $52 = HEAP32[(44768)>>2]|0;
    $53 = HEAP32[(7524)>>2]|0;
    $54 = HEAP32[(7596)>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $52;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $53;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $54;
    _qh_fprintf($51,8076,26696,$vararg_buffer7);
    $traceonce$0 = 1;$tracerestore$0 = $50;
   } else {
    $traceonce$0 = 0;$tracerestore$0 = 0;
   }
  }
 } while(0);
 $55 = HEAP32[(5344)>>2]|0;
 $56 = ($55|0)>(1);
 if ($56) {
  $57 = ($mindist|0)==(0|0);
  if ($57) {
   $mergemax$0 = -2.0;$mergemin$0 = -2.0;
  } else {
   $58 = +HEAPF64[$mindist>>3];
   $59 = +HEAPF64[$maxdist>>3];
   $mergemax$0 = $59;$mergemin$0 = $58;
  }
  $60 = HEAP32[(7480)>>2]|0;
  $61 = HEAP32[(44768)>>2]|0;
  $62 = ((($facet1)) + 76|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($facet2)) + 76|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $61;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $63;
  $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $65;
  $vararg_ptr17 = ((($vararg_buffer12)) + 16|0);
  HEAPF64[$vararg_ptr17>>3] = $mergemin$0;
  $vararg_ptr18 = ((($vararg_buffer12)) + 24|0);
  HEAPF64[$vararg_ptr18>>3] = $mergemax$0;
  _qh_fprintf($60,8077,26776,$vararg_buffer12);
 }
 $66 = ($facet1|0)==($facet2|0);
 if ($66) {
  label = 24;
 } else {
  $67 = HEAP32[$0>>2]|0;
  $68 = $67 & 2048;
  $69 = ($68|0)==(0);
  if ($69) {
   $70 = ((($facet2)) + 80|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & 2048;
   $73 = ($72|0)==(0);
   if (!($73)) {
    label = 24;
   }
  } else {
   label = 24;
  }
 }
 if ((label|0) == 24) {
  $74 = HEAP32[(7480)>>2]|0;
  $75 = ((($facet1)) + 76|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($facet2)) + 76|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$vararg_buffer19>>2] = $76;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = $78;
  _qh_fprintf($74,6099,26848,$vararg_buffer19);
  _qh_errexit2(5,$facet1,$facet2);
 }
 $79 = HEAP32[(7552)>>2]|0;
 $80 = HEAP32[(7520)>>2]|0;
 $81 = (($79) - ($80))|0;
 $82 = HEAP32[(5828)>>2]|0;
 $83 = (($82) + 1)|0;
 $84 = ($81|0)>($83|0);
 if (!($84)) {
  $85 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $83;
  _qh_fprintf($85,6227,26952,$vararg_buffer23);
  $86 = HEAP32[(5828)>>2]|0;
  $87 = ($86|0)<(5);
  $88 = HEAP32[(5384)>>2]|0;
  $89 = ($88|0)!=(0);
  $or$cond3 = $87 | $89;
  if ($or$cond3) {
   _qh_errexit(3,0,0);
   // unreachable;
  }
  $90 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($90,8079,27104,$vararg_buffer26);
  _qh_errexit(3,0,0);
  // unreachable;
 }
 $91 = HEAP32[(6900)>>2]|0;
 $92 = ($91|0)==(0);
 if ($92) {
  _qh_vertexneighbors();
 }
 _qh_makeridges($facet1);
 _qh_makeridges($facet2);
 $93 = HEAP32[(5344)>>2]|0;
 $94 = ($93|0)>(3);
 if ($94) {
  _qh_errprint(27144,$facet1,$facet2,0,0);
 }
 $95 = ($mindist|0)==(0|0);
 do {
  if (!($95)) {
   $96 = +HEAPF64[(7632)>>3];
   $97 = +HEAPF64[$maxdist>>3];
   $98 = $96 < $97;
   if ($98) {
    HEAPF64[(7632)>>3] = $97;
   }
   $99 = +HEAPF64[(7640)>>3];
   $100 = +HEAPF64[$maxdist>>3];
   $101 = $99 < $100;
   if ($101) {
    HEAPF64[(7640)>>3] = $100;
   }
   $102 = ((($facet2)) + 8|0);
   $103 = +HEAPF64[$102>>3];
   $104 = +HEAPF64[$maxdist>>3];
   $105 = $103 < $104;
   if ($105) {
    HEAPF64[$102>>3] = $104;
   }
   $106 = +HEAPF64[(7648)>>3];
   $107 = +HEAPF64[$mindist>>3];
   $108 = $106 > $107;
   if ($108) {
    HEAPF64[(7648)>>3] = $107;
   }
   $109 = ((($facet2)) + 80|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & 268435456;
   $112 = ($111|0)==(0);
   if ($112) {
    $113 = +HEAPF64[$maxdist>>3];
    $114 = +HEAPF64[(7064)>>3];
    $115 = $113 > $114;
    if (!($115)) {
     $116 = +HEAPF64[$mindist>>3];
     $117 = -$114;
     $118 = $116 < $117;
     if (!($118)) {
      break;
     }
    }
    $119 = HEAP32[$109>>2]|0;
    $120 = $119 | 268435456;
    HEAP32[$109>>2] = $120;
    $121 = HEAP32[(44976)>>2]|0;
    $122 = (($121) + 1)|0;
    HEAP32[(44976)>>2] = $122;
   }
  }
 } while(0);
 $123 = HEAP32[$0>>2]|0;
 $124 = $123 & 511;
 $125 = ((($facet2)) + 80|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 & 511;
 $128 = (($127) + ($124))|0;
 $129 = ($128|0)>(509);
 if ($129) {
  $130 = $126 | 511;
  $storemerge = $130;
 } else {
  $131 = (($128) + 1)|0;
  $132 = $131 & 511;
  $133 = $126 & -512;
  $134 = $132 | $133;
  $storemerge = $134;
 }
 $135 = $storemerge & -538968065;
 $136 = $135 | 536870912;
 HEAP32[$125>>2] = $136;
 _qh_updatetested($facet1,$facet2);
 $137 = HEAP32[(5828)>>2]|0;
 $138 = ($137|0)>(2);
 if ($138) {
  $139 = ((($facet1)) + 52|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (_qh_setsize($140)|0);
  $142 = HEAP32[(5828)>>2]|0;
  $143 = ($141|0)==($142|0);
  if ($143) {
   _qh_mergesimplex($facet1,$facet2,$mergeapex);
  } else {
   label = 52;
  }
 } else {
  label = 52;
 }
 if ((label|0) == 52) {
  $144 = HEAP32[(7724)>>2]|0;
  $145 = (($144) + 1)|0;
  $146 = $145 & 2147483647;
  $147 = $144 & -2147483648;
  $148 = $146 | $147;
  HEAP32[(7724)>>2] = $148;
  $149 = ((($facet2)) + 52|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($150|0)==(0|0);
  if (!($151)) {
   $152 = ((($150)) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ($153|0)==(0|0);
   if (!($154)) {
    $158 = $153;$vertexp$06 = $152;
    while(1) {
     $155 = ((($vertexp$06)) + 4|0);
     $156 = HEAP32[(7724)>>2]|0;
     $157 = ((($158)) + 16|0);
     $159 = $157;
     $160 = $159;
     $161 = HEAP32[$160>>2]|0;
     $162 = (($159) + 4)|0;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = $156 & 2147483647;
     $166 = $161 & -2147483648;
     $167 = $166 | $165;
     $168 = $157;
     $169 = $168;
     HEAP32[$169>>2] = $167;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $164;
     $172 = HEAP32[$155>>2]|0;
     $173 = ($172|0)==(0|0);
     if ($173) {
      break;
     } else {
      $158 = $172;$vertexp$06 = $155;
     }
    }
   }
  }
  $174 = HEAP32[(5828)>>2]|0;
  $175 = ($174|0)==(2);
  if ($175) {
   _qh_mergefacet2d($facet1,$facet2);
  } else {
   _qh_mergeneighbors($facet1,$facet2);
   $176 = ((($facet1)) + 52|0);
   $177 = HEAP32[$176>>2]|0;
   _qh_mergevertices($177,$149);
  }
  _qh_mergeridges($facet1,$facet2);
  _qh_mergevertex_neighbors($facet1,$facet2);
  $178 = HEAP32[$125>>2]|0;
  $179 = $178 & 1024;
  $180 = ($179|0)==(0);
  if ($180) {
   $181 = HEAP32[$149>>2]|0;
   _qh_newvertices($181);
  }
 }
 $182 = ($mergeapex|0)==(0);
 if ($182) {
  _qh_degen_redundant_neighbors($facet2,$facet1);
 }
 $183 = HEAP32[$125>>2]|0;
 $184 = $183 & 16777216;
 $185 = ($184|0)==(0);
 do {
  if ($185) {
   $186 = $183 & 1024;
   $187 = ($186|0)!=(0);
   if ($187) {
    $190 = HEAP32[$0>>2]|0;
    $191 = $190 & 1024;
    $$not = ($191|0)!=(0);
    $$not5 = $187 ^ 1;
    $brmerge = $$not | $$not5;
    if ($brmerge) {
     $194 = HEAP32[(44192)>>2]|0;
     $195 = (($194) + 1)|0;
     HEAP32[(44192)>>2] = $195;
     break;
    } else {
     $192 = HEAP32[(44152)>>2]|0;
     $193 = (($192) + 1)|0;
     HEAP32[(44152)>>2] = $193;
     break;
    }
   } else {
    label = 64;
   }
  } else {
   label = 64;
  }
 } while(0);
 if ((label|0) == 64) {
  $188 = HEAP32[(44184)>>2]|0;
  $189 = (($188) + 1)|0;
  HEAP32[(44184)>>2] = $189;
 }
 _qh_willdelete($facet1,$facet2);
 _qh_removefacet($facet2);
 _qh_appendfacet($facet2);
 $196 = HEAP32[$125>>2]|0;
 $197 = $196 & -134218753;
 $198 = $197 | 1024;
 HEAP32[$125>>2] = $198;
 _qh_tracemerge($facet1,$facet2);
 $199 = ($traceonce$0|0)==(0);
 if ($199) {
  STACKTOP = sp;return;
 }
 $200 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($200,8080,27152,$vararg_buffer28);
 HEAP32[(5344)>>2] = $tracerestore$0;
 STACKTOP = sp;return;
}
function _qh_test_appendmerge($facet,$neighbor) {
 $facet = $facet|0;
 $neighbor = $neighbor|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $angle = 0, $dist = 0, $dist2 = 0;
 var $isconcave$012 = 0, $okangle$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 80|0;
 $vararg_buffer3 = sp;
 $vararg_buffer = sp + 40|0;
 $dist = sp + 56|0;
 $dist2 = sp + 64|0;
 $angle = sp + 72|0;
 HEAPF64[$dist2>>3] = -1.7976931348623157E+308;
 HEAPF64[$angle>>3] = -1.7976931348623157E+308;
 $0 = HEAP32[(5724)>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[(7688)>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[(5384)>>2]|0;
 $5 = ($4|0)==(0);
 $or$cond3 = $3 | $5;
 $6 = +HEAPF64[(6944)>>3];
 $7 = $6 < 8.9884656743115785E+307;
 $or$cond5 = $or$cond3 & $7;
 if ($or$cond5) {
  $8 = ((($facet)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($neighbor)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (+_qh_getangle($9,$11));
  HEAPF64[$angle>>3] = $12;
  $13 = HEAP32[(43248)>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[(43248)>>2] = $14;
  $15 = +HEAPF64[$angle>>3];
  $16 = +HEAPF64[(6944)>>3];
  $17 = $15 > $16;
  if ($17) {
   $18 = HEAP32[(43432)>>2]|0;
   $19 = (($18) + 1)|0;
   HEAP32[(43432)>>2] = $19;
   _qh_appendmergeset($facet,$neighbor,2,$angle);
   $20 = HEAP32[(5344)>>2]|0;
   $21 = ($20|0)>(1);
   if (!($21)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $22 = HEAP32[(7480)>>2]|0;
   $23 = +HEAPF64[$angle>>3];
   $24 = ((($facet)) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($neighbor)) + 76|0);
   $27 = HEAP32[$26>>2]|0;
   HEAPF64[$vararg_buffer>>3] = $23;
   $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr1>>2] = $25;
   $vararg_ptr2 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr2>>2] = $27;
   _qh_fprintf($22,2039,27192,$vararg_buffer);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $okangle$0 = 1;
  }
 } else {
  $okangle$0 = 0;
 }
 $28 = ((($facet)) + 40|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = (_qh_getcentrum($facet)|0);
  HEAP32[$28>>2] = $31;
 }
 $32 = HEAP32[(43344)>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[(43344)>>2] = $33;
 $34 = HEAP32[$28>>2]|0;
 _qh_distplane($34,$neighbor,$dist);
 $35 = +HEAPF64[$dist>>3];
 $36 = +HEAPF64[(6936)>>3];
 $37 = $35 > $36;
 if ($37) {
  $isconcave$012 = 1;
 } else {
  $38 = -$36;
  $39 = ((($neighbor)) + 40|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $42 = (_qh_getcentrum($neighbor)|0);
   HEAP32[$39>>2] = $42;
  }
  $43 = HEAP32[(43344)>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[(43344)>>2] = $44;
  $45 = HEAP32[$39>>2]|0;
  _qh_distplane($45,$facet,$dist2);
  $46 = +HEAPF64[$dist2>>3];
  $47 = +HEAPF64[(6936)>>3];
  $48 = $46 > $47;
  if ($48) {
   $isconcave$012 = 1;
  } else {
   $49 = -$47;
   $$not = !($46 > $49);
   $50 = !($35 > $38);
   $51 = $50 & $$not;
   if ($51) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $52 = HEAP32[(5384)>>2]|0;
   $53 = ($52|0)==(0);
   $54 = HEAP32[(7688)>>2]|0;
   $55 = ($54|0)!=(0);
   $or$cond7 = $53 | $55;
   if ($or$cond7) {
    $isconcave$012 = 0;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $56 = ($okangle$0|0)==(0);
 $57 = HEAP32[(5236)>>2]|0;
 $58 = ($57|0)!=(0);
 $or$cond9 = $56 & $58;
 if ($or$cond9) {
  $59 = ((($facet)) + 24|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($neighbor)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (+_qh_getangle($60,$62));
  HEAPF64[$angle>>3] = $63;
  $64 = HEAP32[(43248)>>2]|0;
  $65 = (($64) + 1)|0;
  HEAP32[(43248)>>2] = $65;
 }
 if (!($isconcave$012)) {
  $83 = HEAP32[(43440)>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[(43440)>>2] = $84;
  _qh_appendmergeset($facet,$neighbor,1,$angle);
  $85 = HEAP32[(5344)>>2]|0;
  $86 = ($85|0)>(1);
  if (!($86)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $87 = HEAP32[(7480)>>2]|0;
  $88 = ((($facet)) + 76|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($neighbor)) + 76|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = +HEAPF64[$dist>>3];
  $93 = +HEAPF64[$dist2>>3];
  $94 = +HEAPF64[$angle>>3];
  HEAP32[$vararg_buffer11>>2] = $89;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $91;
  $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
  HEAPF64[$vararg_ptr15>>3] = $92;
  $vararg_ptr16 = ((($vararg_buffer11)) + 16|0);
  HEAPF64[$vararg_ptr16>>3] = $93;
  $vararg_ptr17 = ((($vararg_buffer11)) + 24|0);
  HEAPF64[$vararg_ptr17>>3] = $94;
  _qh_fprintf($87,2040,27360,$vararg_buffer11);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = HEAP32[(43400)>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[(43400)>>2] = $67;
 $68 = HEAP32[(5236)>>2]|0;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $70 = +HEAPF64[$angle>>3];
  $71 = $70 + 2.0;
  HEAPF64[$angle>>3] = $71;
 }
 _qh_appendmergeset($facet,$neighbor,3,$angle);
 $72 = HEAP32[(5344)>>2]|0;
 $73 = ($72|0)==(0);
 if ($73) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $74 = HEAP32[(7480)>>2]|0;
 $75 = ((($facet)) + 76|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($neighbor)) + 76|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = +HEAPF64[$dist>>3];
 $80 = +HEAPF64[$dist2>>3];
 $81 = +HEAPF64[$angle>>3];
 $82 = HEAP32[(7596)>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $76;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $78;
 $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
 HEAPF64[$vararg_ptr7>>3] = $79;
 $vararg_ptr8 = ((($vararg_buffer3)) + 16|0);
 HEAPF64[$vararg_ptr8>>3] = $80;
 $vararg_ptr9 = ((($vararg_buffer3)) + 24|0);
 HEAPF64[$vararg_ptr9>>3] = $81;
 $vararg_ptr10 = ((($vararg_buffer3)) + 32|0);
 HEAP32[$vararg_ptr10>>2] = $82;
 _qh_fprintf($74,18,27256,$vararg_buffer3);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _qh_makeridges($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, $magicptr = 0, $mergeridge$0$ph = 0, $mergeridge$1 = 0, $neighbor$06 = 0, $neighbor_i$05 = 0;
 var $neighborp$0 = 0, $neighborp$0$ph = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($facet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 8192;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(5344)>>2]|0;
 $5 = ($4|0)>(3);
 if ($5) {
  $6 = HEAP32[(7480)>>2]|0;
  $7 = ((($facet)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  _qh_fprintf($6,4027,27448,$vararg_buffer);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 & -8193;
 HEAP32[$0>>2] = $10;
 $11 = ((($facet)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 L7: do {
  if ($13) {
   $mergeridge$1 = 0;
  } else {
   $14 = ((($12)) + 4|0);
   $mergeridge$0$ph = 0;$neighborp$0$ph = $14;
   L9: while(1) {
    $neighborp$0 = $neighborp$0$ph;
    while(1) {
     $15 = ((($neighborp$0)) + 4|0);
     $16 = HEAP32[$neighborp$0>>2]|0;
     $magicptr = $16;
     if ((($magicptr|0) == 2)) {
      $mergeridge$0$ph = 1;$neighborp$0$ph = $15;
      continue L9;
     } else if ((($magicptr|0) == 0)) {
      $mergeridge$1 = $mergeridge$0$ph;
      break L7;
     }
     $17 = ((($16)) + 80|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 & -16385;
     HEAP32[$17>>2] = $19;
     $neighborp$0 = $15;
    }
   }
  }
 } while(0);
 $20 = ((($facet)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = ((($21)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($23)) + 4|0);
   $28 = $24;$38 = $26;
   while(1) {
    $27 = ((($28)) + 4|0);
    $29 = HEAP32[$27>>2]|0;
    $30 = ($29|0)==($facet|0);
    if ($30) {
     $31 = ((($28)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $34 = $32;
    } else {
     $34 = $29;
    }
    $33 = ((($34)) + 80|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = $35 | 16384;
    HEAP32[$33>>2] = $36;
    $37 = ((($38)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     break;
    } else {
     $28 = $39;$38 = $37;
    }
   }
  }
 }
 $41 = HEAP32[$11>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  $43 = ((($41)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_qh_setsize($41)|0);
  $46 = ($45|0)>(0);
  if ($46) {
   $47 = ((($facet)) + 52|0);
   $neighbor$06 = $44;$neighbor_i$05 = 0;
   while(1) {
    $48 = ($neighbor$06|0)==((2)|0);
    if (!($48)) {
     $49 = ((($neighbor$06)) + 80|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 16384;
     $52 = ($51|0)==(0);
     if ($52) {
      $53 = (_qh_newridge()|0);
      $54 = HEAP32[$47>>2]|0;
      $55 = HEAP32[(5828)>>2]|0;
      $56 = (_qh_setnew_delnthsorted($54,$55,$neighbor_i$05,0)|0);
      HEAP32[$53>>2] = $56;
      $57 = HEAP32[$0>>2]|0;
      $58 = $57 >>> 12;
      $59 = $58 ^ $neighbor_i$05;
      $60 = $59 & 1;
      $61 = ($60|0)==(0);
      $62 = ((($53)) + 4|0);
      if ($61) {
       HEAP32[$62>>2] = $neighbor$06;
       $64 = ((($53)) + 8|0);
       HEAP32[$64>>2] = $facet;
      } else {
       HEAP32[$62>>2] = $facet;
       $63 = ((($53)) + 8|0);
       HEAP32[$63>>2] = $neighbor$06;
      }
      _qh_setappend($20,$53);
      $65 = ((($neighbor$06)) + 56|0);
      _qh_setappend($65,$53);
     }
    }
    $66 = (($neighbor_i$05) + 1)|0;
    $67 = HEAP32[$11>>2]|0;
    $68 = (((($67)) + 4|0) + ($66<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $exitcond = ($66|0)==($45|0);
    if ($exitcond) {
     break;
    } else {
     $neighbor$06 = $69;$neighbor_i$05 = $66;
    }
   }
  }
 }
 $70 = ($mergeridge$1|0)==(0);
 if ($70) {
  STACKTOP = sp;return;
 }
 while(1) {
  $71 = HEAP32[$11>>2]|0;
  $72 = (_qh_setdel($71,(2))|0);
  $73 = ($72|0)==(0|0);
  if ($73) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _qh_maydropneighbor($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $angledegen = 0, $neighborp$0$ph2 = 0, $ridgep$03 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer6 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $angledegen = sp + 32|0;
 HEAPF64[$angledegen>>3] = 5.0;
 $0 = HEAP32[(7720)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(7720)>>2] = $1;
 $2 = HEAP32[(5344)>>2]|0;
 $3 = ($2|0)>(3);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = ((($facet)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  _qh_fprintf($4,4029,27488,$vararg_buffer);
 }
 $7 = ((($facet)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($8)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = HEAP32[(7720)>>2]|0;
   $16 = $11;$ridgep$03 = $10;
   while(1) {
    $14 = ((($ridgep$03)) + 4|0);
    $15 = ((($16)) + 4|0);
    $17 = HEAP32[$15>>2]|0;
    $18 = ((($17)) + 72|0);
    HEAP32[$18>>2] = $13;
    $19 = ((($16)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 72|0);
    HEAP32[$21>>2] = $13;
    $22 = HEAP32[$14>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     break;
    } else {
     $16 = $22;$ridgep$03 = $14;
    }
   }
  }
 }
 $24 = ((($facet)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 L10: do {
  if (!($26)) {
   $27 = ((($25)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if (!($29)) {
    $30 = ((($facet)) + 76|0);
    $75 = $28;$neighborp$0$ph2 = $27;
    while(1) {
     $35 = $75;
     while(1) {
      $34 = ((($35)) + 72|0);
      $36 = HEAP32[$34>>2]|0;
      $37 = HEAP32[(7720)>>2]|0;
      $38 = ($36|0)==($37|0);
      if ($38) {
       break;
      }
      $39 = HEAP32[(5344)>>2]|0;
      $40 = ($39|0)==(0);
      if (!($40)) {
       $41 = HEAP32[(7480)>>2]|0;
       $42 = HEAP32[$30>>2]|0;
       $43 = ((($35)) + 76|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = HEAP32[(7596)>>2]|0;
       HEAP32[$vararg_buffer1>>2] = $42;
       $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
       HEAP32[$vararg_ptr4>>2] = $44;
       $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
       HEAP32[$vararg_ptr5>>2] = $45;
       _qh_fprintf($41,17,27552,$vararg_buffer1);
      }
      $46 = HEAP32[(43760)>>2]|0;
      $47 = (($46) + 1)|0;
      HEAP32[(43760)>>2] = $47;
      $48 = HEAP32[$24>>2]|0;
      (_qh_setdel($48,$35)|0);
      $49 = ((($35)) + 60|0);
      $50 = HEAP32[$49>>2]|0;
      (_qh_setdel($50,$facet)|0);
      $51 = HEAP32[$49>>2]|0;
      $52 = (_qh_setsize($51)|0);
      $53 = HEAP32[(5828)>>2]|0;
      $54 = ($52|0)<($53|0);
      if ($54) {
       $57 = HEAP32[(43752)>>2]|0;
       $58 = (($57) + 1)|0;
       HEAP32[(43752)>>2] = $58;
       _qh_appendmergeset($35,$35,6,$angledegen);
       $59 = HEAP32[(5344)>>2]|0;
       $60 = ($59|0)>(1);
       if ($60) {
        $61 = HEAP32[(7480)>>2]|0;
        $62 = ((($35)) + 76|0);
        $63 = HEAP32[$62>>2]|0;
        HEAP32[$vararg_buffer6>>2] = $63;
        _qh_fprintf($61,2023,27632,$vararg_buffer6);
       }
      }
      $55 = HEAP32[$neighborp$0$ph2>>2]|0;
      $56 = ($55|0)==(0|0);
      if ($56) {
       break L10;
      } else {
       $35 = $55;
      }
     }
     $31 = ((($neighborp$0$ph2)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      break;
     } else {
      $75 = $32;$neighborp$0$ph2 = $31;
     }
    }
   }
  }
 } while(0);
 $64 = HEAP32[$24>>2]|0;
 $65 = (_qh_setsize($64)|0);
 $66 = HEAP32[(5828)>>2]|0;
 $67 = ($65|0)<($66|0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = HEAP32[(43752)>>2]|0;
 $69 = (($68) + 1)|0;
 HEAP32[(43752)>>2] = $69;
 _qh_appendmergeset($facet,$facet,6,$angledegen);
 $70 = HEAP32[(5344)>>2]|0;
 $71 = ($70|0)>(1);
 if (!($71)) {
  STACKTOP = sp;return;
 }
 $72 = HEAP32[(7480)>>2]|0;
 $73 = ((($facet)) + 76|0);
 $74 = HEAP32[$73>>2]|0;
 HEAP32[$vararg_buffer9>>2] = $74;
 _qh_fprintf($72,2024,27632,$vararg_buffer9);
 STACKTOP = sp;return;
}
function _qh_willdelete($facet,$replace) {
 $facet = $facet|0;
 $replace = $replace|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _qh_removefacet($facet);
 _qh_prependfacet($facet,(7516));
 $0 = HEAP32[(7520)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(7520)>>2] = $1;
 $2 = ((($facet)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 2048;
 HEAP32[$2>>2] = $4;
 $5 = ((($facet)) + 32|0);
 HEAP32[$5>>2] = $replace;
 return;
}
function _qh_mergecycle($samecycle,$newfacet) {
 $samecycle = $samecycle|0;
 $newfacet = $newfacet|0;
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $or$cond = 0, $same$02 = 0, $traceonce$0 = 0, $tracerestore$0 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer5 = 0, $vararg_ptr10 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp;
 $vararg_buffer13 = sp + 8|0;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 56|0;
 $0 = ((($newfacet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 512;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = HEAP32[(5776)>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($6,6224,27680,$vararg_buffer);
    _qh_errexit(5,$newfacet,0);
    // unreachable;
   } else {
    $7 = HEAP32[$0>>2]|0;
    $8 = $7 & -268435969;
    HEAP32[$0>>2] = $8;
    break;
   }
  }
 } while(0);
 $9 = HEAP32[(6900)>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  _qh_vertexneighbors();
 }
 $11 = HEAP32[(44768)>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[(44768)>>2] = $12;
 $13 = HEAP32[(5696)>>2]|0;
 $14 = ($13|0)!=(0);
 $15 = HEAP32[(7688)>>2]|0;
 $16 = ($15|0)!=(0);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = HEAP32[(7828)>>2]|0;
  $18 = (($17) + ($13))|0;
  $19 = ($11|0)<($18|0);
  if (!($19)) {
   _qh_tracemerging();
  }
 }
 $20 = HEAP32[(5768)>>2]|0;
 $21 = HEAP32[(44768)>>2]|0;
 $22 = ($20|0)==($21|0);
 if ($22) {
  $23 = HEAP32[(5748)>>2]|0;
  HEAP32[(5344)>>2] = $23;
  HEAP32[(21232)>>2] = $23;
 }
 $24 = HEAP32[(5344)>>2]|0;
 $25 = ($24|0)>(1);
 if ($25) {
  $26 = HEAP32[(7480)>>2]|0;
  $27 = HEAP32[(44768)>>2]|0;
  $28 = ((($samecycle)) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($newfacet)) + 76|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $27;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $29;
  $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $31;
  _qh_fprintf($26,2030,27776,$vararg_buffer1);
 }
 $32 = HEAP32[(7528)>>2]|0;
 $33 = ($32|0)==($newfacet|0);
 if ($33) {
  $34 = HEAP32[(5344)>>2]|0;
  HEAP32[(5344)>>2] = 4;
  $35 = HEAP32[(7480)>>2]|0;
  $36 = HEAP32[(44768)>>2]|0;
  $37 = ((($samecycle)) + 76|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($newfacet)) + 76|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $36;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $38;
  $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr9>>2] = $40;
  $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr10>>2] = $41;
  _qh_fprintf($35,8068,27856,$vararg_buffer5);
  $traceonce$0 = 1;$tracerestore$0 = $34;
 } else {
  $traceonce$0 = 0;$tracerestore$0 = 0;
 }
 $42 = HEAP32[(5344)>>2]|0;
 $43 = ($42|0)>(3);
 if ($43) {
  $44 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($44,8069,27952,$vararg_buffer11);
  $45 = ((($samecycle)) + 32|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  $48 = HEAP32[(7480)>>2]|0;
  L25: do {
   if ($47) {
    $$lcssa = $48;
   } else {
    $51 = $48;$same$02 = $46;
    while(1) {
     $49 = ((($same$02)) + 76|0);
     $50 = HEAP32[$49>>2]|0;
     HEAP32[$vararg_buffer13>>2] = $50;
     _qh_fprintf($51,8070,27968,$vararg_buffer13);
     $52 = ($same$02|0)==($samecycle|0);
     if ($52) {
      break;
     }
     $54 = ((($same$02)) + 32|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     $57 = HEAP32[(7480)>>2]|0;
     if ($56) {
      $$lcssa = $57;
      break L25;
     } else {
      $51 = $57;$same$02 = $55;
     }
    }
    $53 = HEAP32[(7480)>>2]|0;
    $$lcssa = $53;
   }
  } while(0);
  _qh_fprintf($$lcssa,8071,56128,$vararg_buffer16);
  $$pr = HEAP32[(5344)>>2]|0;
  $58 = ($$pr|0)>(3);
  if ($58) {
   _qh_errprint(27976,$samecycle,$newfacet,0,0);
  }
 }
 $59 = ((($samecycle)) + 52|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 _qh_makeridges($newfacet);
 _qh_mergecycle_neighbors($samecycle,$newfacet);
 _qh_mergecycle_ridges($samecycle,$newfacet);
 _qh_mergecycle_vneighbors($samecycle,$newfacet);
 $63 = ((($newfacet)) + 52|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==($62|0);
 if (!($67)) {
  _qh_setaddnth($63,0,$62);
 }
 $68 = HEAP32[$0>>2]|0;
 $69 = $68 & 1024;
 $70 = ($69|0)==(0);
 if ($70) {
  $71 = HEAP32[$63>>2]|0;
  _qh_newvertices($71);
 }
 _qh_mergecycle_facets($samecycle,$newfacet);
 _qh_tracemerge($samecycle,$newfacet);
 $72 = ($traceonce$0|0)==(0);
 if ($72) {
  STACKTOP = sp;return;
 }
 $73 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($73,8072,27992,$vararg_buffer18);
 HEAP32[(5344)>>2] = $tracerestore$0;
 STACKTOP = sp;return;
}
function _qh_tracemerging() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $timedata = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $timedata = sp + 40|0;
 $0 = HEAP32[(44768)>>2]|0;
 HEAP32[(7828)>>2] = $0;
 (_time(($timedata|0))|0);
 $1 = (_localtime(($timedata|0))|0);
 $2 = (_clock()|0);
 $3 = (+($2>>>0));
 $4 = $3 / 1.0E+6;
 $5 = HEAP32[(44768)>>2]|0;
 $6 = HEAP32[(43504)>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[(43496)>>2]|0;
 $9 = (($7) + ($8))|0;
 $10 = HEAP32[(7480)>>2]|0;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[(7552)>>2]|0;
 $17 = HEAP32[(7520)>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = HEAP32[(7556)>>2]|0;
 $20 = HEAP32[(7752)>>2]|0;
 $21 = (_qh_setsize($20)|0);
 $22 = (($19) - ($21))|0;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $15;
 $vararg_ptr3 = ((($vararg_buffer)) + 16|0);
 HEAPF64[$vararg_ptr3>>3] = $4;
 $vararg_ptr4 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr4>>2] = $9;
 $vararg_ptr5 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr5>>2] = $18;
 $vararg_ptr6 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr6>>2] = $22;
 _qh_fprintf($10,8087,28032,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_mergecycle_neighbors($samecycle,$newfacet) {
 $samecycle = $samecycle|0;
 $newfacet = $newfacet|0;
 var $$lcssa = 0, $$lcssa58 = 0, $$lcssa59 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delneighbors$0$ph20 = 0, $delneighbors$1 = 0, $neighborp$0$ph19 = 0, $neighborp$015 = 0, $neighborp$015$lcssa = 0, $neighborp$015$phi = 0, $newneighbors$0$lcssa = 0, $newneighbors$011 = 0, $newneighbors$1$be = 0, $newneighbors$110 = 0, $newneighbors$2 = 0, $ridgep$0 = 0, $same$022 = 0;
 var $same$112 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[(7720)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(7720)>>2] = $1;
 $2 = ((($samecycle)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if (!($4)) {
   $same$022 = $3;
   while(1) {
    $5 = ((($same$022)) + 72|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($1|0);
    if ($7) {
     label = 4;
    } else {
     $8 = ((($same$022)) + 80|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = $9 & 2048;
     $11 = ($10|0)==(0);
     if (!($11)) {
      label = 4;
     }
    }
    if ((label|0) == 4) {
     label = 0;
     _qh_infiniteloop($samecycle);
    }
    HEAP32[$5>>2] = $1;
    $12 = ($same$022|0)==($samecycle|0);
    if ($12) {
     break L1;
    }
    $13 = ((($same$022)) + 32|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     break;
    } else {
     $same$022 = $14;
    }
   }
  }
 } while(0);
 $16 = HEAP32[(7720)>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[(7720)>>2] = $17;
 $18 = ((($newfacet)) + 72|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[(5344)>>2]|0;
 $20 = ($19|0)>(3);
 if ($20) {
  $21 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($21,4031,28144,$vararg_buffer);
 }
 $22 = ((($newfacet)) + 60|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 L14: do {
  if ($24) {
   $delneighbors$1 = 0;
  } else {
   $25 = ((($23)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $delneighbors$1 = 0;
   } else {
    $28 = ((($25)) + 4|0);
    $29 = HEAP32[(7720)>>2]|0;
    $102 = $26;$103 = $28;$delneighbors$0$ph20 = 0;$neighborp$0$ph19 = $25;
    while(1) {
     $31 = $102;$39 = $103;$neighborp$015 = $neighborp$0$ph19;
     while(1) {
      $30 = ((($31)) + 72|0);
      $32 = HEAP32[$30>>2]|0;
      $33 = ($32|0)==($1|0);
      if ($33) {
       $$lcssa59 = $39;$neighborp$015$lcssa = $neighborp$015;
       break;
      }
      HEAP32[$30>>2] = $29;
      $38 = ((($39)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $delneighbors$1 = $delneighbors$0$ph20;
       break L14;
      } else {
       $neighborp$015$phi = $39;$31 = $40;$39 = $38;$neighborp$015 = $neighborp$015$phi;
      }
     }
     HEAP32[$neighborp$015$lcssa>>2] = 0;
     $34 = (($delneighbors$0$ph20) + 1)|0;
     $35 = ((($$lcssa59)) + 4|0);
     $36 = HEAP32[$$lcssa59>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      $delneighbors$1 = $34;
      break;
     } else {
      $102 = $36;$103 = $35;$delneighbors$0$ph20 = $34;$neighborp$0$ph19 = $$lcssa59;
     }
    }
   }
  }
 } while(0);
 $42 = HEAP32[$22>>2]|0;
 _qh_setcompact($42);
 $43 = HEAP32[(5344)>>2]|0;
 $44 = ($43|0)>(3);
 if ($44) {
  $45 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($45,4032,28208,$vararg_buffer1);
 }
 $46 = HEAP32[$2>>2]|0;
 $47 = ($46|0)==(0|0);
 L27: do {
  if ($47) {
   $newneighbors$0$lcssa = 0;
  } else {
   $newneighbors$011 = 0;$same$112 = $46;
   while(1) {
    $48 = ((($same$112)) + 60|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $newneighbors$2 = $newneighbors$011;
    } else {
     $51 = ((($49)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if ($53) {
      $newneighbors$2 = $newneighbors$011;
     } else {
      $54 = ((($51)) + 4|0);
      $56 = $52;$60 = $54;$newneighbors$110 = $newneighbors$011;
      while(1) {
       $55 = ((($56)) + 72|0);
       $57 = HEAP32[$55>>2]|0;
       $58 = ($57|0)==($1|0);
       L36: do {
        if ($58) {
         $newneighbors$1$be = $newneighbors$110;
        } else {
         $63 = ((($56)) + 80|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = $64 & 8192;
         $66 = ($65|0)==(0);
         if ($66) {
          $88 = ((($56)) + 60|0);
          $89 = HEAP32[$88>>2]|0;
          (_qh_setdel($89,$same$112)|0);
          $90 = HEAP32[$55>>2]|0;
          $91 = HEAP32[(7720)>>2]|0;
          $92 = ($90|0)==($91|0);
          if ($92) {
           $newneighbors$1$be = $newneighbors$110;
           break;
          }
          _qh_setappend($88,$newfacet);
          _qh_setappend($22,$56);
          $93 = HEAP32[(7720)>>2]|0;
          HEAP32[$55>>2] = $93;
          $94 = (($newneighbors$110) + 1)|0;
          $newneighbors$1$be = $94;
          break;
         }
         $67 = HEAP32[(7720)>>2]|0;
         $68 = ($57|0)==($67|0);
         if ($68) {
          _qh_makeridges($56);
          $86 = ((($56)) + 60|0);
          $87 = HEAP32[$86>>2]|0;
          (_qh_setdel($87,$same$112)|0);
          $newneighbors$1$be = $newneighbors$110;
          break;
         }
         _qh_setappend($22,$56);
         $69 = ((($56)) + 60|0);
         $70 = HEAP32[$69>>2]|0;
         _qh_setreplace($70,$same$112,$newfacet);
         $71 = (($newneighbors$110) + 1)|0;
         $72 = HEAP32[(7720)>>2]|0;
         HEAP32[$55>>2] = $72;
         $73 = ((($56)) + 56|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = ($74|0)==(0|0);
         if ($75) {
          $newneighbors$1$be = $71;
         } else {
          $76 = ((($74)) + 4|0);
          $ridgep$0 = $76;
          while(1) {
           $77 = ((($ridgep$0)) + 4|0);
           $78 = HEAP32[$ridgep$0>>2]|0;
           $79 = ($78|0)==(0|0);
           if ($79) {
            $newneighbors$1$be = $71;
            break L36;
           }
           $80 = ((($78)) + 4|0);
           $81 = HEAP32[$80>>2]|0;
           $82 = ($81|0)==($same$112|0);
           if ($82) {
            $$lcssa = $80;
            label = 31;
            break;
           }
           $83 = ((($78)) + 8|0);
           $84 = HEAP32[$83>>2]|0;
           $85 = ($84|0)==($same$112|0);
           if ($85) {
            $$lcssa58 = $83;
            label = 33;
            break;
           } else {
            $ridgep$0 = $77;
           }
          }
          if ((label|0) == 31) {
           label = 0;
           HEAP32[$$lcssa>>2] = $newfacet;
           $newneighbors$1$be = $71;
           break;
          }
          else if ((label|0) == 33) {
           label = 0;
           HEAP32[$$lcssa58>>2] = $newfacet;
           $newneighbors$1$be = $71;
           break;
          }
         }
        }
       } while(0);
       $59 = ((($60)) + 4|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if ($62) {
        $newneighbors$2 = $newneighbors$1$be;
        break;
       } else {
        $56 = $61;$60 = $59;$newneighbors$110 = $newneighbors$1$be;
       }
      }
     }
    }
    $95 = ($same$112|0)==($samecycle|0);
    if ($95) {
     $newneighbors$0$lcssa = $newneighbors$2;
     break L27;
    }
    $96 = ((($same$112)) + 32|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $newneighbors$0$lcssa = $newneighbors$2;
     break;
    } else {
     $newneighbors$011 = $newneighbors$2;$same$112 = $97;
    }
   }
  }
 } while(0);
 $99 = HEAP32[(5344)>>2]|0;
 $100 = ($99|0)>(1);
 if (!($100)) {
  STACKTOP = sp;return;
 }
 $101 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $delneighbors$1;
 $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $newneighbors$0$lcssa;
 _qh_fprintf($101,2032,28256,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _qh_mergecycle_ridges($samecycle,$newfacet) {
 $samecycle = $samecycle|0;
 $newfacet = $newfacet|0;
 var $$lcssa = 0, $$lcssa138 = 0, $$lcssa139 = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa149 = 0, $$lcssa150 = 0, $$lcssa153 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $neighbor$1 = 0, $neighbor$236 = 0, $neighbor$3$ph$lcssa = 0, $neighbor$3$ph24 = 0, $neighbor$4 = 0, $neighbor$52 = 0, $neighbor$629 = 0, $neighbor$7 = 0, $neighbor_i$028 = 0, $numnew$0$lcssa = 0, $numnew$034 = 0;
 var $numnew$127 = 0, $numnew$2 = 0, $numnew$3 = 0, $numold$0$lcssa = 0, $numold$035 = 0, $numold$1$lcssa = 0, $numold$1$ph$be = 0, $numold$1$ph23 = 0, $numold$119 = 0, $numold$119$lcssa = 0, $numold$119$lcssa145 = 0, $numold$119148 = 0, $numold$21 = 0, $or$cond = 0, $ridgep$043 = 0, $ridgep$043$phi = 0, $same$037 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,4033,28320,$vararg_buffer);
 }
 $3 = HEAP32[(7720)>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ((($newfacet)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $neighbor$1 = 0;
 } else {
  $8 = ((($6)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $neighbor$1 = 0;
  } else {
   $11 = ((($8)) + 4|0);
   $13 = $9;$23 = $11;$ridgep$043 = $8;
   while(1) {
    $12 = ((($13)) + 4|0);
    $14 = HEAP32[$12>>2]|0;
    $15 = ($14|0)==($newfacet|0);
    if ($15) {
     $16 = ((($13)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $19 = $17;
    } else {
     $19 = $14;
    }
    $18 = ((($19)) + 72|0);
    $20 = HEAP32[$18>>2]|0;
    $21 = ($20|0)==($4|0);
    if ($21) {
     HEAP32[$ridgep$043>>2] = 0;
    }
    $22 = ((($23)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $neighbor$1 = $19;
     break;
    } else {
     $ridgep$043$phi = $23;$13 = $24;$23 = $22;$ridgep$043 = $ridgep$043$phi;
    }
   }
  }
 }
 $26 = HEAP32[$5>>2]|0;
 _qh_setcompact($26);
 $27 = HEAP32[(5344)>>2]|0;
 $28 = ($27|0)>(3);
 if ($28) {
  $29 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($29,4034,28384,$vararg_buffer1);
 }
 $30 = ((($samecycle)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 L19: do {
  if ($32) {
   $numnew$0$lcssa = 0;$numold$0$lcssa = 0;
  } else {
   $neighbor$236 = $neighbor$1;$numnew$034 = 0;$numold$035 = 0;$same$037 = $31;
   L20: while(1) {
    $33 = ((($same$037)) + 56|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $neighbor$52 = $neighbor$236;$numold$21 = $numold$035;
    } else {
     $36 = ((($34)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(0|0);
     L24: do {
      if ($38) {
       $neighbor$3$ph$lcssa = $neighbor$236;$numold$1$lcssa = $numold$035;
      } else {
       $39 = ((($36)) + 4|0);
       $117 = $37;$118 = $39;$neighbor$3$ph24 = $neighbor$236;$numold$1$ph23 = $numold$035;
       while(1) {
        $41 = $117;$54 = $118;$numold$119 = $numold$1$ph23;
        while(1) {
         $40 = ((($41)) + 4|0);
         $42 = HEAP32[$40>>2]|0;
         $43 = ($42|0)==($same$037|0);
         if ($43) {
          $$lcssa = $41;$$lcssa141 = $54;$$lcssa149 = $40;$numold$119$lcssa = $numold$119;
          label = 19;
          break;
         }
         $46 = ((($41)) + 8|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = ($47|0)==($same$037|0);
         if ($48) {
          $$lcssa138 = $41;$$lcssa142 = $54;$$lcssa150 = $40;$$lcssa153 = $46;$numold$119$lcssa145 = $numold$119;
          label = 21;
          break;
         }
         $50 = ($42|0)==($newfacet|0);
         $51 = ($47|0)==($newfacet|0);
         $or$cond = $50 | $51;
         if (!($or$cond)) {
          $$lcssa139 = $41;
          break L20;
         }
         _qh_setappend($5,$41);
         $52 = (($numold$119) + 1)|0;
         $53 = ((($54)) + 4|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($55|0)==(0|0);
         if ($56) {
          $neighbor$3$ph$lcssa = $neighbor$3$ph24;$numold$1$lcssa = $52;
          break L24;
         } else {
          $41 = $55;$54 = $53;$numold$119 = $52;
         }
        }
        if ((label|0) == 19) {
         label = 0;
         HEAP32[$$lcssa149>>2] = $newfacet;
         $44 = ((($$lcssa)) + 8|0);
         $45 = HEAP32[$44>>2]|0;
         $62 = $$lcssa;$64 = $$lcssa141;$neighbor$4 = $45;$numold$119148 = $numold$119$lcssa;
        }
        else if ((label|0) == 21) {
         label = 0;
         HEAP32[$$lcssa153>>2] = $newfacet;
         $49 = HEAP32[$$lcssa150>>2]|0;
         $62 = $$lcssa138;$64 = $$lcssa142;$neighbor$4 = $49;$numold$119148 = $numold$119$lcssa145;
        }
        $61 = ($neighbor$4|0)==($newfacet|0);
        do {
         if ($61) {
          _qh_setfree($62);
          _qh_memfree($62,16);
         } else {
          $67 = ((($neighbor$4)) + 72|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ($68|0)==($4|0);
          if ($69) {
           $70 = ((($neighbor$4)) + 56|0);
           $71 = HEAP32[$70>>2]|0;
           (_qh_setdel($71,$62)|0);
           _qh_setfree($62);
           _qh_memfree($62,16);
           break;
          } else {
           _qh_setappend($5,$62);
           break;
          }
         }
        } while(0);
        $numold$1$ph$be = (($numold$119148) + 1)|0;
        $63 = ((($64)) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($65|0)==(0|0);
        if ($66) {
         $neighbor$3$ph$lcssa = $neighbor$4;$numold$1$lcssa = $numold$1$ph$be;
         break;
        } else {
         $117 = $65;$118 = $63;$neighbor$3$ph24 = $neighbor$4;$numold$1$ph23 = $numold$1$ph$be;
        }
       }
      }
     } while(0);
     $$pr = HEAP32[$33>>2]|0;
     $72 = ($$pr|0)==(0|0);
     if ($72) {
      $neighbor$52 = $neighbor$3$ph$lcssa;$numold$21 = $numold$1$lcssa;
     } else {
      _qh_settruncate($$pr,0);
      $neighbor$52 = $neighbor$3$ph$lcssa;$numold$21 = $numold$1$lcssa;
     }
    }
    $73 = ((($same$037)) + 80|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $74 & 8192;
    $76 = ($75|0)==(0);
    if ($76) {
     $neighbor$7 = $neighbor$52;$numnew$3 = $numnew$034;
    } else {
     $77 = ((($same$037)) + 60|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)==(0|0);
     if ($79) {
      $neighbor$7 = 0;$numnew$3 = $numnew$034;
     } else {
      $80 = ((($78)) + 4|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (_qh_setsize($78)|0);
      $83 = ($82|0)>(0);
      if ($83) {
       $84 = ((($same$037)) + 52|0);
       $neighbor$629 = $81;$neighbor_i$028 = 0;$numnew$127 = $numnew$034;
       while(1) {
        $85 = ((($neighbor$629)) + 72|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($86|0)==($4|0);
        if ($87) {
         $numnew$2 = $numnew$127;
        } else {
         $88 = ((($neighbor$629)) + 80|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = $89 & 8192;
         $91 = ($90|0)==(0);
         if ($91) {
          $numnew$2 = $numnew$127;
         } else {
          $92 = (_qh_newridge()|0);
          $93 = HEAP32[$84>>2]|0;
          $94 = HEAP32[(5828)>>2]|0;
          $95 = (_qh_setnew_delnthsorted($93,$94,$neighbor_i$028,0)|0);
          HEAP32[$92>>2] = $95;
          $96 = HEAP32[$73>>2]|0;
          $97 = $96 >>> 12;
          $98 = $97 ^ $neighbor_i$028;
          $99 = $98 & 1;
          $100 = ($99|0)==(0);
          $101 = ((($92)) + 4|0);
          if ($100) {
           HEAP32[$101>>2] = $neighbor$629;
           $103 = ((($92)) + 8|0);
           HEAP32[$103>>2] = $newfacet;
          } else {
           HEAP32[$101>>2] = $newfacet;
           $102 = ((($92)) + 8|0);
           HEAP32[$102>>2] = $neighbor$629;
          }
          _qh_setappend($5,$92);
          $104 = ((($neighbor$629)) + 56|0);
          _qh_setappend($104,$92);
          $105 = (($numnew$127) + 1)|0;
          $numnew$2 = $105;
         }
        }
        $106 = (($neighbor_i$028) + 1)|0;
        $107 = HEAP32[$77>>2]|0;
        $108 = (((($107)) + 4|0) + ($106<<2)|0);
        $109 = HEAP32[$108>>2]|0;
        $exitcond = ($106|0)==($82|0);
        if ($exitcond) {
         $neighbor$7 = $109;$numnew$3 = $numnew$2;
         break;
        } else {
         $neighbor$629 = $109;$neighbor_i$028 = $106;$numnew$127 = $numnew$2;
        }
       }
      } else {
       $neighbor$7 = $81;$numnew$3 = $numnew$034;
      }
     }
    }
    $110 = ($same$037|0)==($samecycle|0);
    if ($110) {
     $numnew$0$lcssa = $numnew$3;$numold$0$lcssa = $numold$21;
     break L19;
    }
    $111 = ((($same$037)) + 32|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(0|0);
    if ($113) {
     $numnew$0$lcssa = $numnew$3;$numold$0$lcssa = $numold$21;
     break L19;
    } else {
     $neighbor$236 = $neighbor$7;$numnew$034 = $numnew$3;$numold$035 = $numold$21;$same$037 = $112;
    }
   }
   $57 = HEAP32[(7480)>>2]|0;
   $58 = ((($$lcssa139)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 16777215;
   HEAP32[$vararg_buffer3>>2] = $60;
   _qh_fprintf($57,6098,28432,$vararg_buffer3);
   _qh_errexit(5,0,$$lcssa139);
   // unreachable;
  }
 } while(0);
 $114 = HEAP32[(5344)>>2]|0;
 $115 = ($114|0)>(1);
 if (!($115)) {
  STACKTOP = sp;return;
 }
 $116 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $numold$0$lcssa;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $numnew$0$lcssa;
 _qh_fprintf($116,2033,28496,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _qh_mergecycle_vneighbors($samecycle,$newfacet) {
 $samecycle = $samecycle|0;
 $newfacet = $newfacet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $neighborp$03 = 0, $neighborp$03$phi = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vertices = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $vertices = sp + 32|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,4035,28560,$vararg_buffer);
 }
 $3 = HEAP32[(7720)>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ((($newfacet)) + 72|0);
 HEAP32[$5>>2] = $4;
 $6 = (_qh_basevertices($samecycle)|0);
 HEAP32[$vertices>>2] = $6;
 $7 = ((($samecycle)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _qh_setappend($vertices,$10);
 $11 = HEAP32[$vertices>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = ((($13)) + 4|0);
   $17 = ((($samecycle)) + 76|0);
   $18 = ((($newfacet)) + 76|0);
   $19 = ((($newfacet)) + 52|0);
   $21 = $14;$80 = $16;
   while(1) {
    $20 = ((($21)) + 16|0);
    $22 = $20;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 | 536870912;
    $29 = $20;
    $30 = $29;
    HEAP32[$30>>2] = $24;
    $31 = (($29) + 4)|0;
    $32 = $31;
    HEAP32[$32>>2] = $28;
    $33 = ((($21)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = ((($34)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(0|0);
     if (!($38)) {
      $39 = ((($36)) + 4|0);
      $41 = $37;$45 = $39;$neighborp$03 = $36;
      while(1) {
       $40 = ((($41)) + 72|0);
       $42 = HEAP32[$40>>2]|0;
       $43 = ($42|0)==($4|0);
       if ($43) {
        HEAP32[$neighborp$03>>2] = 0;
       }
       $44 = ((($45)) + 4|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $neighborp$03$phi = $45;$41 = $46;$45 = $44;$neighborp$03 = $neighborp$03$phi;
       }
      }
     }
    }
    $48 = HEAP32[$33>>2]|0;
    _qh_setcompact($48);
    _qh_setappend($33,$newfacet);
    $49 = HEAP32[$33>>2]|0;
    $50 = ((($49)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $53 = HEAP32[(43512)>>2]|0;
     $54 = (($53) + 1)|0;
     HEAP32[(43512)>>2] = $54;
     $55 = HEAP32[(5344)>>2]|0;
     $56 = ($55|0)>(1);
     if ($56) {
      $57 = HEAP32[(7480)>>2]|0;
      $58 = $20;
      $59 = $58;
      $60 = HEAP32[$59>>2]|0;
      $61 = (($58) + 4)|0;
      $62 = $61;
      $63 = HEAP32[$62>>2]|0;
      $64 = $63 & 16777215;
      $65 = HEAP32[$17>>2]|0;
      $66 = HEAP32[$18>>2]|0;
      HEAP32[$vararg_buffer1>>2] = $64;
      $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr3>>2] = $65;
      $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
      HEAP32[$vararg_ptr4>>2] = $66;
      _qh_fprintf($57,2034,28624,$vararg_buffer1);
     }
     $67 = HEAP32[$19>>2]|0;
     (_qh_setdelsorted($67,$21)|0);
     $68 = $20;
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = (($68) + 4)|0;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = $73 | 1073741824;
     $75 = $20;
     $76 = $75;
     HEAP32[$76>>2] = $70;
     $77 = (($75) + 4)|0;
     $78 = $77;
     HEAP32[$78>>2] = $74;
     _qh_setappend((7752),$21);
    }
    $79 = ((($80)) + 4|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)==(0|0);
    if ($82) {
     break;
    } else {
     $21 = $81;$80 = $79;
    }
   }
  }
 }
 _qh_settempfree($vertices);
 $83 = HEAP32[(5344)>>2]|0;
 $84 = ($83|0)>(2);
 if (!($84)) {
  STACKTOP = sp;return;
 }
 $85 = HEAP32[(7480)>>2]|0;
 $86 = ((($samecycle)) + 76|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($newfacet)) + 76|0);
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $87;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $89;
 _qh_fprintf($85,3005,28696,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _qh_newvertices($vertices) {
 $vertices = $vertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vertices|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($vertices)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($1)) + 4|0);
 $15 = $4;$6 = $2;
 while(1) {
  $5 = ((($6)) + 16|0);
  $7 = $5;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)<(0);
  if (!($13)) {
   _qh_removevertex($6);
   _qh_appendvertex($6);
  }
  $14 = ((($15)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   break;
  } else {
   $15 = $14;$6 = $16;
  }
 }
 return;
}
function _qh_mergecycle_facets($samecycle,$newfacet) {
 $samecycle = $samecycle|0;
 $newfacet = $newfacet|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $same$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,4030,28768,$vararg_buffer);
 }
 _qh_removefacet($newfacet);
 _qh_appendfacet($newfacet);
 $3 = ((($newfacet)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & -536880129;
 $6 = $5 | 536871936;
 HEAP32[$3>>2] = $6;
 $7 = ((($samecycle)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $same$01 = $8;
  while(1) {
   $10 = ((($same$01)) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   _qh_willdelete($same$01,$newfacet);
   $12 = ($same$01|0)==($samecycle|0);
   $$ = $12 ? 0 : $11;
   $13 = ($$|0)==(0|0);
   if ($13) {
    break;
   } else {
    $same$01 = $$;
   }
  }
 }
 $14 = ((($newfacet)) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ((($newfacet)) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_qh_setsize($18)|0);
  $20 = HEAP32[(5828)>>2]|0;
  $21 = (($20) + 5)|0;
  $22 = ($19|0)>($21|0);
  if (!($22)) {
   $23 = HEAP32[$14>>2]|0;
   $24 = HEAP32[(7488)>>2]|0;
   _qh_memfree($23,$24);
   HEAP32[$14>>2] = 0;
  }
 }
 $25 = HEAP32[(5344)>>2]|0;
 $26 = ($25|0)>(2);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[(7480)>>2]|0;
 $28 = ((($samecycle)) + 76|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($newfacet)) + 76|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $29;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $31;
 _qh_fprintf($27,3004,28832,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _qh_tracemerge($facet1,$facet2) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $waserror = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $waserror = sp + 20|0;
 HEAP32[$waserror>>2] = 0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  _qh_errprint(28896,$facet2,0,0,0);
 }
 $2 = HEAP32[(7528)>>2]|0;
 $3 = ($2|0)==($facet2|0);
 if ($3) {
  label = 6;
 } else {
  $4 = HEAP32[(7536)>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 16|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)<(0);
   if ($13) {
    label = 6;
   } else {
    label = 11;
   }
  }
 }
 if ((label|0) == 6) {
  $14 = HEAP32[(7480)>>2]|0;
  $15 = ((($facet1)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($facet2)) + 76|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $19;
  _qh_fprintf($14,8085,28904,$vararg_buffer);
  $20 = HEAP32[(7528)>>2]|0;
  $21 = ($20|0)==($facet2|0);
  if ($21) {
   label = 11;
  } else {
   $22 = HEAP32[(7536)>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    $30 = 0;
   } else {
    $24 = ((($22)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $30 = 0;
    } else {
     $27 = ((($25)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $30 = $28;
    }
   }
   $29 = HEAP32[(7536)>>2]|0;
   _qh_errprint(28984,$20,$30,0,$29);
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $$pr = HEAP32[(7536)>>2]|0;
   $31 = ($$pr|0)==(0|0);
   if (!($31)) {
    $32 = ((($$pr)) + 16|0);
    $33 = $32;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) + 4)|0;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & 1073741824;
    $40 = (0)==(0);
    $41 = ($39|0)==(0);
    $42 = $40 & $41;
    if ($42) {
     _qh_checkvertex($$pr);
     break;
    } else {
     $43 = HEAP32[(7480)>>2]|0;
     $44 = HEAP32[(7596)>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $44;
     _qh_fprintf($43,8086,28992,$vararg_buffer3);
     break;
    }
   }
  }
 } while(0);
 $45 = HEAP32[(7528)>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  _qh_checkfacet($45,1,$waserror);
  $47 = HEAP32[$waserror>>2]|0;
  $48 = ($47|0)==(0);
  if (!($48)) {
   $49 = HEAP32[(7528)>>2]|0;
   _qh_errexit(5,$49,0);
   // unreachable;
  }
 }
 $50 = HEAP32[(5280)>>2]|0;
 $51 = ($50|0)!=(0);
 $52 = HEAP32[(5344)>>2]|0;
 $53 = ($52|0)>(3);
 $or$cond = $51 | $53;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 _qh_checkfacet($facet2,1,$waserror);
 $54 = HEAP32[$waserror>>2]|0;
 $55 = ($54|0)==(0);
 if ($55) {
  STACKTOP = sp;return;
 } else {
  _qh_errexit(5,0,0);
  // unreachable;
 }
}
function _qh_updatetested($facet1,$facet2) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ridgep$04 = 0, $ridgep$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($facet2)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -134217729;
 HEAP32[$0>>2] = $2;
 $3 = ((($facet1)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $11 = $7;$ridgep$04 = $6;
   while(1) {
    $9 = ((($ridgep$04)) + 4|0);
    $10 = ((($11)) + 12|0);
    $12 = HEAP32[$10>>2]|0;
    $13 = $12 & -33554433;
    HEAP32[$10>>2] = $13;
    $14 = HEAP32[$9>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     break;
    } else {
     $11 = $14;$ridgep$04 = $9;
    }
   }
  }
 }
 $16 = ((($facet2)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  return;
 }
 $19 = ((($facet2)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_qh_setsize($20)|0);
 $22 = HEAP32[$0>>2]|0;
 $23 = $22 & 268435456;
 $24 = ($23|0)==(0);
 $25 = HEAP32[(5828)>>2]|0;
 $26 = (($25) + 5)|0;
 $27 = ($21|0)>($26|0);
 if ($24) {
  if ($27) {
   $28 = $22 | 268435456;
   HEAP32[$0>>2] = $28;
   $29 = HEAP32[(44984)>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[(44984)>>2] = $30;
  }
 } else {
  if (!($27)) {
   $31 = ($21|0)==($25|0);
   $32 = HEAP32[(7688)>>2]|0;
   $33 = ($32|0)!=(0);
   $or$cond = $31 | $33;
   if ($or$cond) {
    $34 = $22 & -268435457;
    HEAP32[$0>>2] = $34;
   }
  }
 }
 $35 = HEAP32[$0>>2]|0;
 $36 = $35 & 268435456;
 $37 = ($36|0)==(0);
 if (!($37)) {
  return;
 }
 $38 = HEAP32[$16>>2]|0;
 $39 = HEAP32[(7488)>>2]|0;
 _qh_memfree($38,$39);
 HEAP32[$16>>2] = 0;
 $40 = ((($facet2)) + 56|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if ($42) {
  return;
 }
 $43 = ((($41)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  return;
 } else {
  $48 = $44;$ridgep$13 = $43;
 }
 while(1) {
  $46 = ((($ridgep$13)) + 4|0);
  $47 = ((($48)) + 12|0);
  $49 = HEAP32[$47>>2]|0;
  $50 = $49 & -33554433;
  HEAP32[$47>>2] = $50;
  $51 = HEAP32[$46>>2]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   break;
  } else {
   $48 = $51;$ridgep$13 = $46;
  }
 }
 return;
}
function _qh_mergesimplex($facet1,$facet2,$mergeapex) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 $mergeapex = $mergeapex|0;
 var $$lcssa42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $apex$0 = 0, $issubset$06 = 0;
 var $issubset$1 = 0, $neighborp$020 = 0, $or$cond = 0, $ridgep$0 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr9 = 0, $vertex$0 = 0, $vertex$124 = 0, $vertex_i$023 = 0, $vertex_i$1$ph = 0, $vertexp$030 = 0, $vertexp$128 = 0, $vertexp$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $0 = ($mergeapex|0)==(0);
 do {
  if ($0) {
   $16 = HEAP32[(44224)>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[(44224)>>2] = $17;
   $18 = ((($facet1)) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = ((($19)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if (!($23)) {
     $26 = $22;$vertexp$030 = $21;
     while(1) {
      $24 = ((($vertexp$030)) + 4|0);
      $25 = ((($26)) + 16|0);
      $27 = $25;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($27) + 4)|0;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 & -268435457;
      $34 = $25;
      $35 = $34;
      HEAP32[$35>>2] = $29;
      $36 = (($34) + 4)|0;
      $37 = $36;
      HEAP32[$37>>2] = $33;
      $38 = HEAP32[$24>>2]|0;
      $39 = ($38|0)==(0|0);
      if ($39) {
       break;
      } else {
       $26 = $38;$vertexp$030 = $24;
      }
     }
    }
   }
   $40 = ((($facet1)) + 56|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   L13: do {
    if (!($42)) {
     $43 = ((($41)) + 4|0);
     $ridgep$0 = $43;
     while(1) {
      $44 = ((($ridgep$0)) + 4|0);
      $45 = HEAP32[$ridgep$0>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       break L13;
      }
      $47 = ((($45)) + 4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==($facet1|0);
      if ($49) {
       $50 = ((($45)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = $51;
      } else {
       $52 = $48;
      }
      $53 = ($52|0)==($facet2|0);
      if ($53) {
       $$lcssa42 = $45;
       break;
      } else {
       $ridgep$0 = $44;
      }
     }
     $54 = HEAP32[$$lcssa42>>2]|0;
     $55 = ($54|0)==(0|0);
     if (!($55)) {
      $56 = ((($54)) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if (!($58)) {
       $61 = $57;$vertexp$128 = $56;
       while(1) {
        $59 = ((($vertexp$128)) + 4|0);
        $60 = ((($61)) + 16|0);
        $62 = $60;
        $63 = $62;
        $64 = HEAP32[$63>>2]|0;
        $65 = (($62) + 4)|0;
        $66 = $65;
        $67 = HEAP32[$66>>2]|0;
        $68 = $67 | 805306368;
        $69 = $60;
        $70 = $69;
        HEAP32[$70>>2] = $64;
        $71 = (($69) + 4)|0;
        $72 = $71;
        HEAP32[$72>>2] = $68;
        $73 = HEAP32[$59>>2]|0;
        $74 = ($73|0)==(0|0);
        if ($74) {
         break;
        } else {
         $61 = $73;$vertexp$128 = $59;
        }
       }
      }
     }
    }
   } while(0);
   $75 = HEAP32[$18>>2]|0;
   $76 = ($75|0)==(0|0);
   L26: do {
    if ($76) {
     $vertex$0 = 0;
    } else {
     $77 = ((($75)) + 4|0);
     $vertexp$2 = $77;
     while(1) {
      $78 = HEAP32[$vertexp$2>>2]|0;
      $79 = ($78|0)==(0|0);
      if ($79) {
       $vertex$0 = 0;
       break L26;
      }
      $80 = ((($vertexp$2)) + 4|0);
      $81 = ((($78)) + 16|0);
      $82 = $81;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = (($82) + 4)|0;
      $86 = $85;
      $87 = HEAP32[$86>>2]|0;
      $88 = $87 & 268435456;
      $89 = (0)==(0);
      $90 = ($88|0)==(0);
      $91 = $89 & $90;
      if ($91) {
       $vertex$0 = $78;
       break;
      } else {
       $vertexp$2 = $80;
      }
     }
    }
   } while(0);
   $92 = HEAP32[(5344)>>2]|0;
   $93 = ($92|0)>(3);
   if ($93) {
    $94 = HEAP32[(7480)>>2]|0;
    $95 = ((($vertex$0)) + 16|0);
    $96 = $95;
    $97 = $96;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($96) + 4)|0;
    $100 = $99;
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 16777215;
    $103 = ((($facet1)) + 76|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($facet2)) + 76|0);
    $106 = HEAP32[$105>>2]|0;
    HEAP32[$vararg_buffer>>2] = $102;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $104;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $106;
    _qh_fprintf($94,4039,29048,$vararg_buffer);
   }
   $107 = ((($facet2)) + 52|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108|0)==(0|0);
   L35: do {
    if ($109) {
     $vertex_i$1$ph = -1;
     label = 30;
    } else {
     $110 = ((($108)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (_qh_setsize($108)|0);
     $113 = ($112|0)>(0);
     if ($113) {
      $114 = ((($vertex$0)) + 16|0);
      $115 = $114;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (($115) + 4)|0;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = $120 & 16777215;
      $vertex$124 = $111;$vertex_i$023 = 0;
      while(1) {
       $122 = ((($vertex$124)) + 16|0);
       $123 = $122;
       $124 = $123;
       $125 = HEAP32[$124>>2]|0;
       $126 = (($123) + 4)|0;
       $127 = $126;
       $128 = HEAP32[$127>>2]|0;
       $129 = $128 & 16777215;
       $130 = ($129>>>0)<($121>>>0);
       if ($130) {
        $vertex_i$1$ph = $vertex_i$023;
        label = 30;
        break L35;
       }
       $131 = ($129|0)==($121|0);
       if ($131) {
        $issubset$06 = 1;
        break L35;
       }
       $132 = (($vertex_i$023) + 1)|0;
       $133 = HEAP32[$107>>2]|0;
       $134 = (((($133)) + 4|0) + ($132<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($132|0)<($112|0);
       if ($136) {
        $vertex$124 = $135;$vertex_i$023 = $132;
       } else {
        $vertex_i$1$ph = $132;
        label = 30;
        break;
       }
      }
     } else {
      $vertex_i$1$ph = 0;
      label = 30;
     }
    }
   } while(0);
   if ((label|0) == 30) {
    _qh_setaddnth($107,$vertex_i$1$ph,$vertex$0);
    $issubset$06 = 0;
   }
   $137 = ((($facet2)) + 80|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 & 1024;
   $140 = ($139|0)==(0);
   if ($140) {
    $141 = HEAP32[$107>>2]|0;
    _qh_newvertices($141);
    $apex$0 = $vertex$0;$issubset$1 = $issubset$06;
    break;
   }
   $142 = ((($vertex$0)) + 16|0);
   $143 = $142;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = ($148|0)<(0);
   if ($149) {
    $apex$0 = $vertex$0;$issubset$1 = $issubset$06;
   } else {
    _qh_removevertex($vertex$0);
    _qh_appendvertex($vertex$0);
    $apex$0 = $vertex$0;$issubset$1 = $issubset$06;
   }
  } else {
   $1 = ((($facet2)) + 80|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = $2 & 1024;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = ((($facet2)) + 52|0);
    $6 = HEAP32[$5>>2]|0;
    _qh_newvertices($6);
   }
   $7 = ((($facet1)) + 52|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($facet2)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==($10|0);
   if ($15) {
    $apex$0 = $10;$issubset$1 = 1;
   } else {
    _qh_setaddnth($11,0,$10);
    $apex$0 = $10;$issubset$1 = 0;
   }
  }
 } while(0);
 $150 = HEAP32[(5344)>>2]|0;
 $151 = ($150|0)>(3);
 if ($151) {
  $152 = HEAP32[(7480)>>2]|0;
  $153 = ((($facet1)) + 76|0);
  $154 = HEAP32[$153>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $154;
  _qh_fprintf($152,4040,29104,$vararg_buffer3);
 }
 $155 = ((($facet1)) + 52|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156|0)==(0|0);
 if (!($157)) {
  $158 = ((($156)) + 4|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)==(0|0);
  if (!($160)) {
   $161 = ((($158)) + 4|0);
   $162 = ($issubset$1|0)!=(0);
   $163 = $159;$172 = $161;
   while(1) {
    $164 = ($163|0)!=($apex$0|0);
    $or$cond = $162 | $164;
    $165 = ((($163)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    if ($or$cond) {
     (_qh_setdel($166,$facet1)|0);
     $167 = HEAP32[$165>>2]|0;
     $168 = ((($167)) + 8|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($169|0)==(0|0);
     if ($170) {
      _qh_mergevertex_del($163,$facet1,$facet2);
     }
    } else {
     _qh_setreplace($166,$facet1,$facet2);
    }
    $171 = ((($172)) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)==(0|0);
    if ($174) {
     break;
    } else {
     $163 = $173;$172 = $171;
    }
   }
  }
 }
 $175 = HEAP32[(5344)>>2]|0;
 $176 = ($175|0)>(3);
 if ($176) {
  $177 = HEAP32[(7480)>>2]|0;
  $178 = ((($facet1)) + 76|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ((($facet2)) + 76|0);
  $181 = HEAP32[$180>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $179;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $181;
  _qh_fprintf($177,4041,29160,$vararg_buffer6);
 }
 $182 = HEAP32[(7720)>>2]|0;
 $183 = (($182) + 1)|0;
 HEAP32[(7720)>>2] = $183;
 $184 = ((($facet2)) + 60|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)==(0|0);
 if (!($186)) {
  $187 = ((($185)) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ($188|0)==(0|0);
  if (!($189)) {
   $190 = HEAP32[(7720)>>2]|0;
   $193 = $188;$neighborp$020 = $187;
   while(1) {
    $191 = ((($neighborp$020)) + 4|0);
    $192 = ((($193)) + 72|0);
    HEAP32[$192>>2] = $190;
    $194 = HEAP32[$191>>2]|0;
    $195 = ($194|0)==(0|0);
    if ($195) {
     break;
    } else {
     $193 = $194;$neighborp$020 = $191;
    }
   }
  }
 }
 $196 = ((($facet1)) + 56|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ($197|0)==(0|0);
 if (!($198)) {
  $199 = ((($197)) + 4|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = ($200|0)==(0|0);
  if (!($201)) {
   $202 = ((($199)) + 4|0);
   $203 = ((($facet2)) + 56|0);
   $205 = $200;$234 = $202;
   while(1) {
    $204 = ((($205)) + 4|0);
    $206 = HEAP32[$204>>2]|0;
    $207 = ($206|0)==($facet1|0);
    if ($207) {
     $208 = ((($205)) + 8|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = $209;
    } else {
     $210 = $206;
    }
    $211 = ($210|0)==($facet2|0);
    do {
     if ($211) {
      $212 = HEAP32[$203>>2]|0;
      (_qh_setdel($212,$205)|0);
      _qh_setfree($205);
      _qh_memfree($205,16);
      $213 = HEAP32[$184>>2]|0;
      (_qh_setdel($213,$facet1)|0);
     } else {
      _qh_setappend($203,$205);
      $214 = ((($210)) + 72|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = HEAP32[(7720)>>2]|0;
      $217 = ($215|0)==($216|0);
      do {
       if ($217) {
        $221 = ((($210)) + 80|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = $222 & 8192;
        $224 = ($223|0)==(0);
        if (!($224)) {
         _qh_makeridges($210);
        }
        $225 = ((($210)) + 60|0);
        $226 = HEAP32[$225>>2]|0;
        $227 = ((($226)) + 4|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = ($228|0)==($facet1|0);
        if ($229) {
         (_qh_setdel($226,$facet2)|0);
         $230 = HEAP32[$225>>2]|0;
         _qh_setreplace($230,$facet1,$facet2);
         break;
        } else {
         (_qh_setdel($226,$facet1)|0);
         break;
        }
       } else {
        _qh_setappend($184,$210);
        $218 = ((($210)) + 60|0);
        $219 = HEAP32[$218>>2]|0;
        _qh_setreplace($219,$facet1,$facet2);
        $220 = HEAP32[(7720)>>2]|0;
        HEAP32[$214>>2] = $220;
       }
      } while(0);
      $231 = HEAP32[$204>>2]|0;
      $232 = ($231|0)==($facet1|0);
      if ($232) {
       HEAP32[$204>>2] = $facet2;
       break;
      } else {
       $237 = ((($205)) + 8|0);
       HEAP32[$237>>2] = $facet2;
       break;
      }
     }
    } while(0);
    $233 = ((($234)) + 4|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = ($235|0)==(0|0);
    if ($236) {
     break;
    } else {
     $205 = $235;$234 = $233;
    }
   }
  }
 }
 $238 = HEAP32[$196>>2]|0;
 $239 = ((($238)) + 4|0);
 HEAP32[$239>>2] = 0;
 $240 = HEAP32[(5344)>>2]|0;
 $241 = ($240|0)>(2);
 if (!($241)) {
  STACKTOP = sp;return;
 }
 $242 = HEAP32[(7480)>>2]|0;
 $243 = ((($facet1)) + 76|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ($apex$0|0)==(0|0);
 if ($245) {
  $256 = -1;
 } else {
  $246 = ((($apex$0)) + 16|0);
  $247 = $246;
  $248 = $247;
  $249 = HEAP32[$248>>2]|0;
  $250 = (($247) + 4)|0;
  $251 = $250;
  $252 = HEAP32[$251>>2]|0;
  $253 = $252 & 16777215;
  $256 = $253;
 }
 $254 = ((($facet2)) + 76|0);
 $255 = HEAP32[$254>>2]|0;
 HEAP32[$vararg_buffer10>>2] = $244;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $256;
 $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
 HEAP32[$vararg_ptr14>>2] = $255;
 _qh_fprintf($242,3006,29224,$vararg_buffer10);
 STACKTOP = sp;return;
}
function _qh_mergefacet2d($facet1,$facet2) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $$ = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $neighborA$0 = 0, $neighborB$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vertexA$0 = 0, $vertexB$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($facet1)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($facet2)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($facet1)) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($13)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($facet2)) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($19)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($3|0)==($9|0);
 if ($24) {
  $neighborA$0 = $21;$neighborB$0 = $15;$vertexA$0 = $5;$vertexB$0 = $11;
 } else {
  $25 = ($3|0)==($11|0);
  if ($25) {
   $neighborA$0 = $23;$neighborB$0 = $15;$vertexA$0 = $5;$vertexB$0 = $9;
  } else {
   $26 = ($5|0)==($9|0);
   $$ = $26 ? $11 : $9;
   $$3 = $26 ? $21 : $23;
   $neighborA$0 = $$3;$neighborB$0 = $17;$vertexA$0 = $3;$vertexB$0 = $$;
  }
 }
 $27 = ((($vertexA$0)) + 16|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & 16777215;
 $35 = ((($vertexB$0)) + 16|0);
 $36 = $35;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 & 16777215;
 $43 = ($34>>>0)>($42>>>0);
 $44 = HEAP32[$6>>2]|0;
 $45 = ((($44)) + 4|0);
 if ($43) {
  HEAP32[$45>>2] = $vertexA$0;
  $46 = HEAP32[$6>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$47>>2] = $vertexB$0;
  $48 = ($vertexB$0|0)==($9|0);
  if ($48) {
   $49 = ((($facet2)) + 80|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 ^ 4096;
   HEAP32[$49>>2] = $51;
  }
  $52 = HEAP32[$18>>2]|0;
  $53 = ((($52)) + 4|0);
  HEAP32[$53>>2] = $neighborA$0;
  $54 = HEAP32[$18>>2]|0;
  $55 = ((($54)) + 8|0);
  HEAP32[$55>>2] = $neighborB$0;
 } else {
  HEAP32[$45>>2] = $vertexB$0;
  $56 = HEAP32[$6>>2]|0;
  $57 = ((($56)) + 8|0);
  HEAP32[$57>>2] = $vertexA$0;
  $58 = ($vertexB$0|0)==($11|0);
  if ($58) {
   $59 = ((($facet2)) + 80|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 ^ 4096;
   HEAP32[$59>>2] = $61;
  }
  $62 = HEAP32[$18>>2]|0;
  $63 = ((($62)) + 4|0);
  HEAP32[$63>>2] = $neighborB$0;
  $64 = HEAP32[$18>>2]|0;
  $65 = ((($64)) + 8|0);
  HEAP32[$65>>2] = $neighborA$0;
 }
 _qh_makeridges($neighborB$0);
 $66 = ((($neighborB$0)) + 60|0);
 $67 = HEAP32[$66>>2]|0;
 _qh_setreplace($67,$facet1,$facet2);
 $68 = HEAP32[(5344)>>2]|0;
 $69 = ($68|0)>(3);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = HEAP32[(7480)>>2]|0;
 $71 = $27;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & 16777215;
 $78 = ((($neighborB$0)) + 76|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($facet1)) + 76|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($facet2)) + 76|0);
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$vararg_buffer>>2] = $77;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $79;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $81;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $83;
 _qh_fprintf($70,4036,29288,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_mergeneighbors($facet1,$facet2) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $neighborp$02 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet1)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($facet2)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  _qh_fprintf($2,4037,29352,$vararg_buffer);
 }
 $7 = HEAP32[(7720)>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[(7720)>>2] = $8;
 $9 = ((($facet2)) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = ((($10)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   $15 = HEAP32[(7720)>>2]|0;
   $18 = $13;$neighborp$02 = $12;
   while(1) {
    $16 = ((($neighborp$02)) + 4|0);
    $17 = ((($18)) + 72|0);
    HEAP32[$17>>2] = $15;
    $19 = HEAP32[$16>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break;
    } else {
     $18 = $19;$neighborp$02 = $16;
    }
   }
  }
 }
 $21 = ((($facet1)) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $50 = HEAP32[$21>>2]|0;
  (_qh_setdel($50,$facet2)|0);
  $51 = HEAP32[$9>>2]|0;
  (_qh_setdel($51,$facet1)|0);
  STACKTOP = sp;return;
 }
 $24 = ((($22)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $50 = HEAP32[$21>>2]|0;
  (_qh_setdel($50,$facet2)|0);
  $51 = HEAP32[$9>>2]|0;
  (_qh_setdel($51,$facet1)|0);
  STACKTOP = sp;return;
 }
 $27 = ((($24)) + 4|0);
 $29 = $25;$47 = $27;
 while(1) {
  $28 = ((($29)) + 72|0);
  $30 = HEAP32[$28>>2]|0;
  $31 = HEAP32[(7720)>>2]|0;
  $32 = ($30|0)==($31|0);
  do {
   if ($32) {
    $33 = ((($29)) + 80|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 & 8192;
    $36 = ($35|0)==(0);
    if (!($36)) {
     _qh_makeridges($29);
    }
    $37 = ((($29)) + 60|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==($facet1|0);
    if ($41) {
     (_qh_setdel($38,$facet2)|0);
     $42 = HEAP32[$37>>2]|0;
     _qh_setreplace($42,$facet1,$facet2);
     break;
    } else {
     (_qh_setdel($38,$facet1)|0);
     break;
    }
   } else {
    $43 = ($29|0)==($facet2|0);
    if (!($43)) {
     _qh_setappend($9,$29);
     $44 = ((($29)) + 60|0);
     $45 = HEAP32[$44>>2]|0;
     _qh_setreplace($45,$facet1,$facet2);
    }
   }
  } while(0);
  $46 = ((($47)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   break;
  } else {
   $29 = $48;$47 = $46;
  }
 }
 $50 = HEAP32[$21>>2]|0;
 (_qh_setdel($50,$facet2)|0);
 $51 = HEAP32[$9>>2]|0;
 (_qh_setdel($51,$facet1)|0);
 STACKTOP = sp;return;
}
function _qh_mergevertices($vertices1,$vertices2) {
 $vertices1 = $vertices1|0;
 $vertices2 = $vertices2|0;
 var $$lcssa = 0, $$lcssa51 = 0, $$lcssa53 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $mergedvertices = 0, $vararg_buffer = 0, $vertex2$0$ph$be = 0, $vertex2$0$ph17 = 0, $vertex2$110 = 0, $vertex2$114 = 0, $vertex2$114$lcssa = 0, $vertex2$2$ph = 0, $vertex2$211 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mergedvertices = sp + 4|0;
 $0 = (_qh_setsize($vertices1)|0);
 $1 = HEAP32[$vertices2>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = HEAP32[(5828)>>2]|0;
 $4 = (($0) + 1)|0;
 $5 = (($4) + ($2))|0;
 $6 = (($5) - ($3))|0;
 $7 = HEAP32[$vertices2>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = (_qh_settemp($6)|0);
 HEAP32[$mergedvertices>>2] = $9;
 $10 = ($vertices1|0)==(0|0);
 L1: do {
  if ($10) {
   $vertex2$2$ph = $8;
  } else {
   $11 = ((($vertices1)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $vertex2$2$ph = $8;
   } else {
    $14 = ((($11)) + 4|0);
    $94 = $12;$95 = $14;$vertex2$0$ph17 = $8;
    while(1) {
     $20 = $94;$40 = $95;
     while(1) {
      $17 = HEAP32[$vertex2$0$ph17>>2]|0;
      $18 = ($17|0)==(0|0);
      if (!($18)) {
       $19 = ((($20)) + 16|0);
       $21 = $19;
       $22 = $21;
       $23 = HEAP32[$22>>2]|0;
       $24 = (($21) + 4)|0;
       $25 = $24;
       $26 = HEAP32[$25>>2]|0;
       $27 = $26 & 16777215;
       $28 = ((($17)) + 16|0);
       $29 = $28;
       $30 = $29;
       $31 = HEAP32[$30>>2]|0;
       $32 = (($29) + 4)|0;
       $33 = $32;
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 & 16777215;
       $36 = ($27>>>0)>($35>>>0);
       if (!($36)) {
        $$lcssa = $20;$$lcssa51 = $40;$$lcssa53 = $19;
        break;
       }
      }
      _qh_setappend($mergedvertices,$20);
      $39 = ((($40)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $vertex2$2$ph = $vertex2$0$ph17;
       break L1;
      } else {
       $20 = $41;$40 = $39;
      }
     }
     $37 = HEAP32[$vertex2$0$ph17>>2]|0;
     $38 = ($37|0)==(0|0);
     L12: do {
      if ($38) {
       $vertex2$110 = $vertex2$0$ph17;
       label = 14;
      } else {
       $44 = $37;$vertex2$114 = $vertex2$0$ph17;
       while(1) {
        $43 = ((($44)) + 16|0);
        $45 = $43;
        $46 = $45;
        $47 = HEAP32[$46>>2]|0;
        $48 = (($45) + 4)|0;
        $49 = $48;
        $50 = HEAP32[$49>>2]|0;
        $51 = $50 & 16777215;
        $52 = $$lcssa53;
        $53 = $52;
        $54 = HEAP32[$53>>2]|0;
        $55 = (($52) + 4)|0;
        $56 = $55;
        $57 = HEAP32[$56>>2]|0;
        $58 = $57 & 16777215;
        $59 = ($51>>>0)>($58>>>0);
        if (!($59)) {
         $vertex2$114$lcssa = $vertex2$114;
         break;
        }
        $60 = ((($vertex2$114)) + 4|0);
        $61 = HEAP32[$vertex2$114>>2]|0;
        _qh_setappend($mergedvertices,$61);
        $62 = HEAP32[$60>>2]|0;
        $63 = ($62|0)==(0|0);
        if ($63) {
         $vertex2$110 = $60;
         label = 14;
         break L12;
        } else {
         $44 = $62;$vertex2$114 = $60;
        }
       }
       $$pr = HEAP32[$vertex2$114$lcssa>>2]|0;
       $64 = ($$pr|0)==(0|0);
       if ($64) {
        $vertex2$110 = $vertex2$114$lcssa;
        label = 14;
       } else {
        $65 = ((($$pr)) + 16|0);
        $66 = $65;
        $67 = $66;
        $68 = HEAP32[$67>>2]|0;
        $69 = (($66) + 4)|0;
        $70 = $69;
        $71 = HEAP32[$70>>2]|0;
        $72 = $71 & 16777215;
        $73 = $$lcssa53;
        $74 = $73;
        $75 = HEAP32[$74>>2]|0;
        $76 = (($73) + 4)|0;
        $77 = $76;
        $78 = HEAP32[$77>>2]|0;
        $79 = $78 & 16777215;
        $80 = ($72>>>0)<($79>>>0);
        if ($80) {
         $vertex2$110 = $vertex2$114$lcssa;
         label = 14;
        } else {
         $84 = ((($vertex2$114$lcssa)) + 4|0);
         _qh_setappend($mergedvertices,$$pr);
         $vertex2$0$ph$be = $84;
        }
       }
      }
     } while(0);
     if ((label|0) == 14) {
      label = 0;
      _qh_setappend($mergedvertices,$$lcssa);
      $vertex2$0$ph$be = $vertex2$110;
     }
     $81 = ((($$lcssa51)) + 4|0);
     $82 = HEAP32[$$lcssa51>>2]|0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      $vertex2$2$ph = $vertex2$0$ph$be;
      break;
     } else {
      $94 = $82;$95 = $81;$vertex2$0$ph17 = $vertex2$0$ph$be;
     }
    }
   }
  }
 } while(0);
 $15 = HEAP32[$vertex2$2$ph>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $86 = $15;$vertex2$211 = $vertex2$2$ph;
  while(1) {
   $85 = ((($vertex2$211)) + 4|0);
   _qh_setappend($mergedvertices,$86);
   $87 = HEAP32[$85>>2]|0;
   $88 = ($87|0)==(0|0);
   if ($88) {
    break;
   } else {
    $86 = $87;$vertex2$211 = $85;
   }
  }
 }
 $89 = HEAP32[$mergedvertices>>2]|0;
 $90 = (_qh_setsize($89)|0);
 $91 = ($6|0)<($90|0);
 if ($91) {
  $92 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($92,6100,29408,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 } else {
  _qh_setfree($vertices2);
  $93 = HEAP32[$mergedvertices>>2]|0;
  HEAP32[$vertices2>>2] = $93;
  (_qh_settemppop()|0);
  STACKTOP = sp;return;
 }
}
function _qh_mergeridges($facet1,$facet2) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $ridgep$0$ph7 = 0, $ridgep$0$ph7$phi = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vertexp$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet1)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($facet2)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  _qh_fprintf($2,4038,29480,$vararg_buffer);
 }
 $7 = ((($facet2)) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 L4: do {
  if (!($9)) {
   $10 = ((($8)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = ((($10)) + 4|0);
    $15 = $13;$64 = $11;$ridgep$0$ph7 = $10;
    while(1) {
     $19 = $64;
     while(1) {
      $18 = ((($19)) + 4|0);
      $20 = HEAP32[$18>>2]|0;
      $21 = ($20|0)==($facet1|0);
      if (!($21)) {
       $22 = ((($19)) + 8|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==($facet1|0);
       if (!($24)) {
        break;
       }
      }
      $25 = HEAP32[$19>>2]|0;
      $26 = ($25|0)==(0|0);
      if (!($26)) {
       $27 = ((($25)) + 4|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(0|0);
       if (!($29)) {
        $32 = $28;$vertexp$04 = $27;
        while(1) {
         $30 = ((($vertexp$04)) + 4|0);
         $31 = ((($32)) + 16|0);
         $33 = $31;
         $34 = $33;
         $35 = HEAP32[$34>>2]|0;
         $36 = (($33) + 4)|0;
         $37 = $36;
         $38 = HEAP32[$37>>2]|0;
         $39 = $38 | 536870912;
         $40 = $31;
         $41 = $40;
         HEAP32[$41>>2] = $35;
         $42 = (($40) + 4)|0;
         $43 = $42;
         HEAP32[$43>>2] = $39;
         $44 = HEAP32[$30>>2]|0;
         $45 = ($44|0)==(0|0);
         if ($45) {
          break;
         } else {
          $32 = $44;$vertexp$04 = $30;
         }
        }
       }
      }
      _qh_delridge($19);
      $46 = HEAP32[$ridgep$0$ph7>>2]|0;
      $47 = ($46|0)==(0|0);
      if ($47) {
       break L4;
      } else {
       $19 = $46;
      }
     }
     $14 = ((($15)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      break;
     } else {
      $ridgep$0$ph7$phi = $15;$15 = $14;$64 = $16;$ridgep$0$ph7 = $ridgep$0$ph7$phi;
     }
    }
   }
  }
 } while(0);
 $48 = ((($facet1)) + 56|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  STACKTOP = sp;return;
 }
 $51 = ((($49)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if ($53) {
  STACKTOP = sp;return;
 }
 $54 = ((($51)) + 4|0);
 $56 = $52;$61 = $54;
 while(1) {
  $55 = ((($56)) + 4|0);
  $57 = HEAP32[$55>>2]|0;
  $58 = ($57|0)==($facet1|0);
  if ($58) {
   HEAP32[$55>>2] = $facet2;
  } else {
   $59 = ((($56)) + 8|0);
   HEAP32[$59>>2] = $facet2;
  }
  _qh_setappend($7,$56);
  $60 = ((($61)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   break;
  } else {
   $56 = $62;$61 = $60;
  }
 }
 STACKTOP = sp;return;
}
function _qh_mergevertex_neighbors($facet1,$facet2) {
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet1)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($facet2)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  _qh_fprintf($2,4042,29528,$vararg_buffer);
 }
 $7 = HEAP32[(7536)>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = HEAP32[(7480)>>2]|0;
  $10 = ((($facet1)) + 76|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($facet2)) + 76|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[(7596)>>2]|0;
  $15 = ((($7)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $11;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $13;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $14;
  $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
  HEAP32[$vararg_ptr7>>2] = $18;
  _qh_fprintf($9,8081,29600,$vararg_buffer2);
  $19 = HEAP32[(7536)>>2]|0;
  _qh_errprint(28984,0,0,0,$19);
 }
 $20 = ((($facet1)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = ((($21)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($23)) + 4|0);
   $28 = $24;$46 = $26;
   while(1) {
    $27 = ((($28)) + 16|0);
    $29 = $27;
    $30 = $29;
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 4)|0;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[(7724)>>2]|0;
    $36 = $31 ^ $35;
    $37 = $36 & 2147483647;
    $38 = ($37|0)==(0);
    $39 = ((($28)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    if ($38) {
     (_qh_setdel($40,$facet1)|0);
     $41 = HEAP32[$39>>2]|0;
     $42 = ((($41)) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      _qh_mergevertex_del($28,$facet1,$facet2);
     }
    } else {
     _qh_setreplace($40,$facet1,$facet2);
    }
    $45 = ((($46)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     break;
    } else {
     $28 = $47;$46 = $45;
    }
   }
  }
 }
 $49 = HEAP32[(7536)>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  STACKTOP = sp;return;
 }
 _qh_errprint(28984,0,0,0,$49);
 STACKTOP = sp;return;
}
function _qh_mergevertex_del($vertex,$facet1,$facet2) {
 $vertex = $vertex|0;
 $facet1 = $facet1|0;
 $facet2 = $facet2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(44232)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(44232)>>2] = $1;
 $2 = HEAP32[(5344)>>2]|0;
 $3 = ($2|0)>(1);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = ((($vertex)) + 16|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 16777215;
  $13 = ((($facet1)) + 76|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($facet2)) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $14;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $16;
  _qh_fprintf($4,2035,29672,$vararg_buffer);
 }
 $17 = ((($facet2)) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 (_qh_setdelsorted($18,$vertex)|0);
 $19 = ((($vertex)) + 16|0);
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 | 1073741824;
 $27 = $19;
 $28 = $27;
 HEAP32[$28>>2] = $22;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 _qh_setappend((7752),$vertex);
 STACKTOP = sp;return;
}
function _qh_neighbor_intersections($vertex) {
 $vertex = $vertex|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $intersect = 0, $neighbor$03 = 0, $neighbor_i$04 = 0, $neighborp$0 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $intersect = sp + 8|0;
 $0 = ((($vertex)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if (!($2)) {
   $3 = ((($1)) + 4|0);
   $neighborp$0 = $3;
   while(1) {
    $4 = HEAP32[$neighborp$0>>2]|0;
    $5 = ($4|0)==(0|0);
    if ($5) {
     break L1;
    }
    $6 = ((($neighborp$0)) + 4|0);
    $7 = ((($4)) + 80|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8 & 8192;
    $10 = ($9|0)==(0);
    if ($10) {
     $neighborp$0 = $6;
    } else {
     $$0 = 0;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($11)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[(44040)>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[(44040)>>2] = $17;
 $18 = ($13|0)==(0|0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($15|0)==(0|0);
 $20 = ((($13)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 if ($19) {
  $22 = (_qh_setcopy($21,0)|0);
  $storemerge = $22;
 } else {
  $23 = ((($15)) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_qh_vertexintersect_new($21,$24)|0);
  $storemerge = $25;
 }
 HEAP32[$intersect>>2] = $storemerge;
 _qh_settemppush($storemerge);
 $26 = HEAP32[$intersect>>2]|0;
 (_qh_setdelsorted($26,$vertex)|0);
 $27 = HEAP32[$0>>2]|0;
 $28 = ($27|0)==(0|0);
 L15: do {
  if (!($28)) {
   $29 = ((($27)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_qh_setsize($27)|0);
   $32 = ($31|0)>(0);
   if ($32) {
    $neighbor$03 = $30;$neighbor_i$04 = 0;
    while(1) {
     $33 = ($neighbor_i$04|0)>(1);
     if ($33) {
      $34 = HEAP32[(44040)>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[(44040)>>2] = $35;
      $36 = ((($neighbor$03)) + 52|0);
      $37 = HEAP32[$36>>2]|0;
      _qh_vertexintersect($intersect,$37);
      $38 = HEAP32[$intersect>>2]|0;
      $39 = ((($38)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       break;
      }
     }
     $44 = (($neighbor_i$04) + 1)|0;
     $45 = HEAP32[$0>>2]|0;
     $46 = (((($45)) + 4|0) + ($44<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($44|0)<($31|0);
     if ($48) {
      $neighbor$03 = $47;$neighbor_i$04 = $44;
     } else {
      break L15;
     }
    }
    $42 = HEAP32[(44024)>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[(44024)>>2] = $43;
    _qh_settempfree($intersect);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $49 = HEAP32[(5344)>>2]|0;
 $50 = ($49|0)>(2);
 if ($50) {
  $51 = HEAP32[(7480)>>2]|0;
  $52 = HEAP32[$intersect>>2]|0;
  $53 = (_qh_setsize($52)|0);
  $54 = ((($vertex)) + 16|0);
  $55 = $54;
  $56 = $55;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + 4)|0;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 & 16777215;
  HEAP32[$vararg_buffer>>2] = $53;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $61;
  _qh_fprintf($51,3007,29736,$vararg_buffer);
 }
 $62 = HEAP32[$intersect>>2]|0;
 $$0 = $62;
 STACKTOP = sp;return ($$0|0);
}
function _qh_remove_extravertices($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $foundrem$0$ph10 = 0, $foundrem$07 = 0, $foundrem$07$lcssa = 0, $foundrem$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vertexp$015 = 0, $vertexp$112 = 0, $vertexp$2$ph9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _qh_fprintf($2,4043,29808,$vararg_buffer);
 }
 $5 = ((($facet)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $13 = $9;$vertexp$015 = $8;
   while(1) {
    $11 = ((($vertexp$015)) + 4|0);
    $12 = ((($13)) + 16|0);
    $14 = $12;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($14) + 4)|0;
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & -268435457;
    $21 = $12;
    $22 = $21;
    HEAP32[$22>>2] = $16;
    $23 = (($21) + 4)|0;
    $24 = $23;
    HEAP32[$24>>2] = $20;
    $25 = HEAP32[$11>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     break;
    } else {
     $13 = $25;$vertexp$015 = $11;
    }
   }
  }
 }
 $27 = ((($facet)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = ((($28)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if (!($32)) {
   $33 = ((($30)) + 4|0);
   $35 = $31;$38 = $33;
   while(1) {
    $34 = HEAP32[$35>>2]|0;
    $36 = ($34|0)==(0|0);
    if (!($36)) {
     $41 = ((($34)) + 4|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if (!($43)) {
      $46 = $42;$vertexp$112 = $41;
      while(1) {
       $44 = ((($vertexp$112)) + 4|0);
       $45 = ((($46)) + 16|0);
       $47 = $45;
       $48 = $47;
       $49 = HEAP32[$48>>2]|0;
       $50 = (($47) + 4)|0;
       $51 = $50;
       $52 = HEAP32[$51>>2]|0;
       $53 = $52 | 268435456;
       $54 = $45;
       $55 = $54;
       HEAP32[$55>>2] = $49;
       $56 = (($54) + 4)|0;
       $57 = $56;
       HEAP32[$57>>2] = $53;
       $58 = HEAP32[$44>>2]|0;
       $59 = ($58|0)==(0|0);
       if ($59) {
        break;
       } else {
        $46 = $58;$vertexp$112 = $44;
       }
      }
     }
    }
    $37 = ((($38)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0|0);
    if ($40) {
     break;
    } else {
     $35 = $39;$38 = $37;
    }
   }
  }
 }
 $60 = HEAP32[$5>>2]|0;
 $61 = ($60|0)==(0|0);
 if ($61) {
  $foundrem$1 = 0;
  STACKTOP = sp;return ($foundrem$1|0);
 }
 $62 = ((($60)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  $foundrem$1 = 0;
  STACKTOP = sp;return ($foundrem$1|0);
 }
 $65 = ((($facet)) + 76|0);
 $125 = $63;$foundrem$0$ph10 = 0;$vertexp$2$ph9 = $62;
 L26: while(1) {
  $70 = $125;$foundrem$07 = $foundrem$0$ph10;
  while(1) {
   $69 = ((($70)) + 16|0);
   $71 = $69;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) + 4)|0;
   $75 = $74;
   $76 = HEAP32[$75>>2]|0;
   $77 = $76 & 268435456;
   $78 = (0)==(0);
   $79 = ($77|0)==(0);
   $80 = $78 & $79;
   if (!($80)) {
    $foundrem$07$lcssa = $foundrem$07;
    break;
   }
   $81 = HEAP32[(44576)>>2]|0;
   $82 = (($81) + 1)|0;
   HEAP32[(44576)>>2] = $82;
   $83 = HEAP32[$5>>2]|0;
   (_qh_setdelsorted($83,$70)|0);
   $84 = ((($70)) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   (_qh_setdel($85,$facet)|0);
   $86 = HEAP32[$84>>2]|0;
   $87 = (_qh_setsize($86)|0);
   $88 = ($87|0)==(0);
   if ($88) {
    $89 = $69;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 4)|0;
    $93 = $92;
    $94 = HEAP32[$93>>2]|0;
    $95 = $94 | 1073741824;
    $96 = $69;
    $97 = $96;
    HEAP32[$97>>2] = $91;
    $98 = (($96) + 4)|0;
    $99 = $98;
    HEAP32[$99>>2] = $95;
    _qh_setappend((7752),$70);
    $100 = HEAP32[(44584)>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[(44584)>>2] = $101;
    $102 = HEAP32[(5344)>>2]|0;
    $103 = ($102|0)>(1);
    if ($103) {
     $104 = HEAP32[(7480)>>2]|0;
     $105 = $69;
     $106 = $105;
     $107 = HEAP32[$106>>2]|0;
     $108 = (($105) + 4)|0;
     $109 = $108;
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 & 16777215;
     HEAP32[$vararg_buffer1>>2] = $111;
     _qh_fprintf($104,2036,29864,$vararg_buffer1);
    }
   } else {
    $112 = HEAP32[(5344)>>2]|0;
    $113 = ($112|0)>(2);
    if ($113) {
     $116 = HEAP32[(7480)>>2]|0;
     $117 = $69;
     $118 = $117;
     $119 = HEAP32[$118>>2]|0;
     $120 = (($117) + 4)|0;
     $121 = $120;
     $122 = HEAP32[$121>>2]|0;
     $123 = $122 & 16777215;
     $124 = HEAP32[$65>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $123;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $124;
     _qh_fprintf($116,3009,29936,$vararg_buffer4);
    }
   }
   $114 = HEAP32[$vertexp$2$ph9>>2]|0;
   $115 = ($114|0)==(0|0);
   if ($115) {
    $foundrem$1 = 1;
    label = 25;
    break L26;
   } else {
    $70 = $114;$foundrem$07 = 1;
   }
  }
  $66 = ((($vertexp$2$ph9)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)==(0|0);
  if ($68) {
   $foundrem$1 = $foundrem$07$lcssa;
   label = 25;
   break;
  } else {
   $125 = $67;$foundrem$0$ph10 = $foundrem$07$lcssa;$vertexp$2$ph9 = $66;
  }
 }
 if ((label|0) == 25) {
  STACKTOP = sp;return ($foundrem$1|0);
 }
 return (0)|0;
}
function _qh_rename_sharedvertex($vertex,$facet) {
 $vertex = $vertex|0;
 $facet = $facet|0;
 var $$0 = 0, $$lcssa20 = 0, $$lcssa21 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $neighborA$0$ph = 0, $neighborA$0$ph$lcssa = 0, $neighborA$2 = 0, $neighborp$07 = 0, $neighborp$1 = 0, $neighborp$1$ph = 0, $ridges = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 32|0;
 $ridges = sp + 28|0;
 $0 = ((($vertex)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = ($2|0)==(2);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==($facet|0);
  if ($7) {
   $8 = ((($4)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $neighborA$2 = $9;
  } else {
   $neighborA$2 = $6;
  }
 } else {
  $10 = HEAP32[(5828)>>2]|0;
  $11 = ($10|0)==(3);
  if ($11) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $12 = HEAP32[(7720)>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[(7720)>>2] = $13;
  $14 = ((($facet)) + 60|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    $20 = HEAP32[(7720)>>2]|0;
    $23 = $18;$neighborp$07 = $17;
    while(1) {
     $21 = ((($neighborp$07)) + 4|0);
     $22 = ((($23)) + 72|0);
     HEAP32[$22>>2] = $20;
     $24 = HEAP32[$21>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     } else {
      $23 = $24;$neighborp$07 = $21;
     }
    }
   }
  }
  $26 = HEAP32[$0>>2]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $38 = HEAP32[(7480)>>2]|0;
   $39 = ((($vertex)) + 16|0);
   $40 = $39;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 16777215;
   $47 = ((($facet)) + 76|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer>>2] = $46;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $48;
   _qh_fprintf($38,6101,30016,$vararg_buffer);
   _qh_errprint(55888,$facet,0,0,$vertex);
   _qh_errexit(5,0,0);
   // unreachable;
  }
  $28 = ((($26)) + 4|0);
  $29 = HEAP32[(7720)>>2]|0;
  $neighborA$0$ph = 0;$neighborp$1$ph = $28;
  L17: while(1) {
   $neighborp$1 = $neighborp$1$ph;
   while(1) {
    $30 = ((($neighborp$1)) + 4|0);
    $31 = HEAP32[$neighborp$1>>2]|0;
    $32 = ($31|0)==(0|0);
    if ($32) {
     $neighborA$0$ph$lcssa = $neighborA$0$ph;
     break L17;
    }
    $33 = ((($31)) + 72|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==($29|0);
    if ($35) {
     $$lcssa20 = $30;$$lcssa21 = $31;
     break;
    } else {
     $neighborp$1 = $30;
    }
   }
   $36 = ($neighborA$0$ph|0)==(0|0);
   if ($36) {
    $neighborA$0$ph = $$lcssa21;$neighborp$1$ph = $$lcssa20;
   } else {
    $$0 = 0;
    label = 22;
    break;
   }
  }
  if ((label|0) == 22) {
   STACKTOP = sp;return ($$0|0);
  }
  $37 = ($neighborA$0$ph$lcssa|0)==(0|0);
  if ($37) {
   $38 = HEAP32[(7480)>>2]|0;
   $39 = ((($vertex)) + 16|0);
   $40 = $39;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 16777215;
   $47 = ((($facet)) + 76|0);
   $48 = HEAP32[$47>>2]|0;
   HEAP32[$vararg_buffer>>2] = $46;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $48;
   _qh_fprintf($38,6101,30016,$vararg_buffer);
   _qh_errprint(55888,$facet,0,0,$vertex);
   _qh_errexit(5,0,0);
   // unreachable;
  } else {
   $neighborA$2 = $neighborA$0$ph$lcssa;
  }
 }
 $49 = HEAP32[(7496)>>2]|0;
 $50 = (_qh_settemp($49)|0);
 HEAP32[$ridges>>2] = $50;
 $51 = HEAP32[(7720)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(7720)>>2] = $52;
 $53 = ((($neighborA$2)) + 72|0);
 HEAP32[$53>>2] = $52;
 _qh_vertexridges_facet($vertex,$facet,$ridges);
 $54 = HEAP32[(5344)>>2]|0;
 $55 = ($54|0)>(1);
 if ($55) {
  $56 = HEAP32[(7480)>>2]|0;
  $57 = ((($vertex)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_qh_pointid($58)|0);
  $60 = ((($vertex)) + 16|0);
  $61 = $60;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + 4)|0;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 16777215;
  $68 = ((($facet)) + 76|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[$ridges>>2]|0;
  $71 = (_qh_setsize($70)|0);
  $72 = ((($neighborA$2)) + 76|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $59;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $67;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $69;
  $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
  HEAP32[$vararg_ptr7>>2] = $71;
  $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
  HEAP32[$vararg_ptr8>>2] = $73;
  _qh_fprintf($56,2037,30096,$vararg_buffer2);
 }
 $74 = HEAP32[(44040)>>2]|0;
 $75 = (($74) + 1)|0;
 HEAP32[(44040)>>2] = $75;
 $76 = ((($facet)) + 52|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($neighborA$2)) + 52|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (_qh_vertexintersect_new($77,$79)|0);
 HEAP32[$vertices>>2] = $80;
 (_qh_setdel($80,$vertex)|0);
 $81 = HEAP32[$vertices>>2]|0;
 _qh_settemppush($81);
 $82 = HEAP32[$vertices>>2]|0;
 $83 = HEAP32[$ridges>>2]|0;
 $84 = (_qh_find_newvertex($vertex,$82,$83)|0);
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$ridges>>2]|0;
  _qh_renamevertex($vertex,$84,$86,$facet,$neighborA$2);
 }
 _qh_settempfree($vertices);
 _qh_settempfree($ridges);
 $$0 = $84;
 STACKTOP = sp;return ($$0|0);
}
function _qh_redundant_vertex($vertex) {
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newvertex$0 = 0, $ridges = 0;
 var $vararg_buffer = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $vertices = sp + 8|0;
 $ridges = sp + 4|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($vertex)) + 16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 16777215;
  HEAP32[$vararg_buffer>>2] = $10;
  _qh_fprintf($2,3008,30168,$vararg_buffer);
 }
 $11 = (_qh_neighbor_intersections($vertex)|0);
 HEAP32[$vertices>>2] = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $newvertex$0 = 0;
  STACKTOP = sp;return ($newvertex$0|0);
 }
 $13 = (_qh_vertexridges($vertex)|0);
 HEAP32[$ridges>>2] = $13;
 $14 = HEAP32[$vertices>>2]|0;
 $15 = (_qh_find_newvertex($vertex,$14,$13)|0);
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = HEAP32[$ridges>>2]|0;
  _qh_renamevertex($vertex,$15,$17,0,0);
 }
 _qh_settempfree($ridges);
 _qh_settempfree($vertices);
 $newvertex$0 = $15;
 STACKTOP = sp;return ($newvertex$0|0);
}
function _qh_renamevertex($oldvertex,$newvertex,$ridges,$oldfacet,$neighborA) {
 $oldvertex = $oldvertex|0;
 $newvertex = $newvertex|0;
 $ridges = $ridges|0;
 $oldfacet = $oldfacet|0;
 $neighborA = $neighborA|0;
 var $$neighborp$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $istrace$0 = 0;
 var $neighborp$012 = 0, $neighborp$113 = 0, $ridgep$015 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 16|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  label = 4;
 } else {
  $2 = ((($oldvertex)) + 16|0);
  $3 = $2;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($3) + 4)|0;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 16777215;
  $10 = HEAP32[(7532)>>2]|0;
  $11 = ($9|0)==($10|0);
  if ($11) {
   label = 4;
  } else {
   $12 = ((($newvertex)) + 16|0);
   $13 = $12;
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + 4)|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 16777215;
   $20 = ($19|0)==($10|0);
   if ($20) {
    label = 4;
   } else {
    $istrace$0 = 0;
   }
  }
 }
 if ((label|0) == 4) {
  $istrace$0 = 1;
 }
 $21 = ($ridges|0)==(0|0);
 if (!($21)) {
  $22 = ((($ridges)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $26 = $23;$ridgep$015 = $22;
   while(1) {
    $25 = ((($ridgep$015)) + 4|0);
    _qh_renameridgevertex($26,$oldvertex,$newvertex);
    $27 = HEAP32[$25>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     break;
    } else {
     $26 = $27;$ridgep$015 = $25;
    }
   }
  }
 }
 $29 = ($oldfacet|0)==(0|0);
 if ($29) {
  $30 = HEAP32[(44592)>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[(44592)>>2] = $31;
  $32 = ($istrace$0|0)==(0);
  if (!($32)) {
   $33 = HEAP32[(7480)>>2]|0;
   $34 = ((($oldvertex)) + 16|0);
   $35 = $34;
   $36 = $35;
   $37 = HEAP32[$36>>2]|0;
   $38 = (($35) + 4)|0;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 16777215;
   $42 = ((($newvertex)) + 16|0);
   $43 = $42;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 & 16777215;
   HEAP32[$vararg_buffer>>2] = $41;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $49;
   _qh_fprintf($33,8082,30224,$vararg_buffer);
  }
  $50 = ((($oldvertex)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0|0);
  if (!($52)) {
   $53 = ((($51)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $57 = $54;$neighborp$012 = $53;
    while(1) {
     $56 = ((($neighborp$012)) + 4|0);
     _qh_maydropneighbor($57);
     $58 = ((($57)) + 52|0);
     $59 = HEAP32[$58>>2]|0;
     (_qh_setdelsorted($59,$oldvertex)|0);
     $60 = (_qh_remove_extravertices($57)|0);
     $61 = ($60|0)==(0);
     $$neighborp$0 = $61 ? $56 : $neighborp$012;
     $62 = HEAP32[$$neighborp$0>>2]|0;
     $63 = ($62|0)==(0|0);
     if ($63) {
      break;
     } else {
      $57 = $62;$neighborp$012 = $$neighborp$0;
     }
    }
   }
  }
  $64 = ((($oldvertex)) + 16|0);
  $65 = $64;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 & 1073741824;
  $72 = (0)==(0);
  $73 = ($71|0)==(0);
  $74 = $72 & $73;
  if (!($74)) {
   STACKTOP = sp;return;
  }
  $75 = $70 | 1073741824;
  $76 = $64;
  $77 = $76;
  HEAP32[$77>>2] = $67;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = $75;
  _qh_setappend((7752),$oldvertex);
  STACKTOP = sp;return;
 }
 $80 = ((($oldvertex)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (_qh_setsize($81)|0);
 $83 = ($82|0)==(2);
 if (!($83)) {
  $129 = HEAP32[(44600)>>2]|0;
  $130 = (($129) + 1)|0;
  HEAP32[(44600)>>2] = $130;
  $131 = HEAP32[(5344)>>2]|0;
  $132 = $131 | $istrace$0;
  $133 = ($132|0)==(0);
  if (!($133)) {
   $134 = HEAP32[(7480)>>2]|0;
   $135 = ((($oldvertex)) + 16|0);
   $136 = $135;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $139 = (($136) + 4)|0;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 & 16777215;
   $143 = ((($newvertex)) + 16|0);
   $144 = $143;
   $145 = $144;
   $146 = HEAP32[$145>>2]|0;
   $147 = (($144) + 4)|0;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = $149 & 16777215;
   $151 = ((($oldfacet)) + 76|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ((($neighborA)) + 76|0);
   $154 = HEAP32[$153>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $142;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $150;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $152;
   $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
   HEAP32[$vararg_ptr12>>2] = $154;
   _qh_fprintf($134,8084,30336,$vararg_buffer7);
  }
  $155 = ((($oldfacet)) + 52|0);
  $156 = HEAP32[$155>>2]|0;
  (_qh_setdelsorted($156,$oldvertex)|0);
  $157 = HEAP32[$80>>2]|0;
  (_qh_setdel($157,$oldfacet)|0);
  (_qh_remove_extravertices($neighborA)|0);
  STACKTOP = sp;return;
 }
 $84 = HEAP32[(44608)>>2]|0;
 $85 = (($84) + 1)|0;
 HEAP32[(44608)>>2] = $85;
 $86 = ($istrace$0|0)==(0);
 if (!($86)) {
  $87 = HEAP32[(7480)>>2]|0;
  $88 = ((($oldvertex)) + 16|0);
  $89 = $88;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 4)|0;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 & 16777215;
  $96 = ((($newvertex)) + 16|0);
  $97 = $96;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & 16777215;
  $104 = ((($oldfacet)) + 76|0);
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $95;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $103;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $105;
  _qh_fprintf($87,8083,30280,$vararg_buffer2);
 }
 $106 = HEAP32[$80>>2]|0;
 $107 = ($106|0)==(0|0);
 if (!($107)) {
  $108 = ((($106)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(0|0);
  if (!($110)) {
   $113 = $109;$neighborp$113 = $108;
   while(1) {
    $111 = ((($neighborp$113)) + 4|0);
    $112 = ((($113)) + 52|0);
    $114 = HEAP32[$112>>2]|0;
    (_qh_setdelsorted($114,$oldvertex)|0);
    $115 = HEAP32[$111>>2]|0;
    $116 = ($115|0)==(0|0);
    if ($116) {
     break;
    } else {
     $113 = $115;$neighborp$113 = $111;
    }
   }
  }
 }
 $117 = ((($oldvertex)) + 16|0);
 $118 = $117;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = (($118) + 4)|0;
 $122 = $121;
 $123 = HEAP32[$122>>2]|0;
 $124 = $123 | 1073741824;
 $125 = $117;
 $126 = $125;
 HEAP32[$126>>2] = $120;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = $124;
 _qh_setappend((7752),$oldvertex);
 STACKTOP = sp;return;
}
function _qh_vertexridges_facet($vertex,$facet,$ridges) {
 $vertex = $vertex|0;
 $facet = $facet|0;
 $ridges = $ridges|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($facet)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($3)) + 4|0);
   $22 = $6;$8 = $4;
   while(1) {
    $7 = ((($8)) + 4|0);
    $9 = HEAP32[$7>>2]|0;
    $10 = ($9|0)==($facet|0);
    if ($10) {
     $11 = ((($8)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $14 = $12;
    } else {
     $14 = $9;
    }
    $13 = ((($14)) + 72|0);
    $15 = HEAP32[$13>>2]|0;
    $16 = HEAP32[(7720)>>2]|0;
    $17 = ($15|0)==($16|0);
    if ($17) {
     $18 = HEAP32[$8>>2]|0;
     $19 = (_qh_setin($18,$vertex)|0);
     $20 = ($19|0)==(0);
     if (!($20)) {
      _qh_setappend($ridges,$8);
     }
    }
    $21 = ((($22)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if ($24) {
     break;
    } else {
     $22 = $21;$8 = $23;
    }
   }
  }
 }
 $25 = HEAP32[(7720)>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = ((($facet)) + 72|0);
 HEAP32[$27>>2] = $26;
 return;
}
function _qh_renameridgevertex($ridge,$oldvertex,$newvertex) {
 $ridge = $ridge|0;
 $oldvertex = $oldvertex|0;
 $newvertex = $newvertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, $nth$05 = 0, $nth$1 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$ridge>>2]|0;
 $1 = (_qh_setindex($0,$oldvertex)|0);
 $2 = HEAP32[$ridge>>2]|0;
 (_qh_setdelnthsorted($2,$1)|0);
 $3 = HEAP32[$ridge>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $nth$1 = 0;
  } else {
   $5 = ((($3)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $nth$1 = 0;
   } else {
    $8 = ((($5)) + 4|0);
    $9 = ((($newvertex)) + 16|0);
    $10 = $6;$57 = $8;$nth$05 = 0;
    while(1) {
     $11 = ($10|0)==($newvertex|0);
     if ($11) {
      break;
     }
     $39 = ((($10)) + 16|0);
     $40 = $39;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $43 = (($40) + 4)|0;
     $44 = $43;
     $45 = HEAP32[$44>>2]|0;
     $46 = $45 & 16777215;
     $47 = $9;
     $48 = $47;
     $49 = HEAP32[$48>>2]|0;
     $50 = (($47) + 4)|0;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 16777215;
     $54 = ($46>>>0)<($53>>>0);
     if ($54) {
      $nth$1 = $nth$05;
      break L1;
     }
     $55 = (($nth$05) + 1)|0;
     $56 = ((($57)) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $nth$1 = $55;
      break L1;
     } else {
      $10 = $58;$57 = $56;$nth$05 = $55;
     }
    }
    $12 = HEAP32[(43560)>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[(43560)>>2] = $13;
    $14 = ((($ridge)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 67108864;
    $17 = ($16|0)==(0);
    if (!($17)) {
     _qh_copynonconvex($ridge);
    }
    _qh_delridge($ridge);
    $18 = HEAP32[(5344)>>2]|0;
    $19 = ($18|0)>(1);
    if (!($19)) {
     STACKTOP = sp;return;
    }
    $20 = HEAP32[(7480)>>2]|0;
    $21 = HEAP32[$14>>2]|0;
    $22 = $21 & 16777215;
    $23 = ((($oldvertex)) + 16|0);
    $24 = $23;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 16777215;
    $31 = ((($newvertex)) + 16|0);
    $32 = $31;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 & 16777215;
    HEAP32[$vararg_buffer>>2] = $22;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $30;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $38;
    _qh_fprintf($20,2038,30408,$vararg_buffer);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 _qh_setaddnth($ridge,$nth$1,$newvertex);
 $60 = (($1) - ($nth$1))|0;
 $ispos = ($60|0)>(-1);
 $neg = (0 - ($60))|0;
 $61 = $ispos ? $60 : $neg;
 $62 = $61 & 1;
 $63 = ($62|0)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = HEAP32[(5344)>>2]|0;
 $65 = ($64|0)>(2);
 if ($65) {
  $66 = HEAP32[(7480)>>2]|0;
  $67 = ((($ridge)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 & 16777215;
  HEAP32[$vararg_buffer3>>2] = $69;
  _qh_fprintf($66,3010,30488,$vararg_buffer3);
 }
 $70 = ((($ridge)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($ridge)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$70>>2] = $73;
 HEAP32[$72>>2] = $71;
 STACKTOP = sp;return;
}
function _qh_appendfacet($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7504)>>2]|0;
 $1 = HEAP32[(7512)>>2]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  HEAP32[(7512)>>2] = $facet;
 }
 $3 = HEAP32[(7508)>>2]|0;
 $4 = ($0|0)==($3|0);
 if ($4) {
  HEAP32[(7508)>>2] = $facet;
 }
 $5 = ((($0)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($facet)) + 44|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($facet)) + 48|0);
 HEAP32[$8>>2] = $0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[(7500)>>2] = $facet;
 } else {
  $11 = ((($9)) + 48|0);
  HEAP32[$11>>2] = $facet;
 }
 HEAP32[$5>>2] = $facet;
 $12 = HEAP32[(7552)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(7552)>>2] = $13;
 $14 = HEAP32[(5344)>>2]|0;
 $15 = ($14|0)>(3);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[(7480)>>2]|0;
 $17 = ((($facet)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$vararg_buffer>>2] = $18;
 _qh_fprintf($16,4044,30552,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_appendvertex($vertex) {
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7544)>>2]|0;
 $1 = HEAP32[(7548)>>2]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  HEAP32[(7548)>>2] = $vertex;
 }
 $3 = ((($vertex)) + 16|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 | -2147483648;
 $11 = $3;
 $12 = $11;
 HEAP32[$12>>2] = $6;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = ((($0)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($vertex)) + 4|0);
 HEAP32[$17>>2] = $16;
 HEAP32[$vertex>>2] = $0;
 $18 = HEAP32[$15>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  HEAP32[(7540)>>2] = $vertex;
 } else {
  HEAP32[$18>>2] = $vertex;
 }
 HEAP32[$15>>2] = $vertex;
 $20 = HEAP32[(7556)>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[(7556)>>2] = $21;
 $22 = HEAP32[(5344)>>2]|0;
 $23 = ($22|0)>(3);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[(7480)>>2]|0;
 $25 = $3;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 16777215;
 HEAP32[$vararg_buffer>>2] = $31;
 _qh_fprintf($24,4045,30600,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_attachnewfacets() {
 var $$lcssa = 0, $$lcssa80 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $neighborp$1$ph24 = 0, $neighborp$1$ph24$phi = 0, $newfacet$0 = 0, $newfacet$025 = 0;
 var $newfacet$026 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr5 = 0, $visible$0 = 0, $visible$036 = 0, $visible$037 = 0, $visible$1$ph21 = 0, $visible$1$ph21$lcssa84 = 0, $visible$25 = 0, $visible$3 = 0, $visible$316 = 0, $visible$317 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 HEAP32[(7656)>>2] = 1;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,3012,30648,$vararg_buffer);
 }
 $3 = HEAP32[(7720)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(7720)>>2] = $4;
 $visible$036 = HEAP32[(7516)>>2]|0;
 $5 = ($visible$036|0)==(0|0);
 L4: do {
  if (!($5)) {
   $visible$037 = $visible$036;
   while(1) {
    $6 = ((($visible$037)) + 80|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = $7 & 2048;
    $9 = ($8|0)==(0);
    if ($9) {
     break L4;
    }
    $10 = HEAP32[(7720)>>2]|0;
    $11 = ((($visible$037)) + 72|0);
    HEAP32[$11>>2] = $10;
    $12 = ((($visible$037)) + 56|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = ((($13)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if (!($17)) {
      $18 = ((($15)) + 4|0);
      $20 = $16;$41 = $18;
      while(1) {
       $19 = ((($20)) + 4|0);
       $21 = HEAP32[$19>>2]|0;
       $22 = ($21|0)==($visible$037|0);
       if ($22) {
        $23 = ((($20)) + 8|0);
        $24 = HEAP32[$23>>2]|0;
        $26 = $24;
       } else {
        $26 = $21;
       }
       $25 = ((($26)) + 72|0);
       $27 = HEAP32[$25>>2]|0;
       $28 = HEAP32[(7720)>>2]|0;
       $29 = ($27|0)==($28|0);
       if ($29) {
        label = 12;
       } else {
        $30 = ((($26)) + 80|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $31 & 10240;
        $33 = ($32|0)==(8192);
        if ($33) {
         label = 12;
        }
       }
       if ((label|0) == 12) {
        label = 0;
        $34 = ((($26)) + 80|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = $35 & 2048;
        $37 = ($36|0)==(0);
        if ($37) {
         $38 = ((($26)) + 56|0);
         $39 = HEAP32[$38>>2]|0;
         (_qh_setdel($39,$20)|0);
        }
        _qh_setfree($20);
        _qh_memfree($20,16);
       }
       $40 = ((($41)) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(0|0);
       if ($43) {
        break;
       } else {
        $20 = $42;$41 = $40;
       }
      }
     }
     $44 = HEAP32[$12>>2]|0;
     $45 = ((($44)) + 4|0);
     HEAP32[$45>>2] = 0;
    }
    $46 = ((($visible$037)) + 60|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 4|0);
    HEAP32[$48>>2] = 0;
    $49 = ((($visible$037)) + 48|0);
    $visible$0 = HEAP32[$49>>2]|0;
    $50 = ($visible$0|0)==(0|0);
    if ($50) {
     break;
    } else {
     $visible$037 = $visible$0;
    }
   }
  }
 } while(0);
 $51 = HEAP32[(5344)>>2]|0;
 $52 = ($51|0)>(0);
 if ($52) {
  $53 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($53,1017,30696,$vararg_buffer1);
 }
 $newfacet$025 = HEAP32[(7512)>>2]|0;
 $54 = ($newfacet$025|0)==(0|0);
 L31: do {
  if (!($54)) {
   $newfacet$026 = $newfacet$025;
   while(1) {
    $55 = ((($newfacet$026)) + 48|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(0|0);
    if ($57) {
     break L31;
    }
    $58 = ((($newfacet$026)) + 60|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($59)) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 80|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 8192;
    $65 = ($64|0)==(0);
    $66 = ((($61)) + 60|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(0|0);
    L35: do {
     if ($65) {
      L37: do {
       if (!($68)) {
        $107 = ((($67)) + 4|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = ($108|0)==(0|0);
        if (!($109)) {
         $110 = ((($107)) + 4|0);
         $112 = $110;$153 = $108;$neighborp$1$ph24 = $107;
         while(1) {
          $115 = $112;
          $117 = $153;
          while(1) {
           $116 = ((($117)) + 80|0);
           $118 = HEAP32[$116>>2]|0;
           $119 = $118 & 2048;
           $120 = ($119|0)==(0);
           if ($120) {
            break;
           }
           $121 = ((($117)) + 32|0);
           HEAP32[$121>>2] = $newfacet$026;
           $122 = HEAP32[$66>>2]|0;
           $123 = ((($122)) + 8|0);
           $124 = $123;
           $125 = (($115) - ($124))|0;
           $126 = $125 >> 2;
           (_qh_setdelnth($122,$126)|0);
           $127 = HEAP32[$neighborp$1$ph24>>2]|0;
           $128 = ($127|0)==(0|0);
           if ($128) {
            break L37;
           } else {
            $117 = $127;
           }
          }
          $111 = ((($112)) + 4|0);
          $113 = HEAP32[$112>>2]|0;
          $114 = ($113|0)==(0|0);
          if ($114) {
           break;
          } else {
           $neighborp$1$ph24$phi = $112;$112 = $111;$153 = $113;$neighborp$1$ph24 = $neighborp$1$ph24$phi;
          }
         }
        }
       }
      } while(0);
      _qh_setappend($66,$newfacet$026);
      $129 = ((($newfacet$026)) + 56|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($130)) + 4|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==($61|0);
      if ($135) {
       $136 = ((($132)) + 8|0);
       HEAP32[$136>>2] = $newfacet$026;
       break;
      } else {
       HEAP32[$133>>2] = $newfacet$026;
       break;
      }
     } else {
      do {
       if (!($68)) {
        $69 = ((($67)) + 4|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($70|0)==(0|0);
        if (!($71)) {
         $72 = ((($69)) + 4|0);
         $73 = ((($newfacet$026)) + 52|0);
         $74 = ((($61)) + 52|0);
         $151 = $70;$152 = $72;$visible$1$ph21 = 0;
         L54: while(1) {
          $78 = ($visible$1$ph21|0)==(0|0);
          $80 = $151;$85 = $152;
          while(1) {
           $79 = ((($80)) + 80|0);
           $81 = HEAP32[$79>>2]|0;
           $82 = $81 & 2048;
           $83 = ($82|0)==(0);
           if (!($83)) {
            if ($78) {
             $$lcssa = $80;$$lcssa80 = $85;
             break;
            }
            $88 = HEAP32[$73>>2]|0;
            $89 = HEAP32[$74>>2]|0;
            $90 = HEAP32[$66>>2]|0;
            $91 = ((($90)) + 8|0);
            $92 = $85;
            $93 = $91;
            $94 = (($92) - ($93))|0;
            $95 = $94 >> 2;
            $96 = (_qh_setequal_skip($88,0,$89,$95)|0);
            $97 = ($96|0)==(0);
            if (!($97)) {
             $visible$25 = $80;
             break L54;
            }
           }
           $84 = ((($85)) + 4|0);
           $86 = HEAP32[$85>>2]|0;
           $87 = ($86|0)==(0|0);
           if ($87) {
            $visible$1$ph21$lcssa84 = $visible$1$ph21;
            label = 32;
            break L54;
           } else {
            $80 = $86;$85 = $84;
           }
          }
          $75 = ((($$lcssa80)) + 4|0);
          $76 = HEAP32[$$lcssa80>>2]|0;
          $77 = ($76|0)==(0|0);
          if ($77) {
           $visible$25 = $$lcssa;
           break;
          } else {
           $151 = $76;$152 = $75;$visible$1$ph21 = $$lcssa;
          }
         }
         if ((label|0) == 32) {
          label = 0;
          $98 = ($visible$1$ph21$lcssa84|0)==(0|0);
          if ($98) {
           break;
          } else {
           $visible$25 = $visible$1$ph21$lcssa84;
          }
         }
         $99 = ((($visible$25)) + 32|0);
         HEAP32[$99>>2] = $newfacet$026;
         $100 = HEAP32[$66>>2]|0;
         _qh_setreplace($100,$visible$25,$newfacet$026);
         break L35;
        }
       }
      } while(0);
      $101 = HEAP32[(7480)>>2]|0;
      $102 = ((($61)) + 76|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ((($newfacet$026)) + 76|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$vararg_buffer3>>2] = $103;
      $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $105;
      _qh_fprintf($101,6102,30760,$vararg_buffer3);
      _qh_errexit2(5,$61,$newfacet$026);
     }
    } while(0);
    $newfacet$0 = HEAP32[$55>>2]|0;
    $106 = ($newfacet$0|0)==(0|0);
    if ($106) {
     break;
    } else {
     $newfacet$026 = $newfacet$0;
    }
   }
  }
 } while(0);
 $137 = HEAP32[(5632)>>2]|0;
 $138 = ($137|0)==(0);
 if ($138) {
  STACKTOP = sp;return;
 }
 $visible$316 = HEAP32[(7516)>>2]|0;
 $139 = ($visible$316|0)==(0|0);
 if ($139) {
  STACKTOP = sp;return;
 } else {
  $visible$317 = $visible$316;
 }
 while(1) {
  $140 = ((($visible$317)) + 80|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $141 & 2048;
  $143 = ($142|0)==(0);
  if ($143) {
   label = 52;
   break;
  }
  $144 = ((($visible$317)) + 32|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ($145|0)==(0|0);
  if ($146) {
   $147 = HEAP32[(44008)>>2]|0;
   $148 = (($147) + 1)|0;
   HEAP32[(44008)>>2] = $148;
  }
  $149 = ((($visible$317)) + 48|0);
  $visible$3 = HEAP32[$149>>2]|0;
  $150 = ($visible$3|0)==(0|0);
  if ($150) {
   label = 52;
   break;
  } else {
   $visible$317 = $visible$3;
  }
 }
 if ((label|0) == 52) {
  STACKTOP = sp;return;
 }
}
function _qh_checkflipped($facet,$distp,$allerror) {
 $facet = $facet|0;
 $distp = $distp|0;
 $allerror = $allerror|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $dist = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $dist = sp;
 $0 = ((($facet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 65536;
 $3 = ($2|0)==(0);
 $4 = ($distp|0)!=(0|0);
 $or$cond = $4 | $3;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[(43592)>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[(43592)>>2] = $6;
 $7 = HEAP32[(7484)>>2]|0;
 _qh_distplane($7,$facet,$dist);
 if ($4) {
  $8 = +HEAPF64[$dist>>3];
  HEAPF64[$distp>>3] = $8;
 }
 $9 = ($allerror|0)==(0);
 $10 = +HEAPF64[$dist>>3];
 if ($9) {
  $14 = $10 >= 0.0;
  $or$cond3 = $9 & $14;
  if (!($or$cond3)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $11 = +HEAPF64[(6952)>>3];
  $12 = -$11;
  $13 = $10 > $12;
  if (!($13)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 | 65536;
 HEAP32[$0>>2] = $16;
 $17 = HEAP32[(43840)>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[(43840)>>2] = $18;
 $19 = HEAP32[(5344)>>2]|0;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = HEAP32[(7480)>>2]|0;
  $22 = ((($facet)) + 76|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = +HEAPF64[$dist>>3];
  $25 = HEAP32[(7596)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $24;
  $vararg_ptr2 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr2>>2] = $25;
  _qh_fprintf($21,19,30864,$vararg_buffer);
 }
 _qh_precision(34048);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _qh_delfacet($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _qh_fprintf($2,4046,30936,$vararg_buffer);
 }
 $5 = HEAP32[(7528)>>2]|0;
 $6 = ($5|0)==($facet|0);
 if ($6) {
  HEAP32[(7528)>>2] = 0;
 }
 $7 = HEAP32[(7600)>>2]|0;
 $8 = ($7|0)==($facet|0);
 if ($8) {
  HEAP32[(7600)>>2] = 0;
 }
 _qh_removefacet($facet);
 $9 = ((($facet)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 268435968;
 $12 = ($11|0)==(512);
 do {
  if (!($12)) {
   $13 = ((($facet)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[(7488)>>2]|0;
   _qh_memfree($14,$15);
   $16 = HEAP32[(7592)>>2]|0;
   $17 = ($16|0)==(1);
   $18 = ((($facet)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   if ($17) {
    $20 = HEAP32[(7492)>>2]|0;
    _qh_memfree($19,$20);
    break;
   } else {
    $21 = HEAP32[(7488)>>2]|0;
    _qh_memfree($19,$21);
    break;
   }
  }
 } while(0);
 $22 = ((($facet)) + 60|0);
 _qh_setfree($22);
 $23 = ((($facet)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _qh_setfree($23);
 }
 $26 = ((($facet)) + 52|0);
 _qh_setfree($26);
 $27 = ((($facet)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  _qh_setfree($27);
 }
 $30 = ((($facet)) + 68|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  _qh_memfree($facet,88);
  STACKTOP = sp;return;
 }
 _qh_setfree($30);
 _qh_memfree($facet,88);
 STACKTOP = sp;return;
}
function _qh_removefacet($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($facet)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($facet)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[(7512)>>2]|0;
 $5 = ($4|0)==($facet|0);
 if ($5) {
  HEAP32[(7512)>>2] = $1;
 }
 $6 = HEAP32[(7508)>>2]|0;
 $7 = ($6|0)==($facet|0);
 if ($7) {
  HEAP32[(7508)>>2] = $1;
 }
 $8 = HEAP32[(7516)>>2]|0;
 $9 = ($8|0)==($facet|0);
 if ($9) {
  HEAP32[(7516)>>2] = $1;
 }
 $10 = ($3|0)==(0|0);
 if ($10) {
  HEAP32[(7500)>>2] = $1;
  $13 = ((($1)) + 44|0);
  HEAP32[$13>>2] = 0;
 } else {
  $11 = ((($3)) + 48|0);
  HEAP32[$11>>2] = $1;
  $12 = ((($1)) + 44|0);
  HEAP32[$12>>2] = $3;
 }
 $14 = HEAP32[(7552)>>2]|0;
 $15 = (($14) + -1)|0;
 HEAP32[(7552)>>2] = $15;
 $16 = HEAP32[(5344)>>2]|0;
 $17 = ($16|0)>(3);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[(7480)>>2]|0;
 $19 = ((($facet)) + 76|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$vararg_buffer>>2] = $20;
 _qh_fprintf($18,4057,30968,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_deletevisible() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numvisible$0$lcssa = 0, $numvisible$02 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vertexp$01 = 0, $visible$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(7752)>>2]|0;
 $1 = (_qh_setsize($0)|0);
 $2 = HEAP32[(5344)>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = HEAP32[(7520)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  _qh_fprintf($4,1018,31016,$vararg_buffer);
 }
 $6 = HEAP32[(7516)>>2]|0;
 $7 = ($6|0)==(0|0);
 L4: do {
  if ($7) {
   $numvisible$0$lcssa = 0;
  } else {
   $numvisible$02 = 0;$visible$03 = $6;
   while(1) {
    $8 = ((($visible$03)) + 80|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 2048;
    $11 = ($10|0)==(0);
    if ($11) {
     $numvisible$0$lcssa = $numvisible$02;
     break L4;
    }
    $12 = ((($visible$03)) + 48|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($numvisible$02) + 1)|0;
    _qh_delfacet($visible$03);
    $15 = ($13|0)==(0|0);
    if ($15) {
     $numvisible$0$lcssa = $14;
     break;
    } else {
     $numvisible$02 = $14;$visible$03 = $13;
    }
   }
  }
 } while(0);
 $16 = HEAP32[(7520)>>2]|0;
 $17 = ($numvisible$0$lcssa|0)==($16|0);
 if (!($17)) {
  $18 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $16;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $numvisible$0$lcssa;
  _qh_fprintf($18,6103,31080,$vararg_buffer2);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 HEAP32[(7520)>>2] = 0;
 $19 = HEAP32[(44912)>>2]|0;
 $20 = (($19) + ($numvisible$0$lcssa))|0;
 HEAP32[(44912)>>2] = $20;
 $21 = HEAP32[(44920)>>2]|0;
 $22 = ($21|0)<($numvisible$0$lcssa|0);
 if ($22) {
  HEAP32[(44920)>>2] = $numvisible$0$lcssa;
 }
 $23 = HEAP32[(43568)>>2]|0;
 $24 = (($23) + ($1))|0;
 HEAP32[(43568)>>2] = $24;
 $25 = HEAP32[(43576)>>2]|0;
 $26 = ($25|0)<($1|0);
 if ($26) {
  HEAP32[(43576)>>2] = $1;
 }
 $27 = HEAP32[(7752)>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $36 = HEAP32[(7752)>>2]|0;
  _qh_settruncate($36,0);
  STACKTOP = sp;return;
 }
 $29 = ((($27)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $36 = HEAP32[(7752)>>2]|0;
  _qh_settruncate($36,0);
  STACKTOP = sp;return;
 } else {
  $33 = $30;$vertexp$01 = $29;
 }
 while(1) {
  $32 = ((($vertexp$01)) + 4|0);
  _qh_delvertex($33);
  $34 = HEAP32[$32>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   break;
  } else {
   $33 = $34;$vertexp$01 = $32;
  }
 }
 $36 = HEAP32[(7752)>>2]|0;
 _qh_settruncate($36,0);
 STACKTOP = sp;return;
}
function _qh_facetintersect($facetA,$facetB,$skipA,$skipB,$prepend) {
 $facetA = $facetA|0;
 $facetB = $facetB|0;
 $skipA = $skipA|0;
 $skipB = $skipB|0;
 $prepend = $prepend|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $i$06$lcssa = 0;
 var $i$1 = 0, $j$04 = 0, $j$04$lcssa = 0, $j$1 = 0, $neighborsA$07 = 0, $neighborsB$05 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = ((($facetA)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = ((($facetB)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==($facetB|0);
 L1: do {
  if ($8) {
   HEAP32[$skipA>>2] = 0;
   $i$1 = 0;
  } else {
   $9 = ((($3)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($facetB|0);
   if ($11) {
    HEAP32[$skipA>>2] = 1;
    $i$1 = 0;
    break;
   }
   $12 = ((($3)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($facetB|0);
   if ($14) {
    HEAP32[$skipA>>2] = 2;
    $i$1 = 0;
    break;
   }
   $15 = ($0|0)>(3);
   if ($15) {
    $16 = ((($3)) + 12|0);
    $i$06 = 3;$neighborsA$07 = $16;
    while(1) {
     $17 = HEAP32[$neighborsA$07>>2]|0;
     $18 = ($17|0)==($facetB|0);
     if ($18) {
      $i$06$lcssa = $i$06;
      break;
     }
     $19 = ((($neighborsA$07)) + 4|0);
     $20 = (($i$06) + 1)|0;
     $21 = ($20|0)<($0|0);
     if ($21) {
      $i$06 = $20;$neighborsA$07 = $19;
     } else {
      $i$1 = $20;
      break L1;
     }
    }
    HEAP32[$skipA>>2] = $i$06$lcssa;
    $i$1 = $i$06$lcssa;
   } else {
    $i$1 = 3;
   }
  }
 } while(0);
 $22 = HEAP32[$6>>2]|0;
 $23 = ($22|0)==($facetA|0);
 L16: do {
  if ($23) {
   HEAP32[$skipB>>2] = 0;
   $j$1 = 0;
  } else {
   $24 = ((($6)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==($facetA|0);
   if ($26) {
    HEAP32[$skipB>>2] = 1;
    $j$1 = 0;
    break;
   }
   $27 = ((($6)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==($facetA|0);
   if ($29) {
    HEAP32[$skipB>>2] = 2;
    $j$1 = 0;
    break;
   }
   $30 = ($0|0)>(3);
   if ($30) {
    $31 = ((($6)) + 12|0);
    $j$04 = 3;$neighborsB$05 = $31;
    while(1) {
     $32 = HEAP32[$neighborsB$05>>2]|0;
     $33 = ($32|0)==($facetA|0);
     if ($33) {
      $j$04$lcssa = $j$04;
      break;
     }
     $34 = ((($neighborsB$05)) + 4|0);
     $35 = (($j$04) + 1)|0;
     $36 = ($35|0)<($0|0);
     if ($36) {
      $j$04 = $35;$neighborsB$05 = $34;
     } else {
      $j$1 = $35;
      break L16;
     }
    }
    HEAP32[$skipB>>2] = $j$04$lcssa;
    $j$1 = $j$04$lcssa;
   } else {
    $j$1 = 3;
   }
  }
 } while(0);
 $37 = ($i$1|0)<($0|0);
 $38 = ($j$1|0)<($0|0);
 $or$cond = $37 & $38;
 if (!($or$cond)) {
  $39 = HEAP32[(7480)>>2]|0;
  $40 = ((($facetA)) + 76|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($facetB)) + 76|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$vararg_buffer>>2] = $41;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $43;
  _qh_fprintf($39,6104,31176,$vararg_buffer);
  _qh_errexit2(5,$facetA,$facetB);
 }
 $44 = ((($facetA)) + 52|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[(5828)>>2]|0;
 $47 = HEAP32[$skipA>>2]|0;
 $48 = (_qh_setnew_delnthsorted($45,$46,$47,$prepend)|0);
 $49 = HEAP32[(5344)>>2]|0;
 $50 = ($49|0)>(3);
 if (!($50)) {
  STACKTOP = sp;return ($48|0);
 }
 $51 = HEAP32[(7480)>>2]|0;
 $52 = ((($facetA)) + 76|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$skipA>>2]|0;
 $55 = ((($facetB)) + 76|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$skipB>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $53;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $54;
 $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
 HEAP32[$vararg_ptr6>>2] = $56;
 $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
 HEAP32[$vararg_ptr7>>2] = $57;
 _qh_fprintf($51,4047,31256,$vararg_buffer2);
 STACKTOP = sp;return ($48|0);
}
function _qh_gethash($hashsize,$set,$size,$firstindex,$skipelem) {
 $hashsize = $hashsize|0;
 $set = $set|0;
 $size = $size|0;
 $firstindex = $firstindex|0;
 $skipelem = $skipelem|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $elemp$0 = 0, $hash$0 = 0, $hash$1 = 0, $hash$2 = 0, $i$0 = 0, $i$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (((($set)) + 4|0) + ($firstindex<<2)|0);
 $1 = (($size) - ($firstindex))|0;
 switch ($1|0) {
 case 3:  {
  $14 = HEAP32[$0>>2]|0;
  $15 = $14;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;
  $19 = ((($0)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
  $22 = $skipelem;
  $23 = (($15) - ($22))|0;
  $24 = (($23) + ($18))|0;
  $25 = (($24) + ($21))|0;
  $hash$2 = $25;
  break;
 }
 case 6:  {
  $62 = HEAP32[$0>>2]|0;
  $63 = $62;
  $64 = ((($0)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $65;
  $67 = ((($0)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68;
  $70 = ((($0)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71;
  $73 = ((($0)) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74;
  $76 = ((($0)) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77;
  $79 = $skipelem;
  $80 = (($63) - ($79))|0;
  $81 = (($80) + ($66))|0;
  $82 = (($81) + ($69))|0;
  $83 = (($82) + ($72))|0;
  $84 = (($83) + ($75))|0;
  $85 = (($84) + ($78))|0;
  $hash$2 = $85;
  break;
 }
 case 4:  {
  $26 = HEAP32[$0>>2]|0;
  $27 = $26;
  $28 = ((($0)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29;
  $31 = ((($0)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32;
  $34 = ((($0)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35;
  $37 = $skipelem;
  $38 = (($27) - ($37))|0;
  $39 = (($38) + ($30))|0;
  $40 = (($39) + ($33))|0;
  $41 = (($40) + ($36))|0;
  $hash$2 = $41;
  break;
 }
 case 2:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = $6;
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
  $11 = $skipelem;
  $12 = (($7) - ($11))|0;
  $13 = (($12) + ($10))|0;
  $hash$2 = $13;
  break;
 }
 case 5:  {
  $42 = HEAP32[$0>>2]|0;
  $43 = $42;
  $44 = ((($0)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45;
  $47 = ((($0)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48;
  $50 = ((($0)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51;
  $53 = ((($0)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54;
  $56 = $skipelem;
  $57 = (($43) - ($56))|0;
  $58 = (($57) + ($46))|0;
  $59 = (($58) + ($49))|0;
  $60 = (($59) + ($52))|0;
  $61 = (($60) + ($55))|0;
  $hash$2 = $61;
  break;
 }
 case 1:  {
  $2 = HEAP32[$0>>2]|0;
  $3 = $2;
  $4 = $skipelem;
  $5 = (($3) - ($4))|0;
  $hash$2 = $5;
  break;
 }
 default: {
  $elemp$0 = $0;$hash$0 = 0;$i$0 = 3;
  while(1) {
   $86 = ((($elemp$0)) + 4|0);
   $87 = HEAP32[$elemp$0>>2]|0;
   $88 = $87;
   $89 = ($87|0)==($skipelem|0);
   if ($89) {
    $hash$1 = $hash$0;$i$1 = $i$0;
   } else {
    $90 = $88 << $i$0;
    $91 = (32 - ($i$0))|0;
    $92 = $88 >> $91;
    $93 = (($90) + ($92))|0;
    $94 = $93 ^ $hash$0;
    $95 = (($i$0) + 3)|0;
    $96 = ($95|0)>(31);
    $97 = (($i$0) + -29)|0;
    $$ = $96 ? $97 : $95;
    $hash$1 = $94;$i$1 = $$;
   }
   $98 = HEAP32[$86>>2]|0;
   $99 = ($98|0)==(0|0);
   if ($99) {
    $hash$2 = $hash$1;
    break;
   } else {
    $elemp$0 = $86;$hash$0 = $hash$1;$i$0 = $i$1;
   }
  }
 }
 }
 $100 = ($hashsize|0)<(0);
 if (!($100)) {
  $102 = (($hash$2>>>0) % ($hashsize>>>0))&-1;
  STACKTOP = sp;return ($102|0);
 }
 $101 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $hashsize;
 _qh_fprintf($101,6202,31312,$vararg_buffer);
 _qh_errexit2(5,0,0);
 $102 = (($hash$2>>>0) % ($hashsize>>>0))&-1;
 STACKTOP = sp;return ($102|0);
}
function _qh_makenewfacet($vertices,$toporient,$horizon) {
 $vertices = $vertices|0;
 $toporient = $toporient|0;
 $horizon = $horizon|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vertices|0)==(0|0);
 if (!($0)) {
  $1 = ((($vertices)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($1)) + 4|0);
   $15 = $4;$6 = $2;
   while(1) {
    $5 = ((($6)) + 16|0);
    $7 = $5;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)<(0);
    if (!($13)) {
     _qh_removevertex($6);
     _qh_appendvertex($6);
    }
    $14 = ((($15)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     break;
    } else {
     $15 = $14;$6 = $16;
    }
   }
  }
 }
 $18 = (_qh_newfacet()|0);
 $19 = ((($18)) + 52|0);
 HEAP32[$19>>2] = $vertices;
 $20 = ((($18)) + 80|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $toporient << 12;
 $23 = $22 & 4096;
 $24 = $21 & -4097;
 $25 = $24 | $23;
 HEAP32[$20>>2] = $25;
 $26 = ($horizon|0)==(0|0);
 if ($26) {
  _qh_appendfacet($18);
  return ($18|0);
 }
 $27 = ((($18)) + 60|0);
 _qh_setappend($27,$horizon);
 _qh_appendfacet($18);
 return ($18|0);
}
function _qh_removevertex($vertex) {
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$vertex>>2]|0;
 $1 = ((($vertex)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[(7548)>>2]|0;
 $4 = ($3|0)==($vertex|0);
 if ($4) {
  HEAP32[(7548)>>2] = $0;
 }
 $5 = ($2|0)==(0|0);
 if ($5) {
  $7 = HEAP32[$vertex>>2]|0;
  HEAP32[(7540)>>2] = $7;
  $8 = ((($7)) + 4|0);
  HEAP32[$8>>2] = 0;
 } else {
  HEAP32[$2>>2] = $0;
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = $2;
 }
 $9 = HEAP32[(7556)>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[(7556)>>2] = $10;
 $11 = HEAP32[(5344)>>2]|0;
 $12 = ($11|0)>(3);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[(7480)>>2]|0;
 $14 = ((($vertex)) + 16|0);
 $15 = $14;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 16777215;
 HEAP32[$vararg_buffer>>2] = $21;
 _qh_fprintf($13,4058,31392,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_newfacet() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_qh_memalloc(88)|0);
 dest=$0; stop=dest+88|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $1 = HEAP32[(7568)>>2]|0;
 $2 = HEAP32[(7524)>>2]|0;
 $3 = ($1|0)==($2|0);
 if ($3) {
  HEAP32[(7528)>>2] = $0;
 }
 $4 = HEAP32[(7568)>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[(7568)>>2] = $5;
 $6 = ((($0)) + 76|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[(5828)>>2]|0;
 $8 = (_qh_setnew($7)|0);
 $9 = ((($0)) + 60|0);
 HEAP32[$9>>2] = $8;
 HEAPF64[$0>>3] = 0.0;
 $10 = HEAP32[(5316)>>2]|0;
 $11 = ($10|0)!=(0);
 $12 = HEAP32[(5240)>>2]|0;
 $13 = ($12|0)!=(0);
 $or$cond = $11 & $13;
 if ($or$cond) {
  $14 = +HEAPF64[(5248)>>3];
  $15 = ((($0)) + 8|0);
  HEAPF64[$15>>3] = $14;
 } else {
  $16 = +HEAPF64[(6952)>>3];
  $17 = ((($0)) + 8|0);
  HEAPF64[$17>>3] = $16;
 }
 $18 = ((($0)) + 80|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 | 533504;
 HEAP32[$18>>2] = $20;
 $21 = HEAP32[(5344)>>2]|0;
 $22 = ($21|0)>(3);
 if (!($22)) {
  STACKTOP = sp;return ($0|0);
 }
 $23 = HEAP32[(7480)>>2]|0;
 $24 = HEAP32[$6>>2]|0;
 HEAP32[$vararg_buffer>>2] = $24;
 _qh_fprintf($23,4055,31440,$vararg_buffer);
 STACKTOP = sp;return ($0|0);
}
function _qh_makenewplanes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $newfacet$0 = 0, $newfacet$01 = 0, $newfacet$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $newfacet$01 = HEAP32[(7512)>>2]|0;
 $0 = ($newfacet$01|0)==(0|0);
 L1: do {
  if (!($0)) {
   $newfacet$02 = $newfacet$01;
   while(1) {
    $1 = ((($newfacet$02)) + 48|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = ($2|0)==(0|0);
    if ($3) {
     break L1;
    }
    $4 = ((($newfacet$02)) + 80|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5 & 33554432;
    $7 = ($6|0)==(0);
    if ($7) {
     _qh_setfacetplane($newfacet$02);
    }
    $newfacet$0 = HEAP32[$1>>2]|0;
    $8 = ($newfacet$0|0)==(0|0);
    if ($8) {
     break;
    } else {
     $newfacet$02 = $newfacet$0;
    }
   }
  }
 } while(0);
 $9 = +HEAPF64[(7616)>>3];
 $10 = $9 < 8.9884656743115785E+307;
 if (!($10)) {
  return;
 }
 $11 = +HEAPF64[(7648)>>3];
 $12 = +HEAPF64[(44336)>>3];
 $13 = -$12;
 $14 = $11 > $13;
 if (!($14)) {
  return;
 }
 HEAPF64[(7648)>>3] = $13;
 return;
}
function _qh_makenew_nonsimplicial($visible,$apex,$numnew) {
 $visible = $visible|0;
 $apex = $apex|0;
 $numnew = $numnew|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $newfacet$01 = 0, $newfacet$1 = 0, $newfacet$2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 24|0;
 $0 = ((($visible)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $newfacet$2 = 0;
 } else {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $newfacet$2 = 0;
  } else {
   $6 = ((($3)) + 4|0);
   $7 = ((($apex)) + 16|0);
   $8 = ((($visible)) + 76|0);
   $10 = $4;$96 = $6;$newfacet$01 = 0;
   while(1) {
    $9 = ((($10)) + 12|0);
    $11 = HEAP32[$9>>2]|0;
    $12 = $11 & 16777215;
    $13 = ((($10)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($visible|0);
    if ($15) {
     $16 = ((($10)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $19 = $17;
    } else {
     $19 = $14;
    }
    $18 = ((($19)) + 80|0);
    $20 = HEAP32[$18>>2]|0;
    $21 = $20 & 2048;
    $22 = ($21|0)==(0);
    do {
     if ($22) {
      $29 = HEAP32[$13>>2]|0;
      $30 = ($29|0)==($visible|0);
      $31 = $30&1;
      $32 = HEAP32[(5828)>>2]|0;
      $33 = (_qh_setnew($32)|0);
      HEAP32[$vertices>>2] = $33;
      _qh_setappend($vertices,$apex);
      $34 = HEAP32[$10>>2]|0;
      _qh_setappend_set($vertices,$34);
      $35 = HEAP32[$vertices>>2]|0;
      $36 = (_qh_makenewfacet($35,$31,$19)|0);
      $37 = HEAP32[$numnew>>2]|0;
      $38 = (($37) + 1)|0;
      HEAP32[$numnew>>2] = $38;
      $39 = HEAP32[$18>>2]|0;
      $40 = $39 & 16777216;
      $41 = ($40|0)==(0);
      do {
       if (!($41)) {
        $42 = ((($36)) + 80|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = $43 | 33554432;
        HEAP32[$42>>2] = $44;
        $45 = HEAP32[$18>>2]|0;
        $46 = $45 & 16384;
        $47 = ($46|0)==(0);
        if ($47) {
         $48 = ((($36)) + 32|0);
         HEAP32[$48>>2] = $36;
         $49 = ((($19)) + 32|0);
         HEAP32[$49>>2] = $36;
         break;
        } else {
         $50 = ((($19)) + 32|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ((($51)) + 32|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = ((($36)) + 32|0);
         HEAP32[$54>>2] = $53;
         HEAP32[$52>>2] = $36;
         break;
        }
       }
      } while(0);
      $55 = HEAP32[(5444)>>2]|0;
      $56 = ($55|0)==(0);
      $57 = HEAP32[$18>>2]|0;
      if (!($56)) {
       $58 = $57 & 8192;
       $59 = ($58|0)==(0);
       if (!($59)) {
        $newfacet$1 = $36;
        break;
       }
       $60 = ((($36)) + 56|0);
       _qh_setappend($60,$10);
       $newfacet$1 = $36;
       break;
      }
      $61 = $57 & 16384;
      $62 = ($61|0)==(0);
      if ($62) {
       $70 = ((($19)) + 60|0);
       $71 = HEAP32[$70>>2]|0;
       _qh_setreplace($71,$visible,$36);
      } else {
       $63 = $57 & 8192;
       $64 = ($63|0)==(0);
       if (!($64)) {
        $65 = HEAP32[(7480)>>2]|0;
        $66 = ((($19)) + 76|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = HEAP32[$8>>2]|0;
        HEAP32[$vararg_buffer>>2] = $67;
        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
        HEAP32[$vararg_ptr1>>2] = $68;
        _qh_fprintf($65,6105,31472,$vararg_buffer);
        _qh_errexit2(5,$19,$visible);
       }
       $69 = ((($19)) + 60|0);
       _qh_setappend($69,$36);
      }
      $72 = HEAP32[$18>>2]|0;
      $73 = $72 & 8192;
      $74 = ($73|0)==(0);
      do {
       if ($74) {
        $77 = ((($36)) + 56|0);
        _qh_setappend($77,$10);
        if ($30) {
         HEAP32[$13>>2] = $36;
         break;
        } else {
         $78 = ((($10)) + 8|0);
         HEAP32[$78>>2] = $36;
         break;
        }
       } else {
        $75 = ((($19)) + 56|0);
        $76 = HEAP32[$75>>2]|0;
        (_qh_setdel($76,$10)|0);
        _qh_setfree($10);
        _qh_memfree($10,16);
       }
      } while(0);
      $79 = HEAP32[(5344)>>2]|0;
      $80 = ($79|0)>(3);
      if ($80) {
       $81 = HEAP32[(7480)>>2]|0;
       $82 = ((($36)) + 76|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = $7;
       $85 = $84;
       $86 = HEAP32[$85>>2]|0;
       $87 = (($84) + 4)|0;
       $88 = $87;
       $89 = HEAP32[$88>>2]|0;
       $90 = $89 & 16777215;
       $91 = ((($19)) + 76|0);
       $92 = HEAP32[$91>>2]|0;
       HEAP32[$vararg_buffer2>>2] = $83;
       $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = $90;
       $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
       HEAP32[$vararg_ptr6>>2] = $12;
       $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
       HEAP32[$vararg_ptr7>>2] = $92;
       _qh_fprintf($81,4048,31568,$vararg_buffer2);
       $newfacet$1 = $36;
      } else {
       $newfacet$1 = $36;
      }
     } else {
      $23 = HEAP32[(5444)>>2]|0;
      $24 = ($23|0)==(0);
      if ($24) {
       $25 = ((($19)) + 72|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = HEAP32[(7720)>>2]|0;
       $28 = ($26|0)==($27|0);
       if ($28) {
        _qh_setfree($10);
        _qh_memfree($10,16);
        $newfacet$1 = $newfacet$01;
       } else {
        $newfacet$1 = $newfacet$01;
       }
      } else {
       $newfacet$1 = $newfacet$01;
      }
     }
    } while(0);
    $93 = HEAP32[$18>>2]|0;
    $94 = $93 | 16384;
    HEAP32[$18>>2] = $94;
    $95 = ((($96)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $newfacet$2 = $newfacet$1;
     break;
    } else {
     $10 = $97;$96 = $95;$newfacet$01 = $newfacet$1;
    }
   }
  }
 }
 $99 = HEAP32[(5444)>>2]|0;
 $100 = ($99|0)==(0);
 if (!($100)) {
  STACKTOP = sp;return ($newfacet$2|0);
 }
 $101 = HEAP32[$0>>2]|0;
 $102 = ((($101)) + 4|0);
 HEAP32[$102>>2] = 0;
 STACKTOP = sp;return ($newfacet$2|0);
}
function _qh_makenew_simplicial($visible,$apex,$numnew) {
 $visible = $visible|0;
 $apex = $apex|0;
 $numnew = $numnew|0;
 var $$lcssa = 0, $$lcssa13 = 0, $$lcssa14 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $horizonskip = 0, $neighborp$0 = 0, $neighborp$0$ph = 0, $newfacet$0$ph = 0, $newfacet$1 = 0, $toporient$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $visibleskip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $horizonskip = sp + 40|0;
 $visibleskip = sp + 36|0;
 $0 = ((($visible)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $newfacet$1 = 0;
  STACKTOP = sp;return ($newfacet$1|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = ((($apex)) + 16|0);
 $5 = ((($visible)) + 76|0);
 $neighborp$0$ph = $3;$newfacet$0$ph = 0;
 L4: while(1) {
  $neighborp$0 = $neighborp$0$ph;
  while(1) {
   $6 = ((($neighborp$0)) + 4|0);
   $7 = HEAP32[$neighborp$0>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $newfacet$1 = $newfacet$0$ph;
    break L4;
   }
   $9 = ((($7)) + 80|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 18432;
   $12 = ($11|0)==(0);
   if ($12) {
    $$lcssa = $9;$$lcssa13 = $6;$$lcssa14 = $7;
    break;
   } else {
    $neighborp$0 = $6;
   }
  }
  $13 = (_qh_facetintersect($$lcssa14,$visible,$horizonskip,$visibleskip,1)|0);
  $14 = ((($13)) + 4|0);
  HEAP32[$14>>2] = $apex;
  $15 = HEAP32[$horizonskip>>2]|0;
  $16 = $15 & 1;
  $17 = HEAP32[$visibleskip>>2]|0;
  $18 = $17 & 1;
  $19 = $18 ^ $16;
  $20 = HEAP32[$$lcssa>>2]|0;
  $21 = $20 >>> 12;
  $$lobit = $21 & 1;
  $22 = $16 ^ 1;
  $toporient$0 = $22 ^ $$lobit;
  $23 = (_qh_makenewfacet($13,$toporient$0,$$lcssa14)|0);
  $24 = HEAP32[$numnew>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[$numnew>>2] = $25;
  $26 = HEAP32[$$lcssa>>2]|0;
  $27 = $26 & 16777216;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $29 = HEAP32[(5460)>>2]|0;
   $30 = HEAP32[(5384)>>2]|0;
   $31 = $30 | $29;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = ((($23)) + 32|0);
    HEAP32[$33>>2] = $23;
    $34 = ((($23)) + 80|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 33554432;
    HEAP32[$34>>2] = $36;
   }
  }
  $37 = HEAP32[(5444)>>2]|0;
  $38 = ($37|0)==(0);
  if ($38) {
   $39 = HEAP32[$horizonskip>>2]|0;
   $40 = ((($$lcssa14)) + 60|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (((($41)) + 4|0) + ($39<<2)|0);
   HEAP32[$42>>2] = $23;
  }
  $43 = HEAP32[(5344)>>2]|0;
  $44 = ($43|0)>(3);
  if (!($44)) {
   $neighborp$0$ph = $$lcssa13;$newfacet$0$ph = $23;
   continue;
  }
  $45 = HEAP32[(7480)>>2]|0;
  $46 = ((($23)) + 76|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 & 16777215;
  $55 = ((($$lcssa14)) + 76|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$horizonskip>>2]|0;
  $58 = HEAP32[$$lcssa>>2]|0;
  $59 = $58 >>> 12;
  $60 = $59 & 1;
  $61 = HEAP32[$5>>2]|0;
  $62 = HEAP32[$visibleskip>>2]|0;
  HEAP32[$vararg_buffer>>2] = $47;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $toporient$0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $54;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $56;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $57;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $60;
  $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr6>>2] = $61;
  $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
  HEAP32[$vararg_ptr7>>2] = $62;
  $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
  HEAP32[$vararg_ptr8>>2] = $19;
  _qh_fprintf($45,4049,31648,$vararg_buffer);
  $neighborp$0$ph = $$lcssa13;$newfacet$0$ph = $23;
 }
 STACKTOP = sp;return ($newfacet$1|0);
}
function _qh_matchneighbor($newfacet,$newskip,$hashsize,$hashcount) {
 $newfacet = $newfacet|0;
 $newskip = $newskip|0;
 $hashsize = $hashsize|0;
 $hashcount = $hashcount|0;
 var $$lcssa = 0, $$lcssa16 = 0, $$lcssa27 = 0, $$lcssa28 = 0, $$mux = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $newfound$010 = 0, $newfound$1 = 0, $newfound$1$lcssa = 0, $or$cond = 0, $same = 0, $scan$09 = 0, $skip = 0, $vararg_buffer = 0, $vararg_buffer14 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr3 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer19 = sp;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer = sp + 72|0;
 $same = sp + 104|0;
 $skip = sp + 100|0;
 $0 = ((($newfacet)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[(5828)>>2]|0;
 $3 = (((($1)) + 4|0) + ($newskip<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_qh_gethash($hashsize,$1,$2,1,$4)|0);
 $6 = HEAP32[(5344)>>2]|0;
 $7 = ($6|0)>(3);
 if ($7) {
  $8 = HEAP32[(7480)>>2]|0;
  $9 = ((($newfacet)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$hashcount>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $newskip;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $5;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $11;
  _qh_fprintf($8,4050,31776,$vararg_buffer);
 }
 $12 = HEAP32[(43976)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(43976)>>2] = $13;
 $14 = HEAP32[(7744)>>2]|0;
 $15 = (((($14)) + 4|0) + ($5<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 do {
  if ($17) {
   $$lcssa16 = $15;
   label = 32;
  } else {
   $18 = $16;$newfound$010 = 0;$scan$09 = $5;
   while(1) {
    $19 = ($18|0)==($newfacet|0);
    if ($19) {
     $newfound$1 = 1;
    } else {
     $20 = HEAP32[(44000)>>2]|0;
     $21 = (($20) + 1)|0;
     HEAP32[(44000)>>2] = $21;
     $22 = HEAP32[$0>>2]|0;
     $23 = ((($18)) + 52|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_qh_matchvertices(1,$22,$newskip,$24,$skip,$same)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $newfound$1 = $newfound$010;
     } else {
      $$lcssa = $18;$$lcssa27 = $23;
      break;
     }
    }
    $129 = (($scan$09) + 1)|0;
    $130 = ($129|0)>=($hashsize|0);
    $131 = $130 ? 0 : $129;
    $132 = HEAP32[(7744)>>2]|0;
    $133 = (((($132)) + 4|0) + ($131<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134|0)==(0|0);
    if ($135) {
     $$lcssa28 = $133;$newfound$1$lcssa = $newfound$1;
     label = 31;
     break;
    } else {
     $18 = $134;$newfound$010 = $newfound$1;$scan$09 = $131;
    }
   }
   if ((label|0) == 31) {
    $136 = ($newfound$1$lcssa|0)==(0);
    if ($136) {
     $$lcssa16 = $$lcssa28;
     label = 32;
     break;
    } else {
     break;
    }
   }
   $27 = HEAP32[$0>>2]|0;
   $28 = (((($27)) + 4|0) + ($newskip<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$skip>>2]|0;
   $31 = HEAP32[$$lcssa27>>2]|0;
   $32 = (((($31)) + 4|0) + ($30<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($29|0)==($33|0);
   if ($34) {
    _qh_precision(31840);
    $35 = HEAP32[(7480)>>2]|0;
    $36 = ((($$lcssa)) + 76|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($newfacet)) + 76|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $37;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $39;
    _qh_fprintf($35,6106,31880,$vararg_buffer4);
    _qh_errexit2(3,$$lcssa,$newfacet);
   }
   $40 = HEAP32[$same>>2]|0;
   $41 = ((($newfacet)) + 80|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($$lcssa)) + 80|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 ^ $42;
   $46 = $45 >>> 12;
   $47 = $46 & 1;
   $48 = ($40|0)==($47|0);
   $49 = $48&1;
   $50 = HEAP32[$skip>>2]|0;
   $51 = ((($$lcssa)) + 60|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (((($52)) + 4|0) + ($50<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $48 ^ 1;
   $56 = ($54|0)!=(0|0);
   $or$cond = $56 | $55;
   if (!($or$cond)) {
    HEAP32[$53>>2] = $newfacet;
    $57 = ((($newfacet)) + 60|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($58)) + 4|0) + ($newskip<<2)|0);
    HEAP32[$59>>2] = $$lcssa;
    $60 = HEAP32[$hashcount>>2]|0;
    $61 = (($60) + -1)|0;
    HEAP32[$hashcount>>2] = $61;
    $62 = HEAP32[(5344)>>2]|0;
    $63 = ($62|0)>(3);
    if (!($63)) {
     STACKTOP = sp;return;
    }
    $64 = HEAP32[(7480)>>2]|0;
    $65 = ((($$lcssa)) + 76|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP32[$skip>>2]|0;
    $68 = ((($newfacet)) + 76|0);
    $69 = HEAP32[$68>>2]|0;
    HEAP32[$vararg_buffer8>>2] = $66;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $67;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $69;
    $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
    HEAP32[$vararg_ptr13>>2] = $newskip;
    _qh_fprintf($64,4051,31976,$vararg_buffer8);
    STACKTOP = sp;return;
   }
   $70 = HEAP32[(5460)>>2]|0;
   $71 = HEAP32[(5384)>>2]|0;
   $72 = $71 | $70;
   $73 = ($72|0)==(0);
   if ($73) {
    _qh_precision(32040);
    $74 = HEAP32[(7480)>>2]|0;
    $75 = ((($$lcssa)) + 76|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($newfacet)) + 76|0);
    $78 = HEAP32[$77>>2]|0;
    if ($56) {
     $79 = ((($54)) + 76|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80;
    } else {
     $81 = -1;
    }
    HEAP32[$vararg_buffer14>>2] = $76;
    $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
    HEAP32[$vararg_ptr17>>2] = $78;
    $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
    HEAP32[$vararg_ptr18>>2] = $81;
    _qh_fprintf($74,6107,32080,$vararg_buffer14);
    _qh_errexit2(3,$$lcssa,$newfacet);
   }
   $82 = ((($newfacet)) + 60|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (((($83)) + 4|0) + ($newskip<<2)|0);
   HEAP32[$84>>2] = (1);
   $85 = HEAP32[$41>>2]|0;
   $86 = $85 | 2097152;
   HEAP32[$41>>2] = $86;
   $87 = ((($newfacet)) + 24|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(0|0);
   if ($89) {
    _qh_setfacetplane($newfacet);
   }
   $90 = HEAP32[(7744)>>2]|0;
   _qh_addhash($newfacet,$90,$hashsize,$5);
   $91 = HEAP32[$hashcount>>2]|0;
   $92 = (($91) + 1)|0;
   HEAP32[$hashcount>>2] = $92;
   $93 = ((($$lcssa)) + 24|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    _qh_setfacetplane($$lcssa);
   }
   $96 = ($54|0)==((1)|0);
   if (!($96)) {
    $97 = HEAP32[$skip>>2]|0;
    $98 = HEAP32[$51>>2]|0;
    $99 = (((($98)) + 4|0) + ($97<<2)|0);
    HEAP32[$99>>2] = (1);
    $100 = HEAP32[$43>>2]|0;
    $101 = $100 | 2097152;
    HEAP32[$43>>2] = $101;
    $102 = HEAP32[$93>>2]|0;
    $103 = ($102|0)==(0|0);
    if ($103) {
     _qh_setfacetplane($$lcssa);
    }
    if ($56) {
     $104 = ((($54)) + 60|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (_qh_setindex($105,$$lcssa)|0);
     $107 = HEAP32[$104>>2]|0;
     $108 = (((($107)) + 4|0) + ($106<<2)|0);
     HEAP32[$108>>2] = (1);
     $109 = ((($54)) + 80|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 | 2097152;
     HEAP32[$109>>2] = $111;
     $112 = ((($54)) + 24|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)==(0|0);
     if ($114) {
      _qh_setfacetplane($54);
     }
     $115 = HEAP32[(7744)>>2]|0;
     _qh_addhash($54,$115,$hashsize,$5);
     $116 = HEAP32[$hashcount>>2]|0;
     $117 = (($116) + 2)|0;
     HEAP32[$hashcount>>2] = $117;
    }
   }
   $118 = HEAP32[(5344)>>2]|0;
   $119 = ($118|0)>(3);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   $120 = HEAP32[(7480)>>2]|0;
   $121 = ((($newfacet)) + 76|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($$lcssa)) + 76|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = HEAP32[$skip>>2]|0;
   $$not = $56 ^ 1;
   $brmerge = $96 | $$not;
   $$mux = $96 ? -2 : -1;
   if ($brmerge) {
    $128 = $$mux;
   } else {
    $126 = ((($54)) + 76|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $127;
   }
   HEAP32[$vararg_buffer19>>2] = $122;
   $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
   HEAP32[$vararg_ptr22>>2] = $newskip;
   $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
   HEAP32[$vararg_ptr23>>2] = $124;
   $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
   HEAP32[$vararg_ptr24>>2] = $125;
   $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
   HEAP32[$vararg_ptr25>>2] = $128;
   $vararg_ptr26 = ((($vararg_buffer19)) + 20|0);
   HEAP32[$vararg_ptr26>>2] = $49;
   $vararg_ptr27 = ((($vararg_buffer19)) + 24|0);
   HEAP32[$vararg_ptr27>>2] = $5;
   _qh_fprintf($120,4052,32192,$vararg_buffer19);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 32) {
  HEAP32[$$lcssa16>>2] = $newfacet;
 }
 $137 = HEAP32[$hashcount>>2]|0;
 $138 = (($137) + 1)|0;
 HEAP32[$hashcount>>2] = $138;
 $139 = HEAP32[(5344)>>2]|0;
 $140 = ($139|0)>(3);
 if (!($140)) {
  STACKTOP = sp;return;
 }
 $141 = HEAP32[(7480)>>2]|0;
 $142 = ((($newfacet)) + 76|0);
 $143 = HEAP32[$142>>2]|0;
 HEAP32[$vararg_buffer28>>2] = $143;
 $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
 HEAP32[$vararg_ptr31>>2] = $newskip;
 $vararg_ptr32 = ((($vararg_buffer28)) + 8|0);
 HEAP32[$vararg_ptr32>>2] = $5;
 _qh_fprintf($141,4053,32296,$vararg_buffer28);
 STACKTOP = sp;return;
}
function _qh_matchvertices($firstindex,$verticesA,$skipA,$verticesB,$skipB,$same) {
 $firstindex = $firstindex|0;
 $verticesA = $verticesA|0;
 $skipA = $skipA|0;
 $verticesB = $verticesB|0;
 $skipB = $skipB|0;
 $same = $same|0;
 var $$0 = 0, $$skipBp$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elemAp$0 = 0, $elemBp$0 = 0, $elemBp$1 = 0, $elemBp$2 = 0, $elemBp$2$lcssa = 0, $skipBp$0 = 0, $skipBp$1 = 0, $skipBp$2 = 0, $skipBp$2$lcssa = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (((($verticesA)) + 4|0) + ($firstindex<<2)|0);
 $1 = (((($verticesB)) + 4|0) + ($firstindex<<2)|0);
 $2 = (((($verticesA)) + 4|0) + ($skipA<<2)|0);
 $elemAp$0 = $0;$elemBp$0 = $1;$skipBp$0 = 0;
 L1: while(1) {
  $3 = ($elemAp$0|0)==($2|0);
  L3: do {
   if ($3) {
    $elemBp$2 = $elemBp$0;$skipBp$2 = $skipBp$0;
   } else {
    $4 = HEAP32[$elemAp$0>>2]|0;
    $elemBp$1 = $elemBp$0;$skipBp$1 = $skipBp$0;
    while(1) {
     $5 = ((($elemBp$1)) + 4|0);
     $6 = HEAP32[$elemBp$1>>2]|0;
     $7 = ($4|0)==($6|0);
     if ($7) {
      $elemBp$2 = $5;$skipBp$2 = $skipBp$1;
      break L3;
     }
     $8 = ($skipBp$1|0)==(0|0);
     if ($8) {
      $elemBp$1 = $5;$skipBp$1 = $5;
     } else {
      $$0 = 0;
      label = 9;
      break L1;
     }
    }
   }
  } while(0);
  $9 = ((($elemAp$0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $elemBp$2$lcssa = $elemBp$2;$skipBp$2$lcssa = $skipBp$2;
   break;
  } else {
   $elemAp$0 = $9;$elemBp$0 = $elemBp$2;$skipBp$0 = $skipBp$2;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($skipBp$2$lcssa|0)==(0|0);
 $13 = ((($elemBp$2$lcssa)) + 4|0);
 $$skipBp$2 = $12 ? $13 : $skipBp$2$lcssa;
 $14 = ((($verticesB)) + 8|0);
 $15 = $$skipBp$2;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 HEAP32[$skipB>>2] = $18;
 $19 = $18 ^ $skipA;
 $20 = $19 & 1;
 $21 = $20 ^ 1;
 HEAP32[$same>>2] = $21;
 $22 = HEAP32[(5344)>>2]|0;
 $23 = ($22|0)>(3);
 if (!($23)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = HEAP32[(7480)>>2]|0;
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($25)) + 16|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 16777215;
 $34 = HEAP32[$skipB>>2]|0;
 $35 = ((($$skipBp$2)) + -4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 16|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 16777215;
 HEAP32[$vararg_buffer>>2] = $skipA;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $33;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $34;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $44;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $21;
 _qh_fprintf($24,4054,32352,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _qh_matchnewfacets() {
 var $$numfree$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $exitcond = 0, $exitcond39 = 0, $facet$016 = 0, $facet_i$014 = 0, $hashcount = 0;
 var $neighbor$018 = 0, $neighbor_i$019 = 0, $newfacet$0 = 0, $newfacet$031 = 0, $newfacet$033 = 0, $newfacet$1 = 0, $newfacet$127 = 0, $newfacet$128 = 0, $newfacet$2 = 0, $newfacet$221 = 0, $newfacet$222 = 0, $newfacet$3 = 0, $newfacet$311 = 0, $newfacet$312 = 0, $newskip$025 = 0, $numfree$015 = 0, $numfree$2 = 0, $numnew$0$lcssa = 0, $numnew$032 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $hashcount = sp + 28|0;
 HEAP32[$hashcount>>2] = 0;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = HEAP32[(5344)>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($3,1019,32424,$vararg_buffer);
 }
 $newfacet$031 = HEAP32[(7512)>>2]|0;
 $4 = ($newfacet$031|0)==(0|0);
 L4: do {
  if ($4) {
   $numnew$0$lcssa = 0;
  } else {
   $5 = (($0) + 1)|0;
   $6 = $0 << 2;
   $newfacet$033 = $newfacet$031;$numnew$032 = 0;
   while(1) {
    $7 = ((($newfacet$033)) + 48|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $numnew$0$lcssa = $numnew$032;
     break L4;
    }
    $10 = (($numnew$032) + 1)|0;
    $11 = ((($newfacet$033)) + 60|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    $14 = (((($12)) + 4|0) + ($13<<2)|0);
    HEAP32[$14>>2] = $5;
    $15 = ((($12)) + 8|0);
    _memset(($15|0),0,($6|0))|0;
    $newfacet$0 = HEAP32[$7>>2]|0;
    $16 = ($newfacet$0|0)==(0|0);
    if ($16) {
     $numnew$0$lcssa = $10;
     break;
    } else {
     $newfacet$033 = $newfacet$0;$numnew$032 = $10;
    }
   }
  }
 } while(0);
 $17 = HEAP32[(5828)>>2]|0;
 $18 = (($17) + -1)|0;
 $19 = Math_imul($18, $numnew$0$lcssa)|0;
 (_qh_newhashtable($19)|0);
 $20 = HEAP32[(7744)>>2]|0;
 $21 = (_qh_setsize($20)|0);
 $newfacet$127 = HEAP32[(7512)>>2]|0;
 $22 = ($newfacet$127|0)==(0|0);
 L10: do {
  if (!($22)) {
   $newfacet$128 = $newfacet$127;
   while(1) {
    $23 = ((($newfacet$128)) + 48|0);
    $25 = HEAP32[$23>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     break L10;
    }
    $27 = HEAP32[(5828)>>2]|0;
    $28 = ($27|0)>(1);
    if ($28) {
     $newskip$025 = 1;
     while(1) {
      _qh_matchneighbor($newfacet$128,$newskip$025,$21,$hashcount);
      $29 = (($newskip$025) + 1)|0;
      $30 = HEAP32[(5828)>>2]|0;
      $31 = ($29|0)<($30|0);
      if ($31) {
       $newskip$025 = $29;
      } else {
       break;
      }
     }
    }
    $newfacet$1 = HEAP32[$23>>2]|0;
    $24 = ($newfacet$1|0)==(0|0);
    if ($24) {
     break;
    } else {
     $newfacet$128 = $newfacet$1;
    }
   }
  }
 } while(0);
 $32 = HEAP32[$hashcount>>2]|0;
 $33 = ($32|0)==(0);
 if (!($33)) {
  $newfacet$221 = HEAP32[(7512)>>2]|0;
  $34 = ($newfacet$221|0)==(0|0);
  L21: do {
   if (!($34)) {
    $newfacet$222 = $newfacet$221;
    while(1) {
     $35 = ((($newfacet$222)) + 48|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      break L21;
     }
     $38 = ((($newfacet$222)) + 80|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $39 & 2097152;
     $41 = ($40|0)==(0);
     if (!($41)) {
      $42 = ((($newfacet$222)) + 60|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(0|0);
      if (!($44)) {
       $46 = ((($43)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (_qh_setsize($43)|0);
       $49 = ($48|0)>(0);
       if ($49) {
        $neighbor$018 = $47;$neighbor_i$019 = 0;
        while(1) {
         $50 = ($neighbor$018|0)==((1)|0);
         if ($50) {
          _qh_matchduplicates($newfacet$222,$neighbor_i$019,$21,$hashcount);
         }
         $51 = (($neighbor_i$019) + 1)|0;
         $52 = HEAP32[$42>>2]|0;
         $53 = (((($52)) + 4|0) + ($51<<2)|0);
         $54 = HEAP32[$53>>2]|0;
         $exitcond39 = ($51|0)==($48|0);
         if ($exitcond39) {
          break;
         } else {
          $neighbor$018 = $54;$neighbor_i$019 = $51;
         }
        }
       }
      }
     }
     $newfacet$2 = HEAP32[$35>>2]|0;
     $45 = ($newfacet$2|0)==(0|0);
     if ($45) {
      break;
     } else {
      $newfacet$222 = $newfacet$2;
     }
    }
   }
  } while(0);
  $$pr = HEAP32[$hashcount>>2]|0;
  $55 = ($$pr|0)==(0);
  if (!($55)) {
   $56 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $$pr;
   _qh_fprintf($56,6108,32480,$vararg_buffer1);
   $57 = HEAP32[(7480)>>2]|0;
   _qh_printhashtable($57);
   _qh_errexit(5,0,0);
   // unreachable;
  }
 }
 $58 = HEAP32[(5344)>>2]|0;
 $59 = ($58|0)>(1);
 if ($59) {
  $60 = HEAP32[(7744)>>2]|0;
  $61 = ($60|0)==(0|0);
  if ($61) {
   $numfree$2 = 0;
  } else {
   $62 = ((($60)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (_qh_setsize($60)|0);
   $65 = ($64|0)>(0);
   if ($65) {
    $66 = HEAP32[(7744)>>2]|0;
    $facet$016 = $63;$facet_i$014 = 0;$numfree$015 = 0;
    while(1) {
     $67 = ($facet$016|0)==(0|0);
     $68 = $67&1;
     $$numfree$0 = (($68) + ($numfree$015))|0;
     $69 = (($facet_i$014) + 1)|0;
     $70 = (((($66)) + 4|0) + ($69<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $exitcond = ($69|0)==($64|0);
     if ($exitcond) {
      $numfree$2 = $$numfree$0;
      break;
     } else {
      $facet$016 = $71;$facet_i$014 = $69;$numfree$015 = $$numfree$0;
     }
    }
   } else {
    $numfree$2 = 0;
   }
  }
  $72 = HEAP32[(7480)>>2]|0;
  $73 = HEAP32[(7744)>>2]|0;
  $74 = (_qh_setsize($73)|0);
  HEAP32[$vararg_buffer3>>2] = $numnew$0$lcssa;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $numfree$2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $74;
  _qh_fprintf($72,8089,32560,$vararg_buffer3);
 }
 _qh_setfree((7744));
 $75 = HEAP32[(5460)>>2]|0;
 $76 = HEAP32[(5384)>>2]|0;
 $77 = $76 | $75;
 $78 = ($77|0)==(0);
 if ($78) {
  $90 = HEAP32[(5316)>>2]|0;
  $91 = ($90|0)==(0);
  if ($91) {
   STACKTOP = sp;return;
  }
  $92 = HEAP32[(7512)>>2]|0;
  _qh_checkflipped_all($92);
  STACKTOP = sp;return;
 }
 $79 = HEAP32[(5344)>>2]|0;
 $80 = ($79|0)>(3);
 if ($80) {
  $81 = HEAP32[(7512)>>2]|0;
  _qh_printfacetlist($81,0,1);
 }
 $newfacet$311 = HEAP32[(7512)>>2]|0;
 $82 = ($newfacet$311|0)==(0|0);
 if ($82) {
  STACKTOP = sp;return;
 } else {
  $newfacet$312 = $newfacet$311;
 }
 while(1) {
  $83 = ((($newfacet$312)) + 48|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==(0|0);
  if ($85) {
   label = 40;
   break;
  }
  $86 = ((($newfacet$312)) + 24|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   (_qh_checkflipped($newfacet$312,0,1)|0);
  }
  $newfacet$3 = HEAP32[$83>>2]|0;
  $89 = ($newfacet$3|0)==(0|0);
  if ($89) {
   label = 40;
   break;
  } else {
   $newfacet$312 = $newfacet$3;
  }
 }
 if ((label|0) == 40) {
  STACKTOP = sp;return;
 }
}
function _qh_newridge() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_qh_memalloc(16)|0);
 dest=$0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $1 = HEAP32[(44792)>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[(44792)>>2] = $2;
 $3 = HEAP32[(7572)>>2]|0;
 $4 = $3 & 16777215;
 $5 = ($4|0)==(16777215);
 if ($5) {
  $6 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = 16777215;
  _qh_fprintf($6,7074,32640,$vararg_buffer);
 }
 $7 = HEAP32[(7572)>>2]|0;
 $8 = $7 & 16777215;
 $9 = (($7) + 1)|0;
 $10 = $9 & 16777215;
 $11 = $7 & -16777216;
 $12 = $10 | $11;
 HEAP32[(7572)>>2] = $12;
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -16777216;
 $16 = $15 | $8;
 HEAP32[$13>>2] = $16;
 $17 = HEAP32[(5344)>>2]|0;
 $18 = ($17|0)>(3);
 if (!($18)) {
  STACKTOP = sp;return ($0|0);
 }
 $19 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $8;
 _qh_fprintf($19,4056,32768,$vararg_buffer1);
 STACKTOP = sp;return ($0|0);
}
function _qh_pointid($point) {
 $point = $point|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($point|0)==(0|0);
 if ($0) {
  $$0 = -3;
  return ($$0|0);
 }
 $1 = HEAP32[(7484)>>2]|0;
 $2 = ($1|0)==($point|0);
 if ($2) {
  $$0 = -2;
  return ($$0|0);
 }
 $3 = HEAP32[(5840)>>2]|0;
 $4 = ($3>>>0)>($point>>>0);
 if (!($4)) {
  $5 = HEAP32[(5836)>>2]|0;
  $6 = HEAP32[(5828)>>2]|0;
  $7 = Math_imul($6, $5)|0;
  $8 = (($3) + ($7<<3)|0);
  $9 = ($8>>>0)>($point>>>0);
  if ($9) {
   $10 = $point;
   $11 = $3;
   $12 = (($10) - ($11))|0;
   $13 = $12 >> 3;
   $14 = (($13|0) / ($6|0))&-1;
   $$0 = $14;
   return ($$0|0);
  }
 }
 $15 = HEAP32[(7748)>>2]|0;
 $16 = (_qh_setindex($15,$point)|0);
 $17 = ($16|0)==(-1);
 if ($17) {
  $$0 = -1;
  return ($$0|0);
 }
 $18 = HEAP32[(5836)>>2]|0;
 $19 = (($18) + ($16))|0;
 $$0 = $19;
 return ($$0|0);
}
function _qh_updatevertices() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $neighborp$030 = 0, $neighborp$030$phi = 0, $neighborp$1 = 0, $newfacet$0 = 0, $newfacet$027 = 0, $newfacet$028 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $vertex$0 = 0, $vertex$032 = 0, $vertex$033 = 0, $vertexp$025 = 0, $visible$0 = 0;
 var $visible$022 = 0, $visible$023 = 0, $visible$1 = 0, $visible$117 = 0, $visible$118 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,3013,32800,$vararg_buffer);
 }
 $3 = HEAP32[(6900)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $visible$117 = HEAP32[(7516)>>2]|0;
  $6 = ($visible$117|0)==(0|0);
  if ($6) {
   STACKTOP = sp;return;
  } else {
   $visible$118 = $visible$117;
  }
  while(1) {
   $112 = ((($visible$118)) + 80|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 & 2048;
   $115 = ($114|0)==(0);
   if ($115) {
    label = 45;
    break;
   }
   $116 = ((($visible$118)) + 52|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117|0)==(0|0);
   if (!($118)) {
    $119 = ((($117)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120|0)==(0|0);
    if (!($121)) {
     $122 = ((($119)) + 4|0);
     $123 = ((($visible$118)) + 76|0);
     $125 = $120;$145 = $122;
     while(1) {
      $124 = ((($125)) + 16|0);
      $126 = $124;
      $127 = $126;
      $128 = HEAP32[$127>>2]|0;
      $129 = (($126) + 4)|0;
      $130 = $129;
      $131 = HEAP32[$130>>2]|0;
      $132 = ($131>>>0)<(1073741824);
      $133 = ($128>>>0)<(0);
      $134 = ($131|0)==(1073741824);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $137 = $131 | 1073741824;
       $138 = $124;
       $139 = $138;
       HEAP32[$139>>2] = $128;
       $140 = (($138) + 4)|0;
       $141 = $140;
       HEAP32[$141>>2] = $137;
       _qh_setappend((7752),$125);
       $142 = HEAP32[(5344)>>2]|0;
       $143 = ($142|0)>(1);
       if ($143) {
        $148 = HEAP32[(7480)>>2]|0;
        $149 = ((($125)) + 8|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = (_qh_pointid($150)|0);
        $152 = $124;
        $153 = $152;
        $154 = HEAP32[$153>>2]|0;
        $155 = (($152) + 4)|0;
        $156 = $155;
        $157 = HEAP32[$156>>2]|0;
        $158 = $157 & 16777215;
        $159 = HEAP32[$123>>2]|0;
        HEAP32[$vararg_buffer5>>2] = $151;
        $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
        HEAP32[$vararg_ptr8>>2] = $158;
        $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
        HEAP32[$vararg_ptr9>>2] = $159;
        _qh_fprintf($148,2042,32880,$vararg_buffer5);
       }
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==(0|0);
      if ($147) {
       break;
      } else {
       $125 = $146;$145 = $144;
      }
     }
    }
   }
   $160 = ((($visible$118)) + 48|0);
   $visible$1 = HEAP32[$160>>2]|0;
   $161 = ($visible$1|0)==(0|0);
   if ($161) {
    label = 45;
    break;
   } else {
    $visible$118 = $visible$1;
   }
  }
  if ((label|0) == 45) {
   STACKTOP = sp;return;
  }
 }
 $vertex$032 = HEAP32[(7548)>>2]|0;
 $5 = ($vertex$032|0)==(0|0);
 L25: do {
  if (!($5)) {
   $vertex$033 = $vertex$032;
   while(1) {
    $8 = HEAP32[$vertex$033>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     break L25;
    }
    $10 = ((($vertex$033)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     $13 = ((($11)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0|0);
     if (!($15)) {
      $16 = ((($13)) + 4|0);
      $18 = $14;$23 = $16;$neighborp$030 = $13;
      while(1) {
       $17 = ((($18)) + 80|0);
       $19 = HEAP32[$17>>2]|0;
       $20 = $19 & 2048;
       $21 = ($20|0)==(0);
       if (!($21)) {
        HEAP32[$neighborp$030>>2] = 0;
       }
       $22 = ((($23)) + 4|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        break;
       } else {
        $neighborp$030$phi = $23;$18 = $24;$23 = $22;$neighborp$030 = $neighborp$030$phi;
       }
      }
     }
    }
    $26 = HEAP32[$10>>2]|0;
    _qh_setcompact($26);
    $vertex$0 = HEAP32[$vertex$033>>2]|0;
    $27 = ($vertex$0|0)==(0|0);
    if ($27) {
     break;
    } else {
     $vertex$033 = $vertex$0;
    }
   }
  }
 } while(0);
 $newfacet$027 = HEAP32[(7512)>>2]|0;
 $7 = ($newfacet$027|0)==(0|0);
 L39: do {
  if (!($7)) {
   $newfacet$028 = $newfacet$027;
   while(1) {
    $29 = ((($newfacet$028)) + 48|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     break L39;
    }
    $32 = ((($newfacet$028)) + 52|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $36 = ((($33)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(0|0);
     if (!($38)) {
      $41 = $37;$vertexp$025 = $36;
      while(1) {
       $39 = ((($vertexp$025)) + 4|0);
       $40 = ((($41)) + 12|0);
       _qh_setappend($40,$newfacet$028);
       $42 = HEAP32[$39>>2]|0;
       $43 = ($42|0)==(0|0);
       if ($43) {
        break;
       } else {
        $41 = $42;$vertexp$025 = $39;
       }
      }
     }
    }
    $newfacet$0 = HEAP32[$29>>2]|0;
    $35 = ($newfacet$0|0)==(0|0);
    if ($35) {
     break;
    } else {
     $newfacet$028 = $newfacet$0;
    }
   }
  }
 } while(0);
 $visible$022 = HEAP32[(7516)>>2]|0;
 $28 = ($visible$022|0)==(0|0);
 if ($28) {
  STACKTOP = sp;return;
 } else {
  $visible$023 = $visible$022;
 }
 while(1) {
  $44 = ((($visible$023)) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $45 & 2048;
  $47 = ($46|0)==(0);
  if ($47) {
   label = 45;
   break;
  }
  $48 = ((($visible$023)) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   $51 = ((($49)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    $54 = ((($51)) + 4|0);
    $55 = ((($visible$023)) + 76|0);
    $57 = $52;$82 = $54;
    while(1) {
     $56 = ((($57)) + 16|0);
     $58 = $56;
     $59 = $58;
     $60 = HEAP32[$59>>2]|0;
     $61 = (($58) + 4)|0;
     $62 = $61;
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63>>>0)<(1073741824);
     $65 = ($60>>>0)<(0);
     $66 = ($63|0)==(1073741824);
     $67 = $66 & $65;
     $68 = $64 | $67;
     L60: do {
      if ($68) {
       $69 = ((($57)) + 12|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)==(0|0);
       L62: do {
        if (!($71)) {
         $72 = ((($70)) + 4|0);
         $neighborp$1 = $72;
         while(1) {
          $73 = HEAP32[$neighborp$1>>2]|0;
          $74 = ($73|0)==(0|0);
          if ($74) {
           break L62;
          }
          $75 = ((($neighborp$1)) + 4|0);
          $76 = ((($73)) + 80|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = $77 & 2048;
          $79 = ($78|0)==(0);
          if ($79) {
           break;
          } else {
           $neighborp$1 = $75;
          }
         }
         $80 = HEAP32[$69>>2]|0;
         (_qh_setdel($80,$visible$023)|0);
         break L60;
        }
       } while(0);
       $85 = $56;
       $86 = $85;
       $87 = HEAP32[$86>>2]|0;
       $88 = (($85) + 4)|0;
       $89 = $88;
       $90 = HEAP32[$89>>2]|0;
       $91 = $90 | 1073741824;
       $92 = $56;
       $93 = $92;
       HEAP32[$93>>2] = $87;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $91;
       _qh_setappend((7752),$57);
       $96 = HEAP32[(5344)>>2]|0;
       $97 = ($96|0)>(1);
       if ($97) {
        $98 = HEAP32[(7480)>>2]|0;
        $99 = ((($57)) + 8|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = (_qh_pointid($100)|0);
        $102 = $56;
        $103 = $102;
        $104 = HEAP32[$103>>2]|0;
        $105 = (($102) + 4)|0;
        $106 = $105;
        $107 = HEAP32[$106>>2]|0;
        $108 = $107 & 16777215;
        $109 = HEAP32[$55>>2]|0;
        HEAP32[$vararg_buffer1>>2] = $101;
        $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
        HEAP32[$vararg_ptr3>>2] = $108;
        $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
        HEAP32[$vararg_ptr4>>2] = $109;
        _qh_fprintf($98,2041,32880,$vararg_buffer1);
       }
      }
     } while(0);
     $81 = ((($82)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      break;
     } else {
      $57 = $83;$82 = $81;
     }
    }
   }
  }
  $110 = ((($visible$023)) + 48|0);
  $visible$0 = HEAP32[$110>>2]|0;
  $111 = ($visible$0|0)==(0|0);
  if ($111) {
   label = 45;
   break;
  } else {
   $visible$023 = $visible$0;
  }
 }
 if ((label|0) == 45) {
  STACKTOP = sp;return;
 }
}
function _qh_addhash($newelem,$hashtable,$hashsize,$hash) {
 $newelem = $newelem|0;
 $hashtable = $hashtable|0;
 $hashsize = $hashsize|0;
 $hash = $hash|0;
 var $$lcssa = 0, $$lcssa1 = 0, $$not = 0, $$not2 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $scan$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((($hashtable)) + 4|0) + ($hash<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$not2 = $2 ^ 1;
 $3 = ($1|0)==($newelem|0);
 $or$cond3 = $3 | $$not2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa1 = $2;
 } else {
  $scan$04 = $hash;
  while(1) {
   $4 = (($scan$04) + 1)|0;
   $5 = ($4|0)>=($hashsize|0);
   $6 = $5 ? 0 : $4;
   $7 = (((($hashtable)) + 4|0) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   $$not = $9 ^ 1;
   $10 = ($8|0)==($newelem|0);
   $or$cond = $10 | $$not;
   if ($or$cond) {
    $$lcssa = $7;$$lcssa1 = $9;
    break;
   } else {
    $scan$04 = $6;
   }
  }
 }
 if ($$lcssa1) {
  return;
 }
 HEAP32[$$lcssa>>2] = $newelem;
 return;
}
function _qh_point($id) {
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)<(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[(5836)>>2]|0;
 $2 = ($1|0)>($id|0);
 if ($2) {
  $3 = HEAP32[(5840)>>2]|0;
  $4 = HEAP32[(5828)>>2]|0;
  $5 = Math_imul($4, $id)|0;
  $6 = (($3) + ($5<<3)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = (($id) - ($1))|0;
 $8 = HEAP32[(7748)>>2]|0;
 $9 = (_qh_setsize($8)|0);
 $10 = ($7|0)<($9|0);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = HEAP32[(7748)>>2]|0;
 $12 = (((($11)) + 4|0) + ($7<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $$0 = $13;
 return ($$0|0);
}
function _qh_pointvertex() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vertex$0 = 0, $vertex$01 = 0, $vertex$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5836)>>2]|0;
 $1 = HEAP32[(7748)>>2]|0;
 $2 = (_qh_setsize($1)|0);
 $3 = (($2) + ($0))|0;
 $4 = (_qh_settemp($3)|0);
 _qh_setzero($4,0,$3);
 $vertex$01 = HEAP32[(7540)>>2]|0;
 $5 = ($vertex$01|0)==(0|0);
 if ($5) {
  return ($4|0);
 } else {
  $vertex$02 = $vertex$01;
 }
 while(1) {
  $6 = HEAP32[$vertex$02>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   label = 4;
   break;
  }
  $8 = ((($vertex$02)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  _qh_point_add($4,$9,$vertex$02);
  $vertex$0 = HEAP32[$vertex$02>>2]|0;
  $10 = ($vertex$0|0)==(0|0);
  if ($10) {
   label = 4;
   break;
  } else {
   $vertex$02 = $vertex$0;
  }
 }
 if ((label|0) == 4) {
  return ($4|0);
 }
 return (0)|0;
}
function _qh_checkpolygon($facetlist) {
 $facetlist = $facetlist|0;
 var $$ = 0, $$lcssa = 0, $$lcssa89 = 0, $$lcssa91 = 0, $$lcssa93 = 0, $$lcssa94 = 0, $$pn = 0, $$pr = 0, $$visibleseen$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $facet$043 = 0, $facet$132 = 0, $facet$228 = 0;
 var $nextseen$146 = 0, $nextseen$2 = 0, $nextseen$3 = 0, $notlhs = 0, $notrhs = 0, $numfacets$045 = 0, $numfacets$1 = 0, $numfacets$2 = 0, $numridges$034 = 0, $numridges$1 = 0, $numridges$2 = 0, $numridges$3 = 0, $numvertices$033 = 0, $numvertices$1$ph = 0, $numvertices$2 = 0, $numvertices$3 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond3$not = 0;
 var $totvertices$029 = 0, $totvertices$1 = 0, $totvneighbors$0$ph = 0, $totvneighbors$0$ph$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vertex$0$ph = 0, $vertex$0$ph$in = 0, $vertex$041 = 0, $vertex$1 = 0, $vertex$1$in = 0, $vertex$1$in$ph = 0, $vertexp$0 = 0, $vertexp$0$ph = 0, $visibleseen$047 = 0, $visibleseen$2 = 0, $waserror = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer29 = sp + 40|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $waserror = sp + 96|0;
 HEAP32[$waserror>>2] = 0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facetlist)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _qh_fprintf($2,1027,32936,$vararg_buffer);
 }
 $5 = ($facetlist|0)!=(0|0);
 L4: do {
  if ($5) {
   $6 = HEAP32[(7500)>>2]|0;
   $7 = ($6|0)!=($facetlist|0);
   $8 = HEAP32[(5444)>>2]|0;
   $9 = ($8|0)!=(0);
   $or$cond = $7 | $9;
   $$ = $or$cond&1;
   $facet$043 = $facetlist;$nextseen$146 = $$;$numfacets$045 = 0;$visibleseen$047 = 0;
   while(1) {
    $10 = ((($facet$043)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $numfacets$2 = $numfacets$045;$visibleseen$2 = $visibleseen$047;
     break L4;
    }
    $13 = HEAP32[(7516)>>2]|0;
    $14 = ($facet$043|0)==($13|0);
    $$visibleseen$0 = $14 ? 1 : $visibleseen$047;
    $15 = ((($facet$043)) + 80|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 2048;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = ($nextseen$146|0)==(0);
     if ($19) {
      $20 = HEAP32[(7508)>>2]|0;
      $21 = ($facet$043|0)==($20|0);
      if ($21) {
       $nextseen$2 = 1;
      } else {
       $22 = ((($facet$043)) + 64|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (_qh_setsize($23)|0);
       $25 = ($24|0)==(0);
       if ($25) {
        $nextseen$2 = 0;
       } else {
        $26 = HEAP32[(7032)>>2]|0;
        $27 = ($26|0)==(0);
        if ($27) {
         label = 12;
         break;
        }
        $28 = +HEAPF64[$facet$043>>3];
        $29 = +HEAPF64[(5248)>>3];
        $30 = !($28 >= $29);
        if ($30) {
         $nextseen$2 = 0;
        } else {
         label = 12;
         break;
        }
       }
      }
     } else {
      $nextseen$2 = $nextseen$146;
     }
     $34 = (($numfacets$045) + 1)|0;
     _qh_checkfacet($facet$043,0,$waserror);
     $nextseen$3 = $nextseen$2;$numfacets$1 = $34;
    } else {
     $nextseen$3 = $nextseen$146;$numfacets$1 = $numfacets$045;
    }
    $35 = HEAP32[$10>>2]|0;
    $36 = ($35|0)==(0|0);
    if ($36) {
     $numfacets$2 = $numfacets$1;$visibleseen$2 = $$visibleseen$0;
     break L4;
    } else {
     $facet$043 = $35;$nextseen$146 = $nextseen$3;$numfacets$045 = $numfacets$1;$visibleseen$047 = $$visibleseen$0;
    }
   }
   if ((label|0) == 12) {
    $31 = HEAP32[(7480)>>2]|0;
    $32 = ((($facet$043)) + 76|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $33;
    _qh_fprintf($31,6137,32984,$vararg_buffer1);
    _qh_errexit(5,$facet$043,0);
    // unreachable;
   }
  } else {
   $numfacets$2 = 0;$visibleseen$2 = 0;
  }
 } while(0);
 $37 = HEAP32[(7516)>>2]|0;
 $notlhs = ($37|0)!=(0|0);
 $notrhs = ($visibleseen$2|0)==(0);
 $or$cond3$not = $notrhs & $notlhs;
 $38 = HEAP32[(7500)>>2]|0;
 $39 = ($38|0)==($facetlist|0);
 $or$cond13 = $or$cond3$not & $39;
 if ($or$cond13) {
  $40 = HEAP32[(7480)>>2]|0;
  $41 = ((($37)) + 76|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $42;
  _qh_fprintf($40,6138,33072,$vararg_buffer4);
  _qh_printlists();
  $43 = HEAP32[(7516)>>2]|0;
  _qh_errexit(5,$43,0);
  // unreachable;
 }
 $44 = HEAP32[(7500)>>2]|0;
 $45 = ($44|0)==($facetlist|0);
 if ($45) {
  $vertex$0$ph$in = (7540);
  label = 19;
 } else {
  $46 = HEAP32[(7512)>>2]|0;
  $47 = ($46|0)==($facetlist|0);
  if ($47) {
   $vertex$0$ph$in = (7548);
   label = 19;
  }
 }
 L27: do {
  if ((label|0) == 19) {
   $vertex$0$ph = HEAP32[$vertex$0$ph$in>>2]|0;
   $48 = ($vertex$0$ph|0)==(0|0);
   if (!($48)) {
    $vertex$041 = $vertex$0$ph;
    while(1) {
     $49 = HEAP32[$vertex$041>>2]|0;
     $50 = ($49|0)==(0|0);
     if ($50) {
      break L27;
     }
     $51 = ((($vertex$041)) + 16|0);
     $52 = $51;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $55 = (($52) + 4)|0;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $58 = $54 & -2147483648;
     $59 = $57 & -268435457;
     $60 = $51;
     $61 = $60;
     HEAP32[$61>>2] = $58;
     $62 = (($60) + 4)|0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = HEAP32[$vertex$041>>2]|0;
     $65 = ($64|0)==(0|0);
     if ($65) {
      break;
     } else {
      $vertex$041 = $64;
     }
    }
   }
  }
 } while(0);
 L33: do {
  if ($5) {
   $facet$132 = $facetlist;$numridges$034 = 0;$numvertices$033 = 0;
   while(1) {
    $66 = ((($facet$132)) + 48|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)==(0|0);
    if ($68) {
     $numridges$3 = $numridges$034;$numvertices$3 = $numvertices$033;
     break L33;
    }
    $69 = ((($facet$132)) + 80|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $70 & 2048;
    $72 = ($71|0)==(0);
    L37: do {
     if ($72) {
      $73 = $70 & 8192;
      $74 = ($73|0)==(0);
      if ($74) {
       $76 = ((($facet$132)) + 56|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (_qh_setsize($77)|0);
       $$pn = $78;
      } else {
       $75 = HEAP32[(5828)>>2]|0;
       $$pn = $75;
      }
      $numridges$1 = (($$pn) + ($numridges$034))|0;
      $79 = ((($facet$132)) + 52|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0|0);
      if ($81) {
       $numridges$2 = $numridges$1;$numvertices$2 = $numvertices$033;
      } else {
       $82 = ((($80)) + 4|0);
       $numvertices$1$ph = $numvertices$033;$vertexp$0$ph = $82;
       while(1) {
        $vertexp$0 = $vertexp$0$ph;
        while(1) {
         $83 = ((($vertexp$0)) + 4|0);
         $84 = HEAP32[$vertexp$0>>2]|0;
         $85 = ($84|0)==(0|0);
         if ($85) {
          $numridges$2 = $numridges$1;$numvertices$2 = $numvertices$1$ph;
          break L37;
         }
         $86 = ((($84)) + 16|0);
         $87 = $86;
         $88 = $87;
         $89 = HEAP32[$88>>2]|0;
         $90 = (($87) + 4)|0;
         $91 = $90;
         $92 = HEAP32[$91>>2]|0;
         $93 = (($89) + 1)|0;
         $94 = $93 & 2147483647;
         $95 = $89 & -2147483648;
         $96 = $94 | $95;
         $97 = $86;
         $98 = $97;
         HEAP32[$98>>2] = $96;
         $99 = (($97) + 4)|0;
         $100 = $99;
         HEAP32[$100>>2] = $92;
         $101 = $92 & 268435456;
         $102 = (0)==(0);
         $103 = ($101|0)==(0);
         $104 = $102 & $103;
         if ($104) {
          $$lcssa91 = $83;$$lcssa93 = $84;$$lcssa94 = $86;$106 = $92;$109 = $96;
          break;
         } else {
          $vertexp$0 = $83;
         }
        }
        $105 = $106 | 268435456;
        $107 = $$lcssa94;
        $108 = $107;
        HEAP32[$108>>2] = $109;
        $110 = (($107) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $105;
        $112 = (($numvertices$1$ph) + 1)|0;
        $113 = ((($$lcssa93)) + 8|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = (_qh_pointid($114)|0);
        $116 = ($115|0)==(-1);
        if (!($116)) {
         $numvertices$1$ph = $112;$vertexp$0$ph = $$lcssa91;
         continue;
        }
        $117 = HEAP32[(7480)>>2]|0;
        $118 = HEAP32[$113>>2]|0;
        $119 = $$lcssa94;
        $120 = $119;
        $121 = HEAP32[$120>>2]|0;
        $122 = (($119) + 4)|0;
        $123 = $122;
        $124 = HEAP32[$123>>2]|0;
        $125 = $124 & 16777215;
        $126 = HEAP32[(5840)>>2]|0;
        HEAP32[$vararg_buffer7>>2] = $118;
        $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
        HEAP32[$vararg_ptr10>>2] = $125;
        $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
        HEAP32[$vararg_ptr11>>2] = $126;
        _qh_fprintf($117,6139,33160,$vararg_buffer7);
        HEAP32[$waserror>>2] = 1;
        $numvertices$1$ph = $112;$vertexp$0$ph = $$lcssa91;
       }
      }
     } else {
      $numridges$2 = $numridges$034;$numvertices$2 = $numvertices$033;
     }
    } while(0);
    $127 = HEAP32[$66>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $numridges$3 = $numridges$2;$numvertices$3 = $numvertices$2;
     break;
    } else {
     $facet$132 = $127;$numridges$034 = $numridges$2;$numvertices$033 = $numvertices$2;
    }
   }
  } else {
   $numridges$3 = 0;$numvertices$3 = 0;
  }
 } while(0);
 $129 = HEAP32[(7724)>>2]|0;
 $130 = (($129) + ($numfacets$2))|0;
 $131 = $130 & 2147483647;
 $132 = $129 & -2147483648;
 $133 = $131 | $132;
 HEAP32[(7724)>>2] = $133;
 $134 = HEAP32[(7500)>>2]|0;
 $135 = ($134|0)==($facetlist|0);
 if ($135) {
  $136 = HEAP32[(7552)>>2]|0;
  $137 = HEAP32[(7520)>>2]|0;
  $138 = (($136) - ($137))|0;
  $139 = ($numfacets$2|0)==($138|0);
  if (!($139)) {
   $140 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer12>>2] = $numfacets$2;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $136;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $137;
   _qh_fprintf($140,6140,33248,$vararg_buffer12);
   HEAP32[$waserror>>2] = 1;
  }
  $141 = HEAP32[(7724)>>2]|0;
  $142 = (($141) + 1)|0;
  $143 = $142 & 2147483647;
  $144 = $141 & -2147483648;
  $145 = $143 | $144;
  HEAP32[(7724)>>2] = $145;
  $146 = HEAP32[(6900)>>2]|0;
  $147 = ($146|0)==(0);
  if (!($147)) {
   $totvneighbors$0$ph = 0;$vertex$1$in$ph = (7540);
   L59: while(1) {
    $vertex$1$in = $vertex$1$in$ph;
    while(1) {
     $vertex$1 = HEAP32[$vertex$1$in>>2]|0;
     $148 = ($vertex$1|0)==(0|0);
     if ($148) {
      $totvneighbors$0$ph$lcssa = $totvneighbors$0$ph;
      break L59;
     }
     $149 = HEAP32[$vertex$1>>2]|0;
     $150 = ($149|0)==(0|0);
     if ($150) {
      $totvneighbors$0$ph$lcssa = $totvneighbors$0$ph;
      break L59;
     }
     $151 = ((($vertex$1)) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ((($vertex$1)) + 16|0);
     $154 = $153;
     $155 = $154;
     $156 = HEAP32[$155>>2]|0;
     $157 = (($154) + 4)|0;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = $159 & 16777215;
     _qh_setcheck($152,33376,$160);
     $161 = $153;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = (($161) + 4)|0;
     $165 = $164;
     $166 = HEAP32[$165>>2]|0;
     $167 = $166 & 1073741824;
     $168 = (0)==(0);
     $169 = ($167|0)==(0);
     $170 = $168 & $169;
     if ($170) {
      $$lcssa = $vertex$1;$$lcssa89 = $151;
      break;
     } else {
      $vertex$1$in = $vertex$1;
     }
    }
    $171 = HEAP32[$$lcssa89>>2]|0;
    $172 = (_qh_setsize($171)|0);
    $173 = (($172) + ($totvneighbors$0$ph))|0;
    $totvneighbors$0$ph = $173;$vertex$1$in$ph = $$lcssa;
   }
   L67: do {
    if ($5) {
     $facet$228 = $facetlist;$totvertices$029 = 0;
     while(1) {
      $174 = ((($facet$228)) + 48|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==(0|0);
      if ($176) {
       $totvertices$1 = $totvertices$029;
       break L67;
      }
      $177 = ((($facet$228)) + 52|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = (_qh_setsize($178)|0);
      $180 = (($179) + ($totvertices$029))|0;
      $181 = HEAP32[$174>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $totvertices$1 = $180;
       break;
      } else {
       $facet$228 = $181;$totvertices$029 = $180;
      }
     }
    } else {
     $totvertices$1 = 0;
    }
   } while(0);
   $183 = ($totvneighbors$0$ph$lcssa|0)==($totvertices$1|0);
   if (!($183)) {
    $184 = HEAP32[(7480)>>2]|0;
    HEAP32[$vararg_buffer17>>2] = $totvneighbors$0$ph$lcssa;
    $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
    HEAP32[$vararg_ptr20>>2] = $totvertices$1;
    _qh_fprintf($184,6141,33392,$vararg_buffer17);
    HEAP32[$waserror>>2] = 1;
   }
  }
  $185 = HEAP32[(7556)>>2]|0;
  $186 = HEAP32[(7752)>>2]|0;
  $187 = (_qh_setsize($186)|0);
  $188 = (($185) - ($187))|0;
  $189 = ($numvertices$3|0)==($188|0);
  if (!($189)) {
   $190 = HEAP32[(7480)>>2]|0;
   $191 = HEAP32[(7556)>>2]|0;
   $192 = HEAP32[(7752)>>2]|0;
   $193 = (_qh_setsize($192)|0);
   $194 = (($191) - ($193))|0;
   HEAP32[$vararg_buffer21>>2] = $numvertices$3;
   $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
   HEAP32[$vararg_ptr24>>2] = $194;
   _qh_fprintf($190,6142,33504,$vararg_buffer21);
   HEAP32[$waserror>>2] = 1;
  }
  $195 = HEAP32[(5828)>>2]|0;
  $196 = ($195|0)!=(2);
  $197 = ($numvertices$3|0)==($numfacets$2|0);
  $or$cond14 = $197 | $196;
  if ($or$cond14) {
   $199 = $195;
  } else {
   $198 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $numvertices$3;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = $numfacets$2;
   _qh_fprintf($198,6143,33608,$vararg_buffer25);
   HEAP32[$waserror>>2] = 1;
   $$pr = HEAP32[(5828)>>2]|0;
   $199 = $$pr;
  }
  $200 = ($199|0)==(3);
  if ($200) {
   $201 = (($numvertices$3) + ($numfacets$2))|0;
   $202 = (($numridges$3|0) / 2)&-1;
   $203 = (($201) - ($202))|0;
   $204 = ($203|0)==(2);
   if (!($204)) {
    $205 = HEAP32[(7480)>>2]|0;
    HEAP32[$vararg_buffer29>>2] = $numvertices$3;
    $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
    HEAP32[$vararg_ptr32>>2] = $numfacets$2;
    $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
    HEAP32[$vararg_ptr33>>2] = $202;
    _qh_fprintf($205,7063,33680,$vararg_buffer29);
   }
  }
 }
 $206 = HEAP32[$waserror>>2]|0;
 $207 = ($206|0)==(0);
 if ($207) {
  STACKTOP = sp;return;
 } else {
  _qh_errexit(5,0,0);
  // unreachable;
 }
}
function _qh_checkflipped_all($facetlist) {
 $facetlist = $facetlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $dist = 0, $facet$01 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $waserror$0$lcssa = 0, $waserror$02 = 0, $waserror$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp;
 $dist = sp + 16|0;
 $0 = HEAP32[(7500)>>2]|0;
 $1 = ($0|0)==($facetlist|0);
 if ($1) {
  HEAP32[(43840)>>2] = 0;
 }
 $2 = ($facetlist|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $facet$01 = $facetlist;$waserror$02 = 0;
 }
 while(1) {
  $3 = ((($facet$01)) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $waserror$0$lcssa = $waserror$02;
   break;
  }
  $6 = ((($facet$01)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $waserror$1 = $waserror$02;
  } else {
   $9 = (_qh_checkflipped($facet$01,$dist,0)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = HEAP32[(7480)>>2]|0;
    $12 = ((($facet$01)) + 76|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = +HEAPF64[$dist>>3];
    HEAP32[$vararg_buffer>>2] = $13;
    $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
    HEAPF64[$vararg_ptr1>>3] = $14;
    _qh_fprintf($11,6136,33816,$vararg_buffer);
    $15 = HEAP32[(5316)>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     _qh_errprint(55888,$facet$01,0,0,0);
     $waserror$1 = 1;
    } else {
     $waserror$1 = $waserror$02;
    }
   } else {
    $waserror$1 = $waserror$02;
   }
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $waserror$0$lcssa = $waserror$1;
   break;
  } else {
   $facet$01 = $17;$waserror$02 = $waserror$1;
  }
 }
 $19 = ($waserror$0$lcssa|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 } else {
  $20 = HEAP32[(7480)>>2]|0;
  $21 = +HEAPF64[(6952)>>3];
  $22 = -$21;
  HEAPF64[$vararg_buffer2>>3] = $22;
  _qh_fprintf($20,8101,33880,$vararg_buffer2);
  _qh_errexit(3,0,0);
  // unreachable;
 }
}
function _qh_checkconvex($facetlist,$fault) {
 $facetlist = $facetlist|0;
 $fault = $fault|0;
 var $$lcssa = 0, $$lcssa266 = 0, $$lcssa267 = 0, $$lcssa269 = 0, $$lcssa270 = 0, $$lcssa272 = 0, $$lcssa273 = 0, $$lcssa274 = 0, $$lcssa277 = 0, $$lcssa278 = 0, $$lcssa280 = 0, $$lcssa281 = 0, $$lcssa295 = 0, $$lcssa296 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0;
 var $98 = 0, $99 = 0, $allsimplicial$0$ph2053 = 0, $allsimplicial$0$ph2053$lcssa283 = 0, $allsimplicial$0$ph2053$lcssa284 = 0, $allsimplicial$0$ph2053286 = 0, $allsimplicial$0$ph2053287 = 0, $allsimplicial$0$ph66 = 0, $centrum$0 = 0, $centrum_warning$089 = 0, $centrum_warning$1 = 0, $centrum_warning$2 = 0, $centrum_warning$3 = 0, $dist = 0, $errfacet1$0$lcssa = 0, $errfacet1$085 = 0, $errfacet1$1$ph$lcssa = 0, $errfacet1$1$ph63 = 0, $errfacet1$212 = 0, $errfacet1$3$ph79 = 0;
 var $errfacet1$4 = 0, $errfacet1$5 = 0, $errfacet2$0$lcssa = 0, $errfacet2$086 = 0, $errfacet2$1$ph$lcssa = 0, $errfacet2$1$ph64 = 0, $errfacet2$213 = 0, $errfacet2$3$ph80 = 0, $errfacet2$4 = 0, $errfacet2$5 = 0, $facet$087 = 0, $neighbor_i$0$ph2154 = 0, $neighbor_i$0$ph67 = 0, $neighbor_i$045 = 0, $notlhs = 0, $or$cond = 0, $tempcentrum$091 = 0, $tempcentrum$1 = 0, $tempcentrum$2 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer20 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer37 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr9 = 0, $waserror$0$lcssa = 0, $waserror$088 = 0, $waserror$1$ph$lcssa = 0, $waserror$1$ph65 = 0, $waserror$214 = 0, $waserror$3$ph81 = 0, $waserror$4 = 0, $waserror$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer30 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dist = sp + 24|0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,1026,34000,$vararg_buffer);
 }
 $3 = HEAP32[(5700)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[(43392)>>2] = 0;
  HEAP32[(43472)>>2] = 0;
 }
 $5 = ($facetlist|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ($fault|0)==(1);
 $centrum_warning$089 = 0;$errfacet1$085 = 0;$errfacet2$086 = 0;$facet$087 = $facetlist;$tempcentrum$091 = 0;$waserror$088 = 0;
 L10: while(1) {
  $7 = ((($facet$087)) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $errfacet1$0$lcssa = $errfacet1$085;$errfacet2$0$lcssa = $errfacet2$086;$waserror$0$lcssa = $waserror$088;
   break;
  }
  $10 = ((($facet$087)) + 80|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 65536;
  $13 = ($12|0)==(0);
  L13: do {
   if ($13) {
    $17 = HEAP32[(5392)>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     label = 12;
    } else {
     $19 = HEAP32[(6904)>>2]|0;
     $notlhs = ($19|0)!=(0);
     $20 = $11 & 8704;
     $21 = ($20|0)==(8192);
     $22 = $21 & $notlhs;
     if ($22) {
      label = 12;
     } else {
      $errfacet1$212 = $errfacet1$085;$errfacet2$213 = $errfacet2$086;$waserror$214 = $waserror$088;
     }
    }
    L18: do {
     if ((label|0) == 12) {
      label = 0;
      $23 = ((($facet$087)) + 60|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if ($25) {
       $centrum_warning$3 = $centrum_warning$089;$errfacet1$5 = $errfacet1$085;$errfacet2$5 = $errfacet2$086;$tempcentrum$2 = $tempcentrum$091;$waserror$5 = $waserror$088;
       break L13;
      }
      $26 = ((($24)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(0|0);
      if ($28) {
       $centrum_warning$3 = $centrum_warning$089;$errfacet1$5 = $errfacet1$085;$errfacet2$5 = $errfacet2$086;$tempcentrum$2 = $tempcentrum$091;$waserror$5 = $waserror$088;
       break L13;
      }
      $29 = ((($26)) + 4|0);
      $30 = ((($facet$087)) + 52|0);
      $31 = ((($facet$087)) + 76|0);
      $32 = ((($facet$087)) + 76|0);
      $33 = ((($facet$087)) + 76|0);
      $197 = $27;$198 = $29;$allsimplicial$0$ph66 = 1;$errfacet1$1$ph63 = $errfacet1$085;$errfacet2$1$ph64 = $errfacet2$086;$neighbor_i$0$ph67 = 0;$waserror$1$ph65 = $waserror$088;
      L22: while(1) {
       $199 = $197;$200 = $198;$allsimplicial$0$ph2053 = $allsimplicial$0$ph66;$neighbor_i$0$ph2154 = $neighbor_i$0$ph67;
       L24: while(1) {
        $119 = $200;$42 = $199;$neighbor_i$045 = $neighbor_i$0$ph2154;
        while(1) {
         $37 = (($neighbor_i$045) + 1)|0;
         $38 = HEAP32[$30>>2]|0;
         $39 = (((($38)) + 4|0) + ($neighbor_i$045<<2)|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = ((($42)) + 80|0);
         $43 = HEAP32[$41>>2]|0;
         $44 = $43 & 8704;
         $45 = ($44|0)==(8192);
         if (!($45)) {
          $$lcssa = $119;$$lcssa272 = $37;
          break;
         }
         $46 = ((($40)) + 8|0);
         $47 = HEAP32[$46>>2]|0;
         _qh_distplane($47,$42,$dist);
         $48 = +HEAPF64[$dist>>3];
         $49 = +HEAPF64[(6952)>>3];
         $50 = -$49;
         $51 = $48 > $50;
         do {
          if ($51) {
           if ($6) {
            label = 21;
            break L10;
           }
           $54 = +HEAPF64[$dist>>3];
           $55 = +HEAPF64[(6952)>>3];
           $56 = $54 > $55;
           if ($56) {
            $$lcssa266 = $42;$$lcssa269 = $119;$$lcssa273 = $37;$$lcssa277 = $40;$$lcssa280 = $46;$allsimplicial$0$ph2053$lcssa283 = $allsimplicial$0$ph2053;
            label = 23;
            break L24;
           }
           $78 = HEAP32[(6904)>>2]|0;
           $79 = ($78|0)==(0);
           if (!($79)) {
            $80 = $54 > 0.0;
            if ($80) {
             $$lcssa267 = $42;$$lcssa270 = $119;$$lcssa274 = $37;$$lcssa278 = $40;$$lcssa281 = $46;$allsimplicial$0$ph2053$lcssa284 = $allsimplicial$0$ph2053;
             label = 27;
             break L24;
            } else {
             break;
            }
           }
           $98 = HEAP32[(43472)>>2]|0;
           $99 = (($98) + 1)|0;
           HEAP32[(43472)>>2] = $99;
           _qh_precision(34336);
           $100 = HEAP32[(5344)>>2]|0;
           $101 = ($100|0)==(0);
           if ($101) {
            break;
           }
           $102 = HEAP32[(7480)>>2]|0;
           $103 = HEAP32[$31>>2]|0;
           $104 = ((($42)) + 76|0);
           $105 = HEAP32[$104>>2]|0;
           $106 = HEAP32[$46>>2]|0;
           $107 = (_qh_pointid($106)|0);
           $108 = ((($40)) + 16|0);
           $109 = $108;
           $110 = $109;
           $111 = HEAP32[$110>>2]|0;
           $112 = (($109) + 4)|0;
           $113 = $112;
           $114 = HEAP32[$113>>2]|0;
           $115 = $114 & 16777215;
           $116 = +HEAPF64[$dist>>3];
           $117 = HEAP32[(7596)>>2]|0;
           HEAP32[$vararg_buffer20>>2] = $103;
           $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
           HEAP32[$vararg_ptr23>>2] = $105;
           $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
           HEAP32[$vararg_ptr24>>2] = $107;
           $vararg_ptr25 = ((($vararg_buffer20)) + 12|0);
           HEAP32[$vararg_ptr25>>2] = $115;
           $vararg_ptr26 = ((($vararg_buffer20)) + 16|0);
           HEAPF64[$vararg_ptr26>>3] = $116;
           $vararg_ptr27 = ((($vararg_buffer20)) + 24|0);
           HEAP32[$vararg_ptr27>>2] = $117;
           _qh_fprintf($102,22,34440,$vararg_buffer20);
          }
         } while(0);
         $118 = ((($119)) + 4|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = ($120|0)==(0|0);
         if ($121) {
          $allsimplicial$0$ph2053286 = $allsimplicial$0$ph2053;$errfacet1$1$ph$lcssa = $errfacet1$1$ph63;$errfacet2$1$ph$lcssa = $errfacet2$1$ph64;$waserror$1$ph$lcssa = $waserror$1$ph65;
          break L22;
         } else {
          $119 = $118;$42 = $120;$neighbor_i$045 = $37;
         }
        }
        $34 = ((($$lcssa)) + 4|0);
        $35 = HEAP32[$$lcssa>>2]|0;
        $36 = ($35|0)==(0|0);
        if ($36) {
         $errfacet1$212 = $errfacet1$1$ph63;$errfacet2$213 = $errfacet2$1$ph64;$waserror$214 = $waserror$1$ph65;
         break L18;
        } else {
         $199 = $35;$200 = $34;$allsimplicial$0$ph2053 = 0;$neighbor_i$0$ph2154 = $$lcssa272;
        }
       }
       if ((label|0) == 23) {
        label = 0;
        $57 = HEAP32[(43392)>>2]|0;
        $58 = (($57) + 1)|0;
        HEAP32[(43392)>>2] = $58;
        _qh_precision(34240);
        $59 = HEAP32[(7480)>>2]|0;
        $60 = HEAP32[$32>>2]|0;
        $61 = ((($$lcssa266)) + 76|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = HEAP32[$$lcssa280>>2]|0;
        $64 = (_qh_pointid($63)|0);
        $65 = ((($$lcssa277)) + 16|0);
        $66 = $65;
        $67 = $66;
        $68 = HEAP32[$67>>2]|0;
        $69 = (($66) + 4)|0;
        $70 = $69;
        $71 = HEAP32[$70>>2]|0;
        $72 = $71 & 16777215;
        $73 = +HEAPF64[$dist>>3];
        HEAP32[$vararg_buffer6>>2] = $60;
        $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
        HEAP32[$vararg_ptr9>>2] = $62;
        $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
        HEAP32[$vararg_ptr10>>2] = $64;
        $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
        HEAP32[$vararg_ptr11>>2] = $72;
        $vararg_ptr12 = ((($vararg_buffer6)) + 16|0);
        HEAPF64[$vararg_ptr12>>3] = $73;
        _qh_fprintf($59,6115,34256,$vararg_buffer6);
        $201 = $$lcssa273;$202 = $$lcssa266;$75 = $$lcssa269;$allsimplicial$0$ph2053287 = $allsimplicial$0$ph2053$lcssa283;
       }
       else if ((label|0) == 27) {
        label = 0;
        $81 = HEAP32[(43472)>>2]|0;
        $82 = (($81) + 1)|0;
        HEAP32[(43472)>>2] = $82;
        _qh_precision(34336);
        $83 = HEAP32[(7480)>>2]|0;
        $84 = HEAP32[$33>>2]|0;
        $85 = ((($$lcssa267)) + 76|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = HEAP32[$$lcssa281>>2]|0;
        $88 = (_qh_pointid($87)|0);
        $89 = ((($$lcssa278)) + 16|0);
        $90 = $89;
        $91 = $90;
        $92 = HEAP32[$91>>2]|0;
        $93 = (($90) + 4)|0;
        $94 = $93;
        $95 = HEAP32[$94>>2]|0;
        $96 = $95 & 16777215;
        $97 = +HEAPF64[$dist>>3];
        HEAP32[$vararg_buffer13>>2] = $84;
        $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
        HEAP32[$vararg_ptr16>>2] = $86;
        $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
        HEAP32[$vararg_ptr17>>2] = $88;
        $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
        HEAP32[$vararg_ptr18>>2] = $96;
        $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
        HEAPF64[$vararg_ptr19>>3] = $97;
        _qh_fprintf($83,6116,34352,$vararg_buffer13);
        $201 = $$lcssa274;$202 = $$lcssa267;$75 = $$lcssa270;$allsimplicial$0$ph2053287 = $allsimplicial$0$ph2053$lcssa284;
       }
       $74 = ((($75)) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(0|0);
       if ($77) {
        $allsimplicial$0$ph2053286 = $allsimplicial$0$ph2053287;$errfacet1$1$ph$lcssa = $facet$087;$errfacet2$1$ph$lcssa = $202;$waserror$1$ph$lcssa = 1;
        break;
       } else {
        $197 = $76;$198 = $74;$allsimplicial$0$ph66 = $allsimplicial$0$ph2053287;$errfacet1$1$ph63 = $facet$087;$errfacet2$1$ph64 = $202;$neighbor_i$0$ph67 = $201;$waserror$1$ph65 = 1;
       }
      }
      $122 = ($allsimplicial$0$ph2053286|0)==(0);
      if ($122) {
       $errfacet1$212 = $errfacet1$1$ph$lcssa;$errfacet2$213 = $errfacet2$1$ph$lcssa;$waserror$214 = $waserror$1$ph$lcssa;
      } else {
       $centrum_warning$3 = $centrum_warning$089;$errfacet1$5 = $errfacet1$1$ph$lcssa;$errfacet2$5 = $errfacet2$1$ph$lcssa;$tempcentrum$2 = $tempcentrum$091;$waserror$5 = $waserror$1$ph$lcssa;
       break L13;
      }
     }
    } while(0);
    $123 = HEAP32[(7592)>>2]|0;
    $124 = ($123|0)==(2);
    if ($124) {
     $125 = ((($facet$087)) + 40|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($126|0)==(0|0);
     if ($127) {
      $128 = (_qh_getcentrum($facet$087)|0);
      HEAP32[$125>>2] = $128;
     }
     $129 = HEAP32[$125>>2]|0;
     $centrum$0 = $129;$centrum_warning$2 = $centrum_warning$089;$tempcentrum$1 = $tempcentrum$091;
    } else {
     $130 = ($centrum_warning$089|0)==(0);
     if ($130) {
      $131 = HEAP32[$10>>2]|0;
      $132 = $131 & 8704;
      $133 = ($132|0)==(8192);
      if ($133) {
       $centrum_warning$1 = 0;
      } else {
       $134 = HEAP32[(7480)>>2]|0;
       _qh_fprintf($134,7062,34536,$vararg_buffer28);
       $centrum_warning$1 = 1;
      }
     } else {
      $centrum_warning$1 = $centrum_warning$089;
     }
     $135 = (_qh_getcentrum($facet$087)|0);
     $centrum$0 = $135;$centrum_warning$2 = $centrum_warning$1;$tempcentrum$1 = 1;
    }
    $136 = ((($facet$087)) + 60|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)==(0|0);
    L56: do {
     if ($138) {
      $errfacet1$4 = $errfacet1$212;$errfacet2$4 = $errfacet2$213;$waserror$4 = $waserror$214;
     } else {
      $139 = ((($137)) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $errfacet1$4 = $errfacet1$212;$errfacet2$4 = $errfacet2$213;$waserror$4 = $waserror$214;
      } else {
       $142 = ((($139)) + 4|0);
       $143 = ((($facet$087)) + 76|0);
       $144 = ((($facet$087)) + 76|0);
       $203 = $140;$204 = $142;$errfacet1$3$ph79 = $errfacet1$212;$errfacet2$3$ph80 = $errfacet2$213;$waserror$3$ph81 = $waserror$214;
       while(1) {
        $151 = $203;$159 = $204;
        while(1) {
         $145 = HEAP32[(6904)>>2]|0;
         $146 = ($145|0)==(0);
         if ($146) {
          label = 47;
         } else {
          $147 = HEAP32[$10>>2]|0;
          $148 = $147 & 8192;
          $149 = ($148|0)==(0);
          if ($149) {
           label = 47;
          } else {
           $150 = ((($151)) + 80|0);
           $152 = HEAP32[$150>>2]|0;
           $153 = $152 & 8192;
           $154 = ($153|0)==(0);
           if ($154) {
            label = 47;
           }
          }
         }
         if ((label|0) == 47) {
          label = 0;
          $155 = HEAP32[$10>>2]|0;
          $156 = $155 & 512;
          $157 = ($156|0)==(0);
          if ($157) {
           $162 = ((($151)) + 80|0);
           $163 = HEAP32[$162>>2]|0;
           $164 = $163 & 512;
           $165 = ($164|0)==(0);
           if ($165) {
            $166 = HEAP32[(43600)>>2]|0;
            $167 = (($166) + 1)|0;
            HEAP32[(43600)>>2] = $167;
            _qh_distplane($centrum$0,$151,$dist);
            $168 = +HEAPF64[$dist>>3];
            $169 = +HEAPF64[(6952)>>3];
            $170 = $168 > $169;
            if ($170) {
             $$lcssa295 = $151;$$lcssa298 = $159;
             label = 51;
             break;
            }
            $182 = !($168 >= 0.0);
            if (!($182)) {
             $$lcssa296 = $151;$$lcssa299 = $159;
             label = 54;
             break;
            }
           }
          }
         }
         $158 = ((($159)) + 4|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $errfacet1$4 = $errfacet1$3$ph79;$errfacet2$4 = $errfacet2$3$ph80;$waserror$4 = $waserror$3$ph81;
          break L56;
         } else {
          $151 = $160;$159 = $158;
         }
        }
        if ((label|0) == 51) {
         label = 0;
         $171 = HEAP32[(43392)>>2]|0;
         $172 = (($171) + 1)|0;
         HEAP32[(43392)>>2] = $172;
         _qh_precision(34240);
         $173 = HEAP32[(7480)>>2]|0;
         $174 = HEAP32[$143>>2]|0;
         $175 = ((($$lcssa295)) + 76|0);
         $176 = HEAP32[$175>>2]|0;
         $177 = +HEAPF64[$dist>>3];
         HEAP32[$vararg_buffer30>>2] = $174;
         $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
         HEAP32[$vararg_ptr33>>2] = $176;
         $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
         HEAP32[$vararg_ptr34>>2] = $174;
         $vararg_ptr35 = ((($vararg_buffer30)) + 16|0);
         HEAPF64[$vararg_ptr35>>3] = $177;
         $vararg_ptr36 = ((($vararg_buffer30)) + 24|0);
         HEAP32[$vararg_ptr36>>2] = $176;
         _qh_fprintf($173,6117,34640,$vararg_buffer30);
         $179 = $$lcssa298;$205 = $$lcssa295;
        }
        else if ((label|0) == 54) {
         label = 0;
         $183 = HEAP32[(43472)>>2]|0;
         $184 = (($183) + 1)|0;
         HEAP32[(43472)>>2] = $184;
         _qh_precision(34336);
         $185 = HEAP32[(7480)>>2]|0;
         $186 = HEAP32[$144>>2]|0;
         $187 = ((($$lcssa296)) + 76|0);
         $188 = HEAP32[$187>>2]|0;
         $189 = +HEAPF64[$dist>>3];
         HEAP32[$vararg_buffer37>>2] = $186;
         $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
         HEAP32[$vararg_ptr40>>2] = $188;
         $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
         HEAP32[$vararg_ptr41>>2] = $186;
         $vararg_ptr42 = ((($vararg_buffer37)) + 16|0);
         HEAPF64[$vararg_ptr42>>3] = $189;
         $vararg_ptr43 = ((($vararg_buffer37)) + 24|0);
         HEAP32[$vararg_ptr43>>2] = $188;
         _qh_fprintf($185,6118,34728,$vararg_buffer37);
         $179 = $$lcssa299;$205 = $$lcssa296;
        }
        $178 = ((($179)) + 4|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if ($181) {
         $errfacet1$4 = $facet$087;$errfacet2$4 = $205;$waserror$4 = 1;
         break;
        } else {
         $203 = $180;$204 = $178;$errfacet1$3$ph79 = $facet$087;$errfacet2$3$ph80 = $205;$waserror$3$ph81 = 1;
        }
       }
      }
     }
    } while(0);
    $190 = ($tempcentrum$1|0)==(0);
    if ($190) {
     $centrum_warning$3 = $centrum_warning$2;$errfacet1$5 = $errfacet1$4;$errfacet2$5 = $errfacet2$4;$tempcentrum$2 = 0;$waserror$5 = $waserror$4;
    } else {
     $191 = HEAP32[(7488)>>2]|0;
     _qh_memfree($centrum$0,$191);
     $centrum_warning$3 = $centrum_warning$2;$errfacet1$5 = $errfacet1$4;$errfacet2$5 = $errfacet2$4;$tempcentrum$2 = $tempcentrum$1;$waserror$5 = $waserror$4;
    }
   } else {
    _qh_precision(34048);
    $14 = HEAP32[(7480)>>2]|0;
    $15 = ((($facet$087)) + 76|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $16;
    _qh_fprintf($14,6113,34064,$vararg_buffer1);
    $centrum_warning$3 = $centrum_warning$089;$errfacet1$5 = $facet$087;$errfacet2$5 = $errfacet2$086;$tempcentrum$2 = $tempcentrum$091;$waserror$5 = 1;
   }
  } while(0);
  $192 = HEAP32[$7>>2]|0;
  $193 = ($192|0)==(0|0);
  if ($193) {
   $errfacet1$0$lcssa = $errfacet1$5;$errfacet2$0$lcssa = $errfacet2$5;$waserror$0$lcssa = $waserror$5;
   break;
  } else {
   $centrum_warning$089 = $centrum_warning$3;$errfacet1$085 = $errfacet1$5;$errfacet2$086 = $errfacet2$5;$facet$087 = $192;$tempcentrum$091 = $tempcentrum$2;$waserror$088 = $waserror$5;
  }
 }
 if ((label|0) == 21) {
  _qh_precision(34136);
  $52 = HEAP32[(7480)>>2]|0;
  $53 = +HEAPF64[$dist>>3];
  HEAPF64[$vararg_buffer3>>3] = $53;
  _qh_fprintf($52,6114,34168,$vararg_buffer3);
  _qh_errexit(2,0,0);
  // unreachable;
 }
 $194 = ($waserror$0$lcssa|0)==(0);
 $195 = HEAP32[(5316)>>2]|0;
 $196 = ($195|0)!=(0);
 $or$cond = $194 | $196;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 _qh_errexit2(3,$errfacet1$0$lcssa,$errfacet2$0$lcssa);
 STACKTOP = sp;return;
}
function _qh_checkfacet($facet,$newmerge,$waserrorp) {
 $facet = $facet|0;
 $newmerge = $newmerge|0;
 $waserrorp = $waserrorp|0;
 var $$lcssa = 0, $$lcssa158 = 0, $$lcssa160 = 0, $$lcssa162 = 0, $$lcssa163 = 0, $$lcssa167 = 0, $$pr = 0, $$pr22 = 0, $$pr24 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $errother$097 = 0, $errother$1 = 0, $errother$2 = 0, $errother$3 = 0, $errother$472 = 0, $errother$5 = 0, $errother$6$ph83 = 0;
 var $errother$7 = 0, $errridge$0$be = 0, $errridge$086 = 0, $errridge$1 = 0, $errridge$2 = 0, $errridge$3 = 0, $errridge$451 = 0, $errridge$5$lcssa = 0, $errridge$546 = 0, $errridge$6 = 0, $errridge$7 = 0, $exitcond = 0, $exitcond117 = 0, $i$048 = 0, $intersection = 0, $magicptr = 0, $magicptr$off = 0, $notlhs = 0, $notlhs105 = 0, $notrhs = 0;
 var $or$cond = 0, $or$cond18$not = 0, $or$cond26 = 0, $or$cond5 = 0, $or$cond9 = 0, $previousid$0 = 0, $ridge$052 = 0, $ridge_i$054 = 0, $ridgep$092 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer45 = 0, $vararg_buffer50 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer65 = 0, $vararg_buffer71 = 0, $vararg_buffer77 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr40 = 0;
 var $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr7 = 0, $vararg_ptr70 = 0, $vararg_ptr74 = 0, $vararg_ptr75 = 0, $vararg_ptr76 = 0, $vararg_ptr80 = 0, $vertexp$0 = 0, $vertexp$159 = 0, $vertexp$262 = 0;
 var $waserror$0 = 0, $waserror$1 = 0, $waserror$10$be = 0, $waserror$1087 = 0, $waserror$11 = 0, $waserror$12 = 0, $waserror$13 = 0, $waserror$1471 = 0, $waserror$15 = 0, $waserror$16$ph82 = 0, $waserror$17 = 0, $waserror$1853 = 0, $waserror$19$lcssa = 0, $waserror$1947 = 0, $waserror$2 = 0, $waserror$20 = 0, $waserror$21 = 0, $waserror$3 = 0, $waserror$4 = 0, $waserror$5 = 0;
 var $waserror$696 = 0, $waserror$7 = 0, $waserror$8 = 0, $waserror$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer77 = sp + 104|0;
 $vararg_buffer71 = sp + 200|0;
 $vararg_buffer65 = sp + 184|0;
 $vararg_buffer59 = sp + 168|0;
 $vararg_buffer55 = sp + 160|0;
 $vararg_buffer50 = sp + 144|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 48|0;
 $vararg_buffer22 = sp;
 $vararg_buffer17 = sp + 16|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 56|0;
 $vararg_buffer4 = sp + 64|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 80|0;
 $intersection = sp + 216|0;
 $0 = ((($facet)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2048;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = ((($facet)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  _qh_fprintf($4,6119,34824,$vararg_buffer);
  _qh_errexit(5,$facet,0);
  // unreachable;
 }
 $7 = ((($facet)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[(7480)>>2]|0;
  $11 = ((($facet)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $12;
  _qh_fprintf($10,6120,34896,$vararg_buffer1);
  $waserror$0 = 1;
 } else {
  $waserror$0 = 0;
 }
 $13 = ((($facet)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($facet)) + 76|0);
 $16 = HEAP32[$15>>2]|0;
 _qh_setcheck($14,34976,$16);
 $17 = ((($facet)) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$15>>2]|0;
 _qh_setcheck($18,34992,$19);
 $20 = ((($facet)) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$15>>2]|0;
 _qh_setcheck($21,35008,$22);
 $23 = ((($facet)) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$15>>2]|0;
 _qh_setcheck($24,35032,$25);
 $26 = ((($facet)) + 60|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$15>>2]|0;
 _qh_setcheck($27,35056,$28);
 $29 = HEAP32[$13>>2]|0;
 $30 = ($29|0)==(0|0);
 L7: do {
  if ($30) {
   $waserror$3 = $waserror$0;
  } else {
   $31 = ((($29)) + 4|0);
   $previousid$0 = 2147483647;$vertexp$0 = $31;$waserror$1 = $waserror$0;
   while(1) {
    $32 = ((($vertexp$0)) + 4|0);
    $33 = HEAP32[$vertexp$0>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $waserror$3 = $waserror$1;
     break L7;
    }
    $35 = ((($33)) + 16|0);
    $36 = $35;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (($36) + 4)|0;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 & 1073741824;
    $43 = (0)==(0);
    $44 = ($42|0)==(0);
    $45 = $43 & $44;
    if ($45) {
     $waserror$2 = $waserror$1;
    } else {
     $46 = HEAP32[(7480)>>2]|0;
     $47 = $41 & 16777215;
     $48 = HEAP32[$15>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $47;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $48;
     _qh_fprintf($46,6121,35072,$vararg_buffer4);
     _qh_errprint(55888,0,0,0,$33);
     $waserror$2 = 1;
    }
    $49 = $35;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = $54 & 16777215;
    $56 = ($55>>>0)<($previousid$0>>>0);
    if ($56) {
     $previousid$0 = $55;$vertexp$0 = $32;$waserror$1 = $waserror$2;
    } else {
     $$lcssa167 = $55;
     break;
    }
   }
   $57 = HEAP32[(7480)>>2]|0;
   $58 = HEAP32[$15>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $58;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $$lcssa167;
   _qh_fprintf($57,6122,35144,$vararg_buffer8);
   $waserror$3 = 1;
  }
 } while(0);
 $59 = HEAP32[$26>>2]|0;
 $60 = (_qh_setsize($59)|0);
 $61 = HEAP32[$13>>2]|0;
 $62 = (_qh_setsize($61)|0);
 $63 = HEAP32[$17>>2]|0;
 $64 = (_qh_setsize($63)|0);
 $65 = HEAP32[$0>>2]|0;
 $66 = $65 & 8192;
 $67 = ($66|0)==(0);
 L17: do {
  if ($67) {
   $77 = ($newmerge|0)==(0);
   if ($77) {
    $78 = HEAP32[(5828)>>2]|0;
    $notlhs105 = ($62|0)>=($78|0);
    $notrhs = ($60|0)>=($78|0);
    $or$cond18$not = $notrhs & $notlhs105;
    $79 = ($65>>>0)>(1073741823);
    $or$cond26 = $79 | $or$cond18$not;
    if ($or$cond26) {
     $waserror$4 = $waserror$3;
    } else {
     $80 = HEAP32[(7480)>>2]|0;
     $81 = HEAP32[$15>>2]|0;
     HEAP32[$vararg_buffer17>>2] = $81;
     $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
     HEAP32[$vararg_ptr20>>2] = $62;
     $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
     HEAP32[$vararg_ptr21>>2] = $60;
     _qh_fprintf($80,6124,35352,$vararg_buffer17);
     $waserror$4 = 1;
    }
   } else {
    $waserror$4 = $waserror$3;
   }
   $82 = ($64|0)<($60|0);
   do {
    if (!($82)) {
     $83 = HEAP32[(5828)>>2]|0;
     $84 = ($83|0)==(3);
     if ($84) {
      $85 = ($62|0)<=($64|0);
      $86 = HEAP32[(7656)>>2]|0;
      $87 = ($86|0)!=(0);
      $or$cond = $85 | $87;
      if (!($or$cond)) {
       break;
      }
      $$pr = HEAP32[(5828)>>2]|0;
      $88 = $$pr;
     } else {
      $88 = $83;
     }
     $89 = ($88|0)==(2);
     if (!($89)) {
      $waserror$5 = $waserror$4;
      break L17;
     }
     $90 = (($62) + ($60))|0;
     $91 = (($90) + ($64))|0;
     $92 = ($91|0)==(6);
     if ($92) {
      $waserror$5 = $waserror$4;
      break L17;
     }
    }
   } while(0);
   $93 = HEAP32[$0>>2]|0;
   $94 = ($93>>>0)>(1073741823);
   if ($94) {
    $waserror$5 = $waserror$4;
   } else {
    $95 = HEAP32[(7480)>>2]|0;
    $96 = HEAP32[$15>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $96;
    $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
    HEAP32[$vararg_ptr25>>2] = $64;
    $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
    HEAP32[$vararg_ptr26>>2] = $60;
    $vararg_ptr27 = ((($vararg_buffer22)) + 12|0);
    HEAP32[$vararg_ptr27>>2] = $62;
    _qh_fprintf($95,6125,35456,$vararg_buffer22);
    $waserror$5 = 1;
   }
  } else {
   $68 = (($62) + ($60))|0;
   $69 = HEAP32[(5828)>>2]|0;
   $70 = $69 << 1;
   $notlhs = ($68|0)==($70|0);
   $71 = ($65>>>0)>(1073741823);
   $72 = $71 | $notlhs;
   if ($72) {
    $waserror$5 = $waserror$3;
   } else {
    $73 = HEAP32[(7480)>>2]|0;
    $74 = HEAP32[$15>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $74;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = $62;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $60;
    _qh_fprintf($73,6123,35240,$vararg_buffer12);
    $75 = HEAP32[(7480)>>2]|0;
    $76 = HEAP32[$26>>2]|0;
    _qh_setprint($75,56512,$76);
    $waserror$5 = 1;
   }
  }
 } while(0);
 $97 = HEAP32[$26>>2]|0;
 $98 = ($97|0)==(0|0);
 if ($98) {
  $errother$3 = 0;$waserror$9 = $waserror$5;
 } else {
  $99 = ((($97)) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0|0);
  L37: do {
   if (!($101)) {
    $102 = ((($99)) + 4|0);
    $103 = $100;$110 = $102;
    while(1) {
     $magicptr = $103;
     $magicptr$off = (($magicptr) + -1)|0;
     $switch = ($magicptr$off>>>0)<(2);
     if ($switch) {
      break;
     }
     $106 = ((($103)) + 80|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $107 | 16384;
     HEAP32[$106>>2] = $108;
     $109 = ((($110)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==(0|0);
     if ($112) {
      break L37;
     } else {
      $103 = $111;$110 = $109;
     }
    }
    $104 = HEAP32[(7480)>>2]|0;
    $105 = HEAP32[$15>>2]|0;
    HEAP32[$vararg_buffer28>>2] = $105;
    _qh_fprintf($104,6126,35584,$vararg_buffer28);
    _qh_errexit(5,$facet,0);
    // unreachable;
   }
  } while(0);
  $$pr22 = HEAP32[$26>>2]|0;
  $113 = ($$pr22|0)==(0|0);
  if ($113) {
   $errother$3 = 0;$waserror$9 = $waserror$5;
  } else {
   $114 = ((($$pr22)) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($115|0)==(0|0);
   if ($116) {
    $errother$3 = 0;$waserror$9 = $waserror$5;
   } else {
    $117 = ((($114)) + 4|0);
    $119 = $115;$138 = $117;$errother$097 = 0;$waserror$696 = $waserror$5;
    while(1) {
     $118 = ((($119)) + 60|0);
     $120 = HEAP32[$118>>2]|0;
     $121 = (_qh_setin($120,$facet)|0);
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = HEAP32[(7480)>>2]|0;
      $124 = HEAP32[$15>>2]|0;
      $125 = ((($119)) + 76|0);
      $126 = HEAP32[$125>>2]|0;
      HEAP32[$vararg_buffer31>>2] = $124;
      $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
      HEAP32[$vararg_ptr34>>2] = $126;
      $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
      HEAP32[$vararg_ptr35>>2] = $126;
      $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
      HEAP32[$vararg_ptr36>>2] = $124;
      _qh_fprintf($123,6127,35672,$vararg_buffer31);
      $errother$1 = $119;$waserror$7 = 1;
     } else {
      $errother$1 = $errother$097;$waserror$7 = $waserror$696;
     }
     $127 = ((($119)) + 80|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $128 & 16384;
     $130 = ($129|0)==(0);
     if ($130) {
      $131 = HEAP32[(7480)>>2]|0;
      $132 = HEAP32[$15>>2]|0;
      $133 = ((($119)) + 76|0);
      $134 = HEAP32[$133>>2]|0;
      HEAP32[$vararg_buffer37>>2] = $132;
      $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
      HEAP32[$vararg_ptr40>>2] = $134;
      _qh_fprintf($131,6128,35776,$vararg_buffer37);
      $errother$2 = $119;$waserror$8 = 1;
     } else {
      $errother$2 = $errother$1;$waserror$8 = $waserror$7;
     }
     $135 = HEAP32[$127>>2]|0;
     $136 = $135 & -16385;
     HEAP32[$127>>2] = $136;
     $137 = ((($138)) + 4|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)==(0|0);
     if ($140) {
      $errother$3 = $errother$2;$waserror$9 = $waserror$8;
      break;
     } else {
      $119 = $139;$138 = $137;$errother$097 = $errother$2;$waserror$696 = $waserror$8;
     }
    }
   }
  }
 }
 $141 = HEAP32[$17>>2]|0;
 $142 = ($141|0)==(0|0);
 if ($142) {
  $errridge$3 = 0;$waserror$13 = $waserror$9;
 } else {
  $143 = ((($141)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)==(0|0);
  if (!($145)) {
   $148 = $144;$ridgep$092 = $143;
   while(1) {
    $146 = ((($ridgep$092)) + 4|0);
    $147 = HEAP32[$148>>2]|0;
    $149 = ((($148)) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $150 & 16777215;
    _qh_setcheck($147,35856,$151);
    $152 = HEAP32[$149>>2]|0;
    $153 = $152 & -16777217;
    HEAP32[$149>>2] = $153;
    $154 = HEAP32[$146>>2]|0;
    $155 = ($154|0)==(0|0);
    if ($155) {
     break;
    } else {
     $148 = $154;$ridgep$092 = $146;
    }
   }
  }
  $$pr24 = HEAP32[$17>>2]|0;
  $156 = ($$pr24|0)==(0|0);
  if ($156) {
   $errridge$3 = 0;$waserror$13 = $waserror$9;
  } else {
   $157 = ((($$pr24)) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(0|0);
   if ($159) {
    $errridge$3 = 0;$waserror$13 = $waserror$9;
   } else {
    $160 = ((($157)) + 4|0);
    $162 = $158;$204 = $160;$errridge$086 = 0;$waserror$1087 = $waserror$9;
    while(1) {
     $161 = ((($162)) + 12|0);
     $163 = HEAP32[$161>>2]|0;
     $164 = $163 & 16777216;
     $165 = ($164|0)==(0);
     if ($165) {
      $errridge$1 = $errridge$086;$waserror$11 = $waserror$1087;
     } else {
      $166 = HEAP32[(7480)>>2]|0;
      $167 = HEAP32[$15>>2]|0;
      $168 = $163 & 16777215;
      HEAP32[$vararg_buffer41>>2] = $167;
      $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
      HEAP32[$vararg_ptr44>>2] = $168;
      _qh_fprintf($166,6129,35872,$vararg_buffer41);
      $errridge$1 = $162;$waserror$11 = 1;
     }
     $169 = HEAP32[$161>>2]|0;
     $170 = $169 | 16777216;
     HEAP32[$161>>2] = $170;
     $171 = HEAP32[$162>>2]|0;
     $172 = (_qh_setsize($171)|0);
     $173 = HEAP32[(5828)>>2]|0;
     $174 = (($173) + -1)|0;
     $175 = ($172|0)==($174|0);
     if ($175) {
      $errridge$2 = $errridge$1;$waserror$12 = $waserror$11;
     } else {
      $176 = HEAP32[(7480)>>2]|0;
      $177 = ((($162)) + 4|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ((($178)) + 76|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ((($162)) + 8|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ((($182)) + 76|0);
      $184 = HEAP32[$183>>2]|0;
      HEAP32[$vararg_buffer45>>2] = $180;
      $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
      HEAP32[$vararg_ptr48>>2] = $184;
      $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
      HEAP32[$vararg_ptr49>>2] = $172;
      _qh_fprintf($176,6130,35952,$vararg_buffer45);
      $errridge$2 = $162;$waserror$12 = 1;
     }
     $185 = ((($162)) + 4|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==($facet|0);
     if ($187) {
      $188 = ((($162)) + 8|0);
      $189 = HEAP32[$188>>2]|0;
      $191 = $189;
     } else {
      $191 = $186;
     }
     $190 = ((($191)) + 80|0);
     $192 = HEAP32[$190>>2]|0;
     $193 = $192 | 16384;
     HEAP32[$190>>2] = $193;
     $194 = HEAP32[$26>>2]|0;
     $195 = (_qh_setin($194,$191)|0);
     $196 = ($195|0)==(0);
     if ($196) {
      $197 = HEAP32[(7480)>>2]|0;
      $198 = HEAP32[$15>>2]|0;
      $199 = ((($191)) + 76|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = HEAP32[$161>>2]|0;
      $202 = $201 & 16777215;
      HEAP32[$vararg_buffer50>>2] = $198;
      $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
      HEAP32[$vararg_ptr53>>2] = $200;
      $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
      HEAP32[$vararg_ptr54>>2] = $202;
      _qh_fprintf($197,6131,36040,$vararg_buffer50);
      $errridge$0$be = $162;$waserror$10$be = 1;
     } else {
      $errridge$0$be = $errridge$2;$waserror$10$be = $waserror$12;
     }
     $203 = ((($204)) + 4|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ($205|0)==(0|0);
     if ($206) {
      $errridge$3 = $errridge$0$be;$waserror$13 = $waserror$10$be;
      break;
     } else {
      $162 = $205;$204 = $203;$errridge$086 = $errridge$0$be;$waserror$1087 = $waserror$10$be;
     }
    }
   }
  }
 }
 $207 = HEAP32[$0>>2]|0;
 $208 = $207 & 8192;
 $209 = ($208|0)==(0);
 $210 = HEAP32[$26>>2]|0;
 $211 = ($210|0)!=(0|0);
 L78: do {
  if ($209) {
   if ($211) {
    $212 = ((($210)) + 4|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($213|0)==(0|0);
    if ($214) {
     $errother$7 = $errother$3;$waserror$17 = $waserror$13;
    } else {
     $215 = ((($212)) + 4|0);
     $216 = ($newmerge|0)==(0);
     $218 = $213;$371 = $215;$errother$472 = $errother$3;$waserror$1471 = $waserror$13;
     L82: while(1) {
      $217 = ((($218)) + 80|0);
      $219 = HEAP32[$217>>2]|0;
      $220 = $219 & 16384;
      $221 = ($220|0)==(0);
      if ($221) {
       $222 = HEAP32[(7480)>>2]|0;
       $223 = HEAP32[$15>>2]|0;
       $224 = ((($218)) + 76|0);
       $225 = HEAP32[$224>>2]|0;
       HEAP32[$vararg_buffer55>>2] = $223;
       $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
       HEAP32[$vararg_ptr58>>2] = $225;
       _qh_fprintf($222,6132,36136,$vararg_buffer55);
       $errother$5 = $218;$waserror$15 = 1;
      } else {
       $errother$5 = $errother$472;$waserror$15 = $waserror$1471;
      }
      $226 = HEAP32[$13>>2]|0;
      $227 = ((($218)) + 52|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = (_qh_vertexintersect_new($226,$228)|0);
      HEAP32[$intersection>>2] = $229;
      _qh_settemppush($229);
      $230 = HEAP32[$13>>2]|0;
      $231 = ($230|0)==(0|0);
      if (!($231)) {
       $232 = ((($230)) + 4|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($233|0)==(0|0);
       if (!($234)) {
        $237 = $233;$vertexp$159 = $232;
        while(1) {
         $235 = ((($vertexp$159)) + 4|0);
         $236 = ((($237)) + 16|0);
         $238 = $236;
         $239 = $238;
         $240 = HEAP32[$239>>2]|0;
         $241 = (($238) + 4)|0;
         $242 = $241;
         $243 = HEAP32[$242>>2]|0;
         $244 = $240 & 2147483647;
         $245 = $243 & -268435457;
         $246 = $236;
         $247 = $246;
         HEAP32[$247>>2] = $244;
         $248 = (($246) + 4)|0;
         $249 = $248;
         HEAP32[$249>>2] = $245;
         $250 = HEAP32[$235>>2]|0;
         $251 = ($250|0)==(0|0);
         if ($251) {
          break;
         } else {
          $237 = $250;$vertexp$159 = $235;
         }
        }
       }
      }
      $252 = HEAP32[$intersection>>2]|0;
      $253 = ($252|0)==(0|0);
      if (!($253)) {
       $254 = ((($252)) + 4|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = ($255|0)==(0|0);
       if (!($256)) {
        $259 = $255;$vertexp$262 = $254;
        while(1) {
         $257 = ((($vertexp$262)) + 4|0);
         $258 = ((($259)) + 16|0);
         $260 = $258;
         $261 = $260;
         $262 = HEAP32[$261>>2]|0;
         $263 = (($260) + 4)|0;
         $264 = $263;
         $265 = HEAP32[$264>>2]|0;
         $266 = $265 | 268435456;
         $267 = $258;
         $268 = $267;
         HEAP32[$268>>2] = $262;
         $269 = (($267) + 4)|0;
         $270 = $269;
         HEAP32[$270>>2] = $266;
         $271 = HEAP32[$257>>2]|0;
         $272 = ($271|0)==(0|0);
         if ($272) {
          break;
         } else {
          $259 = $271;$vertexp$262 = $257;
         }
        }
       }
      }
      $273 = HEAP32[$17>>2]|0;
      $274 = ($273|0)==(0|0);
      if (!($274)) {
       $275 = ((($273)) + 4|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = ($276|0)==(0|0);
       if (!($277)) {
        $278 = ((($275)) + 4|0);
        $279 = ((($218)) + 76|0);
        $281 = $276;$289 = $278;
        while(1) {
         $280 = ((($281)) + 4|0);
         $282 = HEAP32[$280>>2]|0;
         $283 = ($282|0)==($facet|0);
         if ($283) {
          $284 = ((($281)) + 8|0);
          $285 = HEAP32[$284>>2]|0;
          $287 = $285;
         } else {
          $287 = $282;
         }
         $286 = ($218|0)==($287|0);
         do {
          if ($286) {
           $292 = HEAP32[$281>>2]|0;
           $293 = ($292|0)==(0|0);
           if ($293) {
            break;
           }
           $294 = ((($292)) + 4|0);
           $295 = HEAP32[$294>>2]|0;
           $296 = ($295|0)==(0|0);
           if ($296) {
            break;
           }
           $297 = ((($294)) + 4|0);
           $298 = ((($281)) + 12|0);
           $300 = $295;$329 = $297;
           while(1) {
            $299 = ((($300)) + 16|0);
            $301 = $299;
            $302 = $301;
            $303 = HEAP32[$302>>2]|0;
            $304 = (($301) + 4)|0;
            $305 = $304;
            $306 = HEAP32[$305>>2]|0;
            $307 = $306 & 268435456;
            $308 = (0)==(0);
            $309 = ($307|0)==(0);
            $310 = $308 & $309;
            if ($310) {
             label = 78;
             break L82;
            }
            $317 = $299;
            $318 = $317;
            $319 = HEAP32[$318>>2]|0;
            $320 = (($317) + 4)|0;
            $321 = $320;
            $322 = HEAP32[$321>>2]|0;
            $323 = $319 | -2147483648;
            $324 = $299;
            $325 = $324;
            HEAP32[$325>>2] = $323;
            $326 = (($324) + 4)|0;
            $327 = $326;
            HEAP32[$327>>2] = $322;
            $328 = ((($329)) + 4|0);
            $330 = HEAP32[$329>>2]|0;
            $331 = ($330|0)==(0|0);
            if ($331) {
             break;
            } else {
             $300 = $330;$329 = $328;
            }
           }
          }
         } while(0);
         $288 = ((($289)) + 4|0);
         $290 = HEAP32[$289>>2]|0;
         $291 = ($290|0)==(0|0);
         if ($291) {
          break;
         } else {
          $281 = $290;$289 = $288;
         }
        }
       }
      }
      if ($216) {
       $332 = HEAP32[$intersection>>2]|0;
       $333 = ($332|0)==(0|0);
       if (!($333)) {
        $334 = ((($332)) + 4|0);
        $335 = HEAP32[$334>>2]|0;
        $336 = ($335|0)==(0|0);
        if (!($336)) {
         $337 = ((($334)) + 4|0);
         $338 = ((($218)) + 76|0);
         $340 = $335;$356 = $337;
         while(1) {
          $339 = ((($340)) + 16|0);
          $341 = $339;
          $342 = $341;
          $343 = HEAP32[$342>>2]|0;
          $344 = (($341) + 4)|0;
          $345 = $344;
          $346 = HEAP32[$345>>2]|0;
          $347 = $343 & -2147483648;
          $348 = ($347|0)==(0);
          $349 = (0)==(0);
          $350 = $348 & $349;
          do {
           if ($350) {
            $351 = HEAP32[(5344)>>2]|0;
            $352 = ($351|0)<(3);
            $353 = HEAP32[(5392)>>2]|0;
            $354 = ($353|0)!=(0);
            $or$cond5 = $352 & $354;
            if ($or$cond5) {
             break;
            }
            $359 = HEAP32[(7480)>>2]|0;
            $360 = $346 & 16777215;
            $361 = HEAP32[$15>>2]|0;
            $362 = HEAP32[$338>>2]|0;
            $363 = HEAP32[(7596)>>2]|0;
            HEAP32[$vararg_buffer65>>2] = $360;
            $vararg_ptr68 = ((($vararg_buffer65)) + 4|0);
            HEAP32[$vararg_ptr68>>2] = $361;
            $vararg_ptr69 = ((($vararg_buffer65)) + 8|0);
            HEAP32[$vararg_ptr69>>2] = $362;
            $vararg_ptr70 = ((($vararg_buffer65)) + 12|0);
            HEAP32[$vararg_ptr70>>2] = $363;
            _qh_fprintf($359,6134,36312,$vararg_buffer65);
            $364 = HEAP32[(5316)>>2]|0;
            $365 = HEAP32[(5392)>>2]|0;
            $366 = $365 | $364;
            $367 = ($366|0)==(0);
            if (!($367)) {
             break;
            }
            _qh_errprint(55888,$facet,$218,0,$340);
            $368 = HEAP32[(5392)>>2]|0;
            $369 = ($368|0)==(0);
            if ($369) {
             label = 89;
             break L82;
            }
           }
          } while(0);
          $355 = ((($356)) + 4|0);
          $357 = HEAP32[$356>>2]|0;
          $358 = ($357|0)==(0|0);
          if ($358) {
           break;
          } else {
           $340 = $357;$356 = $355;
          }
         }
        }
       }
      }
      _qh_settempfree($intersection);
      $370 = ((($371)) + 4|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = ($372|0)==(0|0);
      if ($373) {
       $errother$7 = $errother$5;$waserror$17 = $waserror$15;
       break L78;
      } else {
       $218 = $372;$371 = $370;$errother$472 = $errother$5;$waserror$1471 = $waserror$15;
      }
     }
     if ((label|0) == 78) {
      $311 = HEAP32[(7480)>>2]|0;
      $312 = $306 & 16777215;
      $313 = HEAP32[$298>>2]|0;
      $314 = $313 & 16777215;
      $315 = HEAP32[$15>>2]|0;
      $316 = HEAP32[$279>>2]|0;
      HEAP32[$vararg_buffer59>>2] = $312;
      $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
      HEAP32[$vararg_ptr62>>2] = $314;
      $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
      HEAP32[$vararg_ptr63>>2] = $315;
      $vararg_ptr64 = ((($vararg_buffer59)) + 12|0);
      HEAP32[$vararg_ptr64>>2] = $316;
      _qh_fprintf($311,6133,36224,$vararg_buffer59);
      _qh_errexit(5,$facet,$281);
      // unreachable;
     }
     else if ((label|0) == 89) {
      _qh_errexit(5,0,0);
      // unreachable;
     }
    }
   } else {
    $errother$7 = $errother$3;$waserror$17 = $waserror$13;
   }
  } else {
   if ($211) {
    $374 = ((($210)) + 4|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)==(0|0);
    if ($376) {
     $errother$7 = $errother$3;$waserror$17 = $waserror$13;
    } else {
     $377 = ((($374)) + 4|0);
     $442 = $375;$443 = $377;$errother$6$ph83 = $errother$3;$waserror$16$ph82 = $waserror$13;
     while(1) {
      $379 = $442;$384 = $443;
      while(1) {
       $378 = ((($379)) + 80|0);
       $380 = HEAP32[$378>>2]|0;
       $381 = $380 & 8192;
       $382 = ($381|0)==(0);
       if (!($382)) {
        $387 = HEAP32[$26>>2]|0;
        $388 = ((($387)) + 8|0);
        $389 = $384;
        $390 = $388;
        $391 = (($389) - ($390))|0;
        $392 = $391 >> 2;
        $393 = ((($379)) + 60|0);
        $394 = HEAP32[$393>>2]|0;
        $395 = (_qh_setindex($394,$facet)|0);
        $396 = HEAP32[$13>>2]|0;
        $397 = ((($379)) + 52|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = (_qh_setequal_skip($396,$392,$398,$395)|0);
        $400 = ($399|0)==(0);
        if ($400) {
         $$lcssa158 = $379;$$lcssa160 = $384;$$lcssa162 = $392;$$lcssa163 = $395;
         break;
        }
       }
       $383 = ((($384)) + 4|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = ($385|0)==(0|0);
       if ($386) {
        $errother$7 = $errother$6$ph83;$waserror$17 = $waserror$16$ph82;
        break L78;
       } else {
        $379 = $385;$384 = $383;
       }
      }
      $401 = HEAP32[(7480)>>2]|0;
      $402 = HEAP32[$15>>2]|0;
      $403 = ((($$lcssa158)) + 76|0);
      $404 = HEAP32[$403>>2]|0;
      HEAP32[$vararg_buffer71>>2] = $402;
      $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
      HEAP32[$vararg_ptr74>>2] = $$lcssa162;
      $vararg_ptr75 = ((($vararg_buffer71)) + 8|0);
      HEAP32[$vararg_ptr75>>2] = $404;
      $vararg_ptr76 = ((($vararg_buffer71)) + 12|0);
      HEAP32[$vararg_ptr76>>2] = $$lcssa163;
      _qh_fprintf($401,6135,36456,$vararg_buffer71);
      $405 = ((($$lcssa160)) + 4|0);
      $406 = HEAP32[$$lcssa160>>2]|0;
      $407 = ($406|0)==(0|0);
      if ($407) {
       $errother$7 = $$lcssa158;$waserror$17 = 1;
       break;
      } else {
       $442 = $406;$443 = $405;$errother$6$ph83 = $$lcssa158;$waserror$16$ph82 = 1;
      }
     }
    }
   } else {
    $errother$7 = $errother$3;$waserror$17 = $waserror$13;
   }
  }
 } while(0);
 $408 = HEAP32[(5828)>>2]|0;
 $409 = ($408|0)<(5);
 if ($409) {
  $410 = HEAP32[(5344)>>2]|0;
  $411 = ($410|0)>(2);
  $412 = HEAP32[(5280)>>2]|0;
  $413 = ($412|0)!=(0);
  $or$cond9 = $411 | $413;
  if ($or$cond9) {
   $414 = HEAP32[$17>>2]|0;
   $415 = ($414|0)==(0|0);
   if ($415) {
    $errridge$7 = $errridge$3;$waserror$21 = $waserror$17;
   } else {
    $416 = ((($414)) + 4|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = (_qh_setsize($414)|0);
    $419 = ($418|0)>(0);
    if ($419) {
     $errridge$451 = $errridge$3;$ridge$052 = $417;$ridge_i$054 = 0;$waserror$1853 = $waserror$17;
     while(1) {
      $420 = (($ridge_i$054) + 1)|0;
      $421 = ($420|0)<($418|0);
      $422 = HEAP32[$17>>2]|0;
      if ($421) {
       $423 = ((($ridge$052)) + 12|0);
       $425 = $422;$errridge$546 = $errridge$451;$i$048 = $420;$waserror$1947 = $waserror$1853;
       while(1) {
        $424 = (((($425)) + 4|0) + ($i$048<<2)|0);
        $426 = HEAP32[$424>>2]|0;
        $427 = HEAP32[$ridge$052>>2]|0;
        $428 = HEAP32[$426>>2]|0;
        $429 = (_qh_setequal($427,$428)|0);
        $430 = ($429|0)==(0);
        if ($430) {
         $errridge$6 = $errridge$546;$waserror$20 = $waserror$1947;
        } else {
         $431 = HEAP32[(7480)>>2]|0;
         $432 = HEAP32[$423>>2]|0;
         $433 = $432 & 16777215;
         $434 = ((($426)) + 12|0);
         $435 = HEAP32[$434>>2]|0;
         $436 = $435 & 16777215;
         HEAP32[$vararg_buffer77>>2] = $433;
         $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
         HEAP32[$vararg_ptr80>>2] = $436;
         _qh_fprintf($431,6227,36552,$vararg_buffer77);
         $errridge$6 = $ridge$052;$waserror$20 = 1;
        }
        $437 = (($i$048) + 1)|0;
        $438 = HEAP32[$17>>2]|0;
        $exitcond = ($437|0)==($418|0);
        if ($exitcond) {
         $$lcssa = $438;$errridge$5$lcssa = $errridge$6;$waserror$19$lcssa = $waserror$20;
         break;
        } else {
         $425 = $438;$errridge$546 = $errridge$6;$i$048 = $437;$waserror$1947 = $waserror$20;
        }
       }
      } else {
       $$lcssa = $422;$errridge$5$lcssa = $errridge$451;$waserror$19$lcssa = $waserror$1853;
      }
      $439 = (((($$lcssa)) + 4|0) + ($420<<2)|0);
      $440 = HEAP32[$439>>2]|0;
      $exitcond117 = ($420|0)==($418|0);
      if ($exitcond117) {
       $errridge$7 = $errridge$5$lcssa;$waserror$21 = $waserror$19$lcssa;
       break;
      } else {
       $errridge$451 = $errridge$5$lcssa;$ridge$052 = $440;$ridge_i$054 = $420;$waserror$1853 = $waserror$19$lcssa;
      }
     }
    } else {
     $errridge$7 = $errridge$3;$waserror$21 = $waserror$17;
    }
   }
  } else {
   $errridge$7 = $errridge$3;$waserror$21 = $waserror$17;
  }
 } else {
  $errridge$7 = $errridge$3;$waserror$21 = $waserror$17;
 }
 $441 = ($waserror$21|0)==(0);
 if ($441) {
  STACKTOP = sp;return;
 }
 _qh_errprint(55888,$facet,$errother$7,$errridge$7,0);
 HEAP32[$waserrorp>>2] = 1;
 STACKTOP = sp;return;
}
function _qh_vertexintersect_new($vertexsetA,$vertexsetB) {
 $vertexsetA = $vertexsetA|0;
 $vertexsetB = $vertexsetB|0;
 var $$lcssa31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $intersection = 0, $vertexA$0$ph$be = 0, $vertexA$0$ph8 = 0;
 var $vertexB$0$ph$be = 0, $vertexB$0$ph9 = 0, $vertexB$06 = 0, $vertexB$06$lcssa33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $intersection = sp;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = (_qh_setnew($1)|0);
 HEAP32[$intersection>>2] = $2;
 $3 = ((($vertexsetA)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   $6 = ((($vertexsetB)) + 4|0);
   $35 = $4;$vertexA$0$ph8 = $3;$vertexB$0$ph9 = $6;
   while(1) {
    $9 = $35;$vertexB$06 = $vertexB$0$ph9;
    while(1) {
     $7 = HEAP32[$vertexB$06>>2]|0;
     $8 = ($7|0)==(0|0);
     if ($8) {
      break L1;
     }
     $10 = ($9|0)==($7|0);
     if ($10) {
      $$lcssa31 = $9;$vertexB$06$lcssa33 = $vertexB$06;
      label = 6;
      break;
     }
     $14 = ((($9)) + 16|0);
     $15 = $14;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) + 4)|0;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = $20 & 16777215;
     $22 = ((($7)) + 16|0);
     $23 = $22;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = (($23) + 4)|0;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $29 = $28 & 16777215;
     $30 = ($21>>>0)>($29>>>0);
     if ($30) {
      $vertexB$0$ph$be = $vertexB$06;
      break;
     }
     $31 = ((($vertexB$06)) + 4|0);
     $32 = HEAP32[$vertexA$0$ph8>>2]|0;
     $33 = ($32|0)==(0|0);
     if ($33) {
      break L1;
     } else {
      $9 = $32;$vertexB$06 = $31;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     _qh_setappend($intersection,$$lcssa31);
     $11 = ((($vertexB$06$lcssa33)) + 4|0);
     $vertexB$0$ph$be = $11;
    }
    $vertexA$0$ph$be = ((($vertexA$0$ph8)) + 4|0);
    $12 = HEAP32[$vertexA$0$ph$be>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     break;
    } else {
     $35 = $12;$vertexA$0$ph8 = $vertexA$0$ph$be;$vertexB$0$ph9 = $vertexB$0$ph$be;
    }
   }
  }
 } while(0);
 $34 = HEAP32[$intersection>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _qh_printlists() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$08 = 0, $count$14 = 0;
 var $facet$0 = 0, $facet$07 = 0, $facet$09 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr10 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $vertex$0 = 0, $vertex$03 = 0, $vertex$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp;
 $vararg_buffer11 = sp + 8|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 48|0;
 $0 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($0,8108,36640,$vararg_buffer);
 $facet$07 = HEAP32[(7500)>>2]|0;
 $1 = ($facet$07|0)==(0|0);
 L1: do {
  if (!($1)) {
   $count$08 = 0;$facet$09 = $facet$07;
   while(1) {
    $2 = ((($facet$09)) + 48|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==(0|0);
    if ($4) {
     break L1;
    }
    $5 = (($count$08) + 1)|0;
    $6 = (($5|0) % 100)&-1;
    $7 = ($6|0)==(0);
    if ($7) {
     $8 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($8,8109,36664,$vararg_buffer1);
    }
    $9 = HEAP32[(7480)>>2]|0;
    $10 = ((($facet$09)) + 76|0);
    $11 = HEAP32[$10>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $11;
    _qh_fprintf($9,8110,36672,$vararg_buffer3);
    $facet$0 = HEAP32[$2>>2]|0;
    $12 = ($facet$0|0)==(0|0);
    if ($12) {
     break;
    } else {
     $count$08 = $5;$facet$09 = $facet$0;
    }
   }
  }
 } while(0);
 $13 = HEAP32[(7480)>>2]|0;
 $14 = HEAP32[(7512)>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $36 = -1;
 } else {
  $16 = ((($14)) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $36 = $17;
 }
 $18 = HEAP32[(7516)>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $37 = -1;
 } else {
  $20 = ((($18)) + 76|0);
  $21 = HEAP32[$20>>2]|0;
  $37 = $21;
 }
 $22 = HEAP32[(7508)>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $38 = -1;
 } else {
  $24 = ((($22)) + 76|0);
  $25 = HEAP32[$24>>2]|0;
  $38 = $25;
 }
 $26 = HEAP32[(7548)>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $39 = -1;
 } else {
  $28 = ((($26)) + 16|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & 16777215;
  $39 = $35;
 }
 HEAP32[$vararg_buffer5>>2] = $36;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $37;
 $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
 HEAP32[$vararg_ptr9>>2] = $38;
 $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
 HEAP32[$vararg_ptr10>>2] = $39;
 _qh_fprintf($13,8111,36680,$vararg_buffer5);
 $vertex$03 = HEAP32[(7540)>>2]|0;
 $40 = ($vertex$03|0)==(0|0);
 if ($40) {
  $57 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($57,8114,56128,$vararg_buffer16);
  STACKTOP = sp;return;
 } else {
  $count$14 = 0;$vertex$05 = $vertex$03;
 }
 while(1) {
  $41 = HEAP32[$vertex$05>>2]|0;
  $42 = ($41|0)==(0|0);
  if ($42) {
   label = 19;
   break;
  }
  $43 = (($count$14) + 1)|0;
  $44 = (($43|0) % 100)&-1;
  $45 = ($44|0)==(0);
  if ($45) {
   $46 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($46,8112,36664,$vararg_buffer11);
  }
  $47 = HEAP32[(7480)>>2]|0;
  $48 = ((($vertex$05)) + 16|0);
  $49 = $48;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 & 16777215;
  HEAP32[$vararg_buffer13>>2] = $55;
  _qh_fprintf($47,8113,36672,$vararg_buffer13);
  $vertex$0 = HEAP32[$vertex$05>>2]|0;
  $56 = ($vertex$0|0)==(0|0);
  if ($56) {
   label = 19;
   break;
  } else {
   $count$14 = $43;$vertex$05 = $vertex$0;
  }
 }
 if ((label|0) == 19) {
  $57 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($57,8114,56128,$vararg_buffer16);
  STACKTOP = sp;return;
 }
}
function _qh_checkvertex($vertex) {
 $vertex = $vertex|0;
 var $$lcssa17 = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $errfacet$0$ph = 0, $errfacet$0$ph$lcssa = 0, $errfacet$16 = 0, $neighborp$0 = 0;
 var $neighborp$0$ph = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $waserror$0 = 0, $waserror$2$ph = 0, $waserror$2$ph$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = ((($vertex)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_qh_pointid($1)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  _qh_fprintf($4,6144,36768,$vararg_buffer);
  $waserror$0 = 1;
 } else {
  $waserror$0 = 0;
 }
 $6 = ((($vertex)) + 16|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 16777215;
 $14 = HEAP32[(7576)>>2]|0;
 $15 = $14 & 16777215;
 $16 = ($13>>>0)<($15>>>0);
 if (!($16)) {
  $17 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $13;
  _qh_fprintf($17,6145,36832,$vararg_buffer1);
  $errfacet$16 = 0;
  _qh_errprint(55888,0,0,0,$vertex);
  _qh_errexit(5,$errfacet$16,0);
  // unreachable;
 }
 $18 = ($waserror$0|0)==(0);
 if (!($18)) {
  $errfacet$16 = 0;
  _qh_errprint(55888,0,0,0,$vertex);
  _qh_errexit(5,$errfacet$16,0);
  // unreachable;
 }
 $19 = $6;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 1073741824;
 $26 = (0)==(0);
 $27 = ($25|0)==(0);
 $28 = $26 & $27;
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = ((($vertex)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_qh_setsize($30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$29>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = ((($33)) + 4|0);
 $errfacet$0$ph = 0;$neighborp$0$ph = $35;$waserror$2$ph = 0;
 L20: while(1) {
  $neighborp$0 = $neighborp$0$ph;
  while(1) {
   $36 = ((($neighborp$0)) + 4|0);
   $37 = HEAP32[$neighborp$0>>2]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $errfacet$0$ph$lcssa = $errfacet$0$ph;$waserror$2$ph$lcssa = $waserror$2$ph;
    break L20;
   }
   $39 = ((($37)) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_qh_setin($40,$vertex)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $$lcssa17 = $36;$$lcssa18 = $37;
    break;
   } else {
    $neighborp$0 = $36;
   }
  }
  $43 = HEAP32[(7480)>>2]|0;
  $44 = ((($$lcssa18)) + 76|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $6;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 4)|0;
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 & 16777215;
  HEAP32[$vararg_buffer4>>2] = $45;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $52;
  _qh_fprintf($43,6146,36896,$vararg_buffer4);
  $errfacet$0$ph = $$lcssa18;$neighborp$0$ph = $$lcssa17;$waserror$2$ph = 1;
 }
 $53 = ($waserror$2$ph$lcssa|0)==(0);
 if ($53) {
  STACKTOP = sp;return;
 } else {
  $errfacet$16 = $errfacet$0$ph$lcssa;
  _qh_errprint(55888,0,0,0,$vertex);
  _qh_errexit(5,$errfacet$16,0);
  // unreachable;
 }
}
function _qh_clearcenters($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $facet$0 = 0, $facet$02 = 0, $facet$03 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7592)>>2]|0;
 $1 = ($0|0)==($type|0);
 if (!($1)) {
  $facet$02 = HEAP32[(7500)>>2]|0;
  $2 = ($facet$02|0)==(0|0);
  L3: do {
   if (!($2)) {
    $facet$03 = $facet$02;
    while(1) {
     $3 = ((($facet$03)) + 48|0);
     $4 = HEAP32[$3>>2]|0;
     $5 = ($4|0)==(0|0);
     if ($5) {
      break L3;
     }
     $6 = ((($facet$03)) + 80|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = $7 & 268435968;
     $9 = ($8|0)==(512);
     do {
      if ($9) {
       $10 = ((($facet$03)) + 40|0);
       HEAP32[$10>>2] = 0;
      } else {
       $12 = HEAP32[(7592)>>2]|0;
       $13 = ($12|0)==(1);
       $14 = ((($facet$03)) + 40|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($15|0)!=(0|0);
       if ($13) {
        if (!($16)) {
         break;
        }
        $17 = HEAP32[(7492)>>2]|0;
        _qh_memfree($15,$17);
        HEAP32[$14>>2] = 0;
        break;
       } else {
        if (!($16)) {
         break;
        }
        $18 = HEAP32[(7488)>>2]|0;
        _qh_memfree($15,$18);
        HEAP32[$14>>2] = 0;
        break;
       }
      }
     } while(0);
     $facet$0 = HEAP32[$3>>2]|0;
     $11 = ($facet$0|0)==(0|0);
     if ($11) {
      break;
     } else {
      $facet$03 = $facet$0;
     }
    }
   }
  } while(0);
  HEAP32[(7592)>>2] = $type;
 }
 $19 = HEAP32[(5344)>>2]|0;
 $20 = ($19|0)>(1);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $type;
 _qh_fprintf($21,2043,36976,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_createsimplex($vertices) {
 $vertices = $vertices|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $facet$03 = 0, $newfacet$0 = 0, $newfacet$06 = 0, $newfacet$07 = 0, $newfacets = 0, $nth$04 = 0, $nth$1 = 0, $toporient$012 = 0, $vararg_buffer = 0, $vertex$014 = 0, $vertex_i$013 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $newfacets = sp + 4|0;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = (_qh_settemp($1)|0);
 HEAP32[$newfacets>>2] = $2;
 $3 = (_qh_newfacet()|0);
 HEAP32[(7504)>>2] = $3;
 HEAP32[(7512)>>2] = $3;
 HEAP32[(7500)>>2] = $3;
 HEAP32[(7520)>>2] = 0;
 HEAP32[(7556)>>2] = 0;
 HEAP32[(7552)>>2] = 0;
 $4 = (_qh_newvertex(0)|0);
 HEAP32[(7544)>>2] = $4;
 HEAP32[(7548)>>2] = $4;
 HEAP32[(7540)>>2] = $4;
 $5 = ($vertices|0)==(0|0);
 if (!($5)) {
  $6 = ((($vertices)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_qh_setsize($vertices)|0);
  $9 = ($8|0)>(0);
  if ($9) {
   $toporient$012 = 1;$vertex$014 = $7;$vertex_i$013 = 0;
   while(1) {
    $11 = (_qh_newfacet()|0);
    $12 = (_qh_setnew_delnthsorted($vertices,$8,$vertex_i$013,0)|0);
    $13 = ((($11)) + 52|0);
    HEAP32[$13>>2] = $12;
    $14 = ((($11)) + 80|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $toporient$012 << 12;
    $17 = $16 & 4096;
    $18 = $15 & -4097;
    $19 = $18 | $17;
    HEAP32[$14>>2] = $19;
    _qh_appendfacet($11);
    $20 = HEAP32[$14>>2]|0;
    $21 = $20 | 1024;
    HEAP32[$14>>2] = $21;
    _qh_appendvertex($vertex$014);
    _qh_setappend($newfacets,$11);
    $22 = $toporient$012 ^ 1;
    $23 = (($vertex_i$013) + 1)|0;
    $24 = (((($vertices)) + 4|0) + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $exitcond = ($23|0)==($8|0);
    if ($exitcond) {
     break;
    } else {
     $toporient$012 = $22;$vertex$014 = $25;$vertex_i$013 = $23;
    }
   }
  }
 }
 $newfacet$06 = HEAP32[(7512)>>2]|0;
 $10 = ($newfacet$06|0)==(0|0);
 L6: do {
  if (!($10)) {
   $newfacet$07 = $newfacet$06;
   while(1) {
    $26 = ((($newfacet$07)) + 48|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     break L6;
    }
    $29 = HEAP32[(7512)>>2]|0;
    $30 = ($29|0)==(0|0);
    L10: do {
     if (!($30)) {
      $31 = ((($newfacet$07)) + 60|0);
      $facet$03 = $29;$nth$04 = 0;
      while(1) {
       $32 = ((($facet$03)) + 48|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0|0);
       if ($34) {
        break L10;
       }
       $35 = ($facet$03|0)==($newfacet$07|0);
       if ($35) {
        $nth$1 = $nth$04;
       } else {
        $36 = (($nth$04) + 1)|0;
        $37 = HEAP32[$31>>2]|0;
        $38 = (((($37)) + 4|0) + ($nth$04<<2)|0);
        HEAP32[$38>>2] = $facet$03;
        $nth$1 = $36;
       }
       $39 = HEAP32[$32>>2]|0;
       $40 = ($39|0)==(0|0);
       if ($40) {
        break;
       } else {
        $facet$03 = $39;$nth$04 = $nth$1;
       }
      }
     }
    } while(0);
    $41 = ((($newfacet$07)) + 60|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[(5828)>>2]|0;
    _qh_settruncate($42,$43);
    $newfacet$0 = HEAP32[$26>>2]|0;
    $44 = ($newfacet$0|0)==(0|0);
    if ($44) {
     break;
    } else {
     $newfacet$07 = $newfacet$0;
    }
   }
  }
 } while(0);
 _qh_settempfree($newfacets);
 $45 = HEAP32[(5344)>>2]|0;
 $46 = ($45|0)>(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($47,1028,37024,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_newvertex($point) {
 $point = $point|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(44800)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(44800)>>2] = $1;
 $2 = (_qh_memalloc(24)|0);
 dest=$2; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $3 = HEAP32[(7576)>>2]|0;
 $4 = $3 & 16777215;
 $5 = ($4|0)==(16777215);
 if ($5) {
  $6 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = 16777215;
  _qh_fprintf($6,6159,37064,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $7 = HEAP32[(7576)>>2]|0;
 $8 = $7 & 16777215;
 $9 = HEAP32[(7532)>>2]|0;
 $10 = ($8|0)==($9|0);
 if ($10) {
  HEAP32[(7536)>>2] = $2;
 }
 $11 = HEAP32[(7576)>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = $12 & 16777215;
 $14 = $11 & -16777216;
 $15 = $13 | $14;
 HEAP32[(7576)>>2] = $15;
 $16 = ((($2)) + 16|0);
 $17 = $16;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + 4)|0;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = $11 & 16777215;
 $24 = $22 & -16777216;
 $25 = $23 | $24;
 $26 = $16;
 $27 = $26;
 HEAP32[$27>>2] = $19;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $25;
 $30 = ((($2)) + 8|0);
 HEAP32[$30>>2] = $point;
 $31 = HEAP32[(5828)>>2]|0;
 $32 = ($31|0)<(16);
 $33 = $16;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($31|0),0,56)|0);
 $39 = tempRet0;
 $40 = $39 & 251658240;
 $32 ? 0 : 0;
 $41 = $32 ? $40 : 0;
 $42 = $38 & -251658241;
 $43 = $41 | $42;
 $44 = $16;
 $45 = $44;
 HEAP32[$45>>2] = $35;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $43;
 $48 = HEAP32[(5344)>>2]|0;
 $49 = ($48|0)>(3);
 if (!($49)) {
  STACKTOP = sp;return ($2|0);
 }
 $50 = HEAP32[(7480)>>2]|0;
 $51 = HEAP32[$30>>2]|0;
 $52 = (_qh_pointid($51)|0);
 $53 = $16;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & 16777215;
 HEAP32[$vararg_buffer1>>2] = $52;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $59;
 _qh_fprintf($50,4060,37208,$vararg_buffer1);
 STACKTOP = sp;return ($2|0);
}
function _qh_delridge($ridge) {
 $ridge = $ridge|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ridge)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 (_qh_setdel($3,$ridge)|0);
 $4 = ((($ridge)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 (_qh_setdel($7,$ridge)|0);
 _qh_setfree($ridge);
 _qh_memfree($ridge,16);
 return;
}
function _qh_delvertex($vertex) {
 $vertex = $vertex|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(7536)>>2]|0;
 $1 = ($0|0)==($vertex|0);
 if ($1) {
  HEAP32[(7536)>>2] = 0;
 }
 _qh_removevertex($vertex);
 $2 = ((($vertex)) + 12|0);
 _qh_setfree($2);
 _qh_memfree($vertex,24);
 return;
}
function _qh_facet3vertex($facet) {
 $facet = $facet|0;
 var $$lcssa30 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cntprojected$0 = 0, $cntprojected$13 = 0, $or$cond = 0;
 var $or$cond1 = 0, $ridge$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vertex = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $vertex = sp + 12|0;
 $vertices = sp + 8|0;
 $0 = (_qh_settemp(3)|0);
 HEAP32[$vertices>>2] = $0;
 $1 = ((($facet)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 8192;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($facet)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  _qh_setappend($vertices,$8);
  $9 = HEAP32[$1>>2]|0;
  $10 = $9 & 4096;
  $11 = ($10|0)==(0);
  $12 = HEAP32[$5>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  if ($11) {
   _qh_setaddnth($vertices,0,$14);
  } else {
   _qh_setappend($vertices,$14);
  }
  $15 = HEAP32[$5>>2]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  _qh_setappend($vertices,$17);
  $33 = HEAP32[$vertices>>2]|0;
  STACKTOP = sp;return ($33|0);
 }
 $18 = ((($facet)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $cntprojected$0 = 0;$ridge$0 = $21;
 while(1) {
  $22 = (_qh_nextridge3d($ridge$0,$facet,$vertex)|0);
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   $32 = $22;$cntprojected$13 = $cntprojected$0;
   break;
  }
  $24 = HEAP32[$vertex>>2]|0;
  _qh_setappend($vertices,$24);
  $25 = (($cntprojected$0) + 1)|0;
  $26 = ($cntprojected$0|0)>(2);
  $27 = ($22|0)==($21|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $$lcssa30 = $22;$$lcssa32 = $23;$$lcssa33 = $25;
   label = 9;
   break;
  } else {
   $cntprojected$0 = $25;$ridge$0 = $22;
  }
 }
 if ((label|0) == 9) {
  $28 = ($$lcssa33|0)==(3);
  $or$cond1 = $$lcssa32 & $28;
  if ($or$cond1) {
   $33 = HEAP32[$vertices>>2]|0;
   STACKTOP = sp;return ($33|0);
  } else {
   $32 = $$lcssa30;$cntprojected$13 = $$lcssa33;
  }
 }
 $29 = HEAP32[(7480)>>2]|0;
 $30 = ((($facet)) + 76|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$vararg_buffer>>2] = $31;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $cntprojected$13;
 _qh_fprintf($29,6148,37248,$vararg_buffer);
 _qh_errexit(5,$facet,$32);
 // unreachable;
 return (0)|0;
}
function _qh_nextridge3d($atridge,$facet,$vertexp) {
 $atridge = $atridge|0;
 $facet = $facet|0;
 $vertexp = $vertexp|0;
 var $$ = 0, $$0 = 0, $$1$le = 0, $$lcssa = 0, $$lcssa22 = 0, $$lcssa23 = 0, $$lcssa24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $atvertex$0 = 0, $atvertex$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($atridge)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($facet|0);
 $3 = HEAP32[$atridge>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = ((($3)) + 4|0);
 $atvertex$0$in = $2 ? $4 : $5;
 $atvertex$0 = HEAP32[$atvertex$0$in>>2]|0;
 $6 = ((($facet)) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($7)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($9)) + 4|0);
 $13 = $10;$16 = $12;
 while(1) {
  $14 = ($13|0)==($atridge|0);
  if (!($14)) {
   $19 = ((($13)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==($facet|0);
   $22 = HEAP32[$13>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = ((($22)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$23>>2]|0;
   $$ = $21 ? $26 : $25;
   $27 = ($$|0)==($atvertex$0|0);
   if ($27) {
    $$lcssa = $13;$$lcssa22 = $21;$$lcssa23 = $25;$$lcssa24 = $26;
    break;
   }
  }
  $15 = ((($16)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = 0;
   label = 9;
   break;
  } else {
   $13 = $17;$16 = $15;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 $28 = ($vertexp|0)==(0|0);
 if ($28) {
  $$0 = $$lcssa;
  return ($$0|0);
 }
 $$1$le = $$lcssa22 ? $$lcssa23 : $$lcssa24;
 HEAP32[$vertexp>>2] = $$1$le;
 $$0 = $$lcssa;
 return ($$0|0);
}
function _qh_findbestlower($upperfacet,$point,$bestdistp,$numpart) {
 $upperfacet = $upperfacet|0;
 $point = $point|0;
 $bestdistp = $bestdistp|0;
 $numpart = $numpart|0;
 var $$lcssa = 0, $$lcssa101 = 0, $$lcssa103 = 0, $$lcssa105 = 0.0, $$lcssa96 = 0, $$lcssa98 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $bestdist$0$ph35 = 0.0, $bestdist$0$ph35$lcssa = 0.0, $bestdist$15 = 0.0, $bestdist$2$ph25 = 0.0, $bestdist$2$ph25$lcssa = 0.0, $bestdist$39 = 0.0;
 var $bestfacet$0$ph34 = 0, $bestfacet$0$ph34$lcssa = 0, $bestfacet$2$ph24 = 0, $bestfacet$2$ph24$lcssa = 0, $bestfacet$37 = 0, $dist = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp;
 $dist = sp + 8|0;
 $0 = HEAP32[(43328)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(43328)>>2] = $1;
 $2 = ((($upperfacet)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $bestdist$15 = -8.9884656743115785E+307;
   label = 10;
  } else {
   $5 = ((($3)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $bestdist$15 = -8.9884656743115785E+307;
    label = 10;
   } else {
    $8 = ((($5)) + 4|0);
    $64 = $6;$65 = $8;$bestdist$0$ph35 = -8.9884656743115785E+307;$bestfacet$0$ph34 = 0;
    L4: while(1) {
     $10 = $64;$19 = $65;
     while(1) {
      $9 = ((($10)) + 80|0);
      $11 = HEAP32[$9>>2]|0;
      $12 = $11 & 196608;
      $13 = ($12|0)==(0);
      if ($13) {
       $14 = HEAP32[$numpart>>2]|0;
       $15 = (($14) + 1)|0;
       HEAP32[$numpart>>2] = $15;
       _qh_distplane($point,$10,$dist);
       $16 = +HEAPF64[$dist>>3];
       $17 = $16 > $bestdist$0$ph35;
       if ($17) {
        $$lcssa101 = $10;$$lcssa103 = $19;$$lcssa105 = $16;
        break;
       }
      }
      $18 = ((($19)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0|0);
      if ($21) {
       $bestdist$0$ph35$lcssa = $bestdist$0$ph35;$bestfacet$0$ph34$lcssa = $bestfacet$0$ph34;
       break L4;
      } else {
       $10 = $20;$19 = $18;
      }
     }
     $22 = ((($$lcssa103)) + 4|0);
     $23 = HEAP32[$$lcssa103>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      $bestdist$39 = $$lcssa105;$bestfacet$37 = $$lcssa101;
      break L1;
     } else {
      $64 = $23;$65 = $22;$bestdist$0$ph35 = $$lcssa105;$bestfacet$0$ph34 = $$lcssa101;
     }
    }
    $25 = ($bestfacet$0$ph34$lcssa|0)==(0|0);
    if ($25) {
     $bestdist$15 = $bestdist$0$ph35$lcssa;
     label = 10;
    } else {
     $bestdist$39 = $bestdist$0$ph35$lcssa;$bestfacet$37 = $bestfacet$0$ph34$lcssa;
    }
   }
  }
 } while(0);
 L13: do {
  if ((label|0) == 10) {
   $26 = HEAP32[(43336)>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[(43336)>>2] = $27;
   $28 = (_qh_nearvertex($upperfacet,$point,$dist)|0);
   _qh_vertexneighbors();
   $29 = ((($28)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $53 = HEAP32[(7480)>>2]|0;
    $54 = ((($upperfacet)) + 76|0);
    $55 = HEAP32[$54>>2]|0;
    HEAP32[$vararg_buffer>>2] = $55;
    _qh_fprintf($53,6228,37344,$vararg_buffer);
    _qh_errexit(5,$upperfacet,0);
    // unreachable;
   }
   $32 = ((($30)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $53 = HEAP32[(7480)>>2]|0;
    $54 = ((($upperfacet)) + 76|0);
    $55 = HEAP32[$54>>2]|0;
    HEAP32[$vararg_buffer>>2] = $55;
    _qh_fprintf($53,6228,37344,$vararg_buffer);
    _qh_errexit(5,$upperfacet,0);
    // unreachable;
   }
   $35 = ((($32)) + 4|0);
   $66 = $33;$67 = $35;$bestdist$2$ph25 = $bestdist$15;$bestfacet$2$ph24 = 0;
   L21: while(1) {
    $37 = $66;$46 = $67;
    while(1) {
     $36 = ((($37)) + 80|0);
     $38 = HEAP32[$36>>2]|0;
     $39 = $38 & 196608;
     $40 = ($39|0)==(0);
     if ($40) {
      $41 = HEAP32[$numpart>>2]|0;
      $42 = (($41) + 1)|0;
      HEAP32[$numpart>>2] = $42;
      _qh_distplane($point,$37,$dist);
      $43 = +HEAPF64[$dist>>3];
      $44 = $43 > $bestdist$2$ph25;
      if ($44) {
       $$lcssa = $37;$$lcssa96 = $46;$$lcssa98 = $43;
       break;
      }
     }
     $45 = ((($46)) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      $bestdist$2$ph25$lcssa = $bestdist$2$ph25;$bestfacet$2$ph24$lcssa = $bestfacet$2$ph24;
      break L21;
     } else {
      $37 = $47;$46 = $45;
     }
    }
    $49 = ((($$lcssa96)) + 4|0);
    $50 = HEAP32[$$lcssa96>>2]|0;
    $51 = ($50|0)==(0|0);
    if ($51) {
     $bestdist$39 = $$lcssa98;$bestfacet$37 = $$lcssa;
     break L13;
    } else {
     $66 = $50;$67 = $49;$bestdist$2$ph25 = $$lcssa98;$bestfacet$2$ph24 = $$lcssa;
    }
   }
   $52 = ($bestfacet$2$ph24$lcssa|0)==(0|0);
   if ($52) {
    $53 = HEAP32[(7480)>>2]|0;
    $54 = ((($upperfacet)) + 76|0);
    $55 = HEAP32[$54>>2]|0;
    HEAP32[$vararg_buffer>>2] = $55;
    _qh_fprintf($53,6228,37344,$vararg_buffer);
    _qh_errexit(5,$upperfacet,0);
    // unreachable;
   } else {
    $bestdist$39 = $bestdist$2$ph25$lcssa;$bestfacet$37 = $bestfacet$2$ph24$lcssa;
   }
  }
 } while(0);
 HEAPF64[$bestdistp>>3] = $bestdist$39;
 $56 = HEAP32[(5344)>>2]|0;
 $57 = ($56|0)>(2);
 if (!($57)) {
  STACKTOP = sp;return ($bestfacet$37|0);
 }
 $58 = HEAP32[(7480)>>2]|0;
 $59 = ((($bestfacet$37)) + 76|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($upperfacet)) + 76|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (_qh_pointid($point)|0);
 HEAP32[$vararg_buffer1>>2] = $60;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 HEAPF64[$vararg_ptr4>>3] = $bestdist$39;
 $vararg_ptr5 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr5>>2] = $62;
 $vararg_ptr6 = ((($vararg_buffer1)) + 20|0);
 HEAP32[$vararg_ptr6>>2] = $63;
 _qh_fprintf($58,3015,37536,$vararg_buffer1);
 STACKTOP = sp;return ($bestfacet$37|0);
}
function _qh_nearvertex($facet,$point,$bestdistp) {
 $facet = $facet|0;
 $point = $point|0;
 $bestdistp = $bestdistp|0;
 var $$ = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $bestdist$0$ph = 0.0, $bestdist$1 = 0.0, $bestvertex$0$ph = 0, $bestvertex$1 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vertexp$04 = 0, $vertexp$1 = 0, $vertexp$1$ph = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vertices = sp + 32|0;
 $0 = HEAP32[(5828)>>2]|0;
 $1 = HEAP32[(5304)>>2]|0;
 $not$ = ($1|0)!=(0);
 $2 = $not$ << 31 >> 31;
 $$ = (($0) + ($2))|0;
 $3 = ((($facet)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 512;
 $6 = ($5|0)==(0);
 if ($6) {
  $46 = ((($facet)) + 52|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$vertices>>2] = $47;
  $48 = $47;
  $49 = $48;
 } else {
  $7 = HEAP32[(6900)>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $12 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($12,6158,37584,$vararg_buffer);
   _qh_errexit(5,$facet,0);
   // unreachable;
  }
  $9 = ((($facet)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($12,6158,37584,$vararg_buffer);
   _qh_errexit(5,$facet,0);
   // unreachable;
  }
  $13 = HEAP32[(7496)>>2]|0;
  $14 = (_qh_settemp($13)|0);
  HEAP32[$vertices>>2] = $14;
  $15 = ((($facet)) + 52|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($facet)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($18)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $24 = ((($22)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = ((($24)) + 4|0);
    $29 = $25;$33 = $27;
    while(1) {
     $28 = ((($29)) + 40|0);
     $30 = HEAP32[$28>>2]|0;
     $31 = ($30|0)==($20|0);
     if ($31) {
      $36 = ((($29)) + 52|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(0|0);
      if (!($38)) {
       $39 = ((($37)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(0|0);
       if (!($41)) {
        $43 = $40;$vertexp$04 = $39;
        while(1) {
         $42 = ((($vertexp$04)) + 4|0);
         _qh_setappend($vertices,$43);
         $44 = HEAP32[$42>>2]|0;
         $45 = ($44|0)==(0|0);
         if ($45) {
          break;
         } else {
          $43 = $44;$vertexp$04 = $42;
         }
        }
       }
      }
     }
     $32 = ((($33)) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      break;
     } else {
      $29 = $34;$33 = $32;
     }
    }
   }
  }
  $$pr = HEAP32[$vertices>>2]|0;
  $49 = $$pr;
 }
 $50 = ($49|0)==(0|0);
 L23: do {
  if ($50) {
   $bestdist$1 = 1.7976931348623157E+308;$bestvertex$1 = 0;
  } else {
   $51 = ((($49)) + 4|0);
   $52 = (0 - ($$))|0;
   $bestdist$0$ph = 1.7976931348623157E+308;$bestvertex$0$ph = 0;$vertexp$1$ph = $51;
   L25: while(1) {
    $vertexp$1 = $vertexp$1$ph;
    while(1) {
     $53 = ((($vertexp$1)) + 4|0);
     $54 = HEAP32[$vertexp$1>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $bestdist$1 = $bestdist$0$ph;$bestvertex$1 = $bestvertex$0$ph;
      break L23;
     }
     $56 = ((($54)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (+_qh_pointdist($57,$point,$52));
     $59 = $58 < $bestdist$0$ph;
     if ($59) {
      $bestdist$0$ph = $58;$bestvertex$0$ph = $54;$vertexp$1$ph = $53;
      continue L25;
     } else {
      $vertexp$1 = $53;
     }
    }
   }
  }
 } while(0);
 $60 = HEAP32[$3>>2]|0;
 $61 = $60 & 512;
 $62 = ($61|0)==(0);
 if (!($62)) {
  _qh_settempfree($vertices);
 }
 $63 = (+Math_sqrt((+$bestdist$1)));
 HEAPF64[$bestdistp>>3] = $63;
 $64 = HEAP32[(5344)>>2]|0;
 $65 = ($64|0)>(2);
 if (!($65)) {
  STACKTOP = sp;return ($bestvertex$1|0);
 }
 $66 = HEAP32[(7480)>>2]|0;
 $67 = ((($bestvertex$1)) + 16|0);
 $68 = $67;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & 16777215;
 $75 = ((($facet)) + 76|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (_qh_pointid($point)|0);
 HEAP32[$vararg_buffer1>>2] = $74;
 $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
 HEAPF64[$vararg_ptr3>>3] = $63;
 $vararg_ptr4 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $76;
 $vararg_ptr5 = ((($vararg_buffer1)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $77;
 _qh_fprintf($66,3019,37696,$vararg_buffer1);
 STACKTOP = sp;return ($bestvertex$1|0);
}
function _qh_vertexneighbors() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$0 = 0, $facet$01 = 0, $facet$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(6900)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(5344)>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($4,1035,37744,$vararg_buffer);
 }
 $5 = HEAP32[(7724)>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = $6 & 2147483647;
 $8 = $5 & -2147483648;
 $9 = $7 | $8;
 HEAP32[(7724)>>2] = $9;
 $facet$01 = HEAP32[(7500)>>2]|0;
 $10 = ($facet$01|0)==(0|0);
 L7: do {
  if (!($10)) {
   $facet$02 = $facet$01;
   while(1) {
    $11 = ((($facet$02)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     break L7;
    }
    $14 = ((($facet$02)) + 80|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 2048;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = ((($facet$02)) + 52|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==(0|0);
     if (!($20)) {
      $22 = ((($19)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(0|0);
      if (!($24)) {
       $25 = ((($22)) + 4|0);
       $27 = $23;$50 = $25;
       while(1) {
        $26 = ((($27)) + 16|0);
        $28 = $26;
        $29 = $28;
        $30 = HEAP32[$29>>2]|0;
        $31 = (($28) + 4)|0;
        $32 = $31;
        $33 = HEAP32[$32>>2]|0;
        $34 = HEAP32[(7724)>>2]|0;
        $35 = $30 ^ $34;
        $36 = $35 & 2147483647;
        $37 = ($36|0)==(0);
        if (!($37)) {
         $38 = $34 & 2147483647;
         $39 = $30 & -2147483648;
         $40 = $38 | $39;
         $41 = $26;
         $42 = $41;
         HEAP32[$42>>2] = $40;
         $43 = (($41) + 4)|0;
         $44 = $43;
         HEAP32[$44>>2] = $33;
         $45 = HEAP32[(5828)>>2]|0;
         $46 = (_qh_setnew($45)|0);
         $47 = ((($27)) + 12|0);
         HEAP32[$47>>2] = $46;
        }
        $48 = ((($27)) + 12|0);
        _qh_setappend($48,$facet$02);
        $49 = ((($50)) + 4|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(0|0);
        if ($52) {
         break;
        } else {
         $27 = $51;$50 = $49;
        }
       }
      }
     }
    }
    $facet$0 = HEAP32[$11>>2]|0;
    $21 = ($facet$0|0)==(0|0);
    if ($21) {
     break;
    } else {
     $facet$02 = $facet$0;
    }
   }
  }
 } while(0);
 HEAP32[(6900)>>2] = 1;
 STACKTOP = sp;return;
}
function _qh_findgood($facetlist,$goodhorizon) {
 $facetlist = $facetlist|0;
 $goodhorizon = $goodhorizon|0;
 var $$0 = 0, $$lobit = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $angle = 0, $bestangle$034 = 0.0, $bestangle$1 = 0.0, $bestangle$2 = 0.0, $bestfacet$033 = 0, $bestfacet$1 = 0, $bestfacet$2 = 0, $bestfacet$3 = 0, $dist = 0, $facet$05468 = 0, $facet$05468$phi = 0, $facet$148 = 0, $facet$242 = 0;
 var $facet$332 = 0, $notlhs = 0, $notrhs = 0, $notrhs22 = 0, $numgood$0$ = 0, $numgood$055$lcssa = 0, $numgood$05567 = 0, $numgood$10 = 0, $numgood$11 = 0, $numgood$12 = 0, $numgood$12$goodhorizon = 0, $numgood$349 = 0, $numgood$4 = 0, $numgood$5 = 0, $numgood$643 = 0, $numgood$7 = 0, $numgood$8 = 0, $numgood$935 = 0, $or$cond = 0, $or$cond$not = 0;
 var $or$cond12 = 0, $or$cond18 = 0, $or$cond18$not = 0, $or$cond20 = 0, $or$cond20$not = 0, $or$cond4 = 0, $or$cond66 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp;
 $angle = sp + 16|0;
 $dist = sp + 24|0;
 $0 = ($facetlist|0)!=(0|0);
 L1: do {
  if ($0) {
   $1 = ((($facetlist)) + 48|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if ($3) {
    $numgood$055$lcssa = 0;
   } else {
    $8 = $2;$facet$05468 = $facetlist;$numgood$05567 = 0;
    while(1) {
     $4 = ((($facet$05468)) + 80|0);
     $5 = HEAP32[$4>>2]|0;
     $6 = $5 >>> 19;
     $$lobit = $6 & 1;
     $numgood$0$ = (($$lobit) + ($numgood$05567))|0;
     $7 = ((($8)) + 48|0);
     $9 = HEAP32[$7>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      $numgood$055$lcssa = $numgood$0$;
      break;
     } else {
      $facet$05468$phi = $8;$8 = $9;$numgood$05567 = $numgood$0$;$facet$05468 = $facet$05468$phi;
     }
    }
   }
   $11 = HEAP32[(5332)>>2]|0;
   $12 = HEAP32[(5392)>>2]|0;
   $notlhs = ($11|0)>(0);
   $notrhs = ($12|0)==(0);
   $or$cond$not = $notlhs & $notrhs;
   $or$cond18 = $0 & $or$cond$not;
   $or$cond18$not = $or$cond18 ^ 1;
   $13 = ($facetlist|0)==(0|0);
   $or$cond = $13 | $or$cond18$not;
   L7: do {
    if ($or$cond) {
     $numgood$5 = $numgood$055$lcssa;
    } else {
     $facet$148 = $facetlist;$numgood$349 = $numgood$055$lcssa;
     while(1) {
      $14 = ((($facet$148)) + 48|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ($15|0)==(0|0);
      if ($16) {
       $numgood$5 = $numgood$349;
       break L7;
      }
      $17 = HEAP32[(5336)>>2]|0;
      $18 = ((($facet$148)) + 52|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_qh_isvertex($17,$19)|0);
      $21 = ($20|0)==(0|0);
      if ($21) {
       $22 = ((($facet$148)) + 80|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = $23 & -524289;
       HEAP32[$22>>2] = $24;
       $25 = (($numgood$349) + -1)|0;
       $numgood$4 = $25;
      } else {
       $numgood$4 = $numgood$349;
      }
      $26 = HEAP32[$14>>2]|0;
      $27 = ($26|0)==(0|0);
      if ($27) {
       $numgood$5 = $numgood$4;
       break;
      } else {
       $facet$148 = $26;$numgood$349 = $numgood$4;
      }
     }
    }
   } while(0);
   $28 = HEAP32[(5320)>>2]|0;
   $29 = ($28|0)!=(0);
   $30 = ($numgood$5|0)!=(0);
   $or$cond4 = $30 & $29;
   $or$cond20 = $0 & $or$cond4;
   $or$cond20$not = $or$cond20 ^ 1;
   $31 = ($facetlist|0)==(0|0);
   $or$cond66 = $31 | $or$cond20$not;
   if ($or$cond66) {
    $numgood$8 = $numgood$5;
   } else {
    $facet$242 = $facetlist;$numgood$643 = $numgood$5;
    while(1) {
     $32 = ((($facet$242)) + 48|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0|0);
     if ($34) {
      $numgood$8 = $numgood$643;
      break L1;
     }
     $35 = ((($facet$242)) + 80|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = $36 & 524288;
     $38 = ($37|0)==(0);
     if ($38) {
      $numgood$7 = $numgood$643;
     } else {
      $39 = ((($facet$242)) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $numgood$7 = $numgood$643;
      } else {
       $42 = HEAP32[(43608)>>2]|0;
       $43 = (($42) + 1)|0;
       HEAP32[(43608)>>2] = $43;
       $44 = HEAP32[(5324)>>2]|0;
       _qh_distplane($44,$facet$242,$dist);
       $45 = HEAP32[(5320)>>2]|0;
       $46 = ($45|0)>(0);
       $47 = +HEAPF64[$dist>>3];
       $48 = $47 > 0.0;
       $49 = $46 ^ $48;
       if ($49) {
        $50 = HEAP32[$35>>2]|0;
        $51 = $50 & -524289;
        HEAP32[$35>>2] = $51;
        $52 = (($numgood$643) + -1)|0;
        $numgood$7 = $52;
       } else {
        $numgood$7 = $numgood$643;
       }
      }
     }
     $53 = HEAP32[$32>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      $numgood$8 = $numgood$7;
      break;
     } else {
      $facet$242 = $53;$numgood$643 = $numgood$7;
     }
    }
   }
  } else {
   $numgood$8 = 0;
  }
 } while(0);
 $55 = HEAP32[(5328)>>2]|0;
 $56 = ($55|0)==(0);
 do {
  if ($56) {
   $numgood$12 = $numgood$8;
  } else {
   $57 = $numgood$8 | $goodhorizon;
   $58 = ($57|0)!=(0);
   $59 = HEAP32[(7600)>>2]|0;
   $60 = ($59|0)!=(0|0);
   $or$cond9 = $58 | $60;
   if ($or$cond9) {
    L27: do {
     if ($0) {
      $bestangle$034 = 1.7976931348623157E+308;$bestfacet$033 = 0;$facet$332 = $facetlist;$numgood$935 = $numgood$8;
      while(1) {
       $61 = ((($facet$332)) + 48|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62|0)==(0|0);
       if ($63) {
        $bestangle$2 = $bestangle$034;$bestfacet$2 = $bestfacet$033;$numgood$11 = $numgood$935;
        break L27;
       }
       $64 = ((($facet$332)) + 80|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = $65 & 524288;
       $67 = ($66|0)==(0);
       if ($67) {
        $bestangle$1 = $bestangle$034;$bestfacet$1 = $bestfacet$033;$numgood$10 = $numgood$935;
       } else {
        $68 = ((($facet$332)) + 24|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($69|0)==(0|0);
        if ($70) {
         $bestangle$1 = $bestangle$034;$bestfacet$1 = $bestfacet$033;$numgood$10 = $numgood$935;
        } else {
         $71 = (_qh_inthresholds($69,$angle)|0);
         $72 = ($71|0)==(0);
         if ($72) {
          $73 = HEAP32[$64>>2]|0;
          $74 = $73 & -524289;
          HEAP32[$64>>2] = $74;
          $75 = (($numgood$935) + -1)|0;
          $76 = +HEAPF64[$angle>>3];
          $77 = $76 < $bestangle$034;
          if ($77) {
           $bestangle$1 = $76;$bestfacet$1 = $facet$332;$numgood$10 = $75;
          } else {
           $bestangle$1 = $bestangle$034;$bestfacet$1 = $bestfacet$033;$numgood$10 = $75;
          }
         } else {
          $bestangle$1 = $bestangle$034;$bestfacet$1 = $bestfacet$033;$numgood$10 = $numgood$935;
         }
        }
       }
       $78 = HEAP32[$61>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $bestangle$2 = $bestangle$1;$bestfacet$2 = $bestfacet$1;$numgood$11 = $numgood$10;
        break;
       } else {
        $bestangle$034 = $bestangle$1;$bestfacet$033 = $bestfacet$1;$facet$332 = $78;$numgood$935 = $numgood$10;
       }
      }
     } else {
      $bestangle$2 = 1.7976931348623157E+308;$bestfacet$2 = 0;$numgood$11 = $numgood$8;
     }
    } while(0);
    $80 = ($numgood$11|0)==(0);
    if ($80) {
     $81 = ($goodhorizon|0)==(0);
     $82 = HEAP32[(7600)>>2]|0;
     $83 = ($82|0)!=(0|0);
     $or$cond12 = $81 | $83;
     if ($or$cond12) {
      do {
       if ($83) {
        $84 = ((($82)) + 80|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = $85 & 2048;
        $87 = ($86|0)==(0);
        if (!($87)) {
         HEAP32[(7600)>>2] = 0;
         $bestfacet$3 = $bestfacet$2;
         break;
        }
        $88 = ((($82)) + 24|0);
        $89 = HEAP32[$88>>2]|0;
        (_qh_inthresholds($89,$angle)|0);
        $90 = +HEAPF64[$angle>>3];
        $91 = $90 < $bestangle$2;
        if ($91) {
         $92 = HEAP32[(7600)>>2]|0;
         $bestfacet$3 = $92;
        } else {
         $bestfacet$3 = $bestfacet$2;
        }
       } else {
        $bestfacet$3 = $bestfacet$2;
       }
      } while(0);
      $93 = ($bestfacet$3|0)==(0|0);
      if ($93) {
       $numgood$12 = 0;
       break;
      }
      $94 = HEAP32[(7600)>>2]|0;
      $95 = ($bestfacet$3|0)==($94|0);
      if ($95) {
       $numgood$12 = 0;
       break;
      }
      $96 = ($94|0)==(0|0);
      if (!($96)) {
       $97 = ((($94)) + 80|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = $98 & -524289;
       HEAP32[$97>>2] = $99;
      }
      HEAP32[(7600)>>2] = $bestfacet$3;
      $100 = ((($bestfacet$3)) + 80|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $101 | 524288;
      HEAP32[$100>>2] = $102;
      $103 = (($numgood$11) + 1)|0;
      $104 = HEAP32[(5344)>>2]|0;
      $105 = ($104|0)>(1);
      if (!($105)) {
       $$0 = $103;
       STACKTOP = sp;return ($$0|0);
      }
      $106 = HEAP32[(7480)>>2]|0;
      $107 = ((($bestfacet$3)) + 76|0);
      $108 = HEAP32[$107>>2]|0;
      HEAP32[$vararg_buffer>>2] = $108;
      $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
      HEAPF64[$vararg_ptr1>>3] = $bestangle$2;
      _qh_fprintf($106,2044,37816,$vararg_buffer);
      $$0 = $103;
      STACKTOP = sp;return ($$0|0);
     } else {
      $109 = $82;
     }
    } else {
     $$pr = HEAP32[(7600)>>2]|0;
     $109 = $$pr;
    }
    $110 = ($109|0)==(0|0);
    if ($110) {
     $numgood$12 = $numgood$11;
    } else {
     $111 = ((($109)) + 80|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $112 & -524289;
     HEAP32[$111>>2] = $113;
     HEAP32[(7600)>>2] = 0;
     $numgood$12 = $numgood$11;
    }
   } else {
    $numgood$12 = $numgood$8;
   }
  }
 } while(0);
 $114 = HEAP32[(43968)>>2]|0;
 $115 = (($114) + ($numgood$12))|0;
 HEAP32[(43968)>>2] = $115;
 $116 = HEAP32[(5344)>>2]|0;
 $117 = ($116|0)>(1);
 if ($117) {
  $118 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $numgood$12;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $goodhorizon;
  _qh_fprintf($118,2045,37872,$vararg_buffer2);
 }
 $119 = HEAP32[(5332)>>2]|0;
 $notrhs22 = ($119|0)<(1);
 $120 = HEAP32[(5392)>>2]|0;
 $121 = $120 | $numgood$12;
 $122 = ($121|0)!=(0);
 $123 = $notrhs22 | $122;
 $numgood$12$goodhorizon = $123 ? $numgood$12 : $goodhorizon;
 $$0 = $numgood$12$goodhorizon;
 STACKTOP = sp;return ($$0|0);
}
function _qh_isvertex($point,$vertices) {
 $point = $point|0;
 $vertices = $vertices|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vertexp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vertices|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($vertices)) + 4|0);
 $vertexp$0 = $1;
 while(1) {
  $2 = HEAP32[$vertexp$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   label = 5;
   break;
  }
  $4 = ((($vertexp$0)) + 4|0);
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==($point|0);
  if ($7) {
   $$0 = $2;
   label = 5;
   break;
  } else {
   $vertexp$0 = $4;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _qh_findgood_all($facetlist) {
 $facetlist = $facetlist|0;
 var $$lcssa = 0, $$lcssa68 = 0, $$lobit = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $angle = 0, $bestangle$0$lcssa = 0.0, $bestangle$021 = 0.0, $bestangle$1 = 0.0, $bestfacet$0$lcssa = 0;
 var $bestfacet$020 = 0, $bestfacet$1 = 0, $brmerge = 0, $facet$03761 = 0, $facet$03761$phi = 0, $facet$131 = 0, $facet$131$lcssa67 = 0, $facet$223 = 0, $numgood$0$ = 0, $numgood$03662 = 0, $numgood$2 = 0, $numgood$330 = 0, $numgood$4 = 0, $numgood$5 = 0, $numgood$553 = 0, $numgood$6$lcssa = 0, $numgood$622 = 0, $numgood$7 = 0, $numgood$9 = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond13 = 0, $or$cond13$not = 0, $or$cond58 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer10 = sp;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $angle = sp + 40|0;
 $0 = HEAP32[(5332)>>2]|0;
 $1 = HEAP32[(5328)>>2]|0;
 $2 = $1 | $0;
 $3 = HEAP32[(5320)>>2]|0;
 $4 = $2 | $3;
 $5 = HEAP32[(5728)>>2]|0;
 $6 = $4 | $5;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[(5444)>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[(7500)>>2]|0;
  (_qh_findgood($10,0)|0);
 }
 $11 = ($facetlist|0)!=(0|0);
 if ($11) {
  $12 = ((($facetlist)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $numgood$2 = 0;
  } else {
   $19 = $13;$facet$03761 = $facetlist;$numgood$03662 = 0;
   while(1) {
    $15 = ((($facet$03761)) + 80|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 >>> 19;
    $$lobit = $17 & 1;
    $numgood$0$ = (($$lobit) + ($numgood$03662))|0;
    $18 = ((($19)) + 48|0);
    $20 = HEAP32[$18>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $numgood$2 = $numgood$0$;
     break;
    } else {
     $facet$03761$phi = $19;$19 = $20;$numgood$03662 = $numgood$0$;$facet$03761 = $facet$03761$phi;
    }
   }
  }
 } else {
  $numgood$2 = 0;
 }
 $22 = HEAP32[(5332)>>2]|0;
 $23 = ($22|0)<(0);
 if ($23) {
  if ($11) {
   $facet$131 = $facetlist;$numgood$330 = $numgood$2;
   label = 10;
  } else {
   $numgood$553 = $numgood$2;$numgood$9 = $numgood$2;
  }
 } else {
  $24 = ($22|0)>(0);
  $25 = HEAP32[(5392)>>2]|0;
  $26 = ($25|0)!=(0);
  $or$cond7 = $24 & $26;
  $or$cond13 = $11 & $or$cond7;
  $or$cond13$not = $or$cond13 ^ 1;
  $27 = ($facetlist|0)==(0|0);
  $or$cond = $27 | $or$cond13$not;
  if ($or$cond) {
   $numgood$5 = $numgood$2;
   label = 21;
  } else {
   $facet$131 = $facetlist;$numgood$330 = $numgood$2;
   label = 10;
  }
 }
 L15: do {
  if ((label|0) == 10) {
   L16: while(1) {
    label = 0;
    $28 = ((($facet$131)) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     $numgood$5 = $numgood$330;
     label = 21;
     break L15;
    }
    $31 = ((($facet$131)) + 80|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 & 524288;
    $34 = ($33|0)==(0);
    if ($34) {
     $numgood$4 = $numgood$330;
    } else {
     $35 = HEAP32[(5332)>>2]|0;
     $36 = ($35|0)>(0);
     $37 = HEAP32[(5336)>>2]|0;
     $38 = ((($facet$131)) + 52|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (_qh_isvertex($37,$39)|0);
     $41 = ($40|0)!=(0|0);
     $42 = $36 ^ $41;
     if ($42) {
      $43 = (($numgood$330) + -1)|0;
      $44 = ($43|0)==(0);
      do {
       if ($44) {
        $45 = HEAP32[(5444)>>2]|0;
        $46 = ($45|0)==(0);
        $47 = HEAP32[(7480)>>2]|0;
        if (!($46)) {
         $$lcssa = $37;$$lcssa68 = $47;$facet$131$lcssa67 = $facet$131;
         break L16;
        }
        if ($36) {
         $51 = (($35) + -1)|0;
         HEAP32[$vararg_buffer2>>2] = $51;
         $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
         HEAP32[$vararg_ptr5>>2] = $51;
         _qh_fprintf($47,7065,38008,$vararg_buffer2);
         break;
        } else {
         $52 = $35 ^ -1;
         HEAP32[$vararg_buffer6>>2] = $52;
         $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
         HEAP32[$vararg_ptr9>>2] = $52;
         _qh_fprintf($47,7066,38064,$vararg_buffer6);
         break;
        }
       }
      } while(0);
      $53 = HEAP32[$31>>2]|0;
      $54 = $53 & -524289;
      HEAP32[$31>>2] = $54;
      $numgood$4 = $43;
     } else {
      $numgood$4 = $numgood$330;
     }
    }
    $55 = HEAP32[$28>>2]|0;
    $56 = ($55|0)==(0|0);
    if ($56) {
     $numgood$5 = $numgood$4;
     label = 21;
     break L15;
    } else {
     $facet$131 = $55;$numgood$330 = $numgood$4;
     label = 10;
    }
   }
   $48 = (_qh_pointid($$lcssa)|0);
   $49 = ((($facet$131$lcssa67)) + 76|0);
   $50 = HEAP32[$49>>2]|0;
   HEAP32[$vararg_buffer>>2] = $48;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $50;
   _qh_fprintf($$lcssa68,7064,37928,$vararg_buffer);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 21) {
  $57 = HEAP32[(5728)>>2]|0;
  $58 = ($57|0)==(0);
  $$not = $11 ^ 1;
  $brmerge = $58 | $$not;
  $59 = ($facetlist|0)==(0|0);
  $or$cond58 = $brmerge | $59;
  if ($or$cond58) {
   $numgood$553 = $numgood$5;$numgood$9 = $numgood$5;
  } else {
   $bestangle$021 = 1.7976931348623157E+308;$bestfacet$020 = 0;$facet$223 = $facetlist;$numgood$622 = $numgood$5;
   while(1) {
    $60 = ((($facet$223)) + 48|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(0|0);
    if ($62) {
     $bestangle$0$lcssa = $bestangle$021;$bestfacet$0$lcssa = $bestfacet$020;$numgood$6$lcssa = $numgood$622;
     break;
    }
    $63 = ((($facet$223)) + 80|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 524288;
    $66 = ($65|0)==(0);
    if ($66) {
     $bestangle$1 = $bestangle$021;$bestfacet$1 = $bestfacet$020;$numgood$7 = $numgood$622;
    } else {
     $67 = ((($facet$223)) + 24|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (_qh_inthresholds($68,$angle)|0);
     $70 = ($69|0)==(0);
     if ($70) {
      $71 = HEAP32[$63>>2]|0;
      $72 = $71 & -524289;
      HEAP32[$63>>2] = $72;
      $73 = (($numgood$622) + -1)|0;
      $74 = +HEAPF64[$angle>>3];
      $75 = $74 < $bestangle$021;
      if ($75) {
       $bestangle$1 = $74;$bestfacet$1 = $facet$223;$numgood$7 = $73;
      } else {
       $bestangle$1 = $bestangle$021;$bestfacet$1 = $bestfacet$020;$numgood$7 = $73;
      }
     } else {
      $bestangle$1 = $bestangle$021;$bestfacet$1 = $bestfacet$020;$numgood$7 = $numgood$622;
     }
    }
    $76 = HEAP32[$60>>2]|0;
    $77 = ($76|0)==(0|0);
    if ($77) {
     $bestangle$0$lcssa = $bestangle$1;$bestfacet$0$lcssa = $bestfacet$1;$numgood$6$lcssa = $numgood$7;
     break;
    } else {
     $bestangle$021 = $bestangle$1;$bestfacet$020 = $bestfacet$1;$facet$223 = $76;$numgood$622 = $numgood$7;
    }
   }
   $78 = ($numgood$6$lcssa|0)==(0);
   $79 = ($bestfacet$0$lcssa|0)!=(0|0);
   $or$cond11 = $79 & $78;
   if ($or$cond11) {
    $80 = ((($bestfacet$0$lcssa)) + 80|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81 | 524288;
    HEAP32[$80>>2] = $82;
    $83 = HEAP32[(5344)>>2]|0;
    $84 = ($83|0)==(0);
    if ($84) {
     STACKTOP = sp;return;
    }
    $85 = HEAP32[(7480)>>2]|0;
    $86 = ((($bestfacet$0$lcssa)) + 76|0);
    $87 = HEAP32[$86>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $87;
    $vararg_ptr13 = ((($vararg_buffer10)) + 8|0);
    HEAPF64[$vararg_ptr13>>3] = $bestangle$0$lcssa;
    _qh_fprintf($85,23,38128,$vararg_buffer10);
    STACKTOP = sp;return;
   } else {
    $numgood$553 = $numgood$5;$numgood$9 = $numgood$6$lcssa;
   }
  }
 }
 HEAP32[(7564)>>2] = $numgood$9;
 $88 = HEAP32[(5344)>>2]|0;
 $89 = ($88|0)==(0);
 if ($89) {
  STACKTOP = sp;return;
 }
 $90 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer14>>2] = $numgood$9;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $numgood$553;
 _qh_fprintf($90,24,38184,$vararg_buffer14);
 STACKTOP = sp;return;
}
function _qh_furthestnext() {
 var $$lcssa = 0.0, $$lcssa41 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $bestdist$0$ph$lcssa26 = 0.0;
 var $bestdist$0$ph13 = 0.0, $bestdist$0$ph13$lcssa = 0.0, $bestfacet$0$ph$lcssa27 = 0, $bestfacet$0$ph12 = 0, $bestfacet$0$ph12$lcssa = 0, $facet$0 = 0, $facet$03 = 0, $facet$0311 = 0, $facet$0314 = 0, $facet$04 = 0, $facet$04$lcssa40 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $facet$0311 = HEAP32[(7500)>>2]|0;
 $0 = ($facet$0311|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $bestdist$0$ph13 = -1.7976931348623157E+308;$bestfacet$0$ph12 = 0;$facet$0314 = $facet$0311;
 }
 L3: while(1) {
  $facet$04 = $facet$0314;
  while(1) {
   $1 = ((($facet$04)) + 48|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)==(0|0);
   if ($3) {
    $bestdist$0$ph13$lcssa = $bestdist$0$ph13;$bestfacet$0$ph12$lcssa = $bestfacet$0$ph12;
    label = 8;
    break L3;
   }
   $4 = ((($facet$04)) + 64|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $8 = +HEAPF64[$facet$04>>3];
    $9 = $8 > $bestdist$0$ph13;
    if ($9) {
     $$lcssa = $8;$$lcssa41 = $1;$facet$04$lcssa40 = $facet$04;
     break;
    }
   }
   $facet$0 = HEAP32[$1>>2]|0;
   $7 = ($facet$0|0)==(0|0);
   if ($7) {
    $bestdist$0$ph13$lcssa = $bestdist$0$ph13;$bestfacet$0$ph12$lcssa = $bestfacet$0$ph12;
    label = 8;
    break L3;
   } else {
    $facet$04 = $facet$0;
   }
  }
  $facet$03 = HEAP32[$$lcssa41>>2]|0;
  $10 = ($facet$03|0)==(0|0);
  if ($10) {
   $bestdist$0$ph$lcssa26 = $$lcssa;$bestfacet$0$ph$lcssa27 = $facet$04$lcssa40;
   break;
  } else {
   $bestdist$0$ph13 = $$lcssa;$bestfacet$0$ph12 = $facet$04$lcssa40;$facet$0314 = $facet$03;
  }
 }
 if ((label|0) == 8) {
  $11 = ($bestfacet$0$ph12$lcssa|0)==(0|0);
  if ($11) {
   STACKTOP = sp;return;
  } else {
   $bestdist$0$ph$lcssa26 = $bestdist$0$ph13$lcssa;$bestfacet$0$ph$lcssa27 = $bestfacet$0$ph12$lcssa;
  }
 }
 _qh_removefacet($bestfacet$0$ph$lcssa27);
 _qh_prependfacet($bestfacet$0$ph$lcssa27,(7508));
 $12 = HEAP32[(5344)>>2]|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[(7480)>>2]|0;
 $15 = ((($bestfacet$0$ph$lcssa27)) + 76|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $16;
 $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
 HEAPF64[$vararg_ptr1>>3] = $bestdist$0$ph$lcssa26;
 _qh_fprintf($14,1029,38248,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_prependfacet($facet,$facetlist) {
 $facet = $facet|0;
 $facetlist = $facetlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(3);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facet)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$facetlist>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $9 = -1;
  } else {
   $7 = ((($5)) + 76|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  }
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _qh_fprintf($2,4061,38304,$vararg_buffer);
 }
 $10 = HEAP32[$facetlist>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = HEAP32[(7504)>>2]|0;
  HEAP32[$facetlist>>2] = $12;
 }
 $13 = HEAP32[$facetlist>>2]|0;
 $14 = ((($13)) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($facet)) + 44|0);
 HEAP32[$16>>2] = $15;
 $17 = ($15|0)==(0|0);
 if (!($17)) {
  $18 = ((($15)) + 48|0);
  HEAP32[$18>>2] = $facet;
 }
 HEAP32[$14>>2] = $facet;
 $19 = HEAP32[$facetlist>>2]|0;
 $20 = ((($facet)) + 48|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[(7500)>>2]|0;
 $22 = ($21|0)==($13|0);
 if ($22) {
  HEAP32[(7500)>>2] = $facet;
 }
 $23 = HEAP32[(7508)>>2]|0;
 $24 = ($23|0)==($13|0);
 if (!($24)) {
  HEAP32[$facetlist>>2] = $facet;
  $25 = HEAP32[(7552)>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[(7552)>>2] = $26;
  STACKTOP = sp;return;
 }
 HEAP32[(7508)>>2] = $facet;
 HEAP32[$facetlist>>2] = $facet;
 $25 = HEAP32[(7552)>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[(7552)>>2] = $26;
 STACKTOP = sp;return;
}
function _qh_furthestout($facet) {
 $facet = $facet|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $bestdist$0$ph = 0.0, $bestdist$0$ph$lcssa = 0.0, $bestpoint$0$ph = 0, $bestpoint$0$ph$lcssa = 0, $dist = 0, $pointp$0 = 0, $pointp$0$ph = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $dist = sp;
 $0 = ((($facet)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $bestdist$0$ph = -1.7976931348623157E+308;$bestpoint$0$ph = 0;$pointp$0$ph = $3;
  L3: while(1) {
   $pointp$0 = $pointp$0$ph;
   while(1) {
    $4 = ((($pointp$0)) + 4|0);
    $5 = HEAP32[$pointp$0>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     $bestdist$0$ph$lcssa = $bestdist$0$ph;$bestpoint$0$ph$lcssa = $bestpoint$0$ph;
     break L3;
    }
    _qh_distplane($5,$facet,$dist);
    $7 = HEAP32[(43360)>>2]|0;
    $8 = (($7) + 1)|0;
    HEAP32[(43360)>>2] = $8;
    $9 = +HEAPF64[$dist>>3];
    $10 = $9 > $bestdist$0$ph;
    if ($10) {
     $bestdist$0$ph = $9;$bestpoint$0$ph = $5;$pointp$0$ph = $4;
     continue L3;
    } else {
     $pointp$0 = $4;
    }
   }
  }
  $11 = ($bestpoint$0$ph$lcssa|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$0>>2]|0;
   (_qh_setdel($12,0)|0);
   _qh_setappend($0,0);
   HEAPF64[$facet>>3] = $bestdist$0$ph$lcssa;
  }
 }
 $13 = ((($facet)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -262145;
 HEAP32[$13>>2] = $15;
 $16 = HEAP32[(5344)>>2]|0;
 $17 = ($16|0)>(2);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[(7480)>>2]|0;
 $19 = (_qh_pointid(0)|0);
 $20 = ((($facet)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer>>2] = $19;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 _qh_fprintf($18,3017,38352,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_infiniteloop($facet) {
 $facet = $facet|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($0,6149,38408,$vararg_buffer);
 _qh_errexit(5,$facet,0);
 // unreachable;
}
function _qh_initbuild() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0;
 var $i$0 = 0, $i$0$lcssa27 = 0, $isoutside = 0, $maxpoints = 0, $notlhs = 0, $notrhs = 0, $numpart = 0, $or$cond$not = 0, $or$cond13 = 0, $or$cond17$not = 0, $or$cond19 = 0, $or$cond21 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 8|0;
 $vararg_buffer14 = sp + 64|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 48|0;
 $maxpoints = sp + 80|0;
 $vertices = sp + 72|0;
 $numpart = sp + 68|0;
 $dist = sp;
 $isoutside = sp + 76|0;
 HEAP32[(7596)>>2] = -1;
 HEAP32[(7824)>>2] = 0;
 $0 = HEAP32[(7572)>>2]|0;
 $1 = $0 & -16777216;
 HEAP32[(7572)>>2] = $1;
 $2 = HEAP32[(7576)>>2]|0;
 $3 = $2 & -16777216;
 HEAP32[(7576)>>2] = $3;
 HEAP32[(7568)>>2] = 0;
 $4 = HEAP32[(7724)>>2]|0;
 $5 = $4 & -2147483648;
 HEAP32[(7724)>>2] = $5;
 HEAP32[(7720)>>2] = 0;
 HEAP32[(7624)>>2] = 0;
 $6 = HEAP32[(5320)>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = (($6) + -1)|0;
  $9 = (_qh_point($8)|0);
  HEAP32[(5324)>>2] = $9;
 } else {
  $10 = ($6|0)<(0);
  if ($10) {
   $11 = $6 ^ -1;
   $12 = (_qh_point($11)|0);
   HEAP32[(5324)>>2] = $12;
  }
 }
 $13 = HEAP32[(5332)>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = (($13) + -1)|0;
  $16 = (_qh_point($15)|0);
  HEAP32[(5336)>>2] = $16;
 } else {
  $17 = ($13|0)<(0);
  if ($17) {
   $18 = $13 ^ -1;
   $19 = (_qh_point($18)|0);
   HEAP32[(5336)>>2] = $19;
  }
 }
 $20 = HEAP32[(5320)>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = HEAP32[(5324)>>2]|0;
  $23 = HEAP32[(5840)>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $38 = HEAP32[(7480)>>2]|0;
   $39 = HEAP32[(5836)>>2]|0;
   $40 = (($39) + -1)|0;
   HEAP32[$vararg_buffer>>2] = $40;
   _qh_fprintf($38,6150,38488,$vararg_buffer);
   _qh_errexit(1,0,0);
   // unreachable;
  }
  $25 = HEAP32[(5836)>>2]|0;
  $26 = (($25) + -1)|0;
  $27 = (_qh_point($26)|0);
  $28 = ($22>>>0)>($27>>>0);
  if ($28) {
   $38 = HEAP32[(7480)>>2]|0;
   $39 = HEAP32[(5836)>>2]|0;
   $40 = (($39) + -1)|0;
   HEAP32[$vararg_buffer>>2] = $40;
   _qh_fprintf($38,6150,38488,$vararg_buffer);
   _qh_errexit(1,0,0);
   // unreachable;
  }
 }
 $29 = HEAP32[(5332)>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = HEAP32[(5336)>>2]|0;
  $32 = HEAP32[(5840)>>2]|0;
  $33 = ($31>>>0)<($32>>>0);
  if ($33) {
   $38 = HEAP32[(7480)>>2]|0;
   $39 = HEAP32[(5836)>>2]|0;
   $40 = (($39) + -1)|0;
   HEAP32[$vararg_buffer>>2] = $40;
   _qh_fprintf($38,6150,38488,$vararg_buffer);
   _qh_errexit(1,0,0);
   // unreachable;
  }
  $34 = HEAP32[(5836)>>2]|0;
  $35 = (($34) + -1)|0;
  $36 = (_qh_point($35)|0);
  $37 = ($31>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[(7480)>>2]|0;
   $39 = HEAP32[(5836)>>2]|0;
   $40 = (($39) + -1)|0;
   HEAP32[$vararg_buffer>>2] = $40;
   _qh_fprintf($38,6150,38488,$vararg_buffer);
   _qh_errexit(1,0,0);
   // unreachable;
  }
 }
 $41 = HEAP32[(5840)>>2]|0;
 $42 = HEAP32[(5836)>>2]|0;
 $43 = HEAP32[(5828)>>2]|0;
 $44 = (_qh_maxmin($41,$42,$43)|0);
 HEAP32[$maxpoints>>2] = $44;
 $45 = HEAP32[(5712)>>2]|0;
 $46 = ($45|0)==(0);
 if (!($46)) {
  $47 = HEAP32[(5840)>>2]|0;
  $48 = HEAP32[(5836)>>2]|0;
  $49 = HEAP32[(5828)>>2]|0;
  $50 = +HEAPF64[(7024)>>3];
  $51 = +HEAPF64[(6968)>>3];
  $52 = +HEAPF64[(6984)>>3];
  _qh_scalelast($47,$48,$49,$50,$51,$52);
 }
 _qh_detroundoff();
 $53 = HEAP32[(5304)>>2]|0;
 $54 = ($53|0)==(0);
 do {
  if (!($54)) {
   $55 = HEAP32[(5828)>>2]|0;
   $56 = (($55) + -1)|0;
   $57 = HEAP32[(6908)>>2]|0;
   $58 = (($57) + ($56<<3)|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $59 > 8.9884656743115785E+307;
   if ($60) {
    $61 = HEAP32[(6912)>>2]|0;
    $62 = (($61) + ($56<<3)|0);
    $63 = +HEAPF64[$62>>3];
    $64 = $63 < -8.9884656743115785E+307;
    if ($64) {
     $65 = HEAP32[(5312)>>2]|0;
     $notrhs = ($65|0)>(-1);
     $66 = HEAP32[(5328)>>2]|0;
     $67 = HEAP32[(5728)>>2]|0;
     $68 = $67 | $66;
     $69 = ($68|0)!=(0);
     $i$0 = 29;
     while(1) {
      $70 = (($i$0) + -1)|0;
      $71 = ($i$0|0)==(0);
      if ($71) {
       break;
      }
      $72 = (5508 + ($70<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      $notlhs = ($73|0)!=(7);
      $or$cond$not = $notlhs | $notrhs;
      $74 = $or$cond$not | $69;
      if ($74) {
       $i$0 = $70;
      } else {
       $i$0$lcssa27 = $i$0;
       label = 24;
       break;
      }
     }
     if ((label|0) == 24) {
      $75 = ($i$0$lcssa27|0)<(1);
      if (!($75)) {
       break;
      }
     }
     $76 = HEAP32[(5780)>>2]|0;
     $77 = ($76|0)==(0);
     $78 = +HEAPF64[(6928)>>3];
     if (!($77)) {
      $79 = $78 * 2.0;
      $80 = HEAP32[(5828)>>2]|0;
      $81 = (($80) + -1)|0;
      $82 = HEAP32[(6912)>>2]|0;
      $83 = (($82) + ($81<<3)|0);
      HEAPF64[$83>>3] = $79;
      HEAP32[(5328)>>2] = 1;
      break;
     }
     $84 = $78 * -2.0;
     $85 = HEAP32[(5828)>>2]|0;
     $86 = (($85) + -1)|0;
     $87 = HEAP32[(6908)>>2]|0;
     $88 = (($87) + ($86<<3)|0);
     HEAPF64[$88>>3] = $84;
     $89 = HEAP32[(5328)>>2]|0;
     $90 = ($89|0)==(0);
     if ($90) {
      HEAP32[(5728)>>2] = 1;
     }
    }
   }
  }
 } while(0);
 $91 = HEAP32[(5828)>>2]|0;
 $92 = HEAP32[$maxpoints>>2]|0;
 $93 = HEAP32[(5840)>>2]|0;
 $94 = HEAP32[(5836)>>2]|0;
 $95 = (_qh_initialvertices($91,$92,$93,$94)|0);
 HEAP32[$vertices>>2] = $95;
 _qh_initialhull($95);
 $96 = HEAP32[$vertices>>2]|0;
 $97 = HEAP32[(5840)>>2]|0;
 $98 = HEAP32[(5836)>>2]|0;
 _qh_partitionall($96,$97,$98);
 $99 = HEAP32[(5496)>>2]|0;
 $100 = HEAP32[(5748)>>2]|0;
 $101 = $100 | $99;
 $102 = HEAP32[(5344)>>2]|0;
 $103 = ($102|0)!=(0);
 $104 = $101 | $102;
 $105 = ($104|0)==(0);
 if (!($105)) {
  $106 = $102 | $100;
  $107 = ($106|0)==(0);
  if (!($107)) {
   $108 = HEAP32[(7480)>>2]|0;
   $109 = $103 ? $102 : $100;
   HEAP32[$vararg_buffer1>>2] = $109;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = (6116);
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = (5856);
   _qh_fprintf($108,8103,38544,$vararg_buffer1);
  }
  $110 = HEAP32[(7480)>>2]|0;
  $111 = HEAP32[5224>>2]|0;
  HEAP32[$vararg_buffer6>>2] = $111;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = (6372);
  _qh_fprintf($110,8104,55936,$vararg_buffer6);
 }
 _qh_resetlists(0,1);
 $112 = HEAP32[(7500)>>2]|0;
 HEAP32[(7508)>>2] = $112;
 _qh_furthestnext();
 $113 = HEAP32[(5460)>>2]|0;
 $114 = ($113|0)==(0);
 if (!($114)) {
  $115 = +HEAPF64[(5288)>>3];
  HEAPF64[(6944)>>3] = $115;
  $116 = +HEAPF64[(5400)>>3];
  HEAPF64[(6936)>>3] = $116;
 }
 $117 = HEAP32[(5444)>>2]|0;
 $118 = ($117|0)==(0);
 if (!($118)) {
  $119 = HEAP32[(5332)>>2]|0;
  $120 = ($119|0)>(0);
  $121 = HEAP32[(5392)>>2]|0;
  $122 = ($121|0)!=(0);
  $or$cond13 = $120 & $122;
  if ($or$cond13) {
   $123 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($123,6151,38576,$vararg_buffer10);
   _qh_errexit(1,0,0);
   // unreachable;
  }
  $124 = HEAP32[(5328)>>2]|0;
  $125 = HEAP32[(5320)>>2]|0;
  $126 = $125 | $124;
  $127 = ($126|0)==(0);
  if ($127) {
   $128 = HEAP32[(5384)>>2]|0;
   $129 = HEAP32[(5460)>>2]|0;
   $130 = $129 | $128;
   $or$cond17$not = ($130|0)==(0);
   $131 = HEAP32[(5336)>>2]|0;
   $132 = ($131|0)!=(0|0);
   $or$cond19 = $or$cond17$not & $132;
   if (!($or$cond19)) {
    $133 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($133,6152,38712,$vararg_buffer12);
    _qh_errexit(1,0,0);
    // unreachable;
   }
  }
  $134 = HEAP32[(5332)>>2]|0;
  $135 = ($134|0)<(1);
  $136 = HEAP32[(5392)>>2]|0;
  $137 = ($136|0)!=(0);
  $or$cond21 = $135 | $137;
  if (!($or$cond21)) {
   $138 = HEAP32[(5336)>>2]|0;
   $139 = HEAP32[$vertices>>2]|0;
   $140 = (_qh_isvertex($138,$139)|0);
   $141 = ($140|0)==(0|0);
   if ($141) {
    $142 = HEAP32[(7500)>>2]|0;
    $143 = (_qh_findbestnew($138,$142,$dist,0,$isoutside,$numpart)|0);
    $144 = HEAP32[$numpart>>2]|0;
    $145 = HEAP32[(43608)>>2]|0;
    $146 = (($145) + ($144))|0;
    HEAP32[(43608)>>2] = $146;
    $147 = HEAP32[$isoutside>>2]|0;
    $148 = ($147|0)==(0);
    if ($148) {
     $149 = HEAP32[(7480)>>2]|0;
     $150 = HEAP32[(5336)>>2]|0;
     $151 = (_qh_pointid($150)|0);
     HEAP32[$vararg_buffer14>>2] = $151;
     _qh_fprintf($149,6153,38856,$vararg_buffer14);
     _qh_errexit(1,0,0);
     // unreachable;
    }
    $152 = HEAP32[(5336)>>2]|0;
    $153 = (_qh_addpoint($152,$143,0)|0);
    $154 = ($153|0)==(0);
    if ($154) {
     _qh_settempfree($vertices);
     _qh_settempfree($maxpoints);
     STACKTOP = sp;return;
    }
   }
  }
  $155 = HEAP32[(7500)>>2]|0;
  (_qh_findgood($155,0)|0);
 }
 _qh_settempfree($vertices);
 _qh_settempfree($maxpoints);
 $156 = HEAP32[(5344)>>2]|0;
 $157 = ($156|0)>(0);
 if (!($157)) {
  STACKTOP = sp;return;
 }
 $158 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($158,1030,38952,$vararg_buffer17);
 STACKTOP = sp;return;
}
function _qh_initialvertices($dim,$maxpoints,$points,$numpoints) {
 $dim = $dim|0;
 $maxpoints = $maxpoints|0;
 $points = $points|0;
 $numpoints = $numpoints|0;
 var $$in = 0, $$in$lcssa = 0, $$in59 = 0, $$lcssa = 0, $$lcssa69 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0;
 var $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $idx$0$lcssa = 0, $idx$025 = 0, $idx$1$ph10 = 0, $k$020 = 0;
 var $k$1 = 0, $k$2$ph = 0, $k$2$ph2$lcssa = 0, $k$2$ph216 = 0, $k$3$ph11 = 0, $nearzero = 0, $point$019 = 0, $point_i$018 = 0, $pointp$07 = 0, $simplex = 0, $tested = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vertices = sp + 12|0;
 $simplex = sp;
 $tested = sp + 4|0;
 $nearzero = sp + 8|0;
 HEAP32[$nearzero>>2] = 0;
 $0 = (($dim) + 1)|0;
 $1 = (_qh_settemp($0)|0);
 HEAP32[$vertices>>2] = $1;
 $2 = (_qh_settemp($0)|0);
 HEAP32[$simplex>>2] = $2;
 $3 = HEAP32[5232>>2]|0;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = HEAP32[(5688)>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = HEAP32[$simplex>>2]|0;
    $8 = (_qh_setsize($7)|0);
    $9 = ($8|0)==($0|0);
    if ($9) {
     break;
    }
    while(1) {
     $10 = (_qh_rand()|0);
     $11 = (+($10|0));
     $12 = $11 / 2147483647.0;
     $13 = HEAP32[(5836)>>2]|0;
     $14 = (+($13|0));
     $15 = $12 * $14;
     $16 = (+Math_floor((+$15)));
     $17 = (~~(($16)));
     $18 = HEAP32[$simplex>>2]|0;
     $19 = (_qh_point($17)|0);
     $20 = (_qh_setin($18,$19)|0);
     $21 = ($20|0)==(0);
     if ($21) {
      $idx$0$lcssa = $17;
     } else {
      $idx$025 = $17;
      while(1) {
       $22 = (($idx$025) + 1)|0;
       $23 = HEAP32[(5836)>>2]|0;
       $24 = ($22|0)<($23|0);
       $25 = $24 ? $22 : 0;
       $26 = HEAP32[$simplex>>2]|0;
       $27 = (_qh_point($25)|0);
       $28 = (_qh_setin($26,$27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $idx$0$lcssa = $25;
        break;
       } else {
        $idx$025 = $25;
       }
      }
     }
     $30 = (_qh_point($idx$0$lcssa)|0);
     _qh_setappend($simplex,$30);
     $31 = HEAP32[$simplex>>2]|0;
     $32 = (_qh_setsize($31)|0);
     $33 = ($32|0)==($0|0);
     if ($33) {
      break L1;
     }
    }
   }
   $34 = HEAP32[(5828)>>2]|0;
   $35 = ($34|0)>(7);
   if (!($35)) {
    _qh_maxsimplex($dim,$maxpoints,$points,$numpoints,$simplex);
    break;
   }
   $36 = (_qh_settemp($0)|0);
   HEAP32[$tested>>2] = $36;
   $37 = ((($maxpoints)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   _qh_setappend($simplex,$38);
   $39 = ((($maxpoints)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   _qh_setappend($simplex,$40);
   $41 = ($dim|0)<(6);
   $42 = $41 ? $dim : 6;
   _qh_maxsimplex($42,$maxpoints,$points,$numpoints,$simplex);
   $43 = HEAP32[$simplex>>2]|0;
   $44 = (_qh_setsize($43)|0);
   $45 = ($maxpoints|0)==(0|0);
   L16: do {
    if ($45) {
     $k$2$ph = $44;
    } else {
     $47 = HEAP32[$37>>2]|0;
     $48 = (_qh_setsize($maxpoints)|0);
     $49 = ($48|0)>(0);
     if ($49) {
      $k$020 = $44;$point$019 = $47;$point_i$018 = 0;
      while(1) {
       $50 = $point_i$018 & 1;
       $51 = ($50|0)==(0);
       do {
        if ($51) {
         $k$1 = $k$020;
        } else {
         $52 = HEAP32[$simplex>>2]|0;
         $53 = (_qh_setin($52,$point$019)|0);
         $54 = ($53|0)==(0);
         if ($54) {
          $55 = HEAP32[$tested>>2]|0;
          $56 = (_qh_setin($55,$point$019)|0);
          $57 = ($56|0)==(0);
          if ($57) {
           $58 = HEAP32[$simplex>>2]|0;
           (+_qh_detsimplex($point$019,$58,$k$020,$nearzero));
           $59 = HEAP32[$nearzero>>2]|0;
           $60 = ($59|0)==(0);
           if ($60) {
            _qh_setappend($simplex,$point$019);
            $61 = (($k$020) + 1)|0;
            $62 = ($61|0)==($dim|0);
            if ($62) {
             $k$2$ph = $61;
             break L16;
            } else {
             $k$1 = $61;
             break;
            }
           } else {
            _qh_setappend($tested,$point$019);
            $k$1 = $k$020;
            break;
           }
          } else {
           $k$1 = $k$020;
          }
         } else {
          $k$1 = $k$020;
         }
        }
       } while(0);
       $63 = (($point_i$018) + 1)|0;
       $64 = (((($maxpoints)) + 4|0) + ($63<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($63|0)<($48|0);
       if ($66) {
        $k$020 = $k$1;$point$019 = $65;$point_i$018 = $63;
       } else {
        $k$2$ph = $k$1;
        break;
       }
      }
     } else {
      $k$2$ph = $44;
     }
    }
   } while(0);
   $46 = ($k$2$ph|0)==($dim|0);
   L29: do {
    if ($46) {
     $k$2$ph2$lcssa = $k$2$ph;
    } else {
     $k$2$ph216 = $k$2$ph;
     while(1) {
      $81 = (_qh_setdellast($maxpoints)|0);
      $82 = ($81|0)==(0|0);
      if ($82) {
       $k$2$ph2$lcssa = $k$2$ph216;
       break L29;
      } else {
       $$in = $81;
      }
      while(1) {
       $68 = HEAP32[$simplex>>2]|0;
       $69 = (_qh_setin($68,$$in)|0);
       $70 = ($69|0)==(0);
       if ($70) {
        $71 = HEAP32[$tested>>2]|0;
        $72 = (_qh_setin($71,$$in)|0);
        $73 = ($72|0)==(0);
        if ($73) {
         $74 = HEAP32[$simplex>>2]|0;
         (+_qh_detsimplex($$in,$74,$k$2$ph216,$nearzero));
         $75 = HEAP32[$nearzero>>2]|0;
         $76 = ($75|0)==(0);
         if ($76) {
          $$in$lcssa = $$in;
          break;
         }
         _qh_setappend($tested,$$in);
        }
       }
       $77 = (_qh_setdellast($maxpoints)|0);
       $78 = ($77|0)==(0|0);
       if ($78) {
        $k$2$ph2$lcssa = $k$2$ph216;
        break L29;
       } else {
        $$in = $77;
       }
      }
      _qh_setappend($simplex,$$in$lcssa);
      $79 = (($k$2$ph216) + 1)|0;
      $80 = ($79|0)==($dim|0);
      if ($80) {
       $k$2$ph2$lcssa = $79;
       break;
      } else {
       $k$2$ph216 = $79;
      }
     }
    }
   } while(0);
   $67 = ($k$2$ph2$lcssa|0)==($dim|0);
   L41: do {
    if (!($67)) {
     $idx$1$ph10 = 0;$k$3$ph11 = $k$2$ph2$lcssa;
     while(1) {
      $98 = (_qh_point($idx$1$ph10)|0);
      $99 = ($98|0)==(0|0);
      if ($99) {
       break L41;
      } else {
       $$in59 = $idx$1$ph10;$85 = $98;
      }
      while(1) {
       $83 = (($$in59) + 1)|0;
       $84 = HEAP32[$simplex>>2]|0;
       $86 = (_qh_setin($84,$85)|0);
       $87 = ($86|0)==(0);
       if ($87) {
        $90 = HEAP32[$tested>>2]|0;
        $91 = (_qh_setin($90,$85)|0);
        $92 = ($91|0)==(0);
        if ($92) {
         $93 = HEAP32[$simplex>>2]|0;
         (+_qh_detsimplex($85,$93,$k$3$ph11,$nearzero));
         $94 = HEAP32[$nearzero>>2]|0;
         $95 = ($94|0)==(0);
         if ($95) {
          $$lcssa = $83;$$lcssa69 = $85;
          break;
         }
        }
       }
       $88 = (_qh_point($83)|0);
       $89 = ($88|0)==(0|0);
       if ($89) {
        break L41;
       } else {
        $$in59 = $83;$85 = $88;
       }
      }
      _qh_setappend($simplex,$$lcssa69);
      $96 = (($k$3$ph11) + 1)|0;
      $97 = ($96|0)==($dim|0);
      if ($97) {
       break;
      } else {
       $idx$1$ph10 = $$lcssa;$k$3$ph11 = $96;
      }
     }
    }
   } while(0);
   _qh_settempfree($tested);
   _qh_maxsimplex($dim,$maxpoints,$points,$numpoints,$simplex);
  } else {
   _qh_maxsimplex($dim,0,$points,$numpoints,$simplex);
  }
 } while(0);
 $100 = HEAP32[$simplex>>2]|0;
 $101 = ($100|0)==(0|0);
 if ($101) {
  _qh_settempfree($simplex);
  $110 = HEAP32[$vertices>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $102 = ((($100)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(0|0);
 if ($104) {
  _qh_settempfree($simplex);
  $110 = HEAP32[$vertices>>2]|0;
  STACKTOP = sp;return ($110|0);
 } else {
  $106 = $103;$pointp$07 = $102;
 }
 while(1) {
  $105 = ((($pointp$07)) + 4|0);
  $107 = (_qh_newvertex($106)|0);
  _qh_setaddnth($vertices,0,$107);
  $108 = HEAP32[$105>>2]|0;
  $109 = ($108|0)==(0|0);
  if ($109) {
   break;
  } else {
   $106 = $108;$pointp$07 = $105;
  }
 }
 _qh_settempfree($simplex);
 $110 = HEAP32[$vertices>>2]|0;
 STACKTOP = sp;return ($110|0);
}
function _qh_initialhull($vertices) {
 $vertices = $vertices|0;
 var $$lcssa = 0, $$lcssa70 = 0, $$lcssa71 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $diff = 0;
 var $dist = 0, $facet$0 = 0, $facet$029 = 0, $facet$030 = 0, $facet$1 = 0, $facet$126$pr = 0, $facet$127 = 0, $facet$2 = 0, $facet$2$in = 0, $facet$2$lcssa75 = 0, $facet$3 = 0, $facet$321 = 0, $facet$322 = 0, $facet$4 = 0, $facet$4$in = 0, $facet$4$in$ph = 0, $facet$4$lcssa69 = 0, $k$020 = 0, $minangle$0$ph = 0.0, $minangle$0$ph$lcssa = 0.0;
 var $minangle$1$ph = 0.0, $neighborp$0 = 0, $neighborp$0$ph = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond11 = 0, $or$cond7 = 0, $or$cond9$not = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 64|0;
 $vararg_buffer9 = sp + 56|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $dist = sp;
 $diff = sp + 24|0;
 _qh_createsimplex($vertices);
 _qh_resetlists(0,1);
 $0 = HEAP32[(7500)>>2]|0;
 HEAP32[(7508)>>2] = $0;
 $1 = (_qh_getcenter($vertices)|0);
 HEAP32[(7484)>>2] = $1;
 $2 = HEAP32[(7500)>>2]|0;
 _qh_setfacetplane($2);
 $3 = HEAP32[(44440)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(44440)>>2] = $4;
 $5 = HEAP32[(7484)>>2]|0;
 _qh_distplane($5,$2,$dist);
 $6 = +HEAPF64[$dist>>3];
 $7 = $6 > 0.0;
 L1: do {
  if ($7) {
   $facet$029 = HEAP32[(7500)>>2]|0;
   $8 = ($facet$029|0)==(0|0);
   if ($8) {
    $facet$2$in = (7500);
   } else {
    $facet$030 = $facet$029;
    while(1) {
     $10 = ((($facet$030)) + 48|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      label = 3;
      break L1;
     }
     $13 = ((($facet$030)) + 80|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $14 ^ 4096;
     HEAP32[$13>>2] = $15;
     $facet$0 = HEAP32[$10>>2]|0;
     $16 = ($facet$0|0)==(0|0);
     if ($16) {
      label = 3;
      break;
     } else {
      $facet$030 = $facet$0;
     }
    }
   }
  } else {
   label = 3;
  }
 } while(0);
 L6: do {
  if ((label|0) == 3) {
   $facet$126$pr = HEAP32[(7500)>>2]|0;
   $9 = ($facet$126$pr|0)==(0|0);
   if ($9) {
    $facet$2$in = (7500);
   } else {
    $facet$127 = $facet$126$pr;
    while(1) {
     $17 = ((($facet$127)) + 48|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0|0);
     if ($19) {
      $facet$2$in = (7500);
      break L6;
     }
     _qh_setfacetplane($facet$127);
     $facet$1 = HEAP32[$17>>2]|0;
     $20 = ($facet$1|0)==(0|0);
     if ($20) {
      $facet$2$in = (7500);
      break;
     } else {
      $facet$127 = $facet$1;
     }
    }
   }
  }
 } while(0);
 while(1) {
  $facet$2 = HEAP32[$facet$2$in>>2]|0;
  $21 = ($facet$2|0)==(0|0);
  if ($21) {
   $facet$4$in$ph = (7500);$minangle$0$ph = 1.7976931348623157E+308;
   break;
  }
  $22 = ((($facet$2)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $facet$4$in$ph = (7500);$minangle$0$ph = 1.7976931348623157E+308;
   break;
  }
  $25 = (_qh_checkflipped($facet$2,0,1)|0);
  $26 = ($25|0)==(0);
  if ($26) {
   $facet$2$lcssa75 = $facet$2;
   label = 11;
   break;
  } else {
   $facet$2$in = $22;
  }
 }
 L15: do {
  if ((label|0) == 11) {
   $27 = HEAP32[(5344)>>2]|0;
   $28 = ($27|0)>(0);
   if ($28) {
    $29 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($29,1031,39016,$vararg_buffer);
   }
   $30 = ((($facet$2$lcssa75)) + 80|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & -65537;
   HEAP32[$30>>2] = $32;
   $facet$321 = HEAP32[(7500)>>2]|0;
   $33 = ($facet$321|0)==(0|0);
   if ($33) {
    $facet$4$in$ph = (7500);$minangle$0$ph = 1.7976931348623157E+308;
   } else {
    $facet$322 = $facet$321;
    while(1) {
     $34 = ((($facet$322)) + 48|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==(0|0);
     if ($36) {
      $facet$4$in$ph = (7500);$minangle$0$ph = 1.7976931348623157E+308;
      break L15;
     }
     $37 = ((($facet$322)) + 80|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 ^ 4096;
     HEAP32[$37>>2] = $39;
     (_qh_orientoutside($facet$322)|0);
     $facet$3 = HEAP32[$34>>2]|0;
     $40 = ($facet$3|0)==(0|0);
     if ($40) {
      $facet$4$in$ph = (7500);$minangle$0$ph = 1.7976931348623157E+308;
      break;
     } else {
      $facet$322 = $facet$3;
     }
    }
   }
  }
 } while(0);
 L23: while(1) {
  $facet$4$in = $facet$4$in$ph;
  while(1) {
   $facet$4 = HEAP32[$facet$4$in>>2]|0;
   $41 = ($facet$4|0)==(0|0);
   if ($41) {
    $minangle$0$ph$lcssa = $minangle$0$ph;
    break L23;
   }
   $42 = ((($facet$4)) + 48|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0|0);
   if ($44) {
    $minangle$0$ph$lcssa = $minangle$0$ph;
    break L23;
   }
   $45 = (_qh_checkflipped($facet$4,0,0)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    label = 20;
    break L23;
   }
   $57 = ((($facet$4)) + 60|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if ($59) {
    $facet$4$in = $42;
   } else {
    $$lcssa70 = $42;$$lcssa71 = $58;$facet$4$lcssa69 = $facet$4;
    break;
   }
  }
  $60 = ((($$lcssa71)) + 4|0);
  $61 = ((($facet$4$lcssa69)) + 24|0);
  $minangle$1$ph = $minangle$0$ph;$neighborp$0$ph = $60;
  L31: while(1) {
   $neighborp$0 = $neighborp$0$ph;
   while(1) {
    $62 = ((($neighborp$0)) + 4|0);
    $63 = HEAP32[$neighborp$0>>2]|0;
    $64 = ($63|0)==(0|0);
    if ($64) {
     $facet$4$in$ph = $$lcssa70;$minangle$0$ph = $minangle$1$ph;
     continue L23;
    }
    $65 = HEAP32[$61>>2]|0;
    $66 = ((($63)) + 24|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (+_qh_getangle($65,$67));
    $69 = $minangle$1$ph > $68;
    if ($69) {
     $minangle$1$ph = $68;$neighborp$0$ph = $62;
     continue L31;
    } else {
     $neighborp$0 = $62;
    }
   }
  }
 }
 if ((label|0) == 20) {
  $47 = HEAP32[(5304)>>2]|0;
  $48 = ($47|0)==(0);
  $49 = HEAP32[(5260)>>2]|0;
  $50 = ($49|0)!=(0);
  $or$cond = $48 | $50;
  if ($or$cond) {
   _qh_precision(39416);
   $54 = HEAP32[(7480)>>2]|0;
   $55 = ((($facet$4)) + 76|0);
   $56 = HEAP32[$55>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $56;
   _qh_fprintf($54,6154,39464,$vararg_buffer5);
   _qh_errexit(2,$facet$4,0);
   // unreachable;
  }
  $51 = HEAP32[(5780)>>2]|0;
  $52 = ($51|0)==(0);
  $53 = HEAP32[(7480)>>2]|0;
  if ($52) {
   _qh_fprintf($53,6239,39216,$vararg_buffer3);
   _qh_errexit(1,0,0);
   // unreachable;
  } else {
   _qh_fprintf($53,6240,39088,$vararg_buffer1);
   _qh_errexit(1,0,0);
   // unreachable;
  }
 }
 $70 = !($minangle$0$ph$lcssa < -0.99999998999999994);
 $71 = HEAP32[(5432)>>2]|0;
 $72 = ($71|0)!=(0);
 $or$cond7 = $70 | $72;
 if (!($or$cond7)) {
  $73 = $minangle$0$ph$lcssa + 1.0;
  HEAPF64[$diff>>3] = $73;
  HEAP32[(7032)>>2] = 1;
  _qh_option(39544,0,$diff);
  $74 = HEAP32[(5700)>>2]|0;
  $notlhs = $minangle$0$ph$lcssa < -0.999999999999999;
  $notrhs = ($74|0)==(0);
  $or$cond9$not = $notlhs & $notrhs;
  $75 = HEAP32[(5504)>>2]|0;
  $76 = ($75|0)!=(0);
  $or$cond11 = $or$cond9$not & $76;
  if ($or$cond11) {
   $77 = HEAP32[(7480)>>2]|0;
   _qh_printhelp_narrowhull($77,$minangle$0$ph$lcssa);
  }
 }
 $78 = HEAP32[(5828)>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[(44568)>>2] = $79;
 $80 = HEAP32[(7500)>>2]|0;
 _qh_checkpolygon($80);
 $81 = HEAP32[(7500)>>2]|0;
 _qh_checkconvex($81,1);
 $82 = HEAP32[(5344)>>2]|0;
 $83 = ($82|0)>(0);
 if (!($83)) {
  STACKTOP = sp;return;
 }
 $84 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($84,8105,39560,$vararg_buffer7);
 $85 = HEAP32[(5828)>>2]|0;
 $86 = ($85|0)>(0);
 $87 = HEAP32[(7480)>>2]|0;
 if ($86) {
  $91 = $87;$k$020 = 0;
  while(1) {
   $88 = HEAP32[(7484)>>2]|0;
   $89 = (($88) + ($k$020<<3)|0);
   $90 = +HEAPF64[$89>>3];
   HEAPF64[$vararg_buffer9>>3] = $90;
   _qh_fprintf($91,8106,39616,$vararg_buffer9);
   $92 = (($k$020) + 1)|0;
   $93 = HEAP32[(5828)>>2]|0;
   $94 = ($92|0)<($93|0);
   $95 = HEAP32[(7480)>>2]|0;
   if ($94) {
    $91 = $95;$k$020 = $92;
   } else {
    $$lcssa = $95;
    break;
   }
  }
 } else {
  $$lcssa = $87;
 }
 _qh_fprintf($$lcssa,8107,56128,$vararg_buffer12);
 STACKTOP = sp;return;
}
function _qh_resetlists($stats,$resetVisible) {
 $stats = $stats|0;
 $resetVisible = $resetVisible|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newfacet$017 = 0, $newfacet$1 = 0, $newfacet$110 = 0, $newfacet$19 = 0, $totnew$0$lcssa = 0;
 var $totnew$018 = 0, $totver$0$lcssa = 0, $totver$023 = 0, $vertex$022 = 0, $vertex$1 = 0, $vertex$113 = 0, $vertex$114 = 0, $visible$0 = 0, $visible$06 = 0, $visible$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stats|0)==(0);
 if (!($0)) {
  $1 = HEAP32[(7548)>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $totver$0$lcssa = 0;
  } else {
   $totver$023 = 0;$vertex$022 = $1;
   while(1) {
    $3 = HEAP32[$vertex$022>>2]|0;
    $4 = ($3|0)==(0|0);
    $5 = (($totver$023) + 1)|0;
    if ($4) {
     $totver$0$lcssa = $totver$023;
     break;
    } else {
     $totver$023 = $5;$vertex$022 = $3;
    }
   }
  }
  $6 = HEAP32[(7512)>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $totnew$0$lcssa = 0;
  } else {
   $newfacet$017 = $6;$totnew$018 = 0;
   while(1) {
    $8 = ((($newfacet$017)) + 48|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(0|0);
    $11 = (($totnew$018) + 1)|0;
    if ($10) {
     $totnew$0$lcssa = $totnew$018;
     break;
    } else {
     $newfacet$017 = $9;$totnew$018 = $11;
    }
   }
  }
  $12 = HEAP32[(44944)>>2]|0;
  $13 = (($12) + ($totver$0$lcssa))|0;
  HEAP32[(44944)>>2] = $13;
  $14 = HEAP32[(44952)>>2]|0;
  $15 = ($14|0)<($totver$0$lcssa|0);
  if ($15) {
   HEAP32[(44952)>>2] = $totver$0$lcssa;
  }
  $16 = HEAP32[(44304)>>2]|0;
  $17 = (($16) + ($totnew$0$lcssa))|0;
  HEAP32[(44304)>>2] = $17;
  $18 = HEAP32[(44312)>>2]|0;
  $19 = ($18|0)<($totnew$0$lcssa|0);
  if ($19) {
   HEAP32[(44312)>>2] = $totnew$0$lcssa;
  }
 }
 $vertex$113 = HEAP32[(7548)>>2]|0;
 $20 = ($vertex$113|0)==(0|0);
 L16: do {
  if (!($20)) {
   $vertex$114 = $vertex$113;
   while(1) {
    $21 = HEAP32[$vertex$114>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break L16;
    }
    $23 = ((($vertex$114)) + 16|0);
    $24 = $23;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 2147483647;
    $31 = $23;
    $32 = $31;
    HEAP32[$32>>2] = $26;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = $30;
    $vertex$1 = HEAP32[$vertex$114>>2]|0;
    $35 = ($vertex$1|0)==(0|0);
    if ($35) {
     break;
    } else {
     $vertex$114 = $vertex$1;
    }
   }
  }
 } while(0);
 HEAP32[(7548)>>2] = 0;
 $newfacet$19 = HEAP32[(7512)>>2]|0;
 $36 = ($newfacet$19|0)==(0|0);
 L21: do {
  if (!($36)) {
   $newfacet$110 = $newfacet$19;
   while(1) {
    $37 = ((($newfacet$110)) + 48|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(0|0);
    if ($39) {
     break L21;
    }
    $40 = ((($newfacet$110)) + 80|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 & -1025;
    HEAP32[$40>>2] = $42;
    $newfacet$1 = HEAP32[$37>>2]|0;
    $43 = ($newfacet$1|0)==(0|0);
    if ($43) {
     break;
    } else {
     $newfacet$110 = $newfacet$1;
    }
   }
  }
 } while(0);
 HEAP32[(7512)>>2] = 0;
 $44 = ($resetVisible|0)==(0);
 if ($44) {
  HEAP32[(7516)>>2] = 0;
  HEAP32[(7656)>>2] = 0;
  return;
 }
 $visible$06 = HEAP32[(7516)>>2]|0;
 $45 = ($visible$06|0)==(0|0);
 L29: do {
  if (!($45)) {
   $visible$07 = $visible$06;
   while(1) {
    $46 = ((($visible$07)) + 80|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = $47 & 2048;
    $49 = ($48|0)==(0);
    if ($49) {
     break L29;
    }
    $50 = ((($visible$07)) + 32|0);
    HEAP32[$50>>2] = 0;
    $51 = HEAP32[$46>>2]|0;
    $52 = $51 & -2049;
    HEAP32[$46>>2] = $52;
    $53 = ((($visible$07)) + 48|0);
    $visible$0 = HEAP32[$53>>2]|0;
    $54 = ($visible$0|0)==(0|0);
    if ($54) {
     break;
    } else {
     $visible$07 = $visible$0;
    }
   }
  }
 } while(0);
 HEAP32[(7520)>>2] = 0;
 HEAP32[(7516)>>2] = 0;
 HEAP32[(7656)>>2] = 0;
 return;
}
function _qh_makenewfacets($point) {
 $point = $point|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $neighborp$01 = 0, $newfacet$03 = 0, $newfacet$1 = 0, $newfacet$1$newfacet2$1 = 0, $newfacet$3 = 0, $newfacet2$04 = 0;
 var $newfacet2$1 = 0, $numnew = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $visible$0 = 0, $visible$02 = 0, $visible$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $numnew = sp + 8|0;
 HEAP32[$numnew>>2] = 0;
 $0 = HEAP32[(7504)>>2]|0;
 HEAP32[(7512)>>2] = $0;
 $1 = HEAP32[(7544)>>2]|0;
 HEAP32[(7548)>>2] = $1;
 $2 = (_qh_newvertex($point)|0);
 _qh_appendvertex($2);
 $3 = HEAP32[(7720)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(7720)>>2] = $4;
 $5 = HEAP32[(5444)>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[(7656)>>2] = 1;
 }
 $visible$02 = HEAP32[(7516)>>2]|0;
 $7 = ($visible$02|0)==(0|0);
 L4: do {
  if (!($7)) {
   $newfacet$03 = 0;$newfacet2$04 = 0;$visible$05 = $visible$02;
   while(1) {
    $8 = ((($visible$05)) + 80|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9 & 2048;
    $11 = ($10|0)==(0);
    if ($11) {
     break L4;
    }
    $12 = ((($visible$05)) + 60|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = ((($13)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if (!($17)) {
      $20 = $16;$neighborp$01 = $15;
      while(1) {
       $18 = ((($neighborp$01)) + 4|0);
       $19 = ((($20)) + 80|0);
       $21 = HEAP32[$19>>2]|0;
       $22 = $21 & -16385;
       HEAP32[$19>>2] = $22;
       $23 = HEAP32[$18>>2]|0;
       $24 = ($23|0)==(0|0);
       if ($24) {
        break;
       } else {
        $20 = $23;$neighborp$01 = $18;
       }
      }
     }
    }
    $25 = ((($visible$05)) + 56|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $newfacet2$1 = $newfacet2$04;
    } else {
     $28 = HEAP32[(7720)>>2]|0;
     $29 = ((($visible$05)) + 72|0);
     HEAP32[$29>>2] = $28;
     $30 = (_qh_makenew_nonsimplicial($visible$05,$2,$numnew)|0);
     $newfacet2$1 = $30;
    }
    $31 = HEAP32[$8>>2]|0;
    $32 = $31 & 8192;
    $33 = ($32|0)==(0);
    if ($33) {
     $newfacet$1 = $newfacet$03;
    } else {
     $34 = (_qh_makenew_simplicial($visible$05,$2,$numnew)|0);
     $newfacet$1 = $34;
    }
    $35 = HEAP32[(5444)>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = ($newfacet2$1|0)==(0|0);
     $newfacet$1$newfacet2$1 = $37 ? $newfacet$1 : $newfacet2$1;
     $38 = ($newfacet$1$newfacet2$1|0)==(0|0);
     if ($38) {
      $40 = HEAP32[(44008)>>2]|0;
      $41 = (($40) + 1)|0;
      HEAP32[(44008)>>2] = $41;
     } else {
      $39 = ((($visible$05)) + 32|0);
      HEAP32[$39>>2] = $newfacet$1$newfacet2$1;
     }
     $42 = HEAP32[$12>>2]|0;
     $43 = ((($42)) + 4|0);
     HEAP32[$43>>2] = 0;
     $newfacet$3 = $newfacet$1$newfacet2$1;
    } else {
     $newfacet$3 = $newfacet$1;
    }
    $44 = ((($visible$05)) + 48|0);
    $visible$0 = HEAP32[$44>>2]|0;
    $45 = ($visible$0|0)==(0|0);
    if ($45) {
     break;
    } else {
     $newfacet$03 = $newfacet$3;$newfacet2$04 = $newfacet2$1;$visible$05 = $visible$0;
    }
   }
  }
 } while(0);
 $46 = HEAP32[(5344)>>2]|0;
 $47 = ($46|0)>(0);
 if (!($47)) {
  STACKTOP = sp;return ($2|0);
 }
 $48 = HEAP32[(7480)>>2]|0;
 $49 = HEAP32[$numnew>>2]|0;
 $50 = (_qh_pointid($point)|0);
 HEAP32[$vararg_buffer>>2] = $49;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $50;
 _qh_fprintf($48,1032,39624,$vararg_buffer);
 $$pr = HEAP32[(5344)>>2]|0;
 $51 = ($$pr|0)>(3);
 if (!($51)) {
  STACKTOP = sp;return ($2|0);
 }
 $52 = HEAP32[(7512)>>2]|0;
 _qh_printfacetlist($52,0,1);
 STACKTOP = sp;return ($2|0);
}
function _qh_matchduplicates($atfacet,$atskip,$hashsize,$hashcount) {
 $atfacet = $atfacet|0;
 $atskip = $atskip|0;
 $hashsize = $hashsize|0;
 $hashcount = $hashcount|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $high = 0, $low = 0, $makematch$039 = 0, $maxdist$040 = 0.0, $maxdist$1$lcssa$ph = 0.0, $maxdist$126 = 0.0, $maxdist$211 = 0.0, $maxdist$3 = 0.0, $maxdist$5 = 0.0;
 var $maxdist$5$lcssa = 0.0, $maxmatch$034 = 0, $maxmatch$1$lcssa$ph = 0, $maxmatch$120 = 0, $maxmatch$25 = 0, $maxmatch$3 = 0, $maxmatch$5 = 0, $maxmatch$5$lcssa = 0, $maxmatch2$035 = 0, $maxmatch2$1$lcssa$ph = 0, $maxmatch2$121 = 0, $maxmatch2$26 = 0, $maxmatch2$3 = 0, $maxmatch2$5 = 0, $maxmatch2$5$lcssa = 0, $maxskip$037 = 0, $maxskip$1$lcssa$ph = 0, $maxskip$124 = 0, $maxskip$29 = 0, $maxskip$3 = 0;
 var $maxskip$5 = 0, $maxskip$5$lcssa = 0, $maxskip2$038 = 0, $maxskip2$1$lcssa$ph = 0, $maxskip2$125 = 0, $maxskip2$210 = 0, $maxskip2$3 = 0, $maxskip2$5 = 0, $maxskip2$5$lcssa = 0, $mindist$0 = 0.0, $newfacet$019 = 0, $newskip$022 = 0, $nextfacet$07 = 0, $nextfacet$2 = 0, $nextfacet$2$lcssa = 0, $nextskip$036 = 0, $nextskip$1$lcssa$ph = 0, $nextskip$123 = 0, $nextskip$28 = 0, $nextskip$4 = 0;
 var $nextskip$4$lcssa = 0, $or$cond = 0, $same = 0, $scan$012 = 0, $skip = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer17 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0;
 var $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer11 = sp + 24|0;
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer = sp + 8|0;
 $same = sp + 140|0;
 $skip = sp + 136|0;
 $low = sp;
 $high = sp + 64|0;
 $0 = ((($atfacet)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[(5828)>>2]|0;
 $3 = (((($1)) + 4|0) + ($atskip<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_qh_gethash($hashsize,$1,$2,1,$4)|0);
 $6 = HEAP32[(5344)>>2]|0;
 $7 = ($6|0)>(1);
 if ($7) {
  $8 = HEAP32[(7480)>>2]|0;
  $9 = ((($atfacet)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$hashcount>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $atskip;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $5;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $11;
  _qh_fprintf($8,2046,39696,$vararg_buffer);
 }
 $12 = ((($atfacet)) + 76|0);
 $makematch$039 = 0;$maxdist$040 = -1.7976931348623157E+308;$maxmatch$034 = 0;$maxmatch2$035 = 0;$maxskip$037 = 0;$maxskip2$038 = 0;$nextskip$036 = 0;
 while(1) {
  $13 = HEAP32[(7720)>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[(7720)>>2] = $14;
  $15 = ($makematch$039|0)!=(0);
  $16 = ($makematch$039|0)==(0);
  $maxdist$126 = $maxdist$040;$maxmatch$120 = $maxmatch$034;$maxmatch2$121 = $maxmatch2$035;$maxskip$124 = $maxskip$037;$maxskip2$125 = $maxskip2$038;$newfacet$019 = $atfacet;$newskip$022 = $atskip;$nextskip$123 = $nextskip$036;
  while(1) {
   $18 = HEAP32[(43976)>>2]|0;
   $19 = (($18) + 1)|0;
   HEAP32[(43976)>>2] = $19;
   $20 = HEAP32[(7720)>>2]|0;
   $21 = ((($newfacet$019)) + 72|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[(7744)>>2]|0;
   $23 = (((($22)) + 4|0) + ($5<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $maxdist$1$lcssa$ph = $maxdist$126;$maxmatch$1$lcssa$ph = $maxmatch$120;$maxmatch2$1$lcssa$ph = $maxmatch2$121;$maxskip$1$lcssa$ph = $maxskip$124;$maxskip2$1$lcssa$ph = $maxskip2$125;$nextskip$1$lcssa$ph = $nextskip$123;
    break;
   }
   $26 = ((($newfacet$019)) + 52|0);
   $27 = ((($newfacet$019)) + 80|0);
   $28 = ((($newfacet$019)) + 60|0);
   $29 = ((($newfacet$019)) + 76|0);
   $30 = ((($newfacet$019)) + 76|0);
   $31 = ((($newfacet$019)) + 76|0);
   $33 = $24;$maxdist$211 = $maxdist$126;$maxmatch$25 = $maxmatch$120;$maxmatch2$26 = $maxmatch2$121;$maxskip$29 = $maxskip$124;$maxskip2$210 = $maxskip2$125;$nextfacet$07 = 0;$nextskip$28 = $nextskip$123;$scan$012 = $5;
   while(1) {
    $32 = ((($33)) + 80|0);
    $34 = HEAP32[$32>>2]|0;
    $35 = $34 & 2097152;
    $36 = ($35|0)==(0);
    do {
     if ($36) {
      $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
     } else {
      $37 = ((($33)) + 72|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[(7720)>>2]|0;
      $40 = ($38|0)==($39|0);
      if ($40) {
       $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
      } else {
       $41 = HEAP32[(44000)>>2]|0;
       $42 = (($41) + 1)|0;
       HEAP32[(44000)>>2] = $42;
       $43 = HEAP32[$26>>2]|0;
       $44 = ((($33)) + 52|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (_qh_matchvertices(1,$43,$newskip$022,$45,$skip,$same)|0);
       $47 = ($46|0)==(0);
       if ($47) {
        $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
       } else {
        $48 = HEAP32[$same>>2]|0;
        $49 = HEAP32[$27>>2]|0;
        $50 = HEAP32[$32>>2]|0;
        $51 = $50 ^ $49;
        $52 = $51 >>> 12;
        $53 = $52 & 1;
        $54 = ($48|0)==($53|0);
        $55 = HEAP32[$skip>>2]|0;
        $56 = ((($33)) + 60|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (((($57)) + 4|0) + ($55<<2)|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = ($59|0)==((1)|0);
        if (!($60)) {
         if (!($16)) {
          $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
          break;
         }
         $61 = HEAP32[(7480)>>2]|0;
         $62 = ((($33)) + 76|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = HEAP32[$31>>2]|0;
         HEAP32[$vararg_buffer4>>2] = $63;
         $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
         HEAP32[$vararg_ptr7>>2] = $55;
         $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
         HEAP32[$vararg_ptr8>>2] = $64;
         $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
         HEAP32[$vararg_ptr9>>2] = $newskip$022;
         $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
         HEAP32[$vararg_ptr10>>2] = $5;
         _qh_fprintf($61,6155,39784,$vararg_buffer4);
         _qh_errexit2(5,$33,$newfacet$019);
         $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
         break;
        }
        $or$cond = $15 & $54;
        if (!($or$cond)) {
         if (!($54)) {
          $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $33;$nextskip$4 = $55;
          break;
         }
         $83 = (+_qh_getdistance($33,$newfacet$019,$low,$high));
         $84 = (+_qh_getdistance($newfacet$019,$33,$low,$high));
         $85 = $83 > $84;
         $mindist$0 = $85 ? $84 : $83;
         $86 = $mindist$0 > $maxdist$211;
         if ($86) {
          $87 = HEAP32[$skip>>2]|0;
          $maxdist$3 = $mindist$0;$maxmatch$3 = $33;$maxmatch2$3 = $newfacet$019;$maxskip$3 = $87;$maxskip2$3 = $newskip$022;
         } else {
          $maxdist$3 = $maxdist$211;$maxmatch$3 = $maxmatch$25;$maxmatch2$3 = $maxmatch2$26;$maxskip$3 = $maxskip$29;$maxskip2$3 = $maxskip2$210;
         }
         $88 = HEAP32[(5344)>>2]|0;
         $89 = ($88|0)>(2);
         if (!($89)) {
          $maxdist$5 = $maxdist$3;$maxmatch$5 = $maxmatch$3;$maxmatch2$5 = $maxmatch2$3;$maxskip$5 = $maxskip$3;$maxskip2$5 = $maxskip2$3;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
          break;
         }
         $90 = HEAP32[(7480)>>2]|0;
         $91 = ((($33)) + 76|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = HEAP32[$skip>>2]|0;
         $94 = HEAP32[$30>>2]|0;
         $95 = ((($maxmatch$3)) + 76|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ((($maxmatch2$3)) + 76|0);
         $98 = HEAP32[$97>>2]|0;
         HEAP32[$vararg_buffer17>>2] = $92;
         $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
         HEAP32[$vararg_ptr20>>2] = $93;
         $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
         HEAP32[$vararg_ptr21>>2] = $94;
         $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
         HEAP32[$vararg_ptr22>>2] = $newskip$022;
         $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
         HEAPF64[$vararg_ptr23>>3] = $mindist$0;
         $vararg_ptr24 = ((($vararg_buffer17)) + 24|0);
         HEAP32[$vararg_ptr24>>2] = $96;
         $vararg_ptr25 = ((($vararg_buffer17)) + 28|0);
         HEAP32[$vararg_ptr25>>2] = $98;
         _qh_fprintf($90,3018,39968,$vararg_buffer17);
         $maxdist$5 = $maxdist$3;$maxmatch$5 = $maxmatch$3;$maxmatch2$5 = $maxmatch2$3;$maxskip$5 = $maxskip$3;$maxskip2$5 = $maxskip2$3;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
         break;
        }
        $65 = HEAP32[$28>>2]|0;
        $66 = (((($65)) + 4|0) + ($newskip$022<<2)|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($67|0)==((1)|0);
        if ($68) {
         HEAP32[$58>>2] = $newfacet$019;
         $69 = HEAP32[$27>>2]|0;
         $70 = $69 & 512;
         $71 = ($70|0)==(0);
         $72 = HEAP32[$28>>2]|0;
         $73 = (((($72)) + 4|0) + ($newskip$022<<2)|0);
         if ($71) {
          HEAP32[$73>>2] = (2);
         } else {
          HEAP32[$73>>2] = $33;
         }
         $74 = HEAP32[$hashcount>>2]|0;
         $75 = (($74) + -2)|0;
         HEAP32[$hashcount>>2] = $75;
         $76 = HEAP32[(5344)>>2]|0;
         $77 = ($76|0)>(3);
         if ($77) {
          $78 = HEAP32[(7480)>>2]|0;
          $79 = ((($33)) + 76|0);
          $80 = HEAP32[$79>>2]|0;
          $81 = HEAP32[$skip>>2]|0;
          $82 = HEAP32[$29>>2]|0;
          HEAP32[$vararg_buffer11>>2] = $80;
          $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
          HEAP32[$vararg_ptr14>>2] = $81;
          $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
          HEAP32[$vararg_ptr15>>2] = $82;
          $vararg_ptr16 = ((($vararg_buffer11)) + 12|0);
          HEAP32[$vararg_ptr16>>2] = $newskip$022;
          _qh_fprintf($78,4059,39888,$vararg_buffer11);
          $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
         } else {
          $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
         }
        } else {
         $maxdist$5 = $maxdist$211;$maxmatch$5 = $maxmatch$25;$maxmatch2$5 = $maxmatch2$26;$maxskip$5 = $maxskip$29;$maxskip2$5 = $maxskip2$210;$nextfacet$2 = $nextfacet$07;$nextskip$4 = $nextskip$28;
        }
       }
      }
     }
    } while(0);
    $99 = (($scan$012) + 1)|0;
    $100 = ($99|0)>=($hashsize|0);
    $101 = $100 ? 0 : $99;
    $102 = HEAP32[(7744)>>2]|0;
    $103 = (((($102)) + 4|0) + ($101<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)==(0|0);
    if ($105) {
     $maxdist$5$lcssa = $maxdist$5;$maxmatch$5$lcssa = $maxmatch$5;$maxmatch2$5$lcssa = $maxmatch2$5;$maxskip$5$lcssa = $maxskip$5;$maxskip2$5$lcssa = $maxskip2$5;$nextfacet$2$lcssa = $nextfacet$2;$nextskip$4$lcssa = $nextskip$4;
     break;
    } else {
     $33 = $104;$maxdist$211 = $maxdist$5;$maxmatch$25 = $maxmatch$5;$maxmatch2$26 = $maxmatch2$5;$maxskip$29 = $maxskip$5;$maxskip2$210 = $maxskip2$5;$nextfacet$07 = $nextfacet$2;$nextskip$28 = $nextskip$4;$scan$012 = $101;
    }
   }
   $17 = ($nextfacet$2$lcssa|0)==(0|0);
   if ($17) {
    $maxdist$1$lcssa$ph = $maxdist$5$lcssa;$maxmatch$1$lcssa$ph = $maxmatch$5$lcssa;$maxmatch2$1$lcssa$ph = $maxmatch2$5$lcssa;$maxskip$1$lcssa$ph = $maxskip$5$lcssa;$maxskip2$1$lcssa$ph = $maxskip2$5$lcssa;$nextskip$1$lcssa$ph = $nextskip$4$lcssa;
    break;
   } else {
    $maxdist$126 = $maxdist$5$lcssa;$maxmatch$120 = $maxmatch$5$lcssa;$maxmatch2$121 = $maxmatch2$5$lcssa;$maxskip$124 = $maxskip$5$lcssa;$maxskip2$125 = $maxskip2$5$lcssa;$newfacet$019 = $nextfacet$2$lcssa;$newskip$022 = $nextskip$4$lcssa;$nextskip$123 = $nextskip$4$lcssa;
   }
  }
  $106 = ($makematch$039|0)==(0);
  if ($106) {
   $107 = ($maxmatch$1$lcssa$ph|0)==(0|0);
   if ($107) {
    label = 29;
    break;
   }
   $110 = ((($maxmatch$1$lcssa$ph)) + 60|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (((($111)) + 4|0) + ($maxskip$1$lcssa$ph<<2)|0);
   HEAP32[$112>>2] = $maxmatch2$1$lcssa$ph;
   $113 = ((($maxmatch2$1$lcssa$ph)) + 60|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (((($114)) + 4|0) + ($maxskip2$1$lcssa$ph<<2)|0);
   HEAP32[$115>>2] = $maxmatch$1$lcssa$ph;
   $116 = HEAP32[$hashcount>>2]|0;
   $117 = (($116) + -2)|0;
   HEAP32[$hashcount>>2] = $117;
   $118 = HEAP32[(44264)>>2]|0;
   $119 = (($118) + 1)|0;
   HEAP32[(44264)>>2] = $119;
   $120 = HEAP32[(5344)>>2]|0;
   $121 = ($120|0)==(0);
   if (!($121)) {
    $122 = HEAP32[(7480)>>2]|0;
    $123 = ((($maxmatch$1$lcssa$ph)) + 76|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($maxmatch2$1$lcssa$ph)) + 76|0);
    $126 = HEAP32[$125>>2]|0;
    HEAP32[$vararg_buffer31>>2] = $124;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = $maxskip$1$lcssa$ph;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $126;
    $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
    HEAP32[$vararg_ptr36>>2] = $maxskip2$1$lcssa$ph;
    _qh_fprintf($122,25,40168,$vararg_buffer31);
   }
   _qh_precision(40248);
   $127 = HEAP32[(5344)>>2]|0;
   $128 = ($127|0)>(3);
   if ($128) {
    _qh_errprint(40280,$maxmatch$1$lcssa$ph,$maxmatch2$1$lcssa$ph,0,0);
   }
  }
  $129 = (($makematch$039) + 1)|0;
  $exitcond = ($129|0)==(2);
  if ($exitcond) {
   label = 35;
   break;
  } else {
   $makematch$039 = $129;$maxdist$040 = $maxdist$1$lcssa$ph;$maxmatch$034 = $maxmatch$1$lcssa$ph;$maxmatch2$035 = $maxmatch2$1$lcssa$ph;$maxskip$037 = $maxskip$1$lcssa$ph;$maxskip2$038 = $maxskip2$1$lcssa$ph;$nextskip$036 = $nextskip$1$lcssa$ph;
  }
 }
 if ((label|0) == 29) {
  $108 = HEAP32[(7480)>>2]|0;
  $109 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer26>>2] = $109;
  $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
  HEAP32[$vararg_ptr29>>2] = $atskip;
  $vararg_ptr30 = ((($vararg_buffer26)) + 8|0);
  HEAP32[$vararg_ptr30>>2] = $5;
  _qh_fprintf($108,6157,40064,$vararg_buffer26);
  _qh_errexit(5,$atfacet,0);
  // unreachable;
 }
 else if ((label|0) == 35) {
  STACKTOP = sp;return;
 }
}
function _qh_newhashtable($newsize) {
 $newsize = $newsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $size$0 = 0, $size$0$lcssa = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $newsize << 1;
 $1 = (($0) + 2)|0;
 $2 = $1 | 1;
 $size$0 = $2;
 while(1) {
  $3 = $size$0 | $newsize;
  $4 = ($3|0)<(0);
  if ($4) {
   label = 3;
   break;
  }
  $6 = (($size$0|0) % 3)&-1;
  $7 = ($6|0)==(0);
  $8 = (($size$0|0) % 5)&-1;
  $9 = ($8|0)==(0);
  $or$cond = $7 | $9;
  $10 = (($size$0) + 2)|0;
  if ($or$cond) {
   $size$0 = $10;
  } else {
   $size$0$lcssa = $size$0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  $5 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $newsize;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $size$0;
  _qh_fprintf($5,6236,40304,$vararg_buffer);
  _qh_errexit(4,0,0);
  // unreachable;
 }
 else if ((label|0) == 5) {
  $11 = (_qh_setnew($size$0$lcssa)|0);
  HEAP32[(7744)>>2] = $11;
  _qh_setzero($11,0,$size$0$lcssa);
  STACKTOP = sp;return ($size$0$lcssa|0);
 }
 return (0)|0;
}
function _qh_outcoplanar() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist = 0, $facet$0 = 0, $facet$02 = 0, $facet$03 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $dist = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,1033,40408,$vararg_buffer);
 }
 $facet$02 = HEAP32[(7500)>>2]|0;
 $3 = ($facet$02|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $facet$03 = $facet$02;
 }
 while(1) {
  $4 = ((($facet$03)) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 12;
   break;
  }
  $7 = ((($facet$03)) + 64|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($8)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = ((($10)) + 4|0);
    $20 = $11;$24 = $13;
    while(1) {
     $14 = HEAP32[(7560)>>2]|0;
     $15 = (($14) + -1)|0;
     HEAP32[(7560)>>2] = $15;
     $16 = HEAP32[(5352)>>2]|0;
     $17 = HEAP32[(5824)>>2]|0;
     $18 = $17 | $16;
     $19 = ($18|0)==(0);
     if (!($19)) {
      _qh_distplane($20,$facet$03,$dist);
      $21 = HEAP32[(44504)>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[(44504)>>2] = $22;
      _qh_partitioncoplanar($20,$facet$03,$dist);
     }
     $23 = ((($24)) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0|0);
     if ($26) {
      break;
     } else {
      $20 = $25;$24 = $23;
     }
    }
   }
  }
  _qh_setfree($7);
  $facet$0 = HEAP32[$4>>2]|0;
  $27 = ($facet$0|0)==(0|0);
  if ($27) {
   label = 12;
   break;
  } else {
   $facet$03 = $facet$0;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
}
function _qh_point_add($set,$point,$elem) {
 $set = $set|0;
 $point = $point|0;
 $elem = $elem|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$set>>2]|0;
 $1 = (((($set)) + 4|0) + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = (($2) + -1)|0;
 $size$0 = $3 ? $0 : $4;
 $5 = (_qh_pointid($point)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $point;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  _qh_fprintf($7,7067,40480,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $8 = ($5|0)<($size$0|0);
 if (!($8)) {
  $9 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $5;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $size$0;
  _qh_fprintf($9,6160,40544,$vararg_buffer2);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $10 = (((($set)) + 4|0) + ($5<<2)|0);
 HEAP32[$10>>2] = $elem;
 STACKTOP = sp;return;
}
function _qh_printhashtable($fp) {
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond25 = 0, $facet$020 = 0;
 var $facet_i$018 = 0, $id$0 = 0, $magicptr5 = 0, $neighbor$114 = 0, $neighbor_i$021 = 0, $neighbor_i$111 = 0, $neighbor_i$2 = 0, $neighbor_i$315 = 0, $neighbor_i$4 = 0, $neighbor_i$5 = 0, $neighbor_n$022 = 0, $neighbor_n$1 = 0, $neighbor_n$2 = 0, $neighbor_n$3 = 0, $or$cond = 0, $or$cond10 = 0, $switch = 0, $switch9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vertexp$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = HEAP32[(7744)>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_qh_setsize($0)|0);
 $5 = ($4|0)>(0);
 if ($5) {
  $facet$020 = $3;$facet_i$018 = 0;$neighbor_i$021 = 0;$neighbor_n$022 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = ($facet$020|0)==(0|0);
  if ($6) {
   $neighbor_i$5 = $neighbor_i$021;$neighbor_n$3 = $neighbor_n$022;
  } else {
   $7 = ((($facet$020)) + 60|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $neighbor_i$2 = $neighbor_i$021;$neighbor_n$1 = $neighbor_n$022;
   } else {
    $10 = ((($8)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_qh_setsize($8)|0);
    $13 = ($12|0)<(1);
    $switch9 = ($11>>>0)<((3)>>>0);
    $or$cond10 = $switch9 | $13;
    if ($or$cond10) {
     $neighbor_i$2 = 0;$neighbor_n$1 = $12;
    } else {
     $14 = HEAP32[$7>>2]|0;
     $neighbor_i$111 = 0;
     while(1) {
      $15 = (($neighbor_i$111) + 1)|0;
      $16 = (((($14)) + 4|0) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($15|0)>=($12|0);
      $switch = ($17>>>0)<((3)>>>0);
      $or$cond = $switch | $18;
      if ($or$cond) {
       $neighbor_i$2 = $15;$neighbor_n$1 = $12;
       break;
      } else {
       $neighbor_i$111 = $15;
      }
     }
    }
   }
   $19 = ($neighbor_i$2|0)==($neighbor_n$1|0);
   if ($19) {
    $neighbor_i$5 = $neighbor_i$2;$neighbor_n$3 = $neighbor_n$1;
   } else {
    $20 = ((($facet$020)) + 76|0);
    $21 = HEAP32[$20>>2]|0;
    HEAP32[$vararg_buffer>>2] = $facet_i$018;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $21;
    _qh_fprintf($fp,9283,40616,$vararg_buffer);
    $22 = ((($facet$020)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     $25 = ((($23)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0|0);
     if (!($27)) {
      $30 = $26;$vertexp$012 = $25;
      while(1) {
       $28 = ((($vertexp$012)) + 4|0);
       $29 = ((($30)) + 16|0);
       $31 = $29;
       $32 = $31;
       $33 = HEAP32[$32>>2]|0;
       $34 = (($31) + 4)|0;
       $35 = $34;
       $36 = HEAP32[$35>>2]|0;
       $37 = $36 & 16777215;
       HEAP32[$vararg_buffer2>>2] = $37;
       _qh_fprintf($fp,9284,40632,$vararg_buffer2);
       $38 = HEAP32[$28>>2]|0;
       $39 = ($38|0)==(0|0);
       if ($39) {
        break;
       } else {
        $30 = $38;$vertexp$012 = $28;
       }
      }
     }
    }
    _qh_fprintf($fp,9285,40640,$vararg_buffer5);
    $40 = HEAP32[$7>>2]|0;
    $41 = ($40|0)==(0|0);
    if ($41) {
     $neighbor_i$4 = $neighbor_i$2;$neighbor_n$2 = $neighbor_n$1;
    } else {
     $42 = ((($40)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (_qh_setsize($40)|0);
     $45 = ($44|0)>(0);
     if ($45) {
      $neighbor$114 = $43;$neighbor_i$315 = 0;
      while(1) {
       $magicptr5 = $neighbor$114;
       if ((($magicptr5|0) == 2)) {
        $id$0 = -3;
       } else if ((($magicptr5|0) == 1)) {
        $id$0 = -2;
       } else if ((($magicptr5|0) == 0)) {
        $56 = -1;
        label = 17;
       } else {
        $46 = ((($neighbor$114)) + 76|0);
        $47 = HEAP32[$46>>2]|0;
        $56 = $47;
        label = 17;
       }
       if ((label|0) == 17) {
        label = 0;
        $id$0 = $56;
       }
       HEAP32[$vararg_buffer7>>2] = $id$0;
       _qh_fprintf($fp,9286,36672,$vararg_buffer7);
       $48 = (($neighbor_i$315) + 1)|0;
       $49 = HEAP32[$7>>2]|0;
       $50 = (((($49)) + 4|0) + ($48<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       $exitcond = ($48|0)==($44|0);
       if ($exitcond) {
        $neighbor_i$4 = $44;$neighbor_n$2 = $44;
        break;
       } else {
        $neighbor$114 = $51;$neighbor_i$315 = $48;
       }
      }
     } else {
      $neighbor_i$4 = 0;$neighbor_n$2 = $44;
     }
    }
    _qh_fprintf($fp,9287,56128,$vararg_buffer10);
    $neighbor_i$5 = $neighbor_i$4;$neighbor_n$3 = $neighbor_n$2;
   }
  }
  $52 = (($facet_i$018) + 1)|0;
  $53 = HEAP32[(7744)>>2]|0;
  $54 = (((($53)) + 4|0) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $exitcond25 = ($52|0)==($4|0);
  if ($exitcond25) {
   break;
  } else {
   $facet$020 = $55;$facet_i$018 = $52;$neighbor_i$021 = $neighbor_i$5;$neighbor_n$022 = $neighbor_n$3;
  }
 }
 STACKTOP = sp;return;
}
function _qh_triangulate() {
 var $$lcssa = 0, $$lcssa135 = 0, $$lcssa142 = 0, $$lcssa153 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $facet$0 = 0, $facet$0$lcssa152 = 0, $facet$0$new_facet_list$0 = 0, $facet$0$ph = 0, $facet$154113 = 0, $facet$154113$phi = 0, $facet$250 = 0, $facet$3$ph12$be = 0, $facet$3$ph1235 = 0, $facet$3$ph41 = 0, $facet$327108 = 0, $facet$327108$lcssa = 0, $facet$327108$lcssa138 = 0, $facet$327108$phi = 0, $neighbor$044 = 0, $neighbor_i$046 = 0, $new_facet_list$0$ph = 0, $new_facet_list$0$ph$lcssa = 0, $new_vertex_list = 0, $or$cond = 0;
 var $or$cond6 = 0, $orig_neighbor$049 = 0, $orig_neighbor$145 = 0, $orig_neighbor$145$lcssa = 0, $orig_neighbor$2 = 0, $orig_neighbor$3 = 0, $otherfacet$0 = 0, $owner$0$ph$be = 0, $owner$0$ph$lcssa = 0, $owner$0$ph34 = 0, $owner$0$ph34$lcssa145 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr25 = 0, $visible$0$ph40 = 0, $visible$0$ph40150 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 40|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $new_vertex_list = sp + 88|0;
 $0 = HEAP32[(5444)>>2]|0;
 HEAP32[$new_vertex_list>>2] = 0;
 $1 = HEAP32[(7608)>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(5344)>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($5,1034,40656,$vararg_buffer);
 }
 $6 = HEAP32[(5828)>>2]|0;
 $7 = ($6|0)==(2);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[(5796)>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  _qh_clearcenters(1);
  _qh_vertexneighbors();
 }
 HEAP32[(5444)>>2] = 0;
 $10 = HEAP32[(7720)>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[(7720)>>2] = $11;
 HEAP32[(7656)>>2] = 1;
 $12 = HEAP32[(7496)>>2]|0;
 $13 = (_qh_settemp($12)|0);
 HEAP32[(7740)>>2] = $13;
 $14 = HEAP32[(7544)>>2]|0;
 HEAP32[(7548)>>2] = $14;
 $15 = HEAP32[(7500)>>2]|0;
 $facet$0$ph = $15;$new_facet_list$0$ph = 0;
 L13: while(1) {
  $facet$0 = $facet$0$ph;
  while(1) {
   $16 = ($facet$0|0)==(0|0);
   if ($16) {
    $new_facet_list$0$ph$lcssa = $new_facet_list$0$ph;
    break L13;
   }
   $17 = ((($facet$0)) + 48|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $new_facet_list$0$ph$lcssa = $new_facet_list$0$ph;
    break L13;
   }
   $20 = ((($facet$0)) + 80|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 10240;
   $23 = ($22|0)==(0);
   if ($23) {
    $$lcssa153 = $18;$facet$0$lcssa152 = $facet$0;
    break;
   } else {
    $facet$0 = $18;
   }
  }
  $24 = ($new_facet_list$0$ph|0)==(0|0);
  $facet$0$new_facet_list$0 = $24 ? $facet$0$lcssa152 : $new_facet_list$0$ph;
  _qh_triangulate_facet($facet$0$lcssa152,$new_vertex_list);
  $facet$0$ph = $$lcssa153;$new_facet_list$0$ph = $facet$0$new_facet_list$0;
 }
 $25 = HEAP32[(5344)>>2]|0;
 $26 = ($25|0)>(1);
 if ($26) {
  $27 = HEAP32[(7480)>>2]|0;
  $28 = ($new_facet_list$0$ph$lcssa|0)==(0|0);
  if ($28) {
   $31 = -1;
  } else {
   $29 = ((($new_facet_list$0$ph$lcssa)) + 76|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30;
  }
  HEAP32[$vararg_buffer1>>2] = $31;
  _qh_fprintf($27,2047,40712,$vararg_buffer1);
 }
 $32 = ($new_facet_list$0$ph$lcssa|0)==(0|0);
 L27: do {
  if (!($32)) {
   $33 = ((($new_facet_list$0$ph$lcssa)) + 48|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if (!($35)) {
    $40 = $34;$facet$154113 = $new_facet_list$0$ph$lcssa;
    while(1) {
     $36 = ((($facet$154113)) + 80|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 2048;
     $39 = ($38|0)==(0);
     if ($39) {
      $45 = ((($facet$154113)) + 56|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0|0);
      if (!($47)) {
       $48 = (_qh_setsize($46)|0);
       $49 = ($48|0)>(0);
       if ($49) {
        break;
       }
       _qh_setfree($45);
      }
      $53 = ((($facet$154113)) + 52|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($54)) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($54)) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($56|0)==($58|0);
      if ($59) {
       $60 = HEAP32[(44856)>>2]|0;
       $61 = (($60) + 1)|0;
       HEAP32[(44856)>>2] = $61;
       _qh_triangulate_null($facet$154113);
      }
      $41 = ($40|0)==(0|0);
      if ($41) {
       break L27;
      }
     }
     $42 = ((($40)) + 48|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      break L27;
     } else {
      $facet$154113$phi = $40;$40 = $43;$facet$154113 = $facet$154113$phi;
     }
    }
    $50 = HEAP32[(7480)>>2]|0;
    $51 = ((($facet$154113)) + 76|0);
    $52 = HEAP32[$51>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $52;
    _qh_fprintf($50,6161,40792,$vararg_buffer3);
    _qh_errexit(5,$facet$154113,0);
    // unreachable;
   }
  }
 } while(0);
 $62 = HEAP32[(5344)>>2]|0;
 $63 = ($62|0)>(1);
 if ($63) {
  $64 = HEAP32[(7480)>>2]|0;
  $65 = HEAP32[(7740)>>2]|0;
  $66 = (_qh_setsize($65)|0);
  HEAP32[$vararg_buffer6>>2] = $66;
  _qh_fprintf($64,2048,40856,$vararg_buffer6);
 }
 $67 = HEAP32[(7504)>>2]|0;
 HEAP32[(7516)>>2] = $67;
 $68 = HEAP32[(7740)>>2]|0;
 $69 = (_qh_setdellast($68)|0);
 $70 = ($69|0)==(0|0);
 if (!($70)) {
  $72 = $69;
  while(1) {
   $71 = ((($72)) + 8|0);
   $73 = HEAP32[$71>>2]|0;
   $74 = ((($72)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($72)) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   _qh_memfree($72,24);
   $78 = ($77|0)==(8);
   if ($78) {
    $79 = HEAP32[(44848)>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[(44848)>>2] = $80;
    _qh_triangulate_mirror($73,$75);
   }
   $81 = HEAP32[(7740)>>2]|0;
   $82 = (_qh_setdellast($81)|0);
   $83 = ($82|0)==(0|0);
   if ($83) {
    break;
   } else {
    $72 = $82;
   }
  }
 }
 _qh_settempfree((7740));
 $84 = HEAP32[(5344)>>2]|0;
 $85 = ($84|0)>(1);
 if ($85) {
  $86 = HEAP32[(7480)>>2]|0;
  $87 = HEAP32[$new_vertex_list>>2]|0;
  $88 = ($87|0)==(0|0);
  if ($88) {
   $97 = -1;
  } else {
   $89 = ((($87)) + 16|0);
   $90 = $89;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = (($90) + 4)|0;
   $94 = $93;
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 16777215;
   $97 = $96;
  }
  HEAP32[$vararg_buffer9>>2] = $97;
  _qh_fprintf($86,2049,40936,$vararg_buffer9);
 }
 $98 = HEAP32[$new_vertex_list>>2]|0;
 HEAP32[(7548)>>2] = $98;
 HEAP32[(7516)>>2] = 0;
 _qh_updatevertices();
 _qh_resetlists(0,0);
 $99 = HEAP32[(5344)>>2]|0;
 $100 = ($99|0)>(1);
 if ($100) {
  $101 = HEAP32[(7480)>>2]|0;
  $102 = ($new_facet_list$0$ph$lcssa|0)==(0|0);
  if ($102) {
   $105 = -1;
  } else {
   $103 = ((($new_facet_list$0$ph$lcssa)) + 76|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $104;
  }
  HEAP32[$vararg_buffer12>>2] = $105;
  _qh_fprintf($101,2050,41000,$vararg_buffer12);
  $$pr = HEAP32[(5344)>>2]|0;
  $106 = ($$pr|0)>(1);
  if ($106) {
   $107 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($107,2051,41072,$vararg_buffer15);
  }
 }
 $108 = ($new_facet_list$0$ph$lcssa|0)==(0|0);
 L66: do {
  if (!($108)) {
   $facet$250 = $new_facet_list$0$ph$lcssa;$orig_neighbor$049 = 0;
   while(1) {
    $109 = ((($facet$250)) + 48|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)==(0|0);
    if ($111) {
     break L66;
    }
    $112 = ((($facet$250)) + 80|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $113 & 2560;
    $115 = ($114|0)==(512);
    L70: do {
     if ($115) {
      $116 = ((($facet$250)) + 60|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $orig_neighbor$3 = $orig_neighbor$049;
      } else {
       $119 = ((($117)) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = (_qh_setsize($117)|0);
       $122 = ($121|0)>(0);
       if ($122) {
        $neighbor$044 = $120;$neighbor_i$046 = 0;$orig_neighbor$145 = $orig_neighbor$049;
        L73: while(1) {
         $123 = ($neighbor_i$046|0)==(0);
         $124 = ((($neighbor$044)) + 80|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = $125 & 512;
         $127 = ($126|0)!=(0);
         do {
          if ($123) {
           if (!($127)) {
            $orig_neighbor$2 = $neighbor$044;
            break;
           }
           $128 = ((($neighbor$044)) + 32|0);
           $129 = HEAP32[$128>>2]|0;
           $orig_neighbor$2 = $129;
          } else {
           if ($127) {
            $130 = ((($neighbor$044)) + 32|0);
            $131 = HEAP32[$130>>2]|0;
            $otherfacet$0 = $131;
           } else {
            $otherfacet$0 = $neighbor$044;
           }
           $132 = ($orig_neighbor$145|0)==($otherfacet$0|0);
           if ($132) {
            $orig_neighbor$145$lcssa = $orig_neighbor$145;
            break L73;
           } else {
            $orig_neighbor$2 = $orig_neighbor$145;
           }
          }
         } while(0);
         $137 = (($neighbor_i$046) + 1)|0;
         $138 = HEAP32[$116>>2]|0;
         $139 = (((($138)) + 4|0) + ($137<<2)|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($137|0)<($121|0);
         if ($141) {
          $neighbor$044 = $140;$neighbor_i$046 = $137;$orig_neighbor$145 = $orig_neighbor$2;
         } else {
          $orig_neighbor$3 = $orig_neighbor$2;
          break L70;
         }
        }
        $133 = HEAP32[(44840)>>2]|0;
        $134 = (($133) + 1)|0;
        HEAP32[(44840)>>2] = $134;
        $135 = HEAP32[$112>>2]|0;
        $136 = $135 | 1073741824;
        HEAP32[$112>>2] = $136;
        $orig_neighbor$3 = $orig_neighbor$145$lcssa;
       } else {
        $orig_neighbor$3 = $orig_neighbor$049;
       }
      }
     } else {
      $orig_neighbor$3 = $orig_neighbor$049;
     }
    } while(0);
    $142 = HEAP32[$109>>2]|0;
    $143 = ($142|0)==(0|0);
    if ($143) {
     break;
    } else {
     $facet$250 = $142;$orig_neighbor$049 = $orig_neighbor$3;
    }
   }
  }
 } while(0);
 $144 = HEAP32[(5344)>>2]|0;
 $145 = ($144|0)>(1);
 if ($145) {
  $146 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($146,2052,41176,$vararg_buffer17);
 }
 $147 = ($new_facet_list$0$ph$lcssa|0)==(0|0);
 L89: do {
  if (!($147)) {
   $facet$3$ph41 = $new_facet_list$0$ph$lcssa;$visible$0$ph40 = 0;
   L90: while(1) {
    $148 = ($visible$0$ph40|0)==(0|0);
    $149 = ((($visible$0$ph40)) + 76|0);
    $150 = ((($visible$0$ph40)) + 48|0);
    $151 = ((($visible$0$ph40)) + 68|0);
    $152 = ((($visible$0$ph40)) + 64|0);
    $153 = ((($visible$0$ph40)) + 40|0);
    $154 = ((($visible$0$ph40)) + 24|0);
    $facet$3$ph1235 = $facet$3$ph41;$owner$0$ph34 = 0;
    L92: while(1) {
     $155 = ($owner$0$ph34|0)==(0|0);
     $156 = ((($facet$3$ph1235)) + 48|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if ($158) {
      $owner$0$ph$lcssa = $owner$0$ph34;$visible$0$ph40150 = $visible$0$ph40;
      break L90;
     } else {
      $168 = $157;$facet$327108 = $facet$3$ph1235;
     }
     L94: while(1) {
      $159 = ((($facet$327108)) + 80|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = $160 & 2048;
      $162 = ($161|0)==(0);
      $163 = $160 & 512;
      $164 = ($163|0)!=(0);
      do {
       if ($162) {
        if (!($164)) {
         break;
        }
        $167 = ((($facet$327108)) + 32|0);
        $182 = HEAP32[$167>>2]|0;
        $183 = ($182|0)==($visible$0$ph40|0);
        if (!($183)) {
         $184 = HEAP32[(7480)>>2]|0;
         $185 = ((($facet$327108)) + 76|0);
         $186 = HEAP32[$185>>2]|0;
         if ($148) {
          $188 = -1;
         } else {
          $187 = HEAP32[$149>>2]|0;
          $188 = $187;
         }
         HEAP32[$vararg_buffer22>>2] = $186;
         $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
         HEAP32[$vararg_ptr25>>2] = $188;
         _qh_fprintf($184,6162,41344,$vararg_buffer22);
         _qh_errexit2(5,$facet$327108,$visible$0$ph40);
        }
        if ($155) {
         $$lcssa135 = $168;$$lcssa142 = $159;$facet$327108$lcssa138 = $facet$327108;
         break L94;
        }
        HEAP32[$167>>2] = $owner$0$ph34;
        $169 = ($168|0)==(0|0);
        if ($169) {
         break L89;
        }
       } else {
        if (!($164)) {
         $$lcssa = $168;$facet$327108$lcssa = $facet$327108;$owner$0$ph34$lcssa145 = $owner$0$ph34;
         break L92;
        }
        _qh_delfacet($facet$327108);
        $165 = HEAP32[(7520)>>2]|0;
        $166 = (($165) + -1)|0;
        HEAP32[(7520)>>2] = $166;
       }
      } while(0);
      $170 = ((($168)) + 48|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)==(0|0);
      if ($172) {
       $owner$0$ph$lcssa = $owner$0$ph34;$visible$0$ph40150 = $visible$0$ph40;
       break L90;
      } else {
       $facet$327108$phi = $168;$168 = $171;$facet$327108 = $facet$327108$phi;
      }
     }
     $189 = HEAP32[$$lcssa142>>2]|0;
     $190 = $189 & 1073741824;
     $191 = ($190|0)==(0);
     if ($191) {
      $193 = HEAP32[$150>>2]|0;
      $194 = $189 | 268435456;
      HEAP32[$$lcssa142>>2] = $194;
      $195 = HEAP32[$151>>2]|0;
      $196 = ((($facet$327108$lcssa138)) + 68|0);
      HEAP32[$196>>2] = $195;
      $197 = HEAP32[$152>>2]|0;
      $198 = ((($facet$327108$lcssa138)) + 64|0);
      HEAP32[$198>>2] = $197;
      HEAP32[$151>>2] = 0;
      HEAP32[$152>>2] = 0;
      $199 = HEAP32[(5776)>>2]|0;
      $200 = ($199|0)==(0);
      if ($200) {
       HEAP32[$153>>2] = 0;
       HEAP32[$154>>2] = 0;
      }
      _qh_delfacet($visible$0$ph40);
      $201 = HEAP32[(7520)>>2]|0;
      $202 = (($201) + -1)|0;
      HEAP32[(7520)>>2] = $202;
      $facet$3$ph12$be = $193;$owner$0$ph$be = $facet$327108$lcssa138;
     } else {
      $facet$3$ph12$be = $$lcssa135;$owner$0$ph$be = 0;
     }
     $192 = ($facet$3$ph12$be|0)==(0|0);
     if ($192) {
      $owner$0$ph$lcssa = $owner$0$ph$be;$visible$0$ph40150 = $visible$0$ph40;
      break L90;
     } else {
      $facet$3$ph1235 = $facet$3$ph12$be;$owner$0$ph34 = $owner$0$ph$be;
     }
    }
    $173 = ($visible$0$ph40|0)==(0|0);
    $174 = ($owner$0$ph34$lcssa145|0)!=(0|0);
    $or$cond = $173 | $174;
    if ($or$cond) {
     $facet$3$ph41 = $$lcssa;$visible$0$ph40 = $facet$327108$lcssa;
     continue;
    }
    $175 = HEAP32[(5344)>>2]|0;
    $176 = ($175|0)>(1);
    if ($176) {
     $177 = HEAP32[(7480)>>2]|0;
     $178 = ((($visible$0$ph40)) + 76|0);
     $179 = HEAP32[$178>>2]|0;
     HEAP32[$vararg_buffer19>>2] = $179;
     _qh_fprintf($177,2053,41264,$vararg_buffer19);
    }
    _qh_delfacet($visible$0$ph40);
    $180 = HEAP32[(7520)>>2]|0;
    $181 = (($180) + -1)|0;
    HEAP32[(7520)>>2] = $181;
    $facet$3$ph41 = $$lcssa;$visible$0$ph40 = $facet$327108$lcssa;
   }
   $203 = ($visible$0$ph40150|0)==(0|0);
   $204 = ($owner$0$ph$lcssa|0)!=(0|0);
   $or$cond6 = $203 | $204;
   if (!($or$cond6)) {
    $205 = HEAP32[(5344)>>2]|0;
    $206 = ($205|0)>(1);
    if ($206) {
     $207 = HEAP32[(7480)>>2]|0;
     $208 = ((($visible$0$ph40150)) + 76|0);
     $209 = HEAP32[$208>>2]|0;
     HEAP32[$vararg_buffer26>>2] = $209;
     _qh_fprintf($207,2054,41448,$vararg_buffer26);
    }
    _qh_delfacet($visible$0$ph40150);
    $210 = HEAP32[(7520)>>2]|0;
    $211 = (($210) + -1)|0;
    HEAP32[(7520)>>2] = $211;
   }
  }
 } while(0);
 HEAP32[(7656)>>2] = 0;
 HEAP32[(5444)>>2] = $0;
 $212 = HEAP32[(5280)>>2]|0;
 $213 = ($212|0)==(0);
 if (!($213)) {
  $214 = HEAP32[(7500)>>2]|0;
  _qh_checkpolygon($214);
 }
 HEAP32[(7608)>>2] = 1;
 STACKTOP = sp;return;
}
function _qh_triangulate_facet($facetA,$first_vertex) {
 $facetA = $facetA|0;
 $first_vertex = $first_vertex|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0;
 var $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $neighborp$04 = 0, $newfacet$0 = 0, $newfacet$01 = 0, $newfacet$02 = 0, $numnew = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $numnew = sp + 4|0;
 HEAP32[$numnew>>2] = 0;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facetA)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _qh_fprintf($2,3020,41536,$vararg_buffer);
  $$pr = HEAP32[(5344)>>2]|0;
  $5 = ($$pr|0)>(3);
  if ($5) {
   $6 = HEAP32[(7480)>>2]|0;
   _qh_printfacet($6,$facetA);
  }
 }
 $7 = ((($facetA)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($8)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $15 = $11;$neighborp$04 = $10;
   while(1) {
    $13 = ((($neighborp$04)) + 4|0);
    $14 = ((($15)) + 80|0);
    $16 = HEAP32[$14>>2]|0;
    $17 = $16 & -16793601;
    HEAP32[$14>>2] = $17;
    $18 = HEAP32[$13>>2]|0;
    $19 = ($18|0)==(0|0);
    if ($19) {
     break;
    } else {
     $15 = $18;$neighborp$04 = $13;
    }
   }
  }
 }
 $20 = HEAP32[(7592)>>2]|0;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = ((($facetA)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $25 = HEAP32[(5828)>>2]|0;
   $26 = (($25) + -1)|0;
   $27 = ((($facetA)) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($26<<3)|0);
   $30 = +HEAPF64[$29>>3];
   $31 = $30 < 0.0;
   $32 = -$30;
   $33 = $31 ? $32 : $30;
   $34 = +HEAPF64[(6928)>>3];
   $35 = $34 * 2.0;
   $36 = !($33 >= $35);
   if (!($36)) {
    $37 = ((($facetA)) + 52|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_qh_facetcenter($38)|0);
    HEAP32[$22>>2] = $39;
   }
  }
 }
 _qh_willdelete($facetA,0);
 $40 = HEAP32[(7504)>>2]|0;
 HEAP32[(7512)>>2] = $40;
 $41 = HEAP32[(7720)>>2]|0;
 $42 = ((($facetA)) + 72|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($facetA)) + 52|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 (_qh_makenew_nonsimplicial($facetA,$46,$numnew)|0);
 $47 = HEAP32[$7>>2]|0;
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = 0;
 $newfacet$01 = HEAP32[(7512)>>2]|0;
 $49 = ($newfacet$01|0)==(0|0);
 L15: do {
  if (!($49)) {
   $50 = ((($facetA)) + 80|0);
   $51 = ((($facetA)) + 24|0);
   $52 = ((($facetA)) + 40|0);
   $53 = ((($facetA)) + 16|0);
   $54 = ((($facetA)) + 8|0);
   $55 = ((($facetA)) + 24|0);
   $56 = ((($facetA)) + 40|0);
   $newfacet$02 = $newfacet$01;
   while(1) {
    $57 = ((($newfacet$02)) + 48|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(0|0);
    if ($59) {
     break L15;
    }
    $60 = ((($newfacet$02)) + 80|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $61 | 512;
    HEAP32[$60>>2] = $62;
    $63 = ((($newfacet$02)) + 32|0);
    HEAP32[$63>>2] = $facetA;
    $64 = HEAP32[$60>>2]|0;
    $65 = $64 & -1073741825;
    HEAP32[$60>>2] = $65;
    $66 = HEAP32[$50>>2]|0;
    $67 = $66 & 131072;
    $68 = $64 & -1073872897;
    $69 = $67 | $68;
    HEAP32[$60>>2] = $69;
    $70 = HEAP32[$50>>2]|0;
    $71 = $70 & 524288;
    $72 = $69 & -1074266113;
    $73 = $72 | $71;
    HEAP32[$60>>2] = $73;
    $74 = HEAP32[(5776)>>2]|0;
    $75 = ($74|0)==(0);
    do {
     if ($75) {
      $89 = $73 & -1342177281;
      HEAP32[$60>>2] = $89;
      $90 = HEAP32[$51>>2]|0;
      $91 = ((($newfacet$02)) + 24|0);
      HEAP32[$91>>2] = $90;
      $92 = HEAP32[$52>>2]|0;
      $93 = ((($newfacet$02)) + 40|0);
      HEAP32[$93>>2] = $92;
     } else {
      $76 = $73 | 268435456;
      HEAP32[$60>>2] = $76;
      $77 = HEAP32[$55>>2]|0;
      $78 = HEAP32[(5828)>>2]|0;
      $79 = (_qh_copypoints($77,1,$78)|0);
      $80 = ((($newfacet$02)) + 24|0);
      HEAP32[$80>>2] = $79;
      $81 = HEAP32[(7592)>>2]|0;
      $82 = ($81|0)==(2);
      if ($82) {
       $83 = (_qh_getcentrum($newfacet$02)|0);
       $84 = ((($newfacet$02)) + 40|0);
       HEAP32[$84>>2] = $83;
       break;
      } else {
       $85 = HEAP32[$56>>2]|0;
       $86 = HEAP32[(5828)>>2]|0;
       $87 = (_qh_copypoints($85,1,$86)|0);
       $88 = ((($newfacet$02)) + 40|0);
       HEAP32[$88>>2] = $87;
       break;
      }
     }
    } while(0);
    $94 = +HEAPF64[$53>>3];
    $95 = ((($newfacet$02)) + 16|0);
    HEAPF64[$95>>3] = $94;
    $96 = +HEAPF64[$54>>3];
    $97 = ((($newfacet$02)) + 8|0);
    HEAPF64[$97>>3] = $96;
    $newfacet$0 = HEAP32[$57>>2]|0;
    $98 = ($newfacet$0|0)==(0|0);
    if ($98) {
     break;
    } else {
     $newfacet$02 = $newfacet$0;
    }
   }
  }
 } while(0);
 _qh_matchnewfacets();
 $99 = HEAP32[(44816)>>2]|0;
 $100 = (($99) + 1)|0;
 HEAP32[(44816)>>2] = $100;
 $101 = HEAP32[$numnew>>2]|0;
 $102 = HEAP32[(44832)>>2]|0;
 $103 = (($102) + ($101))|0;
 HEAP32[(44832)>>2] = $103;
 $104 = HEAP32[(44824)>>2]|0;
 $105 = HEAP32[$numnew>>2]|0;
 $106 = ($104|0)<($105|0);
 if ($106) {
  HEAP32[(44824)>>2] = $105;
 }
 HEAP32[(7516)>>2] = 0;
 $107 = HEAP32[$first_vertex>>2]|0;
 $108 = ($107|0)==(0|0);
 if (!($108)) {
  HEAP32[(7548)>>2] = 0;
  _qh_updatevertices();
  _qh_resetlists(0,0);
  STACKTOP = sp;return;
 }
 $109 = HEAP32[(7548)>>2]|0;
 HEAP32[$first_vertex>>2] = $109;
 HEAP32[(7548)>>2] = 0;
 _qh_updatevertices();
 _qh_resetlists(0,0);
 STACKTOP = sp;return;
}
function _qh_triangulate_null($facetA) {
 $facetA = $facetA|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facetA)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  _qh_fprintf($2,3023,41584,$vararg_buffer);
 }
 $5 = ((($facetA)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 _qh_triangulate_link($facetA,$8,$facetA,$10);
 _qh_willdelete($facetA,0);
 STACKTOP = sp;return;
}
function _qh_triangulate_mirror($facetA,$facetB) {
 $facetA = $facetA|0;
 $facetB = $facetB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $neighbor$02 = 0, $neighbor_i$01 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($facetA)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($facetB)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  _qh_fprintf($2,3022,41632,$vararg_buffer);
 }
 $7 = ((($facetA)) + 60|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _qh_willdelete($facetA,0);
  _qh_willdelete($facetB,0);
  STACKTOP = sp;return;
 }
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_qh_setsize($8)|0);
 $13 = ($12|0)>(0);
 if (!($13)) {
  _qh_willdelete($facetA,0);
  _qh_willdelete($facetB,0);
  STACKTOP = sp;return;
 }
 $14 = ((($facetB)) + 60|0);
 $neighbor$02 = $11;$neighbor_i$01 = 0;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($15)) + 4|0) + ($neighbor_i$01<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($neighbor$02|0)==($17|0);
  if (!($18)) {
   _qh_triangulate_link($facetA,$neighbor$02,$facetB,$17);
  }
  $19 = (($neighbor_i$01) + 1)|0;
  $20 = HEAP32[$7>>2]|0;
  $21 = (((($20)) + 4|0) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $exitcond = ($19|0)==($12|0);
  if ($exitcond) {
   break;
  } else {
   $neighbor$02 = $22;$neighbor_i$01 = $19;
  }
 }
 _qh_willdelete($facetA,0);
 _qh_willdelete($facetB,0);
 STACKTOP = sp;return;
}
function _qh_triangulate_link($oldfacetA,$facetA,$oldfacetB,$facetB) {
 $oldfacetA = $oldfacetA|0;
 $facetA = $facetA|0;
 $oldfacetB = $oldfacetB|0;
 $facetB = $facetB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(5344)>>2]|0;
 $1 = ($0|0)>(2);
 if ($1) {
  $2 = HEAP32[(7480)>>2]|0;
  $3 = ((($oldfacetA)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($oldfacetB)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($facetA)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($facetB)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $8;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $10;
  _qh_fprintf($2,3021,41696,$vararg_buffer);
 }
 $11 = ((($facetA)) + 60|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_qh_setin($12,$facetB)|0);
 $14 = ($13|0)==(0);
 $15 = ((($facetB)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_qh_setin($16,$facetA)|0);
 $18 = ($17|0)!=(0);
 if ($14) {
  if (!($18)) {
   $28 = HEAP32[$15>>2]|0;
   _qh_setreplace($28,$oldfacetB,$facetA);
   $29 = HEAP32[$11>>2]|0;
   _qh_setreplace($29,$oldfacetA,$facetB);
   STACKTOP = sp;return;
  }
 } else {
  if ($18) {
   _qh_appendmergeset($facetA,$facetB,8,0);
   $28 = HEAP32[$15>>2]|0;
   _qh_setreplace($28,$oldfacetB,$facetA);
   $29 = HEAP32[$11>>2]|0;
   _qh_setreplace($29,$oldfacetA,$facetB);
   STACKTOP = sp;return;
  }
 }
 $19 = HEAP32[(7480)>>2]|0;
 $20 = ((($facetA)) + 76|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($facetB)) + 76|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($oldfacetA)) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($oldfacetB)) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $21;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $23;
 $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $25;
 $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
 HEAP32[$vararg_ptr9>>2] = $27;
 _qh_fprintf($19,6163,41784,$vararg_buffer4);
 _qh_errexit2(5,$facetA,$facetB);
 $28 = HEAP32[$15>>2]|0;
 _qh_setreplace($28,$oldfacetB,$facetA);
 $29 = HEAP32[$11>>2]|0;
 _qh_setreplace($29,$oldfacetA,$facetB);
 STACKTOP = sp;return;
}
function _qh_vertexintersect($vertexsetA,$vertexsetB) {
 $vertexsetA = $vertexsetA|0;
 $vertexsetB = $vertexsetB|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vertexsetA>>2]|0;
 $1 = (_qh_vertexintersect_new($0,$vertexsetB)|0);
 _qh_settempfree($vertexsetA);
 HEAP32[$vertexsetA>>2] = $1;
 _qh_settemppush($1);
 return;
}
function _qh_setaddnth($setp,$nth,$newelem) {
 $setp = $setp|0;
 $nth = $nth|0;
 $newelem = $newelem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $newp$0$lcssa = 0, $newp$03 = 0, $oldp$02 = 0, $or$cond = 0, $sizep$0 = 0, $uglygep = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$setp>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 3;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = (((($0)) + 4|0) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $sizep$0 = $3;
  }
 }
 if ((label|0) == 3) {
  _qh_setlarger($setp);
  $6 = HEAP32[$setp>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($6)) + 4|0) + ($7<<2)|0);
  $sizep$0 = $8;
 }
 $9 = HEAP32[$sizep$0>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = ($nth|0)>(-1);
 $12 = ($9|0)>($nth|0);
 $or$cond = $11 & $12;
 if (!($or$cond)) {
  $13 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $nth;
  _qh_fprintf($13,6171,41888,$vararg_buffer);
  $14 = HEAP32[(21228)>>2]|0;
  $15 = HEAP32[$setp>>2]|0;
  _qh_setprint($14,56512,$15);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $16 = HEAP32[$sizep$0>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$sizep$0>>2] = $17;
 $18 = HEAP32[$setp>>2]|0;
 $19 = (((($18)) + 4|0) + ($10<<2)|0);
 $20 = ((($19)) + 4|0);
 $21 = (1 - ($nth))|0;
 $22 = (($21) + ($10))|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $newp$0$lcssa = $20;
  HEAP32[$newp$0$lcssa>>2] = $newelem;
  STACKTOP = sp;return;
 }
 $24 = $nth << 2;
 $25 = (($24) + 4)|0;
 $uglygep = (($18) + ($25)|0);
 $i$01 = $22;$newp$03 = $20;$oldp$02 = $19;
 while(1) {
  $26 = (($i$01) + -1)|0;
  $27 = ((($oldp$02)) + -4|0);
  $28 = HEAP32[$oldp$02>>2]|0;
  $29 = ((($newp$03)) + -4|0);
  HEAP32[$newp$03>>2] = $28;
  $30 = ($26|0)==(0);
  if ($30) {
   break;
  } else {
   $i$01 = $26;$newp$03 = $29;$oldp$02 = $27;
  }
 }
 $newp$0$lcssa = $uglygep;
 HEAP32[$newp$0$lcssa>>2] = $newelem;
 STACKTOP = sp;return;
}
function _qh_setlarger($oldsetp) {
 $oldsetp = $oldsetp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newset$0 = 0, $setp$01 = 0, $setp$01$phi = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$oldsetp>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $31 = (_qh_setnew(3)|0);
  $newset$0 = $31;
  HEAP32[$oldsetp>>2] = $newset$0;
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = (((($0)) + 4|0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = (($4) + -1)|0;
 $size$0 = $5 ? $2 : $6;
 $7 = HEAP32[(21284)>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[(21284)>>2] = $8;
 $9 = (($size$0) + 1)|0;
 $10 = HEAP32[(21288)>>2]|0;
 $11 = (($9) + ($10))|0;
 HEAP32[(21288)>>2] = $11;
 $12 = $size$0 << 1;
 $13 = (_qh_setnew($12)|0);
 $14 = ((($0)) + 4|0);
 $15 = ((($13)) + 4|0);
 $16 = $9 << 2;
 _memcpy(($15|0),($14|0),($16|0))|0;
 $17 = HEAP32[$13>>2]|0;
 $18 = (((($13)) + 4|0) + ($17<<2)|0);
 HEAP32[$18>>2] = $9;
 $19 = HEAP32[(21224)>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = ((($19)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $24 = ((($21)) + 4|0);
   $25 = $22;$28 = $24;$setp$01 = $21;
   while(1) {
    $26 = ($25|0)==($0|0);
    if ($26) {
     HEAP32[$setp$01>>2] = $13;
    }
    $27 = ((($28)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if ($30) {
     break;
    } else {
     $setp$01$phi = $28;$25 = $29;$28 = $27;$setp$01 = $setp$01$phi;
    }
   }
  }
 }
 _qh_setfree($oldsetp);
 $newset$0 = $13;
 HEAP32[$oldsetp>>2] = $newset$0;
 return;
}
function _qh_setprint($fp,$string,$set) {
 $fp = $fp|0;
 $string = $string|0;
 $set = $set|0;
 var $$size$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $k$01 = 0, $size$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $0 = ($set|0)==(0|0);
 if ($0) {
  HEAP32[$vararg_buffer>>2] = $string;
  _qh_fprintf($fp,9346,41960,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $size$0 = $4 ? $1 : $5;
 HEAP32[$vararg_buffer1>>2] = $string;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $set;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $1;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $size$0;
 _qh_fprintf($fp,9347,41976,$vararg_buffer1);
 $6 = HEAP32[$set>>2]|0;
 $7 = ($size$0|0)>($6|0);
 $8 = (($6) + 1)|0;
 $$size$0 = $7 ? $8 : $size$0;
 $9 = ($$size$0|0)>(0);
 if ($9) {
  $k$01 = 0;
  while(1) {
   $10 = (((($set)) + 4|0) + ($k$01<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer7>>2] = $11;
   _qh_fprintf($fp,9348,42016,$vararg_buffer7);
   $12 = (($k$01) + 1)|0;
   $exitcond = ($12|0)==($$size$0|0);
   if ($exitcond) {
    break;
   } else {
    $k$01 = $12;
   }
  }
 }
 _qh_fprintf($fp,9349,56128,$vararg_buffer10);
 STACKTOP = sp;return;
}
function _qh_setappend($setp,$newelem) {
 $setp = $setp|0;
 $newelem = $newelem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sizep$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($newelem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$setp>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 4;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = (((($1)) + 4|0) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   label = 4;
  } else {
   $sizep$0 = $4;
  }
 }
 if ((label|0) == 4) {
  _qh_setlarger($setp);
  $7 = HEAP32[$setp>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (((($7)) + 4|0) + ($8<<2)|0);
  $sizep$0 = $9;
 }
 $10 = HEAP32[$sizep$0>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$sizep$0>>2] = $11;
 $12 = (($10) + -1)|0;
 $13 = HEAP32[$setp>>2]|0;
 $14 = (((($13)) + 4|0) + ($12<<2)|0);
 $15 = ((($14)) + 4|0);
 HEAP32[$14>>2] = $newelem;
 HEAP32[$15>>2] = 0;
 return;
}
function _qh_setappend_set($setp,$setA) {
 $setp = $setp|0;
 $setA = $setA|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldset = 0, $size$0 = 0, $sizeA$0 = 0, $sizep$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $oldset = sp;
 $0 = ($setA|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$setA>>2]|0;
 $2 = (((($setA)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $sizeA$0 = $4 ? $1 : $5;
 $6 = HEAP32[$setp>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_qh_setnew($sizeA$0)|0);
  HEAP32[$setp>>2] = $8;
 }
 $9 = HEAP32[$setp>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($9)) + 4|0) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 $14 = (($12) + -1)|0;
 $size$0 = $13 ? $10 : $14;
 $15 = (($size$0) + ($sizeA$0))|0;
 $16 = ($15|0)>($10|0);
 if ($16) {
  HEAP32[$oldset>>2] = $9;
  $17 = (_qh_setcopy($9,$sizeA$0)|0);
  HEAP32[$setp>>2] = $17;
  _qh_setfree($oldset);
  $18 = HEAP32[$setp>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (((($18)) + 4|0) + ($19<<2)|0);
  $sizep$0 = $20;
 } else {
  $sizep$0 = $11;
 }
 $21 = ($sizeA$0|0)>(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = (($15) + 1)|0;
 HEAP32[$sizep$0>>2] = $22;
 $23 = HEAP32[$setp>>2]|0;
 $24 = (((($23)) + 4|0) + ($size$0<<2)|0);
 $25 = ((($setA)) + 4|0);
 $26 = $sizeA$0 << 2;
 $27 = (($26) + 4)|0;
 _memcpy(($24|0),($25|0),($27|0))|0;
 STACKTOP = sp;return;
}
function _qh_setnew($setsize) {
 $setsize = $setsize|0;
 var $$1 = 0, $$setsize = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($setsize|0)==(0);
 $1 = $0&1;
 $$setsize = (($1) + ($setsize))|0;
 $2 = $$setsize << 2;
 $3 = (($2) + 8)|0;
 $4 = ($3|0)<(1);
 $5 = HEAP32[(21192)>>2]|0;
 $6 = ($3|0)>($5|0);
 $or$cond = $4 | $6;
 $7 = (_qh_memalloc($3)|0);
 if ($or$cond) {
  $$1 = $$setsize;
 } else {
  $8 = HEAP32[(21208)>>2]|0;
  $9 = (($8) + ($3<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[(21204)>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>($3|0);
  if ($14) {
   $15 = (($13) - ($3))|0;
   $16 = (($15|0) / 4)&-1;
   $17 = (($16) + ($$setsize))|0;
   $$1 = $17;
  } else {
   $$1 = $$setsize;
  }
 }
 HEAP32[$7>>2] = $$1;
 $18 = (((($7)) + 4|0) + ($$1<<2)|0);
 HEAP32[$18>>2] = 1;
 $19 = ((($7)) + 4|0);
 HEAP32[$19>>2] = 0;
 return ($7|0);
}
function _qh_setcopy($set,$extra) {
 $set = $set|0;
 $extra = $extra|0;
 var $$extra = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($extra|0)<(0);
 $$extra = $0 ? 0 : $extra;
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $size$0 = $4 ? $1 : $5;
 $6 = (($size$0) + ($$extra))|0;
 $7 = (_qh_setnew($6)|0);
 $8 = (($size$0) + 1)|0;
 $9 = HEAP32[$7>>2]|0;
 $10 = (((($7)) + 4|0) + ($9<<2)|0);
 HEAP32[$10>>2] = $8;
 $11 = ((($7)) + 4|0);
 $12 = ((($set)) + 4|0);
 $13 = $8 << 2;
 _memcpy(($11|0),($12|0),($13|0))|0;
 return ($7|0);
}
function _qh_setfree($setp) {
 $setp = $setp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$setp>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 << 2;
 $4 = (($3) + 8)|0;
 _qh_memfree($0,$4);
 HEAP32[$setp>>2] = 0;
 return;
}
function _qh_setappend2ndlast($setp,$newelem) {
 $setp = $setp|0;
 $newelem = $newelem|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sizep$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$setp>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 3;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = (((($0)) + 4|0) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $sizep$0 = $3;
  }
 }
 if ((label|0) == 3) {
  _qh_setlarger($setp);
  $6 = HEAP32[$setp>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($6)) + 4|0) + ($7<<2)|0);
  $sizep$0 = $8;
 }
 $9 = HEAP32[$sizep$0>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$sizep$0>>2] = $10;
 $11 = (($9) + -1)|0;
 $12 = HEAP32[$setp>>2]|0;
 $13 = (((($12)) + 4|0) + ($11<<2)|0);
 $14 = ((($13)) + -4|0);
 $15 = ((($13)) + 4|0);
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$13>>2] = $16;
 HEAP32[$15>>2] = 0;
 HEAP32[$14>>2] = $newelem;
 return;
}
function _qh_setcheck($set,$tname,$id) {
 $set = $set|0;
 $tname = $tname|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $size$0 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ($set|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $size$0 = $4 ? $1 : $5;
 $6 = ($size$0|0)<=($1|0);
 $7 = ($1|0)!=(0);
 $or$cond = $7 & $6;
 if (!($or$cond)) {
  $8 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $size$0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $tname;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $id;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $1;
  _qh_fprintf($8,6172,42024,$vararg_buffer);
  $14 = HEAP32[(21228)>>2]|0;
  _qh_setprint($14,55888,$set);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $9 = (((($set)) + 4|0) + ($size$0<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[(21228)>>2]|0;
 $13 = (($size$0) + -1)|0;
 HEAP32[$vararg_buffer4>>2] = $tname;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $id;
 $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $13;
 $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
 HEAP32[$vararg_ptr9>>2] = $1;
 _qh_fprintf($12,6173,42112,$vararg_buffer4);
 $14 = HEAP32[(21228)>>2]|0;
 _qh_setprint($14,55888,$set);
 _qh_errexit(5,0,0);
 // unreachable;
}
function _qh_setcompact($set) {
 $set = $set|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $destp$0$ph = 0, $destp$0$ph$lcssa = 0;
 var $elemp$0 = 0, $elemp$0$ph = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $size$0 = $4 ? $1 : $5;
 $6 = ((($set)) + 4|0);
 $7 = (($6) + ($size$0<<2)|0);
 $destp$0$ph = $6;$elemp$0$ph = $6;
 L4: while(1) {
  $elemp$0 = $elemp$0$ph;
  while(1) {
   $9 = ((($elemp$0)) + 4|0);
   $10 = HEAP32[$elemp$0>>2]|0;
   HEAP32[$destp$0$ph>>2] = $10;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $$lcssa = $9;
    break;
   }
   $12 = ($9>>>0)>($7>>>0);
   if ($12) {
    $destp$0$ph$lcssa = $destp$0$ph;
    break L4;
   } else {
    $elemp$0 = $9;
   }
  }
  $8 = ((($destp$0$ph)) + 4|0);
  $destp$0$ph = $8;$elemp$0$ph = $$lcssa;
 }
 $13 = $destp$0$ph$lcssa;
 $14 = $6;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 _qh_settruncate($set,$16);
 return;
}
function _qh_settruncate($set,$size) {
 $set = $set|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($size|0)<(0);
 if (!($0)) {
  $1 = HEAP32[$set>>2]|0;
  $2 = ($1|0)<($size|0);
  if (!($2)) {
   $5 = (($size) + 1)|0;
   $6 = HEAP32[$set>>2]|0;
   $7 = (((($set)) + 4|0) + ($6<<2)|0);
   HEAP32[$7>>2] = $5;
   $8 = (((($set)) + 4|0) + ($size<<2)|0);
   HEAP32[$8>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $3 = HEAP32[(21228)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $size;
 _qh_fprintf($3,6181,42200,$vararg_buffer);
 $4 = HEAP32[(21228)>>2]|0;
 _qh_setprint($4,56512,$set);
 _qh_errexit(5,0,0);
 // unreachable;
}
function _qh_setdel($set,$oldelem) {
 $set = $set|0;
 $oldelem = $oldelem|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elemp$0 = 0;
 var $elemp$0$lcssa = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($set)) + 4|0);
 $elemp$0 = $1;
 while(1) {
  $2 = HEAP32[$elemp$0>>2]|0;
  $3 = ($2|0)!=(0|0);
  $not$ = ($2|0)!=($oldelem|0);
  $$ = $3 & $not$;
  $4 = ((($elemp$0)) + 4|0);
  if ($$) {
   $elemp$0 = $4;
  } else {
   $$lcssa = $2;$elemp$0$lcssa = $elemp$0;
   break;
  }
 }
 $5 = ($$lcssa|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$set>>2]|0;
 $7 = (((($set)) + 4|0) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 HEAP32[$7>>2] = $9;
 $10 = ($8|0)==(0);
 if ($10) {
  $11 = HEAP32[$set>>2]|0;
  HEAP32[$7>>2] = $11;
 }
 $12 = HEAP32[$7>>2]|0;
 $13 = (($12) + -1)|0;
 $14 = (((($set)) + 4|0) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$elemp$0$lcssa>>2] = $15;
 HEAP32[$14>>2] = 0;
 $$0 = $oldelem;
 return ($$0|0);
}
function _qh_setdellast($set) {
 $set = $set|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $returnvalue$0 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($set)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$set>>2]|0;
 $5 = (((($set)) + 4|0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $13 = (($4) + -1)|0;
  $14 = (((($set)) + 4|0) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$14>>2] = 0;
  $returnvalue$0 = $15;$storemerge = $4;
 } else {
  $8 = (($6) + -2)|0;
  $9 = (((($set)) + 4|0) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$9>>2] = 0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + -1)|0;
  $returnvalue$0 = $10;$storemerge = $12;
 }
 HEAP32[$5>>2] = $storemerge;
 $$0 = $returnvalue$0;
 return ($$0|0);
}
function _qh_setdelnth($set,$nth) {
 $set = $set|0;
 $nth = $nth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (((($set)) + 4|0) + ($nth<<2)|0);
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = HEAP32[$set>>2]|0;
  HEAP32[$2>>2] = $6;
 }
 $7 = ($nth|0)<(0);
 if (!($7)) {
  $8 = HEAP32[$2>>2]|0;
  $9 = ($8|0)>($nth|0);
  if ($9) {
   $12 = HEAP32[$2>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (((($set)) + 4|0) + ($13<<2)|0);
   $15 = HEAP32[$0>>2]|0;
   $16 = HEAP32[$14>>2]|0;
   HEAP32[$0>>2] = $16;
   HEAP32[$14>>2] = 0;
   STACKTOP = sp;return ($15|0);
  }
 }
 $10 = HEAP32[(21228)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $nth;
 _qh_fprintf($10,6174,42272,$vararg_buffer);
 $11 = HEAP32[(21228)>>2]|0;
 _qh_setprint($11,56512,$set);
 _qh_errexit(5,0,0);
 // unreachable;
 return (0)|0;
}
function _qh_setdelnthsorted($set,$nth) {
 $set = $set|0;
 $nth = $nth|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $newp$0 = 0, $oldp$0 = 0, $or$cond = 0, $or$cond2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$set>>2]|0;
 $1 = (((($set)) + 4|0) + ($0<<2)|0);
 $2 = ($nth|0)<(0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0);
  $5 = (($3) + -1)|0;
  $6 = ($5|0)>($nth|0);
  $or$cond = $4 | $6;
  $7 = ($0|0)>($nth|0);
  $or$cond2 = $7 & $or$cond;
  if ($or$cond2) {
   $10 = (((($set)) + 4|0) + ($nth<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($10)) + 4|0);
   $newp$0 = $10;$oldp$0 = $12;
   while(1) {
    $13 = ((($oldp$0)) + 4|0);
    $14 = HEAP32[$oldp$0>>2]|0;
    $15 = ((($newp$0)) + 4|0);
    HEAP32[$newp$0>>2] = $14;
    $16 = ($14|0)==(0|0);
    if ($16) {
     break;
    } else {
     $newp$0 = $15;$oldp$0 = $13;
    }
   }
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + -1)|0;
   HEAP32[$1>>2] = $18;
   $19 = ($17|0)==(0);
   if (!($19)) {
    STACKTOP = sp;return ($11|0);
   }
   $20 = HEAP32[$set>>2]|0;
   HEAP32[$1>>2] = $20;
   STACKTOP = sp;return ($11|0);
  }
 }
 $8 = HEAP32[(21228)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $nth;
 _qh_fprintf($8,6175,42344,$vararg_buffer);
 $9 = HEAP32[(21228)>>2]|0;
 _qh_setprint($9,56512,$set);
 _qh_errexit(5,0,0);
 // unreachable;
 return (0)|0;
}
function _qh_setdelsorted($set,$oldelem) {
 $set = $set|0;
 $oldelem = $oldelem|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newp$0 = 0, $newp$0$lcssa = 0;
 var $newp$1 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($set)) + 4|0);
 $newp$0 = $1;
 while(1) {
  $2 = HEAP32[$newp$0>>2]|0;
  $3 = ($2|0)!=(0|0);
  $not$ = ($2|0)!=($oldelem|0);
  $$ = $3 & $not$;
  $4 = ((($newp$0)) + 4|0);
  if ($$) {
   $newp$0 = $4;
  } else {
   $$lcssa = $2;$newp$0$lcssa = $newp$0;
   break;
  }
 }
 $5 = ($$lcssa|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $newp$1 = $newp$0$lcssa;
 }
 while(1) {
  $6 = ((($newp$1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$newp$1>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   break;
  } else {
   $newp$1 = $6;
  }
 }
 $9 = HEAP32[$set>>2]|0;
 $10 = (((($set)) + 4|0) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$10>>2] = $12;
 $13 = ($11|0)==(0);
 if (!($13)) {
  $$0 = $oldelem;
  return ($$0|0);
 }
 $14 = HEAP32[$set>>2]|0;
 HEAP32[$10>>2] = $14;
 $$0 = $oldelem;
 return ($$0|0);
}
function _qh_setsize($set) {
 $set = $set|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($3) + -1)|0;
 $6 = ($5|0)>($1|0);
 if ($6) {
  $7 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  _qh_fprintf($7,6178,42424,$vararg_buffer);
  $8 = HEAP32[(21228)>>2]|0;
  _qh_setprint($8,42512,$set);
  _qh_errexit(5,0,0);
  // unreachable;
 } else {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _qh_setequal($setA,$setB) {
 $setA = $setA|0;
 $setB = $setB|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $sizeA$0 = 0, $sizeB$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($setA|0)==(0|0);
 if ($0) {
  $sizeA$0 = 0;
 } else {
  $1 = HEAP32[$setA>>2]|0;
  $2 = (((($setA)) + 4|0) + ($1<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  $5 = (($3) + -1)|0;
  $$1 = $4 ? $1 : $5;
  $sizeA$0 = $$1;
 }
 $6 = ($setB|0)==(0|0);
 if ($6) {
  $sizeB$0 = 0;
 } else {
  $7 = HEAP32[$setB>>2]|0;
  $8 = (((($setB)) + 4|0) + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  $11 = (($9) + -1)|0;
  $$2 = $10 ? $7 : $11;
  $sizeB$0 = $$2;
 }
 $12 = ($sizeA$0|0)==($sizeB$0|0);
 if (!($12)) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ($sizeA$0|0)==(0);
 if ($13) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ((($setA)) + 4|0);
 $15 = ((($setB)) + 4|0);
 $16 = $sizeA$0 << 2;
 $17 = (_memcmp($14,$15,$16)|0);
 $18 = ($17|0)==(0);
 $$ = $18&1;
 $$0 = $$;
 return ($$0|0);
}
function _qh_setequal_except($setA,$skipelemA,$setB,$skipelemB) {
 $setA = $setA|0;
 $skipelemA = $skipelemA|0;
 $setB = $setB|0;
 $skipelemB = $skipelemB|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ph = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elemA$0 = 0, $elemA$1 = 0, $elemB$0 = 0, $elemB$1 = 0, $elemB$1$lcssa = 0, $elemB$1$ph = 0, $skip$0 = 0, $skip$1 = 0, $skip$2 = 0;
 var $skip$2$lcssa = 0, $skip$2$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($setA)) + 4|0);
 $1 = ((($setB)) + 4|0);
 $$0 = $skipelemB;$elemA$0 = $0;$elemB$0 = $1;$skip$0 = 0;
 while(1) {
  $2 = HEAP32[$elemA$0>>2]|0;
  $3 = ($2|0)==($skipelemA|0);
  $4 = ((($elemA$0)) + 4|0);
  $elemA$1 = $3 ? $4 : $elemA$0;
  $5 = $3&1;
  $skip$1 = (($5) + ($skip$0))|0;
  $6 = ($$0|0)==(0|0);
  if ($6) {
   $11 = HEAP32[$elemA$1>>2]|0;
   $12 = HEAP32[$elemB$0>>2]|0;
   $13 = ($11|0)==($12|0);
   if ($13) {
    $$1 = 0;$17 = $11;$elemB$1 = $elemB$0;$skip$2 = $skip$1;
   } else {
    $14 = (($skip$1) + 1)|0;
    $15 = ((($elemB$0)) + 4|0);
    $16 = ($12|0)==(0|0);
    if ($16) {
     label = 12;
     break;
    } else {
     $$1$ph = $12;$elemB$1$ph = $15;$skip$2$ph = $14;
     label = 7;
    }
   }
  } else {
   $7 = HEAP32[$elemB$0>>2]|0;
   $8 = ($7|0)==($$0|0);
   if ($8) {
    $9 = (($skip$1) + 1)|0;
    $10 = ((($elemB$0)) + 4|0);
    $$1$ph = $$0;$elemB$1$ph = $10;$skip$2$ph = $9;
    label = 7;
   } else {
    $$1$ph = $$0;$elemB$1$ph = $elemB$0;$skip$2$ph = $skip$1;
    label = 7;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $$pr = HEAP32[$elemA$1>>2]|0;
   $$1 = $$1$ph;$17 = $$pr;$elemB$1 = $elemB$1$ph;$skip$2 = $skip$2$ph;
  }
  $18 = ($17|0)==(0|0);
  if ($18) {
   $elemB$1$lcssa = $elemB$1;$skip$2$lcssa = $skip$2;
   label = 10;
   break;
  }
  $19 = ((($elemA$1)) + 4|0);
  $20 = ((($elemB$1)) + 4|0);
  $21 = HEAP32[$elemB$1>>2]|0;
  $22 = ($17|0)==($21|0);
  if ($22) {
   $$0 = $$1;$elemA$0 = $19;$elemB$0 = $20;$skip$0 = $skip$2;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 10) {
  $23 = ($skip$2$lcssa|0)==(2);
  if ($23) {
   $24 = HEAP32[$elemB$1$lcssa>>2]|0;
   $25 = ($24|0)==(0|0);
   $$ = $25&1;
   return ($$|0);
  } else {
   return 0;
  }
 }
 else if ((label|0) == 12) {
  return 0;
 }
 return (0)|0;
}
function _qh_setequal_skip($setA,$skipA,$setB,$skipB) {
 $setA = $setA|0;
 $skipA = $skipA|0;
 $setB = $setB|0;
 $skipB = $skipB|0;
 var $$ = 0, $$0 = 0, $$elemA$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elemA$0 = 0;
 var $elemB$0 = 0, $elemB$1 = 0, $elemB$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($setA)) + 4|0);
 $1 = ((($setB)) + 4|0);
 $2 = (((($setA)) + 4|0) + ($skipA<<2)|0);
 $3 = (((($setB)) + 4|0) + ($skipB<<2)|0);
 $elemA$0 = $0;$elemB$0 = $1;
 while(1) {
  $4 = ($elemA$0|0)==($2|0);
  $5 = ((($elemA$0)) + 4|0);
  $$elemA$0 = $4 ? $5 : $elemA$0;
  $6 = ($elemB$0|0)==($3|0);
  $7 = ((($elemB$0)) + 4|0);
  $elemB$1 = $6 ? $7 : $elemB$0;
  $8 = HEAP32[$$elemA$0>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $elemB$1$lcssa = $elemB$1;
   break;
  }
  $10 = ((($$elemA$0)) + 4|0);
  $11 = ((($elemB$1)) + 4|0);
  $12 = HEAP32[$elemB$1>>2]|0;
  $13 = ($8|0)==($12|0);
  if ($13) {
   $elemA$0 = $10;$elemB$0 = $11;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 $14 = HEAP32[$elemB$1$lcssa>>2]|0;
 $15 = ($14|0)==(0|0);
 $$ = $15&1;
 $$0 = $$;
 return ($$0|0);
}
function _qh_setin($set,$setelem) {
 $set = $set|0;
 $setelem = $setelem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $elemp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($set)) + 4|0);
 $elemp$0 = $1;
 while(1) {
  $2 = HEAP32[$elemp$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   label = 5;
   break;
  }
  $4 = ((($elemp$0)) + 4|0);
  $5 = ($2|0)==($setelem|0);
  if ($5) {
   $$0 = 1;
   label = 5;
   break;
  } else {
   $elemp$0 = $4;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _qh_setindex($set,$atelem) {
 $set = $set|0;
 $atelem = $atelem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elem$01 = 0, $i$02 = 0, $or$cond = 0, $size$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = (($3) + -1)|0;
 $size$0 = $4 ? $1 : $5;
 $6 = ($size$0|0)<=($1|0);
 $7 = ($size$0|0)>(0);
 $or$cond = $6 & $7;
 if (!($or$cond)) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = ((($set)) + 4|0);
 $elem$01 = $8;$i$02 = 0;
 while(1) {
  $9 = HEAP32[$elem$01>>2]|0;
  $10 = ($9|0)==($atelem|0);
  if ($10) {
   $$0 = $i$02;
   label = 6;
   break;
  }
  $11 = ((($elem$01)) + 4|0);
  $12 = (($i$02) + 1)|0;
  $13 = ($12|0)<($size$0|0);
  if ($13) {
   $elem$01 = $11;$i$02 = $12;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _qh_setlast($set) {
 $set = $set|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$set>>2]|0;
 $2 = (((($set)) + 4|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (($1) + -1)|0;
  $6 = (((($set)) + 4|0) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $$0 = $7;
  return ($$0|0);
 }
 $8 = ($3|0)>(1);
 if (!($8)) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (($3) + -2)|0;
 $10 = (((($set)) + 4|0) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $$0 = $11;
 return ($$0|0);
}
function _qh_setnew_delnthsorted($set,$size,$nth,$prepend) {
 $set = $set|0;
 $size = $size|0;
 $nth = $nth|0;
 $prepend = $prepend|0;
 var $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $newp$0 = 0, $newp$1 = 0, $oldp$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($size) - ($nth))|0;
 $1 = (($0) + -1)|0;
 $2 = ($0|0)<(1);
 if ($2) {
  $3 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $nth;
  _qh_fprintf($3,6176,42520,$vararg_buffer);
  $4 = HEAP32[(21228)>>2]|0;
  _qh_setprint($4,56512,$set);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $5 = (($size) + -1)|0;
 $6 = (($5) + ($prepend))|0;
 $7 = (_qh_setnew($6)|0);
 $8 = (($prepend) + ($size))|0;
 $9 = HEAP32[$7>>2]|0;
 $10 = (((($7)) + 4|0) + ($9<<2)|0);
 HEAP32[$10>>2] = $8;
 $11 = ((($set)) + 4|0);
 $12 = ((($7)) + 4|0);
 $13 = (($12) + ($prepend<<2)|0);
 switch ($nth|0) {
 case 1:  {
  $14 = ((($11)) + 4|0);
  $15 = HEAP32[$11>>2]|0;
  $$sum9 = (($prepend) + 1)|0;
  $16 = (($12) + ($$sum9<<2)|0);
  HEAP32[$13>>2] = $15;
  $newp$0 = $16;$oldp$0 = $14;
  break;
 }
 case 2:  {
  $17 = ((($11)) + 4|0);
  $18 = HEAP32[$11>>2]|0;
  $$sum7 = (($prepend) + 1)|0;
  $19 = (($12) + ($$sum7<<2)|0);
  HEAP32[$13>>2] = $18;
  $20 = ((($11)) + 8|0);
  $21 = HEAP32[$17>>2]|0;
  $$sum8 = (($prepend) + 2)|0;
  $22 = (($12) + ($$sum8<<2)|0);
  HEAP32[$19>>2] = $21;
  $newp$0 = $22;$oldp$0 = $20;
  break;
 }
 case 3:  {
  $23 = ((($11)) + 4|0);
  $24 = HEAP32[$11>>2]|0;
  $$sum4 = (($prepend) + 1)|0;
  $25 = (($12) + ($$sum4<<2)|0);
  HEAP32[$13>>2] = $24;
  $26 = ((($11)) + 8|0);
  $27 = HEAP32[$23>>2]|0;
  $$sum5 = (($prepend) + 2)|0;
  $28 = (($12) + ($$sum5<<2)|0);
  HEAP32[$25>>2] = $27;
  $29 = ((($11)) + 12|0);
  $30 = HEAP32[$26>>2]|0;
  $$sum6 = (($prepend) + 3)|0;
  $31 = (($12) + ($$sum6<<2)|0);
  HEAP32[$28>>2] = $30;
  $newp$0 = $31;$oldp$0 = $29;
  break;
 }
 case 0:  {
  $newp$0 = $13;$oldp$0 = $11;
  break;
 }
 case 4:  {
  $32 = ((($11)) + 4|0);
  $33 = HEAP32[$11>>2]|0;
  $$sum = (($prepend) + 1)|0;
  $34 = (($12) + ($$sum<<2)|0);
  HEAP32[$13>>2] = $33;
  $35 = ((($11)) + 8|0);
  $36 = HEAP32[$32>>2]|0;
  $$sum1 = (($prepend) + 2)|0;
  $37 = (($12) + ($$sum1<<2)|0);
  HEAP32[$34>>2] = $36;
  $38 = ((($11)) + 12|0);
  $39 = HEAP32[$35>>2]|0;
  $$sum2 = (($prepend) + 3)|0;
  $40 = (($12) + ($$sum2<<2)|0);
  HEAP32[$37>>2] = $39;
  $41 = ((($11)) + 16|0);
  $42 = HEAP32[$38>>2]|0;
  $$sum3 = (($prepend) + 4)|0;
  $43 = (($12) + ($$sum3<<2)|0);
  HEAP32[$40>>2] = $42;
  $newp$0 = $43;$oldp$0 = $41;
  break;
 }
 default: {
  $44 = $nth << 2;
  _memcpy(($13|0),($11|0),($44|0))|0;
  $$sum10 = (($prepend) + ($nth))|0;
  $45 = (($12) + ($$sum10<<2)|0);
  $46 = (($11) + ($nth<<2)|0);
  $newp$0 = $45;$oldp$0 = $46;
 }
 }
 $47 = ((($oldp$0)) + 4|0);
 switch ($0|0) {
 case 4:  {
  $55 = ((($oldp$0)) + 8|0);
  $56 = HEAP32[$47>>2]|0;
  $57 = ((($newp$0)) + 4|0);
  HEAP32[$newp$0>>2] = $56;
  $58 = ((($oldp$0)) + 12|0);
  $59 = HEAP32[$55>>2]|0;
  $60 = ((($newp$0)) + 8|0);
  HEAP32[$57>>2] = $59;
  $61 = HEAP32[$58>>2]|0;
  $62 = ((($newp$0)) + 12|0);
  HEAP32[$60>>2] = $61;
  $newp$1 = $62;
  HEAP32[$newp$1>>2] = 0;
  STACKTOP = sp;return ($7|0);
  break;
 }
 case 3:  {
  $50 = ((($oldp$0)) + 8|0);
  $51 = HEAP32[$47>>2]|0;
  $52 = ((($newp$0)) + 4|0);
  HEAP32[$newp$0>>2] = $51;
  $53 = HEAP32[$50>>2]|0;
  $54 = ((($newp$0)) + 8|0);
  HEAP32[$52>>2] = $53;
  $newp$1 = $54;
  HEAP32[$newp$1>>2] = 0;
  STACKTOP = sp;return ($7|0);
  break;
 }
 case 5:  {
  $63 = ((($oldp$0)) + 8|0);
  $64 = HEAP32[$47>>2]|0;
  $65 = ((($newp$0)) + 4|0);
  HEAP32[$newp$0>>2] = $64;
  $66 = ((($oldp$0)) + 12|0);
  $67 = HEAP32[$63>>2]|0;
  $68 = ((($newp$0)) + 8|0);
  HEAP32[$65>>2] = $67;
  $69 = ((($oldp$0)) + 16|0);
  $70 = HEAP32[$66>>2]|0;
  $71 = ((($newp$0)) + 12|0);
  HEAP32[$68>>2] = $70;
  $72 = HEAP32[$69>>2]|0;
  $73 = ((($newp$0)) + 16|0);
  HEAP32[$71>>2] = $72;
  $newp$1 = $73;
  HEAP32[$newp$1>>2] = 0;
  STACKTOP = sp;return ($7|0);
  break;
 }
 case 2:  {
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($newp$0)) + 4|0);
  HEAP32[$newp$0>>2] = $48;
  $newp$1 = $49;
  HEAP32[$newp$1>>2] = 0;
  STACKTOP = sp;return ($7|0);
  break;
 }
 case 1:  {
  $newp$1 = $newp$0;
  HEAP32[$newp$1>>2] = 0;
  STACKTOP = sp;return ($7|0);
  break;
 }
 default: {
  $74 = $1 << 2;
  _memcpy(($newp$0|0),($47|0),($74|0))|0;
  $75 = (($newp$0) + ($1<<2)|0);
  $newp$1 = $75;
  HEAP32[$newp$1>>2] = 0;
  STACKTOP = sp;return ($7|0);
 }
 }
 return (0)|0;
}
function _qh_setreplace($set,$oldelem,$newelem) {
 $set = $set|0;
 $oldelem = $oldelem|0;
 $newelem = $newelem|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $elemp$0 = 0, $elemp$0$lcssa = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($set)) + 4|0);
 $elemp$0 = $0;
 while(1) {
  $1 = HEAP32[$elemp$0>>2]|0;
  $2 = ($1|0)!=(0|0);
  $not$ = ($1|0)!=($oldelem|0);
  $$ = $2 & $not$;
  $3 = ((($elemp$0)) + 4|0);
  if ($$) {
   $elemp$0 = $3;
  } else {
   $$lcssa = $1;$elemp$0$lcssa = $elemp$0;
   break;
  }
 }
 $4 = ($$lcssa|0)==(0|0);
 if ($4) {
  $5 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $oldelem;
  _qh_fprintf($5,6177,42608,$vararg_buffer);
  $6 = HEAP32[(21228)>>2]|0;
  _qh_setprint($6,56512,$set);
  _qh_errexit(5,0,0);
  // unreachable;
 } else {
  HEAP32[$elemp$0$lcssa>>2] = $newelem;
  STACKTOP = sp;return;
 }
}
function _qh_settemp($setsize) {
 $setsize = $setsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_qh_setnew($setsize)|0);
 _qh_setappend((21224),$0);
 $1 = HEAP32[(21232)>>2]|0;
 $2 = ($1|0)>(4);
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 $3 = HEAP32[(21228)>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[(21224)>>2]|0;
 $6 = (_qh_setsize($5)|0);
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 _qh_fprintf($3,8123,42672,$vararg_buffer);
 STACKTOP = sp;return ($0|0);
}
function _qh_settempfree($set) {
 $set = $set|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$set>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_qh_settemppop()|0);
 $3 = HEAP32[$set>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  _qh_settemppush($2);
  $5 = HEAP32[(21228)>>2]|0;
  $6 = HEAP32[$set>>2]|0;
  $7 = (_qh_setsize($6)|0);
  $8 = HEAP32[(21224)>>2]|0;
  $9 = (_qh_setsize($8)|0);
  $10 = (($9) + 1)|0;
  $11 = (_qh_setsize($2)|0);
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $2;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $11;
  _qh_fprintf($5,6179,42728,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 _qh_setfree($set);
 STACKTOP = sp;return;
}
function _qh_settemppop() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[(21224)>>2]|0;
 $1 = (_qh_setdellast($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[(21228)>>2]|0;
  _qh_fprintf($3,6180,42848,$vararg_buffer);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 $4 = HEAP32[(21232)>>2]|0;
 $5 = ($4|0)>(4);
 if (!($5)) {
  STACKTOP = sp;return ($1|0);
 }
 $6 = HEAP32[(21228)>>2]|0;
 $7 = HEAP32[(21224)>>2]|0;
 $8 = (_qh_setsize($7)|0);
 $9 = (($8) + 1)|0;
 $10 = (_qh_setsize($1)|0);
 HEAP32[$vararg_buffer1>>2] = $9;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $1;
 $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr4>>2] = $10;
 _qh_fprintf($6,8124,42920,$vararg_buffer1);
 STACKTOP = sp;return ($1|0);
}
function _qh_settemppush($set) {
 $set = $set|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($set|0)==(0|0);
 if ($0) {
  $1 = HEAP32[(21228)>>2]|0;
  (_fwrite((42976|0),55,1,($1|0))|0);
  _qh_errexit(5,0,0);
  // unreachable;
 }
 _qh_setappend((21224),$set);
 $2 = HEAP32[(21232)>>2]|0;
 $3 = ($2|0)>(4);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(21228)>>2]|0;
 $5 = HEAP32[(21224)>>2]|0;
 $6 = (_qh_setsize($5)|0);
 $7 = (_qh_setsize($set)|0);
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $set;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 _qh_fprintf($4,8125,43032,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_setunique($set,$elem) {
 $set = $set|0;
 $elem = $elem|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$set>>2]|0;
 $1 = (_qh_setin($0,$elem)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 _qh_setappend($set,$elem);
 $$0 = 1;
 return ($$0|0);
}
function _qh_setzero($set,$idx,$size) {
 $set = $set|0;
 $idx = $idx|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($idx|0)>(-1);
 $1 = ($size|0)>($idx|0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  $2 = HEAP32[$set>>2]|0;
  $3 = ($2|0)<($size|0);
  if (!($3)) {
   $6 = (($size) + 1)|0;
   $7 = HEAP32[$set>>2]|0;
   $8 = (((($set)) + 4|0) + ($7<<2)|0);
   HEAP32[$8>>2] = $6;
   $9 = (($size) - ($idx))|0;
   $10 = (((($set)) + 4|0) + ($idx<<2)|0);
   $11 = $9 << 2;
   $12 = (($11) + 4)|0;
   _memset(($10|0),0,($12|0))|0;
   STACKTOP = sp;return;
  }
 }
 $4 = HEAP32[(21228)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $idx;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $size;
 _qh_fprintf($4,6182,43088,$vararg_buffer);
 $5 = HEAP32[(21228)>>2]|0;
 _qh_setprint($5,56512,$set);
 _qh_errexit(5,0,0);
 // unreachable;
}
function _qh_argv_to_command($argc,$argv,$command,$max_size) {
 $argc = $argc|0;
 $argv = $argv|0;
 $command = $command|0;
 $max_size = $max_size|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $i$05 = 0, $remaining$0 = 0, $remaining$1 = 0, $s$0 = 0, $s$1 = 0, $s$2 = 0, $s$3 = 0, $s$3$lcssa = 0, $s$4 = 0, $t$0 = 0, $t$0$lcssa = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$command>>0] = 0;
 $0 = ($argc|0)==(0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = HEAP32[$argv>>2]|0;
 $2 = (_strrchr($1,92)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_strrchr($1,47)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $s$1 = $1;
  } else {
   $s$0 = $4;
   label = 4;
  }
 } else {
  $s$0 = $2;
  label = 4;
 }
 if ((label|0) == 4) {
  $6 = ((($s$0)) + 1|0);
  $s$1 = $6;
 }
 $7 = (_strlen(($s$1|0))|0);
 $8 = ($7|0)<($max_size|0);
 if (!($8)) {
  $$0 = 0;
  return ($$0|0);
 }
 (_strcpy(($command|0),($s$1|0))|0);
 $9 = (_strstr($command,43176)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_strstr($command,43184)|0);
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $s$2 = $11;
   label = 8;
  }
 } else {
  $s$2 = $9;
  label = 8;
 }
 if ((label|0) == 8) {
  HEAP8[$s$2>>0] = 0;
 }
 $13 = ($argc|0)>(1);
 if ($13) {
  $i$05 = 1;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 L19: while(1) {
  $14 = (($argv) + ($i$05<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_strlen(($command|0))|0);
  $17 = (($max_size) - ($16))|0;
  $18 = (_strlen(($15|0))|0);
  $19 = (($17) - ($18))|0;
  $20 = HEAP8[$15>>0]|0;
  $21 = ($20<<24>>24)==(0);
  if ($21) {
   label = 12;
  } else {
   $22 = (_strchr($15,32)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $38 = ($19|0)<(2);
    if ($38) {
     $$0 = 0;
     label = 22;
     break;
    }
    $endptr = (($command) + ($16)|0);
    HEAP8[$endptr>>0]=32&255;HEAP8[$endptr+1>>0]=32>>8;
    $s$4 = $15;
   } else {
    label = 12;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $24 = (_strlen(($command|0))|0);
   $25 = ($19|0)<(4);
   if ($25) {
    $$0 = 0;
    label = 22;
    break;
   }
   $26 = (($command) + ($24)|0);
   $27 = (($19) + -4)|0;
   $$sum = (($24) + 1)|0;
   $28 = (($command) + ($$sum)|0);
   HEAP8[$26>>0] = 32;
   $$sum1 = (($24) + 2)|0;
   $29 = (($command) + ($$sum1)|0);
   HEAP8[$28>>0] = 34;
   $remaining$0 = $27;$s$3 = $15;$t$0 = $29;
   while(1) {
    $30 = HEAP8[$s$3>>0]|0;
    if ((($30<<24>>24) == 0)) {
     $s$3$lcssa = $s$3;$t$0$lcssa = $t$0;
     break;
    } else if ((($30<<24>>24) == 34)) {
     $31 = ($remaining$0|0)<(1);
     if ($31) {
      $$0 = 0;
      label = 22;
      break L19;
     }
     $32 = (($remaining$0) + -1)|0;
     $33 = ((($t$0)) + 1|0);
     HEAP8[$t$0>>0] = 92;
     $remaining$1 = $32;$t$1 = $33;
    } else {
     $remaining$1 = $remaining$0;$t$1 = $t$0;
    }
    $34 = ((($s$3)) + 1|0);
    $35 = HEAP8[$s$3>>0]|0;
    $36 = ((($t$1)) + 1|0);
    HEAP8[$t$1>>0] = $35;
    $remaining$0 = $remaining$1;$s$3 = $34;$t$0 = $36;
   }
   $37 = ((($t$0$lcssa)) + 1|0);
   HEAP8[$t$0$lcssa>>0] = 34;
   HEAP8[$37>>0] = 0;
   $s$4 = $s$3$lcssa;
  }
  (_strcat(($command|0),($s$4|0))|0);
  $39 = (($i$05) + 1)|0;
  $40 = ($39|0)<($argc|0);
  if ($40) {
   $i$05 = $39;
  } else {
   $$0 = 1;
   label = 22;
   break;
  }
 }
 if ((label|0) == 22) {
  return ($$0|0);
 }
 return (0)|0;
}
function _qh_rand() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $seed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[43168>>2]|0;
 $1 = (($0|0) / 127773)&-1;
 $2 = (($0|0) % 127773)&-1;
 $3 = ($2*16807)|0;
 $4 = Math_imul($1, -2836)|0;
 $5 = (($3) + ($4))|0;
 $6 = ($5|0)>(0);
 $7 = (($5) + 2147483647)|0;
 $seed$0 = $6 ? $5 : $7;
 HEAP32[43168>>2] = $seed$0;
 return ($seed$0|0);
}
function _qh_srand($seed) {
 $seed = $seed|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($seed|0)<(1);
 if ($0) {
  HEAP32[43168>>2] = 1;
  return;
 }
 $1 = ($seed|0)==(2147483647);
 if ($1) {
  HEAP32[43168>>2] = 2147483646;
  return;
 } else {
  HEAP32[43168>>2] = $seed;
  return;
 }
}
function _qh_randomfactor($scale,$offset) {
 $scale = +$scale;
 $offset = +$offset;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_qh_rand()|0);
 $1 = (+($0|0));
 $2 = $1 * $scale;
 $3 = $2 + $offset;
 return (+$3);
}
function _qh_randommatrix($buffer,$dim,$rows) {
 $buffer = $buffer|0;
 $dim = $dim|0;
 $rows = $rows|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $coord$0$lcssa = 0, $coord$04 = 0, $coord$12 = 0, $exitcond = 0, $exitcond13 = 0, $i$05 = 0, $k$01 = 0, $rowi$0$lcssa = 0, $rowi$03 = 0, $scevgep = 0;
 var $scevgep$lcssa = 0, $scevgep12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)>(0);
 if ($0) {
  $coord$04 = $buffer;$i$05 = 0;$rowi$03 = $rows;
 } else {
  $coord$0$lcssa = $buffer;$rowi$0$lcssa = $rows;
  HEAP32[$rowi$0$lcssa>>2] = $coord$0$lcssa;
  return;
 }
 while(1) {
  $1 = ((($rowi$03)) + 4|0);
  HEAP32[$rowi$03>>2] = $coord$04;
  $coord$12 = $coord$04;$k$01 = 0;
  while(1) {
   $2 = (_qh_rand()|0);
   $3 = (+($2|0));
   $4 = $3 * 2.0;
   $5 = $4 / 2147483647.0;
   $6 = $5 + -1.0;
   $7 = ((($coord$12)) + 8|0);
   HEAPF64[$coord$12>>3] = $6;
   $8 = (($k$01) + 1)|0;
   $exitcond = ($8|0)==($dim|0);
   if ($exitcond) {
    break;
   } else {
    $coord$12 = $7;$k$01 = $8;
   }
  }
  $scevgep = (($coord$04) + ($dim<<3)|0);
  $9 = (($i$05) + 1)|0;
  $exitcond13 = ($9|0)==($dim|0);
  if ($exitcond13) {
   $scevgep$lcssa = $scevgep;
   break;
  } else {
   $coord$04 = $scevgep;$i$05 = $9;$rowi$03 = $1;
  }
 }
 $scevgep12 = (($rows) + ($dim<<2)|0);
 $coord$0$lcssa = $scevgep$lcssa;$rowi$0$lcssa = $scevgep12;
 HEAP32[$rowi$0$lcssa>>2] = $coord$0$lcssa;
 return;
}
function _qh_strtod($s,$endp) {
 $s = $s|0;
 $endp = $endp|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,$endp));
 $1 = HEAP32[$endp>>2]|0;
 $2 = ($1>>>0)>($s>>>0);
 if (!($2)) {
  return (+$0);
 }
 $3 = ((($1)) + -1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(32);
 if (!($5)) {
  return (+$0);
 }
 HEAP32[$endp>>2] = $3;
 return (+$0);
}
function _qh_strtol($s,$endp) {
 $s = $s|0;
 $endp = $endp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtol($s,$endp,10)|0);
 $1 = HEAP32[$endp>>2]|0;
 $2 = ($1>>>0)>($s>>>0);
 if (!($2)) {
  return ($0|0);
 }
 $3 = ((($1)) + -1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(32);
 if (!($5)) {
  return ($0|0);
 }
 HEAP32[$endp>>2] = $3;
 return ($0|0);
}
function _qh_allstatA() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 59;
 HEAP32[(45464)>>2] = 47128;
 HEAP16[(46246)>>1] = -1;
 HEAP8[(46637)>>0] = 0;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -115;
 HEAP32[(45792)>>2] = 0;
 HEAP16[(46410)>>1] = -1;
 HEAP8[(46719)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = -114;
 HEAP32[(45796)>>2] = 47152;
 HEAP16[(46412)>>1] = 141;
 HEAP8[(46720)>>0] = 6;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = -113;
 HEAP32[(45800)>>2] = 47200;
 HEAP16[(46414)>>1] = -1;
 HEAP8[(46721)>>0] = 7;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = -47;
 HEAP32[(46064)>>2] = 47248;
 HEAP16[(46546)>>1] = -1;
 HEAP8[(46787)>>0] = 7;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = -46;
 HEAP32[(46068)>>2] = 47296;
 HEAP16[(46548)>>1] = -1;
 HEAP8[(46788)>>0] = 8;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = -125;
 HEAP32[(45752)>>2] = 47344;
 HEAP16[(46390)>>1] = -1;
 HEAP8[(46709)>>0] = 8;
 $21 = HEAP32[(47104)>>2]|0;
 HEAP32[(47108)>>2] = $21;
 $22 = HEAP32[(47104)>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[(47104)>>2] = $23;
 $24 = (44992 + ($22)|0);
 HEAP8[$24>>0] = 60;
 HEAP32[(45468)>>2] = 47392;
 HEAP16[(46248)>>1] = -1;
 HEAP8[(46638)>>0] = 0;
 $25 = HEAP32[(47104)>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[(47104)>>2] = $26;
 $27 = (44992 + ($25)|0);
 HEAP8[$27>>0] = 35;
 HEAP32[(45368)>>2] = 47448;
 HEAP16[(46198)>>1] = -1;
 HEAP8[(46613)>>0] = 1;
 $28 = HEAP32[(47104)>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[(47104)>>2] = $29;
 $30 = (44992 + ($28)|0);
 HEAP8[$30>>0] = 25;
 HEAP32[(45328)>>2] = 47480;
 HEAP16[(46178)>>1] = -1;
 HEAP8[(46603)>>0] = 1;
 $31 = HEAP32[(47104)>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[(47104)>>2] = $32;
 $33 = (44992 + ($31)|0);
 HEAP8[$33>>0] = 81;
 HEAP32[(45552)>>2] = 47512;
 HEAP16[(46290)>>1] = -1;
 HEAP8[(46659)>>0] = 1;
 $34 = HEAP32[(47104)>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[(47104)>>2] = $35;
 $36 = (44992 + ($34)|0);
 HEAP8[$36>>0] = 32;
 HEAP32[(45356)>>2] = 47528;
 HEAP16[(46192)>>1] = -1;
 HEAP8[(46610)>>0] = 1;
 $37 = HEAP32[(47104)>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[(47104)>>2] = $38;
 $39 = (44992 + ($37)|0);
 HEAP8[$39>>0] = 34;
 HEAP32[(45364)>>2] = 47576;
 HEAP16[(46196)>>1] = -1;
 HEAP8[(46612)>>0] = 1;
 $40 = HEAP32[(47104)>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[(47104)>>2] = $41;
 $42 = (44992 + ($40)|0);
 HEAP8[$42>>0] = -123;
 HEAP32[(45760)>>2] = 47616;
 HEAP16[(46394)>>1] = -1;
 HEAP8[(46711)>>0] = 1;
 $43 = HEAP32[(47104)>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[(47104)>>2] = $44;
 $45 = (44992 + ($43)|0);
 HEAP8[$45>>0] = -121;
 HEAP32[(45768)>>2] = 47680;
 HEAP16[(46398)>>1] = -1;
 HEAP8[(46713)>>0] = 1;
 $46 = HEAP32[(47104)>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[(47104)>>2] = $47;
 $48 = (44992 + ($46)|0);
 HEAP8[$48>>0] = 14;
 HEAP32[(45284)>>2] = 47728;
 HEAP16[(46156)>>1] = -1;
 HEAP8[(46592)>>0] = 1;
 $49 = HEAP32[(47104)>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[(47104)>>2] = $50;
 $51 = (44992 + ($49)|0);
 HEAP8[$51>>0] = 96;
 HEAP32[(45612)>>2] = 47768;
 HEAP16[(46320)>>1] = -1;
 HEAP8[(46674)>>0] = 1;
 $52 = HEAP32[(47104)>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[(47104)>>2] = $53;
 $54 = (44992 + ($52)|0);
 HEAP8[$54>>0] = -122;
 HEAP32[(45764)>>2] = 47816;
 HEAP16[(46396)>>1] = -1;
 HEAP8[(46712)>>0] = 1;
 return;
}
function _qh_allstatB() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 58;
 HEAP32[(45460)>>2] = 47848;
 HEAP16[(46244)>>1] = -1;
 HEAP8[(46636)>>0] = 0;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -42;
 HEAP32[(46084)>>2] = 47872;
 HEAP16[(46556)>>1] = -1;
 HEAP8[(46792)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = -106;
 HEAP32[(45828)>>2] = 47904;
 HEAP16[(46428)>>1] = -1;
 HEAP8[(46728)>>0] = 1;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = -111;
 HEAP32[(45808)>>2] = 47936;
 HEAP16[(46418)>>1] = -1;
 HEAP8[(46723)>>0] = 1;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = -110;
 HEAP32[(45812)>>2] = 47984;
 HEAP16[(46420)>>1] = -1;
 HEAP8[(46724)>>0] = 1;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = -102;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = -102;
 HEAP32[(45844)>>2] = 48032;
 HEAP16[(46436)>>1] = 150;
 HEAP8[(46732)>>0] = 2;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = 111;
 HEAP32[(45672)>>2] = 48072;
 HEAP16[(46350)>>1] = -1;
 HEAP8[(46689)>>0] = 3;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = -103;
 HEAP32[(45840)>>2] = 48104;
 HEAP16[(46434)>>1] = 150;
 HEAP8[(46731)>>0] = 2;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = 108;
 HEAP32[(45660)>>2] = 48144;
 HEAP16[(46344)>>1] = -1;
 HEAP8[(46686)>>0] = 3;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = -101;
 HEAP32[(45848)>>2] = 48176;
 HEAP16[(46438)>>1] = 150;
 HEAP8[(46733)>>0] = 2;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = 113;
 HEAP32[(45680)>>2] = 48216;
 HEAP16[(46354)>>1] = -1;
 HEAP8[(46691)>>0] = 3;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = -99;
 HEAP32[(45856)>>2] = 48248;
 HEAP16[(46442)>>1] = 214;
 HEAP8[(46735)>>0] = 2;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = 114;
 HEAP32[(45684)>>2] = 48144;
 HEAP16[(46356)>>1] = -1;
 HEAP8[(46692)>>0] = 3;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = 36;
 HEAP32[(45372)>>2] = 48288;
 HEAP16[(46200)>>1] = -1;
 HEAP8[(46614)>>0] = 6;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = -55;
 HEAP32[(46032)>>2] = 48328;
 HEAP16[(46530)>>1] = -1;
 HEAP8[(46779)>>0] = 1;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = -63;
 HEAP32[(46000)>>2] = 48360;
 HEAP16[(46514)>>1] = -1;
 HEAP8[(46771)>>0] = 1;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = -56;
 HEAP32[(46028)>>2] = 48392;
 HEAP16[(46528)>>1] = -1;
 HEAP8[(46778)>>0] = 1;
 $54 = HEAP32[(47104)>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[(47104)>>2] = $55;
 $56 = (44992 + ($54)|0);
 HEAP8[$56>>0] = -86;
 HEAP32[(45908)>>2] = 48424;
 HEAP16[(46468)>>1] = -1;
 HEAP8[(46748)>>0] = 1;
 $57 = HEAP32[(47104)>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[(47104)>>2] = $58;
 $59 = (44992 + ($57)|0);
 HEAP8[$59>>0] = -104;
 HEAP32[(45836)>>2] = 48456;
 HEAP16[(46432)>>1] = 150;
 HEAP8[(46730)>>0] = 2;
 $60 = HEAP32[(47104)>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[(47104)>>2] = $61;
 $62 = (44992 + ($60)|0);
 HEAP8[$62>>0] = -105;
 HEAP32[(45832)>>2] = 48496;
 HEAP16[(46430)>>1] = -1;
 HEAP8[(46729)>>0] = 3;
 $63 = HEAP32[(47104)>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[(47104)>>2] = $64;
 $65 = (44992 + ($63)|0);
 HEAP8[$65>>0] = 3;
 HEAP32[(45240)>>2] = 0;
 HEAP16[(46134)>>1] = -1;
 HEAP8[(46581)>>0] = 1;
 $66 = HEAP32[(47104)>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[(47104)>>2] = $67;
 $68 = (44992 + ($66)|0);
 HEAP8[$68>>0] = 4;
 HEAP32[(45244)>>2] = 48544;
 HEAP16[(46136)>>1] = 3;
 HEAP8[(46582)>>0] = 6;
 $69 = HEAP32[(47104)>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[(47104)>>2] = $70;
 $71 = (44992 + ($69)|0);
 HEAP8[$71>>0] = 5;
 HEAP32[(45248)>>2] = 48600;
 HEAP16[(46138)>>1] = -1;
 HEAP8[(46583)>>0] = 7;
 $72 = HEAP32[(47104)>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[(47104)>>2] = $73;
 $74 = (44992 + ($72)|0);
 HEAP8[$74>>0] = 6;
 HEAP32[(45252)>>2] = 48656;
 HEAP16[(46140)>>1] = -1;
 HEAP8[(46584)>>0] = 8;
 $75 = HEAP32[(47104)>>2]|0;
 $76 = (($75) + 1)|0;
 HEAP32[(47104)>>2] = $76;
 $77 = (44992 + ($75)|0);
 HEAP8[$77>>0] = 8;
 HEAP32[(45260)>>2] = 48712;
 HEAP16[(46144)>>1] = -1;
 HEAP8[(46586)>>0] = 6;
 $78 = HEAP32[(47104)>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[(47104)>>2] = $79;
 $80 = (44992 + ($78)|0);
 HEAP8[$80>>0] = 9;
 HEAP32[(45264)>>2] = 48736;
 HEAP16[(46146)>>1] = -1;
 HEAP8[(46587)>>0] = 7;
 $81 = HEAP32[(47104)>>2]|0;
 $82 = (($81) + 1)|0;
 HEAP32[(47104)>>2] = $82;
 $83 = (44992 + ($81)|0);
 HEAP8[$83>>0] = 10;
 HEAP32[(45268)>>2] = 48760;
 HEAP16[(46148)>>1] = -1;
 HEAP8[(46588)>>0] = 8;
 return;
}
function _qh_allstatC() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 66;
 HEAP32[(45492)>>2] = 48784;
 HEAP16[(46260)>>1] = -1;
 HEAP8[(46644)>>0] = 0;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -84;
 HEAP32[(45916)>>2] = 48808;
 HEAP16[(46472)>>1] = -1;
 HEAP8[(46750)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = -78;
 HEAP32[(45940)>>2] = 48832;
 HEAP16[(46484)>>1] = -1;
 HEAP8[(46756)>>0] = 1;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = -77;
 HEAP32[(45944)>>2] = 48872;
 HEAP16[(46486)>>1] = -1;
 HEAP8[(46757)>>0] = 7;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 112;
 HEAP32[(45676)>>2] = 48896;
 HEAP16[(46352)>>1] = -1;
 HEAP8[(46690)>>0] = 3;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = -54;
 HEAP32[(46036)>>2] = 48928;
 HEAP16[(46532)>>1] = 172;
 HEAP8[(46780)>>0] = 1;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = 102;
 HEAP32[(45636)>>2] = 48968;
 HEAP16[(46332)>>1] = 172;
 HEAP8[(46680)>>0] = 1;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = -41;
 HEAP32[(46088)>>2] = 49024;
 HEAP16[(46558)>>1] = 172;
 HEAP8[(46793)>>0] = 2;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = -40;
 HEAP32[(46092)>>2] = 49064;
 HEAP16[(46560)>>1] = -1;
 HEAP8[(46794)>>0] = 3;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = -37;
 HEAP32[(46104)>>2] = 49080;
 HEAP16[(46566)>>1] = 172;
 HEAP8[(46797)>>0] = 2;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = -36;
 HEAP32[(46108)>>2] = 49064;
 HEAP16[(46568)>>1] = -1;
 HEAP8[(46798)>>0] = 3;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = -60;
 HEAP32[(46012)>>2] = 49120;
 HEAP16[(46520)>>1] = 172;
 HEAP8[(46774)>>0] = 1;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = -117;
 HEAP32[(45784)>>2] = 49160;
 HEAP16[(46406)>>1] = 172;
 HEAP8[(46717)>>0] = 2;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = -116;
 HEAP32[(45788)>>2] = 49200;
 HEAP16[(46408)>>1] = -1;
 HEAP8[(46718)>>0] = 3;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = -119;
 HEAP32[(45776)>>2] = 49240;
 HEAP16[(46402)>>1] = 172;
 HEAP8[(46715)>>0] = 6;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = -118;
 HEAP32[(45780)>>2] = 49272;
 HEAP16[(46404)>>1] = -1;
 HEAP8[(46716)>>0] = 6;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = -88;
 HEAP32[(45900)>>2] = 49296;
 HEAP16[(46464)>>1] = 167;
 HEAP8[(46746)>>0] = 6;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = -87;
 HEAP32[(45904)>>2] = 49272;
 HEAP16[(46466)>>1] = -1;
 HEAP8[(46747)>>0] = 6;
 $54 = HEAP32[(47104)>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[(47104)>>2] = $55;
 $56 = (44992 + ($54)|0);
 HEAP8[$56>>0] = -89;
 HEAP32[(45896)>>2] = 49328;
 HEAP16[(46462)>>1] = -1;
 HEAP8[(46745)>>0] = 1;
 $57 = HEAP32[(47104)>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[(47104)>>2] = $58;
 $59 = (44992 + ($57)|0);
 HEAP8[$59>>0] = -64;
 HEAP32[(45996)>>2] = 49352;
 HEAP16[(46512)>>1] = -1;
 HEAP8[(46770)>>0] = 1;
 $60 = HEAP32[(47104)>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[(47104)>>2] = $61;
 $62 = (44992 + ($60)|0);
 HEAP8[$62>>0] = 49;
 HEAP32[(45424)>>2] = 49400;
 HEAP16[(46226)>>1] = -1;
 HEAP8[(46627)>>0] = 1;
 $63 = HEAP32[(47104)>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[(47104)>>2] = $64;
 $65 = (44992 + ($63)|0);
 HEAP8[$65>>0] = -112;
 HEAP32[(45804)>>2] = 49448;
 HEAP16[(46416)>>1] = -1;
 HEAP8[(46722)>>0] = 1;
 $66 = HEAP32[(47104)>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[(47104)>>2] = $67;
 $68 = (44992 + ($66)|0);
 HEAP8[$68>>0] = -107;
 HEAP32[(45824)>>2] = 49504;
 HEAP16[(46426)>>1] = -1;
 HEAP8[(46727)>>0] = 1;
 $69 = HEAP32[(47104)>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[(47104)>>2] = $70;
 $71 = (44992 + ($69)|0);
 HEAP8[$71>>0] = -109;
 HEAP32[(45816)>>2] = 49544;
 HEAP16[(46422)>>1] = -1;
 HEAP8[(46725)>>0] = 1;
 $72 = HEAP32[(47104)>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[(47104)>>2] = $73;
 $74 = (44992 + ($72)|0);
 HEAP8[$74>>0] = -108;
 HEAP32[(45820)>>2] = 49584;
 HEAP16[(46424)>>1] = -1;
 HEAP8[(46726)>>0] = 1;
 $75 = HEAP32[(47104)>>2]|0;
 $76 = (($75) + 1)|0;
 HEAP32[(47104)>>2] = $76;
 $77 = (44992 + ($75)|0);
 HEAP8[$77>>0] = 97;
 HEAP32[(45616)>>2] = 49632;
 HEAP16[(46322)>>1] = -1;
 HEAP8[(46675)>>0] = 1;
 $78 = HEAP32[(47104)>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[(47104)>>2] = $79;
 $80 = (44992 + ($78)|0);
 HEAP8[$80>>0] = -100;
 HEAP32[(45852)>>2] = 49656;
 HEAP16[(46440)>>1] = -1;
 HEAP8[(46734)>>0] = 1;
 $81 = HEAP32[(47104)>>2]|0;
 $82 = (($81) + 1)|0;
 HEAP32[(47104)>>2] = $82;
 $83 = (44992 + ($81)|0);
 HEAP8[$83>>0] = 56;
 HEAP32[(45452)>>2] = 49696;
 HEAP16[(46240)>>1] = -1;
 HEAP8[(46634)>>0] = 1;
 $84 = HEAP32[(47104)>>2]|0;
 $85 = (($84) + 1)|0;
 HEAP32[(47104)>>2] = $85;
 $86 = (44992 + ($84)|0);
 HEAP8[$86>>0] = -61;
 HEAP32[(46008)>>2] = 49736;
 HEAP16[(46518)>>1] = -1;
 HEAP8[(46773)>>0] = 1;
 $87 = HEAP32[(47104)>>2]|0;
 $88 = (($87) + 1)|0;
 HEAP32[(47104)>>2] = $88;
 $89 = (44992 + ($87)|0);
 HEAP8[$89>>0] = 20;
 HEAP32[(45308)>>2] = 49776;
 HEAP16[(46168)>>1] = 195;
 HEAP8[(46598)>>0] = 1;
 return;
}
function _qh_allstatD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = -39;
 HEAP32[(46096)>>2] = 49808;
 HEAP16[(46562)>>1] = -1;
 HEAP8[(46795)>>0] = 1;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -35;
 HEAP32[(46112)>>2] = 49832;
 HEAP16[(46570)>>1] = -1;
 HEAP8[(46799)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = -38;
 HEAP32[(46100)>>2] = 49864;
 HEAP16[(46564)>>1] = -1;
 HEAP8[(46796)>>0] = 3;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = -34;
 HEAP32[(46116)>>2] = 49888;
 HEAP16[(46572)>>1] = -1;
 HEAP8[(46800)>>0] = 3;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 61;
 HEAP32[(45472)>>2] = 49912;
 HEAP16[(46250)>>1] = -1;
 HEAP8[(46639)>>0] = 0;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = 47;
 HEAP32[(45416)>>2] = 49968;
 HEAP16[(46222)>>1] = -1;
 HEAP8[(46625)>>0] = 2;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = 48;
 HEAP32[(45420)>>2] = 49992;
 HEAP16[(46224)>>1] = -1;
 HEAP8[(46626)>>0] = 3;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = 82;
 HEAP32[(45556)>>2] = 50040;
 HEAP16[(46292)>>1] = -1;
 HEAP8[(46660)>>0] = 1;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = 84;
 HEAP32[(45564)>>2] = 50064;
 HEAP16[(46296)>>1] = 82;
 HEAP8[(46662)>>0] = 2;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = 83;
 HEAP32[(45560)>>2] = 50088;
 HEAP16[(46294)>>1] = -1;
 HEAP8[(46661)>>0] = 3;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = 85;
 HEAP32[(45568)>>2] = 50112;
 HEAP16[(46298)>>1] = 82;
 HEAP8[(46663)>>0] = 2;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = 91;
 HEAP32[(45592)>>2] = 50136;
 HEAP16[(46310)>>1] = -1;
 HEAP8[(46669)>>0] = 1;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = 93;
 HEAP32[(45600)>>2] = 50064;
 HEAP16[(46314)>>1] = 91;
 HEAP8[(46671)>>0] = 2;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = 92;
 HEAP32[(45596)>>2] = 50088;
 HEAP16[(46312)>>1] = -1;
 HEAP8[(46670)>>0] = 3;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = 94;
 HEAP32[(45604)>>2] = 50160;
 HEAP16[(46316)>>1] = 91;
 HEAP8[(46672)>>0] = 1;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = 95;
 HEAP32[(45608)>>2] = 50184;
 HEAP16[(46318)>>1] = -1;
 HEAP8[(46673)>>0] = 1;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = 87;
 HEAP32[(45576)>>2] = 50216;
 HEAP16[(46302)>>1] = -1;
 HEAP8[(46665)>>0] = 1;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = 89;
 HEAP32[(45584)>>2] = 50064;
 HEAP16[(46306)>>1] = 87;
 HEAP8[(46667)>>0] = 2;
 $54 = HEAP32[(47104)>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[(47104)>>2] = $55;
 $56 = (44992 + ($54)|0);
 HEAP8[$56>>0] = 88;
 HEAP32[(45580)>>2] = 50088;
 HEAP16[(46304)>>1] = -1;
 HEAP8[(46666)>>0] = 3;
 $57 = HEAP32[(47104)>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[(47104)>>2] = $58;
 $59 = (44992 + ($57)|0);
 HEAP8[$59>>0] = 90;
 HEAP32[(45588)>>2] = 50160;
 HEAP16[(46308)>>1] = 87;
 HEAP8[(46668)>>0] = 1;
 $60 = HEAP32[(47104)>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[(47104)>>2] = $61;
 $62 = (44992 + ($60)|0);
 HEAP8[$62>>0] = -94;
 HEAP32[(45876)>>2] = 50240;
 HEAP16[(46452)>>1] = -1;
 HEAP8[(46740)>>0] = 1;
 $63 = HEAP32[(47104)>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[(47104)>>2] = $64;
 $65 = (44992 + ($63)|0);
 HEAP8[$65>>0] = -97;
 HEAP32[(45864)>>2] = 50280;
 HEAP16[(46446)>>1] = -1;
 HEAP8[(46737)>>0] = 1;
 $66 = HEAP32[(47104)>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[(47104)>>2] = $67;
 $68 = (44992 + ($66)|0);
 HEAP8[$68>>0] = -95;
 HEAP32[(45872)>>2] = 50328;
 HEAP16[(46450)>>1] = -1;
 HEAP8[(46739)>>0] = 1;
 return;
}
function _qh_allstatE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = -93;
 HEAP32[(45880)>>2] = 50384;
 HEAP16[(46454)>>1] = -1;
 HEAP8[(46741)>>0] = 1;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -90;
 HEAP32[(45892)>>2] = 50400;
 HEAP16[(46460)>>1] = -1;
 HEAP8[(46744)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = 33;
 HEAP32[(45360)>>2] = 50440;
 HEAP16[(46194)>>1] = -1;
 HEAP8[(46611)>>0] = 1;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = 17;
 HEAP32[(45296)>>2] = 50488;
 HEAP16[(46162)>>1] = -1;
 HEAP8[(46595)>>0] = 1;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 18;
 HEAP32[(45300)>>2] = 50512;
 HEAP16[(46164)>>1] = -1;
 HEAP8[(46596)>>0] = 1;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = 109;
 HEAP32[(45664)>>2] = 50552;
 HEAP16[(46346)>>1] = -1;
 HEAP8[(46687)>>0] = 6;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = -91;
 HEAP32[(45888)>>2] = 50600;
 HEAP16[(46458)>>1] = -1;
 HEAP8[(46743)>>0] = 1;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = -57;
 HEAP32[(46024)>>2] = 50640;
 HEAP16[(46526)>>1] = -1;
 HEAP8[(46777)>>0] = 1;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = -92;
 HEAP32[(45884)>>2] = 50664;
 HEAP16[(46456)>>1] = -1;
 HEAP8[(46742)>>0] = 1;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = 50;
 HEAP32[(45428)>>2] = 50696;
 HEAP16[(46228)>>1] = -1;
 HEAP8[(46628)>>0] = 1;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = 51;
 HEAP32[(45432)>>2] = 50744;
 HEAP16[(46230)>>1] = -1;
 HEAP8[(46629)>>0] = 1;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = 52;
 HEAP32[(45436)>>2] = 50784;
 HEAP16[(46232)>>1] = -1;
 HEAP8[(46630)>>0] = 1;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = 53;
 HEAP32[(45440)>>2] = 50824;
 HEAP16[(46234)>>1] = -1;
 HEAP8[(46631)>>0] = 1;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = 55;
 HEAP32[(45448)>>2] = 50856;
 HEAP16[(46238)>>1] = -1;
 HEAP8[(46633)>>0] = 1;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = 54;
 HEAP32[(45444)>>2] = 50888;
 HEAP16[(46236)>>1] = -1;
 HEAP8[(46632)>>0] = 1;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = -58;
 HEAP32[(46020)>>2] = 50920;
 HEAP16[(46524)>>1] = -1;
 HEAP8[(46776)>>0] = 1;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = -96;
 HEAP32[(45868)>>2] = 50976;
 HEAP16[(46448)>>1] = -1;
 HEAP8[(46738)>>0] = 1;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = 21;
 HEAP32[(45312)>>2] = 51016;
 HEAP16[(46170)>>1] = -1;
 HEAP8[(46599)>>0] = 1;
 return;
}
function _qh_allstatE2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 62;
 HEAP32[(45476)>>2] = 51056;
 HEAP16[(46252)>>1] = -1;
 HEAP8[(46640)>>0] = 0;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = 98;
 HEAP32[(45620)>>2] = 51088;
 HEAP16[(46324)>>1] = -1;
 HEAP8[(46676)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = 101;
 HEAP32[(45632)>>2] = 51136;
 HEAP16[(46330)>>1] = 98;
 HEAP8[(46679)>>0] = 1;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = 99;
 HEAP32[(45624)>>2] = 51184;
 HEAP16[(46326)>>1] = -1;
 HEAP8[(46677)>>0] = 1;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 100;
 HEAP32[(45628)>>2] = 51240;
 HEAP16[(46328)>>1] = 99;
 HEAP8[(46678)>>0] = 1;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = 77;
 HEAP32[(45536)>>2] = 51280;
 HEAP16[(46282)>>1] = -1;
 HEAP8[(46655)>>0] = 1;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = 72;
 HEAP32[(45516)>>2] = 51320;
 HEAP16[(46272)>>1] = -1;
 HEAP8[(46650)>>0] = 1;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = 63;
 HEAP32[(45480)>>2] = 51360;
 HEAP16[(46254)>>1] = -1;
 HEAP8[(46641)>>0] = 0;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = 7;
 HEAP32[(45256)>>2] = 51400;
 HEAP16[(46142)>>1] = -1;
 HEAP8[(46585)>>0] = 1;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = 15;
 HEAP32[(45288)>>2] = 51440;
 HEAP16[(46158)>>1] = -1;
 HEAP8[(46593)>>0] = 1;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = 16;
 HEAP32[(45292)>>2] = 51488;
 HEAP16[(46160)>>1] = -1;
 HEAP8[(46594)>>0] = 1;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = 19;
 HEAP32[(45304)>>2] = 51520;
 HEAP16[(46166)>>1] = -1;
 HEAP8[(46597)>>0] = 1;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = 57;
 HEAP32[(45456)>>2] = 51560;
 HEAP16[(46242)>>1] = -1;
 HEAP8[(46635)>>0] = 1;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = 30;
 HEAP32[(45348)>>2] = 51616;
 HEAP16[(46188)>>1] = -1;
 HEAP8[(46608)>>0] = 1;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = 31;
 HEAP32[(45352)>>2] = 51648;
 HEAP16[(46190)>>1] = -1;
 HEAP8[(46609)>>0] = 1;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = 26;
 HEAP32[(45332)>>2] = 51688;
 HEAP16[(46180)>>1] = -1;
 HEAP8[(46604)>>0] = 1;
 return;
}
function _qh_allstatF() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 64;
 HEAP32[(45484)>>2] = 51720;
 HEAP16[(46256)>>1] = -1;
 HEAP8[(46642)>>0] = 0;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -85;
 HEAP32[(45912)>>2] = 51744;
 HEAP16[(46470)>>1] = -1;
 HEAP8[(46749)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = 121;
 HEAP32[(45712)>>2] = 51768;
 HEAP16[(46370)>>1] = 171;
 HEAP8[(46699)>>0] = 2;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = 122;
 HEAP32[(45716)>>2] = 51816;
 HEAP16[(46372)>>1] = -1;
 HEAP8[(46700)>>0] = 2;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 126;
 HEAP32[(45732)>>2] = 51832;
 HEAP16[(46380)>>1] = 171;
 HEAP8[(46704)>>0] = 2;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = 127;
 HEAP32[(45736)>>2] = 51888;
 HEAP16[(46382)>>1] = -1;
 HEAP8[(46705)>>0] = 2;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = 123;
 HEAP32[(45720)>>2] = 51928;
 HEAP16[(46374)>>1] = -1;
 HEAP8[(46701)>>0] = 2;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = -128;
 HEAP32[(45740)>>2] = 51976;
 HEAP16[(46384)>>1] = -1;
 HEAP8[(46706)>>0] = 2;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = 110;
 HEAP32[(45668)>>2] = 52008;
 HEAP16[(46348)>>1] = -1;
 HEAP8[(46688)>>0] = 7;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = -124;
 HEAP32[(45756)>>2] = 52080;
 HEAP16[(46392)>>1] = -1;
 HEAP8[(46710)>>0] = 8;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = -33;
 HEAP32[(46120)>>2] = 52136;
 HEAP16[(46574)>>1] = -1;
 HEAP8[(46801)>>0] = 1;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = -32;
 HEAP32[(46124)>>2] = 52176;
 HEAP16[(46576)>>1] = -1;
 HEAP8[(46802)>>0] = 1;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = -59;
 HEAP32[(46016)>>2] = 52216;
 HEAP16[(46522)>>1] = -1;
 HEAP8[(46775)>>0] = 1;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = -127;
 HEAP32[(45744)>>2] = 52272;
 HEAP16[(46386)>>1] = -1;
 HEAP8[(46707)>>0] = 1;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = -98;
 HEAP32[(45860)>>2] = 52296;
 HEAP16[(46444)>>1] = -1;
 HEAP8[(46736)>>0] = 1;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = 39;
 HEAP32[(45384)>>2] = 52336;
 HEAP16[(46206)>>1] = -1;
 HEAP8[(46617)>>0] = 1;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = 38;
 HEAP32[(45380)>>2] = 52384;
 HEAP16[(46204)>>1] = 39;
 HEAP8[(46616)>>0] = 2;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = 37;
 HEAP32[(45376)>>2] = 52408;
 HEAP16[(46202)>>1] = -1;
 HEAP8[(46615)>>0] = 3;
 $54 = HEAP32[(47104)>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[(47104)>>2] = $55;
 $56 = (44992 + ($54)|0);
 HEAP8[$56>>0] = 124;
 HEAP32[(45724)>>2] = 52424;
 HEAP16[(46376)>>1] = -1;
 HEAP8[(46702)>>0] = 1;
 $57 = HEAP32[(47104)>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[(47104)>>2] = $58;
 $59 = (44992 + ($57)|0);
 HEAP8[$59>>0] = 125;
 HEAP32[(45728)>>2] = 52456;
 HEAP16[(46378)>>1] = -1;
 HEAP8[(46703)>>0] = 1;
 $60 = HEAP32[(47104)>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[(47104)>>2] = $61;
 $62 = (44992 + ($60)|0);
 HEAP8[$62>>0] = 120;
 HEAP32[(45708)>>2] = 52480;
 HEAP16[(46368)>>1] = -1;
 HEAP8[(46698)>>0] = 1;
 $63 = HEAP32[(47104)>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[(47104)>>2] = $64;
 $65 = (44992 + ($63)|0);
 HEAP8[$65>>0] = -126;
 HEAP32[(45748)>>2] = 52520;
 HEAP16[(46388)>>1] = -1;
 HEAP8[(46708)>>0] = 1;
 $66 = HEAP32[(47104)>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[(47104)>>2] = $67;
 $68 = (44992 + ($66)|0);
 HEAP8[$68>>0] = 40;
 HEAP32[(45388)>>2] = 52552;
 HEAP16[(46208)>>1] = -1;
 HEAP8[(46618)>>0] = 1;
 $69 = HEAP32[(47104)>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[(47104)>>2] = $70;
 $71 = (44992 + ($69)|0);
 HEAP8[$71>>0] = 44;
 HEAP32[(45404)>>2] = 52608;
 HEAP16[(46216)>>1] = -1;
 HEAP8[(46622)>>0] = 1;
 $72 = HEAP32[(47104)>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[(47104)>>2] = $73;
 $74 = (44992 + ($72)|0);
 HEAP8[$74>>0] = 119;
 HEAP32[(45704)>>2] = 52648;
 HEAP16[(46366)>>1] = -1;
 HEAP8[(46697)>>0] = 1;
 $75 = HEAP32[(47104)>>2]|0;
 $76 = (($75) + 1)|0;
 HEAP32[(47104)>>2] = $76;
 $77 = (44992 + ($75)|0);
 HEAP8[$77>>0] = -120;
 HEAP32[(45772)>>2] = 52704;
 HEAP16[(46400)>>1] = -1;
 HEAP8[(46714)>>0] = 1;
 $78 = HEAP32[(47104)>>2]|0;
 $79 = (($78) + 1)|0;
 HEAP32[(47104)>>2] = $79;
 $80 = (44992 + ($78)|0);
 HEAP8[$80>>0] = -62;
 HEAP32[(46004)>>2] = 52744;
 HEAP16[(46516)>>1] = -1;
 HEAP8[(46772)>>0] = 2;
 return;
}
function _qh_allstatG() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 0;
 HEAP32[(45228)>>2] = 52776;
 HEAP16[(46128)>>1] = -1;
 HEAP8[(46578)>>0] = 1;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = 2;
 HEAP32[(45236)>>2] = 52816;
 HEAP16[(46132)>>1] = 0;
 HEAP8[(46580)>>0] = 6;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = 1;
 HEAP32[(45232)>>2] = 52848;
 HEAP16[(46130)>>1] = -1;
 HEAP8[(46579)>>0] = 7;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = 27;
 HEAP32[(45336)>>2] = 52880;
 HEAP16[(46182)>>1] = -1;
 HEAP8[(46605)>>0] = 1;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 29;
 HEAP32[(45344)>>2] = 52816;
 HEAP16[(46186)>>1] = 27;
 HEAP8[(46607)>>0] = 6;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = 28;
 HEAP32[(45340)>>2] = 52848;
 HEAP16[(46184)>>1] = -1;
 HEAP8[(46606)>>0] = 7;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = 22;
 HEAP32[(45316)>>2] = 52912;
 HEAP16[(46172)>>1] = -1;
 HEAP8[(46600)>>0] = 1;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = 24;
 HEAP32[(45324)>>2] = 52816;
 HEAP16[(46176)>>1] = 22;
 HEAP8[(46602)>>0] = 6;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = 23;
 HEAP32[(45320)>>2] = 52848;
 HEAP16[(46174)>>1] = -1;
 HEAP8[(46601)>>0] = 7;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = 11;
 HEAP32[(45272)>>2] = 52944;
 HEAP16[(46150)>>1] = -1;
 HEAP8[(46589)>>0] = 1;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = 13;
 HEAP32[(45280)>>2] = 52816;
 HEAP16[(46154)>>1] = 11;
 HEAP8[(46591)>>0] = 6;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = 12;
 HEAP32[(45276)>>2] = 52848;
 HEAP16[(46152)>>1] = -1;
 HEAP8[(46590)>>0] = 7;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = 41;
 HEAP32[(45392)>>2] = 53000;
 HEAP16[(46210)>>1] = -1;
 HEAP8[(46619)>>0] = 1;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = 43;
 HEAP32[(45400)>>2] = 52816;
 HEAP16[(46214)>>1] = 41;
 HEAP8[(46621)>>0] = 6;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = 42;
 HEAP32[(45396)>>2] = 52848;
 HEAP16[(46212)>>1] = -1;
 HEAP8[(46620)>>0] = 7;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = 78;
 HEAP32[(45540)>>2] = 53032;
 HEAP16[(46284)>>1] = -1;
 HEAP8[(46656)>>0] = 1;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = 80;
 HEAP32[(45548)>>2] = 52816;
 HEAP16[(46288)>>1] = 78;
 HEAP8[(46658)>>0] = 6;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = 79;
 HEAP32[(45544)>>2] = 52848;
 HEAP16[(46286)>>1] = -1;
 HEAP8[(46657)>>0] = 7;
 $54 = HEAP32[(47104)>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[(47104)>>2] = $55;
 $56 = (44992 + ($54)|0);
 HEAP8[$56>>0] = 73;
 HEAP32[(45520)>>2] = 53072;
 HEAP16[(46274)>>1] = -1;
 HEAP8[(46651)>>0] = 1;
 $57 = HEAP32[(47104)>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[(47104)>>2] = $58;
 $59 = (44992 + ($57)|0);
 HEAP8[$59>>0] = 75;
 HEAP32[(45528)>>2] = 52816;
 HEAP16[(46278)>>1] = 73;
 HEAP8[(46653)>>0] = 6;
 $60 = HEAP32[(47104)>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[(47104)>>2] = $61;
 $62 = (44992 + ($60)|0);
 HEAP8[$62>>0] = 74;
 HEAP32[(45524)>>2] = 52848;
 HEAP16[(46276)>>1] = -1;
 HEAP8[(46652)>>0] = 7;
 return;
}
function _qh_allstatH() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(47104)>>2] = $1;
 $2 = (44992 + ($0)|0);
 HEAP8[$2>>0] = 65;
 HEAP32[(45488)>>2] = 53104;
 HEAP16[(46258)>>1] = -1;
 HEAP8[(46643)>>0] = 0;
 $3 = HEAP32[(47104)>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[(47104)>>2] = $4;
 $5 = (44992 + ($3)|0);
 HEAP8[$5>>0] = -79;
 HEAP32[(45936)>>2] = 53136;
 HEAP16[(46482)>>1] = -1;
 HEAP8[(46755)>>0] = 1;
 $6 = HEAP32[(47104)>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[(47104)>>2] = $7;
 $8 = (44992 + ($6)|0);
 HEAP8[$8>>0] = -80;
 HEAP32[(45932)>>2] = 53176;
 HEAP16[(46480)>>1] = -1;
 HEAP8[(46754)>>0] = 1;
 $9 = HEAP32[(47104)>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[(47104)>>2] = $10;
 $11 = (44992 + ($9)|0);
 HEAP8[$11>>0] = -81;
 HEAP32[(45928)>>2] = 53216;
 HEAP16[(46478)>>1] = -1;
 HEAP8[(46753)>>0] = 1;
 $12 = HEAP32[(47104)>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[(47104)>>2] = $13;
 $14 = (44992 + ($12)|0);
 HEAP8[$14>>0] = 86;
 HEAP32[(45572)>>2] = 53264;
 HEAP16[(46300)>>1] = -1;
 HEAP8[(46664)>>0] = 1;
 $15 = HEAP32[(47104)>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[(47104)>>2] = $16;
 $17 = (44992 + ($15)|0);
 HEAP8[$17>>0] = 76;
 HEAP32[(45532)>>2] = 53312;
 HEAP16[(46280)>>1] = -1;
 HEAP8[(46654)>>0] = 1;
 $18 = HEAP32[(47104)>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[(47104)>>2] = $19;
 $20 = (44992 + ($18)|0);
 HEAP8[$20>>0] = 46;
 HEAP32[(45412)>>2] = 53344;
 HEAP16[(46220)>>1] = -1;
 HEAP8[(46624)>>0] = 1;
 $21 = HEAP32[(47104)>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[(47104)>>2] = $22;
 $23 = (44992 + ($21)|0);
 HEAP8[$23>>0] = 71;
 HEAP32[(45512)>>2] = 53384;
 HEAP16[(46270)>>1] = -1;
 HEAP8[(46649)>>0] = 1;
 $24 = HEAP32[(47104)>>2]|0;
 $25 = (($24) + 1)|0;
 HEAP32[(47104)>>2] = $25;
 $26 = (44992 + ($24)|0);
 HEAP8[$26>>0] = 70;
 HEAP32[(45508)>>2] = 53432;
 HEAP16[(46268)>>1] = -1;
 HEAP8[(46648)>>0] = 1;
 $27 = HEAP32[(47104)>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[(47104)>>2] = $28;
 $29 = (44992 + ($27)|0);
 HEAP8[$29>>0] = 45;
 HEAP32[(45408)>>2] = 53480;
 HEAP16[(46218)>>1] = -1;
 HEAP8[(46623)>>0] = 1;
 $30 = HEAP32[(47104)>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[(47104)>>2] = $31;
 $32 = (44992 + ($30)|0);
 HEAP8[$32>>0] = -83;
 HEAP32[(45920)>>2] = 53528;
 HEAP16[(46474)>>1] = -1;
 HEAP8[(46751)>>0] = 1;
 $33 = HEAP32[(47104)>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[(47104)>>2] = $34;
 $35 = (44992 + ($33)|0);
 HEAP8[$35>>0] = -82;
 HEAP32[(45924)>>2] = 53576;
 HEAP16[(46476)>>1] = -1;
 HEAP8[(46752)>>0] = 1;
 $36 = HEAP32[(47104)>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[(47104)>>2] = $37;
 $38 = (44992 + ($36)|0);
 HEAP8[$38>>0] = 106;
 HEAP32[(45652)>>2] = 53592;
 HEAP16[(46340)>>1] = -1;
 HEAP8[(46684)>>0] = 1;
 $39 = HEAP32[(47104)>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[(47104)>>2] = $40;
 $41 = (44992 + ($39)|0);
 HEAP8[$41>>0] = 104;
 HEAP32[(45644)>>2] = 53648;
 HEAP16[(46336)>>1] = -1;
 HEAP8[(46682)>>0] = 1;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[(47104)>>2] = $43;
 $44 = (44992 + ($42)|0);
 HEAP8[$44>>0] = 103;
 HEAP32[(45640)>>2] = 53696;
 HEAP16[(46334)>>1] = -1;
 HEAP8[(46681)>>0] = 1;
 $45 = HEAP32[(47104)>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[(47104)>>2] = $46;
 $47 = (44992 + ($45)|0);
 HEAP8[$47>>0] = 107;
 HEAP32[(45656)>>2] = 53736;
 HEAP16[(46342)>>1] = 103;
 HEAP8[(46685)>>0] = 2;
 $48 = HEAP32[(47104)>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[(47104)>>2] = $49;
 $50 = (44992 + ($48)|0);
 HEAP8[$50>>0] = 105;
 HEAP32[(45648)>>2] = 53768;
 HEAP16[(46338)>>1] = -1;
 HEAP8[(46683)>>0] = 3;
 $51 = HEAP32[(47104)>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[(47104)>>2] = $52;
 $53 = (44992 + ($51)|0);
 HEAP8[$53>>0] = -45;
 HEAP32[(46072)>>2] = 0;
 HEAP16[(46550)>>1] = -1;
 HEAP8[(46789)>>0] = 1;
 $54 = HEAP32[(47104)>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[(47104)>>2] = $55;
 $56 = (44992 + ($54)|0);
 HEAP8[$56>>0] = -44;
 HEAP32[(46076)>>2] = 53800;
 HEAP16[(46552)>>1] = 211;
 HEAP8[(46790)>>0] = 2;
 $57 = HEAP32[(47104)>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[(47104)>>2] = $58;
 $59 = (44992 + ($57)|0);
 HEAP8[$59>>0] = -43;
 HEAP32[(46080)>>2] = 53848;
 HEAP16[(46554)>>1] = -1;
 HEAP8[(46791)>>0] = 3;
 $60 = HEAP32[(47104)>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[(47104)>>2] = $61;
 $62 = (44992 + ($60)|0);
 HEAP8[$62>>0] = 67;
 HEAP32[(45496)>>2] = 53896;
 HEAP16[(46262)>>1] = -1;
 HEAP8[(46645)>>0] = 0;
 $63 = HEAP32[(47104)>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[(47104)>>2] = $64;
 $65 = (44992 + ($63)|0);
 HEAP8[$65>>0] = 115;
 HEAP32[(45688)>>2] = 53936;
 HEAP16[(46358)>>1] = -1;
 HEAP8[(46693)>>0] = 2;
 $66 = HEAP32[(47104)>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[(47104)>>2] = $67;
 $68 = (44992 + ($66)|0);
 HEAP8[$68>>0] = 118;
 HEAP32[(45700)>>2] = 53992;
 HEAP16[(46364)>>1] = -1;
 HEAP8[(46696)>>0] = 2;
 $69 = HEAP32[(47104)>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[(47104)>>2] = $70;
 $71 = (44992 + ($69)|0);
 HEAP8[$71>>0] = 116;
 HEAP32[(45692)>>2] = 54032;
 HEAP16[(46360)>>1] = -1;
 HEAP8[(46694)>>0] = 2;
 $72 = HEAP32[(47104)>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[(47104)>>2] = $73;
 $74 = (44992 + ($72)|0);
 HEAP8[$74>>0] = 117;
 HEAP32[(45696)>>2] = 54080;
 HEAP16[(46362)>>1] = -1;
 HEAP8[(46695)>>0] = 2;
 return;
}
function _qh_allstatI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(47104)>>2]|0;
 HEAP32[(47112)>>2] = $0;
 $1 = HEAP32[(47104)>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[(47104)>>2] = $2;
 $3 = (44992 + ($1)|0);
 HEAP8[$3>>0] = 68;
 HEAP32[(45500)>>2] = 54120;
 HEAP16[(46264)>>1] = -1;
 HEAP8[(46646)>>0] = 0;
 $4 = HEAP32[(47104)>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[(47104)>>2] = $5;
 $6 = (44992 + ($4)|0);
 HEAP8[$6>>0] = -76;
 HEAP32[(45948)>>2] = 54152;
 HEAP16[(46488)>>1] = -1;
 HEAP8[(46758)>>0] = 1;
 $7 = HEAP32[(47104)>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[(47104)>>2] = $8;
 $9 = (44992 + ($7)|0);
 HEAP8[$9>>0] = -75;
 HEAP32[(45952)>>2] = 54200;
 HEAP16[(46490)>>1] = 180;
 HEAP8[(46759)>>0] = 6;
 $10 = HEAP32[(47104)>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[(47104)>>2] = $11;
 $12 = (44992 + ($10)|0);
 HEAP8[$12>>0] = -74;
 HEAP32[(45956)>>2] = 54232;
 HEAP16[(46492)>>1] = -1;
 HEAP8[(46760)>>0] = 7;
 $13 = HEAP32[(47104)>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[(47104)>>2] = $14;
 $15 = (44992 + ($13)|0);
 HEAP8[$15>>0] = -70;
 HEAP32[(45972)>>2] = 54264;
 HEAP16[(46500)>>1] = -1;
 HEAP8[(46764)>>0] = 1;
 $16 = HEAP32[(47104)>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[(47104)>>2] = $17;
 $18 = (44992 + ($16)|0);
 HEAP8[$18>>0] = -69;
 HEAP32[(45976)>>2] = 54280;
 HEAP16[(46502)>>1] = 186;
 HEAP8[(46765)>>0] = 6;
 $19 = HEAP32[(47104)>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[(47104)>>2] = $20;
 $21 = (44992 + ($19)|0);
 HEAP8[$21>>0] = -68;
 HEAP32[(45980)>>2] = 54320;
 HEAP16[(46504)>>1] = -1;
 HEAP8[(46766)>>0] = 7;
 $22 = HEAP32[(47104)>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[(47104)>>2] = $23;
 $24 = (44992 + ($22)|0);
 HEAP8[$24>>0] = -67;
 HEAP32[(45984)>>2] = 54360;
 HEAP16[(46506)>>1] = -1;
 HEAP8[(46767)>>0] = 1;
 $25 = HEAP32[(47104)>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[(47104)>>2] = $26;
 $27 = (44992 + ($25)|0);
 HEAP8[$27>>0] = -66;
 HEAP32[(45988)>>2] = 54392;
 HEAP16[(46508)>>1] = 189;
 HEAP8[(46768)>>0] = 6;
 $28 = HEAP32[(47104)>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[(47104)>>2] = $29;
 $30 = (44992 + ($28)|0);
 HEAP8[$30>>0] = -65;
 HEAP32[(45992)>>2] = 54416;
 HEAP16[(46510)>>1] = -1;
 HEAP8[(46769)>>0] = 7;
 $31 = HEAP32[(47104)>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[(47104)>>2] = $32;
 $33 = (44992 + ($31)|0);
 HEAP8[$33>>0] = -73;
 HEAP32[(45960)>>2] = 54440;
 HEAP16[(46494)>>1] = -1;
 HEAP8[(46761)>>0] = 1;
 $34 = HEAP32[(47104)>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[(47104)>>2] = $35;
 $36 = (44992 + ($34)|0);
 HEAP8[$36>>0] = -72;
 HEAP32[(45964)>>2] = 54392;
 HEAP16[(46496)>>1] = 183;
 HEAP8[(46762)>>0] = 6;
 $37 = HEAP32[(47104)>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[(47104)>>2] = $38;
 $39 = (44992 + ($37)|0);
 HEAP8[$39>>0] = -71;
 HEAP32[(45968)>>2] = 54416;
 HEAP16[(46498)>>1] = -1;
 HEAP8[(46763)>>0] = 7;
 $40 = HEAP32[(47104)>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[(47104)>>2] = $41;
 $42 = (44992 + ($40)|0);
 HEAP8[$42>>0] = 69;
 HEAP32[(45504)>>2] = 54480;
 HEAP16[(46266)>>1] = -1;
 HEAP8[(46647)>>0] = 0;
 $43 = HEAP32[(47104)>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[(47104)>>2] = $44;
 $45 = (44992 + ($43)|0);
 HEAP8[$45>>0] = -53;
 HEAP32[(46040)>>2] = 54512;
 HEAP16[(46534)>>1] = -1;
 HEAP8[(46781)>>0] = 1;
 $46 = HEAP32[(47104)>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[(47104)>>2] = $47;
 $48 = (44992 + ($46)|0);
 HEAP8[$48>>0] = -51;
 HEAP32[(46048)>>2] = 54552;
 HEAP16[(46538)>>1] = 203;
 HEAP8[(46783)>>0] = 2;
 $49 = HEAP32[(47104)>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[(47104)>>2] = $50;
 $51 = (44992 + ($49)|0);
 HEAP8[$51>>0] = -52;
 HEAP32[(46044)>>2] = 54600;
 HEAP16[(46536)>>1] = -1;
 HEAP8[(46782)>>0] = 3;
 $52 = HEAP32[(47104)>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[(47104)>>2] = $53;
 $54 = (44992 + ($52)|0);
 HEAP8[$54>>0] = -48;
 HEAP32[(46060)>>2] = 54632;
 HEAP16[(46544)>>1] = -1;
 HEAP8[(46786)>>0] = 1;
 $55 = HEAP32[(47104)>>2]|0;
 $56 = (($55) + 1)|0;
 HEAP32[(47104)>>2] = $56;
 $57 = (44992 + ($55)|0);
 HEAP8[$57>>0] = -49;
 HEAP32[(46056)>>2] = 54680;
 HEAP16[(46542)>>1] = -1;
 HEAP8[(46785)>>0] = 1;
 $58 = HEAP32[(47104)>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[(47104)>>2] = $59;
 $60 = (44992 + ($58)|0);
 HEAP8[$60>>0] = -50;
 HEAP32[(46052)>>2] = 54736;
 HEAP16[(46540)>>1] = -1;
 HEAP8[(46784)>>0] = 1;
 return;
}
function _qh_allstatistics() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = 224;
 while(1) {
  $0 = (46803 + ($1)|0);
  HEAP8[$0>>0] = 0;
  $2 = (($1) + -1)|0;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $1 = $2;
  }
 }
 return;
}
function _qh_collectstatistics() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $dist = 0, $facet$0 = 0, $facet$025 = 0, $facet$026 = 0, $facet$1 = 0, $facet$121 = 0, $facet$122 = 0, $facet$2 = 0, $facet$218$pr = 0, $facet$219 = 0, $magicptr = 0, $magicptr$off = 0, $or$cond3 = 0, $or$cond7 = 0, $switch = 0, $vertex$0 = 0, $vertex$014 = 0, $vertex$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dist = sp;
 $0 = HEAP32[(5656)>>2]|0;
 HEAP32[(7788)>>2] = $0;
 HEAP32[(5656)>>2] = 0;
 $1 = HEAP32[(5836)>>2]|0;
 $2 = HEAP32[(7488)>>2]|0;
 $3 = Math_imul($2, $1)|0;
 $4 = (($3) + 6552)|0;
 HEAP32[(44120)>>2] = $4;
 HEAP32[(44112)>>2] = 0;
 HEAP32[(44128)>>2] = 0;
 HEAP32[(44136)>>2] = 0;
 HEAP32[(43216)>>2] = 0;
 HEAPF64[(43224)>>3] = 0.0;
 HEAP32[(44424)>>2] = 0;
 HEAP32[(44392)>>2] = 0;
 HEAP32[(44416)>>2] = 0;
 HEAP32[(44432)>>2] = 0;
 HEAP32[(44448)>>2] = 0;
 HEAP32[(44408)>>2] = 0;
 HEAP32[(44400)>>2] = 0;
 $5 = HEAP32[(7556)>>2]|0;
 $6 = HEAP32[(7752)>>2]|0;
 $7 = (_qh_setsize($6)|0);
 $8 = (($5) - ($7))|0;
 HEAP32[(44904)>>2] = $8;
 $9 = HEAP32[(5392)>>2]|0;
 $10 = HEAP32[(5240)>>2]|0;
 $11 = $10 | $9;
 $12 = ($11|0)!=(0);
 $13 = +HEAPF64[(7616)>>3];
 $14 = $13 < 8.9884656743115785E+307;
 $or$cond3 = $12 | $14;
 if ($or$cond3) {
  $15 = +HEAPF64[(44072)>>3];
  $16 = +HEAPF64[(7632)>>3];
  $17 = $15 < $16;
  if ($17) {
   HEAPF64[(44072)>>3] = $16;
  }
 }
 $18 = HEAP32[(5392)>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = +HEAPF64[(44248)>>3];
  $21 = +HEAPF64[(7648)>>3];
  $22 = $20 > $21;
  if ($22) {
   HEAPF64[(44248)>>3] = $21;
  }
 }
 $facet$025 = HEAP32[(7500)>>2]|0;
 $23 = ($facet$025|0)==(0|0);
 L9: do {
  if (!($23)) {
   $facet$026 = $facet$025;
   while(1) {
    $24 = ((($facet$026)) + 48|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     break L9;
    }
    $27 = ((($facet$026)) + 80|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $28 & -16385;
    HEAP32[$27>>2] = $29;
    $facet$0 = HEAP32[$24>>2]|0;
    $30 = ($facet$0|0)==(0|0);
    if ($30) {
     break;
    } else {
     $facet$026 = $facet$0;
    }
   }
  }
 } while(0);
 $31 = HEAP32[(5304)>>2]|0;
 $32 = ($31|0)==(0);
 L14: do {
  if ($32) {
   label = 12;
  } else {
   $facet$121 = HEAP32[(7500)>>2]|0;
   $33 = ($facet$121|0)==(0|0);
   if (!($33)) {
    $facet$122 = $facet$121;
    while(1) {
     $35 = ((($facet$122)) + 48|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==(0|0);
     if ($37) {
      label = 12;
      break L14;
     }
     $38 = ((($facet$122)) + 80|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = $39 >>> 17;
     $41 = $40 & 1;
     $42 = HEAP32[(5780)>>2]|0;
     $43 = ($41|0)==($42|0);
     if (!($43)) {
      $45 = $39 | 16384;
      HEAP32[$38>>2] = $45;
     }
     $facet$1 = HEAP32[$35>>2]|0;
     $44 = ($facet$1|0)==(0|0);
     if ($44) {
      label = 12;
      break;
     } else {
      $facet$122 = $facet$1;
     }
    }
   }
  }
 } while(0);
 L22: do {
  if ((label|0) == 12) {
   $facet$218$pr = HEAP32[(7500)>>2]|0;
   $34 = ($facet$218$pr|0)==(0|0);
   if (!($34)) {
    $facet$219 = $facet$218$pr;
    while(1) {
     $47 = ((($facet$219)) + 48|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      break L22;
     }
     $50 = ((($facet$219)) + 80|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $51 & 2048;
     $53 = ($52|0)!=(0);
     $54 = HEAP32[(7656)>>2]|0;
     $55 = ($54|0)!=(0);
     $or$cond7 = $53 & $55;
     do {
      if (!($or$cond7)) {
       $56 = ((($facet$219)) + 52|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (_qh_setsize($57)|0);
       $59 = ((($facet$219)) + 60|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (_qh_setsize($60)|0);
       $62 = ((($facet$219)) + 56|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (_qh_setsize($63)|0);
       $65 = HEAP32[(44392)>>2]|0;
       $66 = (($65) + 1)|0;
       HEAP32[(44392)>>2] = $66;
       $67 = HEAP32[(44432)>>2]|0;
       $68 = (($67) + ($58))|0;
       HEAP32[(44432)>>2] = $68;
       $69 = HEAP32[(44096)>>2]|0;
       $70 = ($69|0)<($58|0);
       if ($70) {
        HEAP32[(44096)>>2] = $58;
       }
       $71 = HEAP32[(44416)>>2]|0;
       $72 = (($71) + ($61))|0;
       HEAP32[(44416)>>2] = $72;
       $73 = HEAP32[(44056)>>2]|0;
       $74 = ($73|0)<($61|0);
       if ($74) {
        HEAP32[(44056)>>2] = $61;
       }
       $75 = HEAP32[$50>>2]|0;
       $76 = $75 & 511;
       $77 = HEAP32[(44408)>>2]|0;
       $78 = (($77) + ($76))|0;
       HEAP32[(44408)>>2] = $78;
       $79 = HEAP32[$50>>2]|0;
       $80 = $79 & 511;
       $81 = HEAP32[(44400)>>2]|0;
       $82 = ($81|0)<($80|0);
       if ($82) {
        HEAP32[(44400)>>2] = $80;
       }
       $83 = HEAP32[$50>>2]|0;
       $84 = $83 & 8192;
       $85 = ($84|0)==(0);
       do {
        if ($85) {
         $86 = HEAP32[(5828)>>2]|0;
         $87 = ($58|0)==($86|0);
         if ($87) {
          $88 = HEAP32[(44360)>>2]|0;
          $89 = (($88) + 1)|0;
          HEAP32[(44360)>>2] = $89;
          break;
         } else {
          $90 = HEAP32[(44352)>>2]|0;
          $91 = (($90) + 1)|0;
          HEAP32[(44352)>>2] = $91;
          break;
         }
        }
       } while(0);
       $92 = ($64|0)==(0);
       if (!($92)) {
        $93 = HEAP32[(44424)>>2]|0;
        $94 = (($93) + ($64))|0;
        HEAP32[(44424)>>2] = $94;
        $95 = HEAP32[(44080)>>2]|0;
        $96 = ($95|0)<($64|0);
        if ($96) {
         HEAP32[(44080)>>2] = $64;
        }
       }
       $97 = HEAP32[(7488)>>2]|0;
       $98 = (($61) + ($58))|0;
       $99 = $98 << 2;
       $100 = HEAP32[(44112)>>2]|0;
       $101 = (($99) + 104)|0;
       $102 = (($101) + ($97))|0;
       $103 = (($102) + ($100))|0;
       HEAP32[(44112)>>2] = $103;
       $104 = HEAP32[$62>>2]|0;
       $105 = ($104|0)==(0|0);
       if (!($105)) {
        $106 = $64 << 2;
        $107 = (($106) + 8)|0;
        $108 = HEAP32[(5828)>>2]|0;
        $109 = $108 << 2;
        $110 = (($109) + 20)|0;
        $111 = Math_imul($110, $64)|0;
        $112 = $111 >>> 1;
        $113 = HEAP32[(44128)>>2]|0;
        $114 = (($107) + ($113))|0;
        $115 = (($114) + ($112))|0;
        HEAP32[(44128)>>2] = $115;
       }
       $116 = ((($facet$219)) + 64|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($117|0)==(0|0);
       if (!($118)) {
        $119 = (_qh_setsize($117)|0);
        $120 = $119 << 2;
        $121 = (($120) + 8)|0;
        $122 = HEAP32[(44120)>>2]|0;
        $123 = (($121) + ($122))|0;
        HEAP32[(44120)>>2] = $123;
       }
       $124 = ((($facet$219)) + 68|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ($125|0)==(0|0);
       if (!($126)) {
        $127 = (_qh_setsize($125)|0);
        $128 = $127 << 2;
        $129 = (($128) + 8)|0;
        $130 = HEAP32[(44120)>>2]|0;
        $131 = (($129) + ($130))|0;
        HEAP32[(44120)>>2] = $131;
       }
       $132 = HEAP32[$50>>2]|0;
       $133 = $132 & 16384;
       $134 = ($133|0)==(0);
       if ($134) {
        $135 = $132 | 16384;
        HEAP32[$50>>2] = $135;
        $136 = HEAP32[$59>>2]|0;
        $137 = ($136|0)==(0|0);
        do {
         if (!($137)) {
          $138 = ((($136)) + 4|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = ($139|0)==(0|0);
          if ($140) {
           break;
          }
          $141 = ((($138)) + 4|0);
          $142 = ((($facet$219)) + 24|0);
          $143 = $139;$163 = $141;
          while(1) {
           $magicptr = $143;
           $magicptr$off = (($magicptr) + -1)|0;
           $switch = ($magicptr$off>>>0)<(2);
           do {
            if (!($switch)) {
             $144 = ((($143)) + 80|0);
             $145 = HEAP32[$144>>2]|0;
             $146 = $145 & 16384;
             $147 = ($146|0)==(0);
             if (!($147)) {
              break;
             }
             $148 = HEAP32[$142>>2]|0;
             $149 = ($148|0)==(0|0);
             if ($149) {
              break;
             }
             $150 = ((($143)) + 24|0);
             $151 = HEAP32[$150>>2]|0;
             $152 = ($151|0)==(0|0);
             if ($152) {
              break;
             }
             $153 = (+_qh_getangle($148,$151));
             $154 = HEAP32[(43216)>>2]|0;
             $155 = (($154) + 1)|0;
             HEAP32[(43216)>>2] = $155;
             $156 = +HEAPF64[(43224)>>3];
             $157 = $153 + $156;
             HEAPF64[(43224)>>3] = $157;
             $158 = +HEAPF64[(43232)>>3];
             $159 = $158 < $153;
             if ($159) {
              HEAPF64[(43232)>>3] = $153;
             }
             $160 = +HEAPF64[(43240)>>3];
             $161 = $160 > $153;
             if (!($161)) {
              break;
             }
             HEAPF64[(43240)>>3] = $153;
            }
           } while(0);
           $162 = ((($163)) + 4|0);
           $164 = HEAP32[$163>>2]|0;
           $165 = ($164|0)==(0|0);
           if ($165) {
            break;
           } else {
            $143 = $164;$163 = $162;
           }
          }
         }
        } while(0);
        $166 = ((($facet$219)) + 24|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = ($167|0)==(0|0);
        if ($168) {
         break;
        }
        $169 = HEAP32[$56>>2]|0;
        $170 = ($169|0)==(0|0);
        if ($170) {
         break;
        }
        $172 = ((($169)) + 4|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         break;
        }
        $175 = ((($172)) + 4|0);
        $179 = $173;$188 = $175;
        while(1) {
         $176 = HEAP32[(43632)>>2]|0;
         $177 = (($176) + 1)|0;
         HEAP32[(43632)>>2] = $177;
         $178 = ((($179)) + 8|0);
         $180 = HEAP32[$178>>2]|0;
         _qh_distplane($180,$facet$219,$dist);
         $181 = +HEAPF64[(44864)>>3];
         $182 = +HEAPF64[$dist>>3];
         $183 = $181 < $182;
         if ($183) {
          HEAPF64[(44864)>>3] = $182;
         }
         $184 = +HEAPF64[(44872)>>3];
         $185 = +HEAPF64[$dist>>3];
         $186 = $184 > $185;
         if ($186) {
          HEAPF64[(44872)>>3] = $185;
         }
         $187 = ((($188)) + 4|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = ($189|0)==(0|0);
         if ($190) {
          break;
         } else {
          $179 = $189;$188 = $187;
         }
        }
       }
      }
     } while(0);
     $facet$2 = HEAP32[$47>>2]|0;
     $171 = ($facet$2|0)==(0|0);
     if ($171) {
      break;
     } else {
      $facet$219 = $facet$2;
     }
    }
   }
  }
 } while(0);
 $vertex$014 = HEAP32[(7540)>>2]|0;
 $46 = ($vertex$014|0)==(0|0);
 if ($46) {
  $219 = HEAP32[(7788)>>2]|0;
  HEAP32[(5656)>>2] = $219;
  STACKTOP = sp;return;
 } else {
  $vertex$015 = $vertex$014;
 }
 while(1) {
  $191 = HEAP32[$vertex$015>>2]|0;
  $192 = ($191|0)==(0|0);
  if ($192) {
   label = 69;
   break;
  }
  $193 = ((($vertex$015)) + 16|0);
  $194 = $193;
  $195 = $194;
  $196 = HEAP32[$195>>2]|0;
  $197 = (($194) + 4)|0;
  $198 = $197;
  $199 = HEAP32[$198>>2]|0;
  $200 = $199 & 1073741824;
  $201 = (0)==(0);
  $202 = ($200|0)==(0);
  $203 = $201 & $202;
  if ($203) {
   $204 = HEAP32[(44136)>>2]|0;
   $205 = (($204) + 24)|0;
   HEAP32[(44136)>>2] = $205;
   $206 = ((($vertex$015)) + 12|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($207|0)==(0|0);
   if (!($208)) {
    $210 = (_qh_setsize($207)|0);
    $211 = HEAP32[(44448)>>2]|0;
    $212 = (($211) + ($210))|0;
    HEAP32[(44448)>>2] = $212;
    $213 = HEAP32[(44104)>>2]|0;
    $214 = ($213|0)<($210|0);
    if ($214) {
     HEAP32[(44104)>>2] = $210;
    }
    $215 = $210 << 2;
    $216 = (($215) + 24)|0;
    $217 = HEAP32[(44136)>>2]|0;
    $218 = (($216) + ($217))|0;
    HEAP32[(44136)>>2] = $218;
   }
  }
  $vertex$0 = HEAP32[$vertex$015>>2]|0;
  $209 = ($vertex$0|0)==(0|0);
  if ($209) {
   label = 69;
   break;
  } else {
   $vertex$015 = $vertex$0;
  }
 }
 if ((label|0) == 69) {
  $219 = HEAP32[(7788)>>2]|0;
  HEAP32[(5656)>>2] = $219;
  STACKTOP = sp;return;
 }
}
function _qh_initstatistics() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $exitcond = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[(47104)>>2] = 0;
 _qh_allstatA();
 _qh_allstatB();
 _qh_allstatC();
 _qh_allstatD();
 _qh_allstatE();
 _qh_allstatE2();
 _qh_allstatF();
 _qh_allstatG();
 _qh_allstatH();
 _qh_allstatI();
 $0 = HEAP32[(47104)>>2]|0;
 $1 = ($0|0)>(235);
 if ($1) {
  $2 = HEAP32[(21228)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 235;
  _qh_fprintf($2,6184,54784,$vararg_buffer);
  _qh_exit(5);
  // unreachable;
 }
 HEAP32[(47040)>>2] = 0;
 HEAP32[(47048)>>2] = 0;
 HEAP32[(47064)>>2] = 2147483647;
 HEAP32[(47056)>>2] = -2147483648;
 HEAPF64[(47080)>>3] = 0.0;
 HEAPF64[(47096)>>3] = 1.7976931348623157E+308;
 HEAPF64[(47088)>>3] = -1.7976931348623157E+308;
 $i$01 = 0;
 while(1) {
  $3 = (46578 + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)>(5);
  if ($5) {
   $6 = $4&255;
   $7 = (47032 + ($6<<3)|0);
   $8 = +HEAPF64[$7>>3];
   $9 = (43192 + ($i$01<<3)|0);
   HEAPF64[$9>>3] = $8;
  } else {
   $10 = ($4<<24>>24)==(0);
   if (!($10)) {
    $11 = $4&255;
    $12 = (47032 + ($11<<3)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (43192 + ($i$01<<3)|0);
    HEAP32[$14>>2] = $13;
   }
  }
  $15 = (($i$01) + 1)|0;
  $exitcond = ($15|0)==(225);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;
  }
 }
 STACKTOP = sp;return;
}
function _qh_newstats($idx,$nextindex) {
 $idx = $idx|0;
 $nextindex = $nextindex|0;
 var $$isnew$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$02 = 0, $isnew$0$lcssa = 0, $isnew$01 = 0, $isnew$1 = 0, $start$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (44992 + ($idx)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (46578 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 $6 = $5&1;
 $start$0 = (($6) + ($idx))|0;
 $7 = HEAP32[(47104)>>2]|0;
 $8 = ($start$0|0)<($7|0);
 if (!($8)) {
  $i$0$lcssa = $start$0;$isnew$0$lcssa = 0;
  HEAP32[$nextindex>>2] = $i$0$lcssa;
  return ($isnew$0$lcssa|0);
 }
 $9 = HEAP32[(47104)>>2]|0;
 $i$02 = $start$0;$isnew$01 = 0;
 while(1) {
  $10 = (44992 + ($i$02)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (46578 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $i$0$lcssa = $i$02;$isnew$0$lcssa = $isnew$01;
   label = 7;
   break;
  }
  $16 = (_qh_nostatistic($12)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = (46803 + ($12)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   $$isnew$0 = $20 ? 1 : $isnew$01;
   $isnew$1 = $$isnew$0;
  } else {
   $isnew$1 = $isnew$01;
  }
  $21 = (($i$02) + 1)|0;
  $22 = ($21|0)<($9|0);
  if ($22) {
   $i$02 = $21;$isnew$01 = $isnew$1;
  } else {
   $i$0$lcssa = $21;$isnew$0$lcssa = $isnew$1;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$nextindex>>2] = $i$0$lcssa;
  return ($isnew$0$lcssa|0);
 }
 return (0)|0;
}
function _qh_nostatistic($i) {
 $i = $i|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (46578 + ($i)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)>(5);
 do {
  if ($2) {
   $3 = (43192 + ($i<<3)|0);
   $4 = +HEAPF64[$3>>3];
   $5 = $1&255;
   $6 = (47032 + ($5<<3)|0);
   $7 = +HEAPF64[$6>>3];
   $8 = $4 == $7;
   if ($8) {
    $$0 = 1;
    return ($$0|0);
   } else {
    $$pr = HEAP8[$0>>0]|0;
    $9 = $$pr;
    break;
   }
  } else {
   $9 = $1;
  }
 } while(0);
 $10 = ($9<<24>>24)<(5);
 if ($10) {
  $11 = (43192 + ($i<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $9&255;
  $14 = (47032 + ($13<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)==($15|0);
  if ($16) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _qh_printstatistics($fp,$string) {
 $fp = $fp|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $ave = 0, $i = 0, $k$01 = 0, $storemerge = 0.0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 160|0;
 $vararg_buffer34 = sp + 152|0;
 $vararg_buffer29 = sp + 128|0;
 $vararg_buffer26 = sp + 120|0;
 $vararg_buffer23 = sp + 112|0;
 $vararg_buffer20 = sp + 96|0;
 $vararg_buffer17 = sp + 88|0;
 $vararg_buffer14 = sp + 80|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $i = sp + 164|0;
 $ave = sp + 104|0;
 $0 = HEAP32[(5836)>>2]|0;
 $1 = HEAP32[(7556)>>2]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  $3 = HEAP32[(44528)>>2]|0;
  $4 = +HEAPF64[(44536)>>3];
  $5 = +HEAPF64[(44544)>>3];
  $6 = (+_qh_stddev($3,$4,$5,$ave));
  $storemerge = $6;
 } else {
  HEAPF64[(44536)>>3] = 0.0;
  $storemerge = 0.0;
 }
 HEAPF64[(44544)>>3] = $storemerge;
 $7 = HEAP32[(44568)>>2]|0;
 $8 = +HEAPF64[(44288)>>3];
 $9 = +HEAPF64[(44296)>>3];
 $10 = (+_qh_stddev($7,$8,$9,$ave));
 HEAPF64[(44296)>>3] = $10;
 $11 = HEAP32[5224>>2]|0;
 HEAP32[$vararg_buffer>>2] = $string;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = (6116);
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = (5856);
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $11;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = (6372);
 _qh_fprintf($fp,9350,54904,$vararg_buffer);
 $12 = +HEAPF64[(6960)>>3];
 $13 = +HEAPF64[(6952)>>3];
 $14 = +HEAPF64[(6928)>>3];
 $15 = +HEAPF64[(5248)>>3];
 $16 = +HEAPF64[(5424)>>3];
 $17 = +HEAPF64[(5376)>>3];
 $18 = +HEAPF64[(7064)>>3];
 HEAPF64[$vararg_buffer5>>3] = $12;
 $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
 HEAPF64[$vararg_ptr8>>3] = $13;
 $vararg_ptr9 = ((($vararg_buffer5)) + 16|0);
 HEAPF64[$vararg_ptr9>>3] = $14;
 $vararg_ptr10 = ((($vararg_buffer5)) + 24|0);
 HEAPF64[$vararg_ptr10>>3] = $15;
 $vararg_ptr11 = ((($vararg_buffer5)) + 32|0);
 HEAPF64[$vararg_ptr11>>3] = $16;
 $vararg_ptr12 = ((($vararg_buffer5)) + 40|0);
 HEAPF64[$vararg_ptr12>>3] = $17;
 $vararg_ptr13 = ((($vararg_buffer5)) + 48|0);
 HEAPF64[$vararg_ptr13>>3] = $18;
 _qh_fprintf($fp,9351,54960,$vararg_buffer5);
 $19 = HEAP32[(5824)>>2]|0;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = +HEAPF64[(7040)>>3];
  HEAPF64[$vararg_buffer14>>3] = $21;
  _qh_fprintf($fp,9352,55360,$vararg_buffer14);
 }
 $22 = +HEAPF64[(5288)>>3];
 $23 = $22 < 8.9884656743115785E+307;
 if ($23) {
  HEAPF64[$vararg_buffer17>>3] = $22;
  _qh_fprintf($fp,9353,55408,$vararg_buffer17);
 }
 $24 = HEAP32[(5460)>>2]|0;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = +HEAPF64[(5400)>>3];
  HEAPF64[$vararg_buffer20>>3] = $26;
  _qh_fprintf($fp,9354,55448,$vararg_buffer20);
 }
 $27 = +HEAPF64[(5296)>>3];
 $28 = $27 < 8.9884656743115785E+307;
 if ($28) {
  HEAPF64[$vararg_buffer23>>3] = $27;
  _qh_fprintf($fp,9355,55488,$vararg_buffer23);
 }
 $29 = HEAP32[(5456)>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = +HEAPF64[(5408)>>3];
  HEAPF64[$vararg_buffer26>>3] = $31;
  _qh_fprintf($fp,9356,55536,$vararg_buffer26);
 }
 $32 = +HEAPF64[(7048)>>3];
 $33 = +HEAPF64[(7000)>>3];
 HEAPF64[$vararg_buffer29>>3] = $32;
 $vararg_ptr32 = ((($vararg_buffer29)) + 8|0);
 HEAPF64[$vararg_ptr32>>3] = 2.2204460492503131E-16;
 $vararg_ptr33 = ((($vararg_buffer29)) + 16|0);
 HEAPF64[$vararg_ptr33>>3] = $33;
 _qh_fprintf($fp,9357,55576,$vararg_buffer29);
 $34 = HEAP32[(5828)>>2]|0;
 $35 = ($34|0)>(0);
 if ($35) {
  $k$01 = 0;
  while(1) {
   $36 = HEAP32[(7036)>>2]|0;
   $37 = (($36) + ($k$01<<3)|0);
   $38 = +HEAPF64[$37>>3];
   HEAPF64[$vararg_buffer34>>3] = $38;
   _qh_fprintf($fp,9358,55752,$vararg_buffer34);
   $39 = (($k$01) + 1)|0;
   $40 = HEAP32[(5828)>>2]|0;
   $41 = ($39|0)<($40|0);
   if ($41) {
    $k$01 = $39;
   } else {
    break;
   }
  }
 }
 _qh_fprintf($fp,9359,55760,$vararg_buffer37);
 HEAP32[$i>>2] = 0;
 $42 = HEAP32[(47104)>>2]|0;
 $43 = ($42|0)>(0);
 if ($43) {
  $44 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  _qh_printstats($fp,$44,$i);
  $45 = HEAP32[$i>>2]|0;
  $46 = HEAP32[(47104)>>2]|0;
  $47 = ($45|0)<($46|0);
  if ($47) {
   $44 = $45;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _qh_stddev($num,$tot,$tot2,$ave) {
 $num = $num|0;
 $tot = +$tot;
 $tot2 = +$tot2;
 $ave = $ave|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($num|0));
 $1 = $tot / $0;
 HEAPF64[$ave>>3] = $1;
 $2 = $tot2 / $0;
 $3 = $1 * $1;
 $4 = $2 - $3;
 $5 = (+Math_sqrt((+$4)));
 return (+$5);
}
function _qh_printstats($fp,$idx,$nextindex) {
 $fp = $fp|0;
 $idx = $idx|0;
 $nextindex = $nextindex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$01 = 0, $nexti = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $nexti = sp + 4|0;
 $0 = (_qh_newstats($idx,$nexti)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _qh_fprintf($fp,9367,56128,$vararg_buffer);
  $2 = HEAP32[$nexti>>2]|0;
  $3 = ($2|0)>($idx|0);
  if ($3) {
   $4 = HEAP32[$nexti>>2]|0;
   $j$01 = $idx;
   while(1) {
    $5 = (44992 + ($j$01)|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = $6&255;
    _qh_printstatlevel($fp,$7,0);
    $8 = (($j$01) + 1)|0;
    $9 = ($8|0)<($4|0);
    if ($9) {
     $j$01 = $8;
    } else {
     break;
    }
   }
  }
 }
 $10 = ($nextindex|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$nexti>>2]|0;
 HEAP32[$nextindex>>2] = $11;
 STACKTOP = sp;return;
}
function _qh_printstatlevel($fp,$id,$start) {
 $fp = $fp|0;
 $id = $id|0;
 $start = $start|0;
 var $$pr = 0, $$pr1$pr = 0, $$pr3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 40|0;
 $0 = ($id|0)>(224);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (46803 + ($id)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (46578 + ($id)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = (45228 + ($id<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = $8;
  _qh_fprintf($fp,9360,55768,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $9 = (_qh_nostatistic($id)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (45228 + ($id<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 HEAP8[$1>>0] = 1;
 $14 = (46128 + ($id<<1)|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(-1);
 if ($16) {
  label = 10;
 } else {
  $17 = $15&65535;
  $18 = $17 & 255;
  $19 = (43192 + ($18<<3)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   _qh_fprintf($fp,9361,55776,$vararg_buffer1);
  } else {
   label = 10;
  }
 }
 L20: do {
  if ((label|0) == 10) {
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)>(4);
   do {
    if ($23) {
     $24 = HEAP16[$14>>1]|0;
     $25 = ($24<<16>>16)==(-1);
     if ($25) {
      $26 = (43192 + ($id<<3)|0);
      $27 = +HEAPF64[$26>>3];
      HEAPF64[$vararg_buffer3>>3] = $27;
      _qh_fprintf($fp,9362,55792,$vararg_buffer3);
      break L20;
     }
     $$pr = HEAP8[$4>>0]|0;
     $28 = ($$pr<<24>>24)>(4);
     if ($28) {
      $29 = HEAP16[$14>>1]|0;
      $30 = ($29<<16>>16)==(-1);
      if ($30) {
       $$pr1$pr = HEAP8[$4>>0]|0;
       $39 = ($$pr1$pr<<24>>24)<(5);
       if ($39) {
        break;
       } else {
        break L20;
       }
      } else {
       $31 = (43192 + ($id<<3)|0);
       $32 = +HEAPF64[$31>>3];
       $33 = $29&65535;
       $34 = $33 & 255;
       $35 = (43192 + ($34<<3)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (+($36|0));
       $38 = $32 / $37;
       HEAPF64[$vararg_buffer6>>3] = $38;
       _qh_fprintf($fp,9363,55792,$vararg_buffer6);
       break L20;
      }
     }
    }
   } while(0);
   $40 = HEAP16[$14>>1]|0;
   $41 = ($40<<16>>16)==(-1);
   if ($41) {
    $42 = (43192 + ($id<<3)|0);
    $43 = HEAP32[$42>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $43;
    _qh_fprintf($fp,9364,55800,$vararg_buffer9);
    break;
   }
   $$pr3 = HEAP8[$4>>0]|0;
   $44 = ($$pr3<<24>>24)<(5);
   if ($44) {
    $45 = HEAP16[$14>>1]|0;
    $46 = ($45<<16>>16)==(-1);
    if (!($46)) {
     $47 = (43192 + ($id<<3)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (+($48|0));
     $50 = $45&65535;
     $51 = $50 & 255;
     $52 = (43192 + ($51<<3)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (+($53|0));
     $55 = $49 / $54;
     HEAPF64[$vararg_buffer12>>3] = $55;
     _qh_fprintf($fp,9365,55808,$vararg_buffer12);
    }
   }
  }
 } while(0);
 $56 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer15>>2] = $56;
 _qh_fprintf($fp,9366,55816,$vararg_buffer15);
 STACKTOP = sp;return;
}
function _qh_errexit($exitcode,$facet,$ridge) {
 $exitcode = $exitcode|0;
 $facet = $facet|0;
 $ridge = $ridge|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 24|0;
 $0 = HEAP32[(7780)>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($2,8126,55824,$vararg_buffer);
  _qh_exit(5);
  // unreachable;
 }
 HEAP32[(7780)>>2] = 1;
 $3 = HEAP32[(7700)>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_clock()|0);
  $6 = HEAP32[(7580)>>2]|0;
  $7 = (($5) - ($6))|0;
  HEAP32[(7580)>>2] = $7;
 }
 _qh_errprint(55888,$facet,0,$ridge,0);
 $8 = HEAP32[(7480)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = (6116);
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = (5856);
 _qh_fprintf($8,8127,55904,$vararg_buffer1);
 $9 = HEAP32[(7480)>>2]|0;
 $10 = HEAP32[5224>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $10;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = (6372);
 _qh_fprintf($9,8128,55936,$vararg_buffer4);
 $11 = HEAP32[(7596)>>2]|0;
 $12 = ($11|0)>(-1);
 if ($12) {
  $13 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $11;
  _qh_fprintf($13,8129,55976,$vararg_buffer8);
  $14 = HEAP32[(44768)>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = HEAP32[(7480)>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $14;
   _qh_fprintf($16,8130,56016,$vararg_buffer11);
  }
  $17 = HEAP32[(7700)>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $20 = HEAP32[(7688)>>2]|0;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $22 = HEAP32[(7480)>>2]|0;
    _qh_fprintf($22,8132,56088,$vararg_buffer16);
   }
  } else {
   $19 = HEAP32[(7480)>>2]|0;
   _qh_fprintf($19,8131,56040,$vararg_buffer14);
  }
  $23 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($23,8133,56128,$vararg_buffer18);
 }
 $24 = HEAP32[(5316)>>2]|0;
 $25 = ($24|0)==(0);
 do {
  if ($25) {
   label = 17;
  } else {
   $26 = HEAP32[(7700)>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = ($facet|0)!=(0|0);
    $29 = ($ridge|0)!=(0|0);
    $or$cond = $28 | $29;
    if ($or$cond) {
     label = 17;
     break;
    }
   }
   _qh_produce_output();
   label = 23;
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   if ((($exitcode|0) == 1)) {
    $$0 = 1;
    break;
   } else if (!((($exitcode|0) == 2))) {
    $30 = HEAP32[(44736)>>2]|0;
    $31 = HEAP32[(5828)>>2]|0;
    $32 = (($31) + 1)|0;
    $33 = ($30|0)>($32|0);
    if ($33) {
     $34 = HEAP32[(7480)>>2]|0;
     _qh_fprintf($34,8134,56136,$vararg_buffer20);
     $35 = HEAP32[(7480)>>2]|0;
     _qh_printsummary($35);
     $36 = HEAP32[(5632)>>2]|0;
     $37 = ($36|0)==(0);
     if (!($37)) {
      _qh_collectstatistics();
      $38 = HEAP32[(7480)>>2]|0;
      _qh_printstatistics($38,56160);
      $39 = HEAP32[(7480)>>2]|0;
      _qh_memstatistics($39);
     }
    }
   }
   $40 = HEAP32[(5504)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    label = 23;
   } else {
    $42 = HEAP32[(7480)>>2]|0;
    $43 = HEAP32[(47108)>>2]|0;
    _qh_printstats($42,$43,0);
    label = 23;
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   if ((($exitcode|0) == 2)) {
    $44 = HEAP32[(7480)>>2]|0;
    _qh_printhelp_singular($44);
    $$0 = 2;
    break;
   } else if ((($exitcode|0) == 0)) {
    $$0 = 5;
    break;
   }
   $45 = ($exitcode|0)!=(3);
   $46 = HEAP32[(5460)>>2]|0;
   $47 = ($46|0)!=(0);
   $or$cond3 = $45 | $47;
   if ($or$cond3) {
    $$0 = $exitcode;
   } else {
    $48 = HEAP32[(7480)>>2]|0;
    _qh_printhelp_degenerate($48);
    $$0 = $exitcode;
   }
  }
 } while(0);
 $49 = HEAP32[(7668)>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  HEAP32[(7780)>>2] = 0;
  HEAP32[(7668)>>2] = 1;
  _longjmp(((7080)|0),($$0|0));
  // unreachable;
 } else {
  $51 = HEAP32[(7480)>>2]|0;
  _qh_fprintf($51,6187,56176,$vararg_buffer22);
  _qh_exit(5);
  // unreachable;
 }
}
function _qh_errprint($string,$atfacet,$otherfacet,$atridge,$atvertex) {
 $string = $string|0;
 $atfacet = $atfacet|0;
 $otherfacet = $otherfacet|0;
 $atridge = $atridge|0;
 $atvertex = $atvertex|0;
 var $$0 = 0, $$08 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$013 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = ($atfacet|0)!=(0|0);
 if ($0) {
  $1 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer>>2] = $string;
  _qh_fprintf($1,8135,56232,$vararg_buffer);
  $2 = HEAP32[(7480)>>2]|0;
  _qh_printfacet($2,$atfacet);
 }
 $3 = ($otherfacet|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $string;
  _qh_fprintf($4,8136,56248,$vararg_buffer1);
  $5 = HEAP32[(7480)>>2]|0;
  _qh_printfacet($5,$otherfacet);
 }
 $6 = ($atridge|0)==(0|0);
 if ($6) {
  $$08 = $otherfacet;$$1 = $atfacet;
 } else {
  $7 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $string;
  _qh_fprintf($7,8137,56272,$vararg_buffer4);
  $8 = HEAP32[(7480)>>2]|0;
  _qh_printridge($8,$atridge);
  $9 = ((($atridge)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = ($10|0)==($atfacet|0);
  $or$cond9 = $11 | $12;
  $13 = ($10|0)==($otherfacet|0);
  $or$cond10 = $13 | $or$cond9;
  if (!($or$cond10)) {
   $14 = HEAP32[(7480)>>2]|0;
   _qh_printfacet($14,$10);
  }
  $15 = ((($atridge)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = ($16|0)==($atfacet|0);
  $or$cond11 = $17 | $18;
  $19 = ($16|0)==($otherfacet|0);
  $or$cond12 = $19 | $or$cond11;
  if (!($or$cond12)) {
   $20 = HEAP32[(7480)>>2]|0;
   _qh_printfacet($20,$16);
  }
  if ($0) {
   $$0 = $atfacet;
  } else {
   $21 = HEAP32[$9>>2]|0;
   $$0 = $21;
  }
  if ($3) {
   $$08 = $otherfacet;$$1 = $$0;
  } else {
   $22 = HEAP32[$9>>2]|0;
   $23 = ($22|0)==($$0|0);
   if ($23) {
    $24 = HEAP32[$15>>2]|0;
    $$08 = $24;$$1 = $$0;
   } else {
    $$08 = $22;$$1 = $$0;
   }
  }
 }
 $25 = ($atvertex|0)==(0|0);
 if (!($25)) {
  $26 = HEAP32[(7480)>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $string;
  _qh_fprintf($26,8138,56288,$vararg_buffer7);
  $27 = HEAP32[(7480)>>2]|0;
  _qh_printvertex($27,$atvertex);
 }
 $28 = HEAP32[(7476)>>2]|0;
 $29 = ($28|0)!=(0|0);
 $30 = HEAP32[(5316)>>2]|0;
 $31 = ($30|0)!=(0);
 $or$cond = $29 & $31;
 $32 = ($$1|0)!=(0|0);
 $or$cond3 = $32 & $or$cond;
 $or$cond3$not = $or$cond3 ^ 1;
 $33 = HEAP32[(7700)>>2]|0;
 $34 = HEAP32[(5344)>>2]|0;
 $35 = $34 | $33;
 $36 = ($35|0)!=(0);
 $37 = $36 | $or$cond3$not;
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = HEAP32[(7480)>>2]|0;
 _qh_fprintf($38,8139,56304,$vararg_buffer10);
 $i$013 = 0;
 while(1) {
  $39 = HEAP32[(7476)>>2]|0;
  $40 = (5508 + ($i$013<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  _qh_printneighborhood($39,$41,$$1,$$08,0);
  $42 = (($i$013) + 1)|0;
  $exitcond = ($42|0)==(29);
  if ($exitcond) {
   break;
  } else {
   $i$013 = $42;
  }
 }
 STACKTOP = sp;return;
}
function _qh_printhelp_singular($fp) {
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coord$03 = 0, $dist = 0, $facet$0 = 0, $facet$013 = 0, $facet$014 = 0, $i$04 = 0, $k$06 = 0, $max$0$lcssa = 0.0, $max$02 = 0.0, $max$1 = 0.0, $min$0$lcssa = 0.0;
 var $min$01 = 0.0, $min$1 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vertexp$010 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer28 = sp + 120|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dist = sp + 40|0;
 $0 = HEAP32[(5828)>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 _qh_fprintf($fp,9376,56352,$vararg_buffer);
 $1 = HEAP32[(7500)>>2]|0;
 _qh_printvertexlist($fp,56512,$1,0,1);
 $2 = +HEAPF64[(6952)>>3];
 HEAPF64[$vararg_buffer1>>3] = $2;
 _qh_fprintf($fp,9377,56520,$vararg_buffer1);
 $3 = HEAP32[(5828)>>2]|0;
 $4 = HEAP32[(7484)>>2]|0;
 _qh_printpointid($fp,56760,$3,$4,-1);
 _qh_fprintf($fp,9378,56128,$vararg_buffer4);
 $facet$013 = HEAP32[(7500)>>2]|0;
 $5 = ($facet$013|0)==(0|0);
 L1: do {
  if (!($5)) {
   $facet$014 = $facet$013;
   while(1) {
    $6 = ((($facet$014)) + 48|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     break L1;
    }
    _qh_fprintf($fp,9379,56776,$vararg_buffer6);
    $9 = ((($facet$014)) + 52|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if (!($11)) {
     $12 = ((($10)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0|0);
     if (!($14)) {
      $17 = $13;$vertexp$010 = $12;
      while(1) {
       $15 = ((($vertexp$010)) + 4|0);
       $16 = ((($17)) + 8|0);
       $18 = HEAP32[$16>>2]|0;
       $19 = (_qh_pointid($18)|0);
       HEAP32[$vararg_buffer8>>2] = $19;
       _qh_fprintf($fp,9380,56784,$vararg_buffer8);
       $20 = HEAP32[$15>>2]|0;
       $21 = ($20|0)==(0|0);
       if ($21) {
        break;
       } else {
        $17 = $20;$vertexp$010 = $15;
       }
      }
     }
    }
    $22 = HEAP32[(43616)>>2]|0;
    $23 = (($22) + 1)|0;
    HEAP32[(43616)>>2] = $23;
    $24 = HEAP32[(7484)>>2]|0;
    _qh_distplane($24,$facet$014,$dist);
    $25 = +HEAPF64[$dist>>3];
    HEAPF64[$vararg_buffer11>>3] = $25;
    _qh_fprintf($fp,9381,56792,$vararg_buffer11);
    $facet$0 = HEAP32[$6>>2]|0;
    $26 = ($facet$0|0)==(0|0);
    if ($26) {
     break;
    } else {
     $facet$014 = $facet$0;
    }
   }
  }
 } while(0);
 $27 = HEAP32[(5340)>>2]|0;
 $28 = ($27|0)==(0);
 if (!($28)) {
  _qh_fprintf($fp,9382,56816,$vararg_buffer14);
 }
 _qh_fprintf($fp,9383,56928,$vararg_buffer16);
 $29 = HEAP32[(5828)>>2]|0;
 $30 = ($29|0)>(7);
 if ($30) {
  _qh_fprintf($fp,9384,57120,$vararg_buffer18);
 }
 _qh_fprintf($fp,9385,57384,$vararg_buffer20);
 $31 = HEAP32[(5828)>>2]|0;
 $32 = ($31|0)>(0);
 if ($32) {
  $k$06 = 0;
 } else {
  $48 = +HEAPF64[(6952)>>3];
  HEAPF64[$vararg_buffer28>>3] = $48;
  _qh_fprintf($fp,9387,57480,$vararg_buffer28);
  _qh_fprintf($fp,9389,57968,$vararg_buffer31);
  STACKTOP = sp;return;
 }
 while(1) {
  $33 = HEAP32[(5836)>>2]|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $max$0$lcssa = -2.2250738585072014E-308;$min$0$lcssa = 1.7976931348623157E+308;
  } else {
   $35 = HEAP32[(5840)>>2]|0;
   $36 = (($35) + ($k$06<<3)|0);
   $37 = HEAP32[(5828)>>2]|0;
   $coord$03 = $36;$i$04 = $33;$max$02 = -2.2250738585072014E-308;$min$01 = 1.7976931348623157E+308;
   while(1) {
    $38 = (($i$04) + -1)|0;
    $39 = +HEAPF64[$coord$03>>3];
    $40 = $max$02 < $39;
    $max$1 = $40 ? $39 : $max$02;
    $41 = $min$01 > $39;
    $min$1 = $41 ? $39 : $min$01;
    $42 = (($coord$03) + ($37<<3)|0);
    $43 = ($38|0)==(0);
    if ($43) {
     $max$0$lcssa = $max$1;$min$0$lcssa = $min$1;
     break;
    } else {
     $coord$03 = $42;$i$04 = $38;$max$02 = $max$1;$min$01 = $min$1;
    }
   }
  }
  $44 = $max$0$lcssa - $min$0$lcssa;
  HEAP32[$vararg_buffer22>>2] = $k$06;
  $vararg_ptr25 = ((($vararg_buffer22)) + 8|0);
  HEAPF64[$vararg_ptr25>>3] = $min$0$lcssa;
  $vararg_ptr26 = ((($vararg_buffer22)) + 16|0);
  HEAPF64[$vararg_ptr26>>3] = $max$0$lcssa;
  $vararg_ptr27 = ((($vararg_buffer22)) + 24|0);
  HEAPF64[$vararg_ptr27>>3] = $44;
  _qh_fprintf($fp,9386,57440,$vararg_buffer22);
  $45 = (($k$06) + 1)|0;
  $46 = HEAP32[(5828)>>2]|0;
  $47 = ($45|0)<($46|0);
  if ($47) {
   $k$06 = $45;
  } else {
   break;
  }
 }
 $48 = +HEAPF64[(6952)>>3];
 HEAPF64[$vararg_buffer28>>3] = $48;
 _qh_fprintf($fp,9387,57480,$vararg_buffer28);
 _qh_fprintf($fp,9389,57968,$vararg_buffer31);
 STACKTOP = sp;return;
}
function _qh_printhelp_degenerate($fp) {
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $notlhs = 0, $notrhs = 0, $or$cond3 = 0, $or$cond5$not = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $0 = HEAP32[(5384)>>2]|0;
 $1 = HEAP32[(5460)>>2]|0;
 $2 = $1 | $0;
 $3 = ($2|0)!=(0);
 $4 = +HEAPF64[(7616)>>3];
 $5 = $4 < 8.9884656743115785E+307;
 $or$cond3 = $3 | $5;
 if ($or$cond3) {
  _qh_fprintf($fp,9368,58424,$vararg_buffer);
  STACKTOP = sp;return;
 }
 _qh_fprintf($fp,9369,58584,$vararg_buffer1);
 $6 = HEAP32[(5304)>>2]|0;
 $7 = HEAP32[(5712)>>2]|0;
 $notlhs = ($6|0)!=(0);
 $notrhs = ($7|0)==(0);
 $or$cond5$not = $notlhs & $notrhs;
 $8 = +HEAPF64[(6960)>>3];
 $9 = $8 > 1.0E+4;
 $or$cond7 = $or$cond5$not & $9;
 if ($or$cond7) {
  _qh_fprintf($fp,9371,59352,$vararg_buffer3);
 }
 $10 = HEAP32[(5304)>>2]|0;
 $11 = ($10|0)==(0);
 $12 = HEAP32[(5260)>>2]|0;
 $13 = ($12|0)!=(0);
 $or$cond9 = $11 | $13;
 if (!($or$cond9)) {
  _qh_fprintf($fp,9372,59496,$vararg_buffer5);
 }
 $14 = +HEAPF64[(6952)>>3];
 HEAPF64[$vararg_buffer7>>3] = $14;
 _qh_fprintf($fp,9373,59616,$vararg_buffer7);
 _qh_fprintf($fp,9374,60264,$vararg_buffer9);
 STACKTOP = sp;return;
}
function _qh_printfacetlist($facetlist,$facets,$printall) {
 $facetlist = $facetlist|0;
 $facets = $facets|0;
 $printall = $printall|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$02 = 0, $facetp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(7480)>>2]|0;
 _qh_printbegin($0,5,$facetlist,$facets,$printall);
 $1 = ($facetlist|0)==(0|0);
 L1: do {
  if (!($1)) {
   $facet$02 = $facetlist;
   while(1) {
    $2 = ((($facet$02)) + 48|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)==(0|0);
    if ($4) {
     break L1;
    }
    $5 = HEAP32[$2>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     break;
    } else {
     $facet$02 = $5;
    }
   }
  }
 } while(0);
 $7 = ($facets|0)==(0|0);
 if (!($7)) {
  $8 = ((($facets)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $facetp$01 = $8;
   while(1) {
    $11 = ((($facetp$01)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     break;
    } else {
     $facetp$01 = $11;
    }
   }
  }
 }
 $14 = HEAP32[(7480)>>2]|0;
 _qh_printend($14,5,$facetlist,$facets,$printall);
 return;
}
function _qh_printhelp_narrowhull($fp,$minangle) {
 $fp = $fp|0;
 $minangle = +$minangle;
 var $0 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = -$minangle;
 HEAPF64[$vararg_buffer>>3] = $0;
 _qh_fprintf($fp,9375,60552,$vararg_buffer);
 STACKTOP = sp;return;
}
function _qh_user_memsizes() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _qh_exit($exitcode) {
 $exitcode = $exitcode|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _exit(($exitcode|0));
 // unreachable;
}
function _qh_free($mem) {
 $mem = $mem|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($mem);
 return;
}
function _qh_malloc($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($size)|0);
 return ($0|0);
}
function _qh_fprintf($fp,$msgcode,$fmt,$varargs) {
 $fp = $fp|0;
 $msgcode = $msgcode|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $0 = HEAP32[_stdout>>2]|0;
 (_vfprintf(($0|0),($fmt|0),($args|0))|0);
 STACKTOP = sp;return;
}
function _appendIndex($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[60896>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[60896>>2] = $1;
 $2 = HEAP32[60904>>2]|0;
 $3 = (($2) + ($0<<2)|0);
 HEAP32[$3>>2] = $i;
 return;
}
function _run_qhull($points,$count,$dimension,$facet_count) {
 $points = $points|0;
 $count = $count|0;
 $dimension = $dimension|0;
 $facet_count = $facet_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $facet$0 = 0, $facet$02 = 0, $facet$04 = 0, $r_facet_count$0$lcssa = 0, $r_facet_count$03 = 0, $vertexp$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 $1 = HEAP32[_stdout>>2]|0;
 $2 = HEAP32[_stderr>>2]|0;
 _qh_init_A($0,$1,$2,0,0);
 HEAP32[(7668)>>2] = 1;
 _qh_init_B($points,$count,$dimension,0);
 _qh_qhull();
 _qh_triangulate();
 HEAP32[60896>>2] = 0;
 $facet$02 = HEAP32[(7500)>>2]|0;
 $3 = ($facet$02|0)==(0|0);
 if ($3) {
  $r_facet_count$0$lcssa = 0;
  HEAP32[$facet_count>>2] = $r_facet_count$0$lcssa;
  $25 = HEAP32[60904>>2]|0;
  return ($25|0);
 }
 $4 = $points;
 $facet$04 = $facet$02;$r_facet_count$03 = 0;
 while(1) {
  $5 = ((($facet$04)) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $r_facet_count$0$lcssa = $r_facet_count$03;
   label = 8;
   break;
  }
  $8 = (($r_facet_count$03) + 1)|0;
  $9 = (_qh_facet3vertex($facet$04)|0);
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = ((($9)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $16 = $12;$vertexp$01 = $11;
    while(1) {
     $14 = ((($vertexp$01)) + 4|0);
     $15 = ((($16)) + 8|0);
     $17 = HEAP32[$15>>2]|0;
     $18 = $17;
     $19 = (($18) - ($4))|0;
     $20 = $19 >> 3;
     $21 = (($20|0) / ($dimension|0))&-1;
     _appendIndex($21);
     $22 = HEAP32[$14>>2]|0;
     $23 = ($22|0)==(0|0);
     if ($23) {
      break;
     } else {
      $16 = $22;$vertexp$01 = $14;
     }
    }
   }
  }
  _appendIndex(-1);
  $facet$0 = HEAP32[$5>>2]|0;
  $24 = ($facet$0|0)==(0|0);
  if ($24) {
   $r_facet_count$0$lcssa = $8;
   label = 8;
   break;
  } else {
   $facet$04 = $facet$0;$r_facet_count$03 = $8;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$facet_count>>2] = $r_facet_count$0$lcssa;
  $25 = HEAP32[60904>>2]|0;
  return ($25|0);
 }
 return (0)|0;
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$66 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre6$i = 0, $$pre6$i26 = 0, $$sum = 0, $$sum$i = 0, $$sum$i17 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i29 = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond68 = 0, $or$cond6873 = 0, $or$cond72 = 0;
 var $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $sum = 0, $sum$i = 0, $sum$i16 = 0, $tmp$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i25 = sp + 424|0;
 $ar$i = sp;
 $lp = sp + 232|0;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = ((($lp)) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$51 = 0;$head$076 = $base;$pshift$077 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$076;
     $18 = ($pshift$077|0)>(1);
     L13: do {
      if ($18) {
       $$012$i = $pshift$077;$$03$i = $head$076;$24 = $head$076;$i$04$i = 1;
       while(1) {
        $19 = (($$03$i) + ($10)|0);
        $20 = (($$012$i) + -2)|0;
        $21 = (($lp) + ($20<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $sum$i = (($22) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $23 = (($$03$i) + ($$sum$i)|0);
        $25 = (FUNCTION_TABLE_iii[$cmp & 7]($24,$23)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (FUNCTION_TABLE_iii[$cmp & 7]($24,$19)|0);
         $28 = ($27|0)>(-1);
         if ($28) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $29 = (FUNCTION_TABLE_iii[$cmp & 7]($23,$19)|0);
        $30 = ($29|0)>(-1);
        $31 = (($i$04$i) + 1)|0;
        $32 = (($ar$i) + ($i$04$i<<2)|0);
        if ($30) {
         HEAP32[$32>>2] = $23;
         $33 = (($$012$i) + -1)|0;
         $$0$be$i = $23;$$01$be$i = $33;
        } else {
         HEAP32[$32>>2] = $19;
         $$0$be$i = $19;$$01$be$i = $20;
        }
        $34 = ($$01$be$i|0)>(1);
        if (!($34)) {
         $i$0$lcssa$i = $31;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
       }
       $35 = ($i$0$lcssa$i|0)<(2);
       if (!($35)) {
        $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$36>>2] = $tmp$i25;
        if (!($13)) {
         $$02$us$i = $width;$48 = $tmp$i25;
         while(1) {
          $46 = ($$02$us$i>>>0)>(256);
          $38 = $46 ? 256 : $$02$us$i;
          $47 = HEAP32[$ar$i>>2]|0;
          _memcpy(($48|0),($47|0),($38|0))|0;
          $44 = $47;$i$01$us$i = 0;
          while(1) {
           $40 = (($ar$i) + ($i$01$us$i<<2)|0);
           $41 = (($i$01$us$i) + 1)|0;
           $42 = (($ar$i) + ($41<<2)|0);
           $43 = HEAP32[$42>>2]|0;
           _memcpy(($44|0),($43|0),($38|0))|0;
           $45 = (($44) + ($38)|0);
           HEAP32[$40>>2] = $45;
           $exitcond$i = ($41|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $44 = $43;$i$01$us$i = $41;
           }
          }
          $37 = ($$02$us$i|0)==($38|0);
          if ($37) {
           break L13;
          }
          $39 = (($$02$us$i) - ($38))|0;
          $$pre6$i = HEAP32[$36>>2]|0;
          $$02$us$i = $39;$48 = $$pre6$i;
         }
        }
       }
      } else {
      }
     } while(0);
     $49 = $16 >>> 2;
     $50 = $51 << 30;
     $52 = $49 | $50;
     $53 = $51 >>> 2;
     $54 = (($pshift$077) + 2)|0;
     $105 = $52;$168 = $53;$pshift$1 = $54;
    } else {
     $55 = (($pshift$077) + -1)|0;
     $56 = (($lp) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $head$076;
     $59 = (($14) - ($58))|0;
     $60 = ($57>>>0)<($59>>>0);
     if ($60) {
      HEAP32[$ar$i>>2] = $head$076;
      $61 = ($pshift$077|0)>(1);
      L37: do {
       if ($61) {
        $$012$i15 = $pshift$077;$$03$i14 = $head$076;$67 = $head$076;$i$04$i13 = 1;
        while(1) {
         $62 = (($$03$i14) + ($10)|0);
         $63 = (($$012$i15) + -2)|0;
         $64 = (($lp) + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $sum$i16 = (($65) + ($width))|0;
         $$sum$i17 = (0 - ($sum$i16))|0;
         $66 = (($$03$i14) + ($$sum$i17)|0);
         $68 = (FUNCTION_TABLE_iii[$cmp & 7]($67,$66)|0);
         $69 = ($68|0)>(-1);
         if ($69) {
          $70 = (FUNCTION_TABLE_iii[$cmp & 7]($67,$62)|0);
          $71 = ($70|0)>(-1);
          if ($71) {
           $i$0$lcssa$i23 = $i$04$i13;
           break;
          }
         }
         $72 = (FUNCTION_TABLE_iii[$cmp & 7]($66,$62)|0);
         $73 = ($72|0)>(-1);
         $74 = (($i$04$i13) + 1)|0;
         $75 = (($ar$i) + ($i$04$i13<<2)|0);
         if ($73) {
          HEAP32[$75>>2] = $66;
          $76 = (($$012$i15) + -1)|0;
          $$0$be$i19 = $66;$$01$be$i18 = $76;
         } else {
          HEAP32[$75>>2] = $62;
          $$0$be$i19 = $62;$$01$be$i18 = $63;
         }
         $77 = ($$01$be$i18|0)>(1);
         if (!($77)) {
          $i$0$lcssa$i23 = $74;
          break;
         }
         $$pre$i21 = HEAP32[$ar$i>>2]|0;
         $$012$i15 = $$01$be$i18;$$03$i14 = $$0$be$i19;$67 = $$pre$i21;$i$04$i13 = $74;
        }
        $78 = ($i$0$lcssa$i23|0)<(2);
        if (!($78)) {
         $79 = (($ar$i) + ($i$0$lcssa$i23<<2)|0);
         HEAP32[$79>>2] = $tmp$i25;
         if (!($13)) {
          $$02$us$i30 = $width;$91 = $tmp$i25;
          while(1) {
           $89 = ($$02$us$i30>>>0)>(256);
           $81 = $89 ? 256 : $$02$us$i30;
           $90 = HEAP32[$ar$i>>2]|0;
           _memcpy(($91|0),($90|0),($81|0))|0;
           $87 = $90;$i$01$us$i28 = 0;
           while(1) {
            $83 = (($ar$i) + ($i$01$us$i28<<2)|0);
            $84 = (($i$01$us$i28) + 1)|0;
            $85 = (($ar$i) + ($84<<2)|0);
            $86 = HEAP32[$85>>2]|0;
            _memcpy(($87|0),($86|0),($81|0))|0;
            $88 = (($87) + ($81)|0);
            HEAP32[$83>>2] = $88;
            $exitcond$i29 = ($84|0)==($i$0$lcssa$i23|0);
            if ($exitcond$i29) {
             break;
            } else {
             $87 = $86;$i$01$us$i28 = $84;
            }
           }
           $80 = ($$02$us$i30|0)==($81|0);
           if ($80) {
            break L37;
           }
           $82 = (($$02$us$i30) - ($81))|0;
           $$pre6$i26 = HEAP32[$79>>2]|0;
           $$02$us$i30 = $82;$91 = $$pre6$i26;
          }
         }
        }
       } else {
       }
      } while(0);
     } else {
      _trinkle($head$076,$width,$cmp,$16,$51,$pshift$077,0,$lp);
     }
     $92 = ($pshift$077|0)==(1);
     if ($92) {
      $93 = $51 << 1;
      $94 = $16 >>> 31;
      $95 = $94 | $93;
      $96 = $16 << 1;
      $105 = $96;$168 = $95;$pshift$1 = 0;
      break;
     } else {
      $97 = ($55>>>0)>(31);
      $98 = (($pshift$077) + -33)|0;
      $$ = $97 ? 0 : $16;
      $$66 = $97 ? $16 : $51;
      $$67 = $97 ? $98 : $55;
      $99 = $$66 << $$67;
      $100 = (32 - ($$67))|0;
      $101 = $$ >>> $100;
      $102 = $101 | $99;
      $103 = $$ << $$67;
      $105 = $103;$168 = $102;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $104 = $105 | 1;
   $106 = (($head$076) + ($width)|0);
   $107 = ($106>>>0)<($11>>>0);
   if ($107) {
    $16 = $104;$51 = $168;$head$076 = $106;$pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;$$lcssa71 = $104;$head$0$lcssa = $106;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;$$lcssa71 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa71,$$lcssa70,$pshift$0$lcssa,0,$lp);
 $108 = ($pshift$0$lcssa|0)==(1);
 $109 = ($$lcssa71|0)==(1);
 $or$cond72 = $109 & $108;
 $110 = ($$lcssa70|0)==(0);
 $or$cond6873 = $110 & $or$cond72;
 if ($or$cond6873) {
  STACKTOP = sp;return;
 } else {
  $113 = $$lcssa71;$122 = $$lcssa70;$head$174 = $head$0$lcssa;$pshift$275 = $pshift$0$lcssa;
 }
 while(1) {
  $111 = ($pshift$275|0)<(2);
  if (!($111)) {
   $136 = $122 << 2;
   $137 = $113 >>> 30;
   $138 = $137 | $136;
   $139 = (($pshift$275) + -2)|0;
   $140 = $113 << 1;
   $141 = $140 & 2147483646;
   $142 = $137 << 31;
   $143 = $141 | $142;
   $144 = $143 ^ 3;
   $145 = $138 >>> 1;
   $146 = (($lp) + ($139<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $sum = (($147) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $148 = (($head$174) + ($$sum2)|0);
   $149 = (($pshift$275) + -1)|0;
   _trinkle($148,$width,$cmp,$144,$145,$149,1,$lp);
   $150 = $145 << 1;
   $151 = $137 & 1;
   $152 = $150 | $151;
   $153 = $144 << 1;
   $154 = $153 | 1;
   $155 = (($head$174) + ($10)|0);
   _trinkle($155,$width,$cmp,$154,$152,$139,1,$lp);
   $113 = $154;$122 = $152;$head$174 = $155;$pshift$275 = $139;
   continue;
  }
  $112 = (($113) + -1)|0;
  $114 = ($112|0)==(0);
  do {
   if ($114) {
    $135 = 32;
    label = 56;
   } else {
    $115 = $112 & 1;
    $116 = ($115|0)==(0);
    if ($116) {
     $$02$i$i = $112;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $117 = (($nTrailingZeros$03$i$i) + 1)|0;
      $118 = $$02$i$i >>> 1;
      $119 = $118 & 1;
      $120 = ($119|0)==(0);
      if ($120) {
       $$02$i$i = $118;$nTrailingZeros$03$i$i = $117;
      } else {
       $$lcssa = $117;
       break;
      }
     }
     $121 = ($$lcssa|0)==(0);
     if ($121) {
      label = 51;
     } else {
      $132 = $$lcssa;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     $123 = ($122|0)==(0);
     if ($123) {
      $135 = 64;
      label = 56;
      break;
     }
     $124 = $122 & 1;
     $125 = ($124|0)==(0);
     if ($125) {
      $$02$i3$i = $122;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     }
     while(1) {
      $126 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $127 = $$02$i3$i >>> 1;
      $128 = $127 & 1;
      $129 = ($128|0)==(0);
      if ($129) {
       $$02$i3$i = $127;$nTrailingZeros$03$i2$i = $126;
      } else {
       $$lcssa102 = $126;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      }
     }
     $130 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
     $131 = ($$lcssa102|0)==(0);
     if ($131) {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     } else {
      $132 = $130;
     }
    }
    $133 = ($132>>>0)>(31);
    if ($133) {
     $135 = $132;
     label = 56;
    } else {
     $$0$i44 = $132;$157 = $113;$160 = $122;$164 = $132;
    }
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $134 = (($135) + -32)|0;
   $$0$i44 = $134;$157 = $122;$160 = 0;$164 = $135;
  }
  $156 = $157 >>> $$0$i44;
  $158 = (32 - ($$0$i44))|0;
  $159 = $160 << $158;
  $161 = $159 | $156;
  $162 = $160 >>> $$0$i44;
  $163 = (($164) + ($pshift$275))|0;
  $$pre = (($head$174) + ($10)|0);
  $165 = ($163|0)==(1);
  $166 = ($161|0)==(1);
  $or$cond = $166 & $165;
  $167 = ($162|0)==(0);
  $or$cond68 = $167 & $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $113 = $161;$122 = $162;$head$174 = $$pre;$pshift$275 = $163;
  }
 }
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = ((($$0211)) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = ((($w$08)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = ((($$1)) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = ((($$023)) + 1|0);
    $7 = ((($$05)) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i13 = 0, $$01$i = 0, $$02$i = 0, $$02$i9 = 0, $$03$i = 0, $$03$us$i = 0, $$lcssa$i = 0, $$lcssa$i12 = 0, $$lcssa$i6 = 0, $$lcssa303 = 0, $$lcssa306 = 0, $$lcssa309 = 0, $$lcssa323 = 0, $$lcssa326 = 0, $$lcssa329 = 0, $$lcssa344 = 0, $$pr$i = 0;
 var $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $281$phi = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div$us$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i8 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0;
 var $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0;
 var $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa343 = 0, $mem$0$us$i = 0, $or$cond$i = 0, $or$cond$i10 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0;
 var $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($n)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($3)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($n)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$280 = $9;$281 = $3;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $281;$31 = $280;
    break;
   }
   $25 = $23 << 8;
   $26 = ((($$01$i)) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$lcssa$i = $$01$i;$31 = 0;
    break;
   } else {
    $281$phi = $$01$i;$$01$i = $26;$280 = $27;$hw$0$in2$i = $29;$281 = $281$phi;
   }
  }
  $32 = ($31<<24>>24)!=(0);
  $33 = $32 ? $$lcssa$i : 0;
  $$0 = $33;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ((($3)) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ((($n)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = $35;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = ((($$02$i)) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i = $58;$$lcssa$i6 = $59;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = ($$lcssa$i6<<24>>24)!=(0);
  $66 = ((($$0$lcssa$i)) + -2|0);
  $67 = $65 ? $66 : 0;
  $$0 = $67;
  STACKTOP = sp;return ($$0|0);
 }
 $68 = ((($3)) + 3|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ($69<<24>>24)==(0);
 if ($70) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = ((($n)) + 4|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $74 = $0&255;
  $75 = $74 << 24;
  $76 = $6&255;
  $77 = $76 << 16;
  $78 = $77 | $75;
  $79 = $12&255;
  $80 = $79 << 8;
  $81 = $78 | $80;
  $82 = $38&255;
  $83 = $81 | $82;
  $84 = HEAP8[$3>>0]|0;
  $85 = $84&255;
  $86 = $85 << 24;
  $87 = $9&255;
  $88 = $87 << 16;
  $89 = $35&255;
  $90 = $89 << 8;
  $91 = $69&255;
  $92 = $90 | $88;
  $93 = $92 | $91;
  $94 = $93 | $86;
  $95 = ($94|0)==($83|0);
  if ($95) {
   $$0$lcssa$i13 = $68;$$lcssa$i12 = $69;
  } else {
   $$02$i9 = $68;$hw$03$i8 = $94;
   while(1) {
    $96 = $hw$03$i8 << 8;
    $97 = ((($$02$i9)) + 1|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 | $96;
    $101 = ($98<<24>>24)==(0);
    $102 = ($100|0)==($83|0);
    $or$cond$i10 = $101 | $102;
    if ($or$cond$i10) {
     $$0$lcssa$i13 = $97;$$lcssa$i12 = $98;
     break;
    } else {
     $$02$i9 = $97;$hw$03$i8 = $100;
    }
   }
  }
  $103 = ($$lcssa$i12<<24>>24)!=(0);
  $104 = ((($$0$lcssa$i13)) + -3|0);
  $105 = $103 ? $104 : 0;
  $$0 = $105;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $110 = $0;$l$080$i = 0;
 while(1) {
  $106 = (($3) + ($l$080$i)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = ($107<<24>>24)==(0);
  if ($108) {
   $$0$i = 0;
   break;
  }
  $109 = $110 & 31;
  $111 = $109&255;
  $112 = 1 << $111;
  $div4$i = ($110&255) >>> 5;
  $113 = $div4$i&255;
  $114 = (($byteset$i) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $115 | $112;
  HEAP32[$114>>2] = $116;
  $117 = (($l$080$i) + 1)|0;
  $118 = $110&255;
  $119 = (($shift$i) + ($118<<2)|0);
  HEAP32[$119>>2] = $117;
  $120 = (($n) + ($117)|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = ($121<<24>>24)==(0);
  if ($122) {
   $$lcssa344 = $117;$l$080$i$lcssa343 = $l$080$i;
   label = 23;
   break;
  } else {
   $110 = $121;$l$080$i = $117;
  }
 }
 L46: do {
  if ((label|0) == 23) {
   $123 = ($$lcssa344>>>0)>(1);
   L48: do {
    if ($123) {
     $282 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
     L49: while(1) {
      $283 = $282;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
      while(1) {
       $284 = $283;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
       L53: while(1) {
        $133 = $284;$k$059$i = 1;
        while(1) {
         $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
         $130 = (($n) + ($129)|0);
         $131 = HEAP8[$130>>0]|0;
         $132 = (($n) + ($133)|0);
         $134 = HEAP8[$132>>0]|0;
         $135 = ($131<<24>>24)==($134<<24>>24);
         if (!($135)) {
          $$lcssa323 = $133;$$lcssa326 = $131;$$lcssa329 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
          break L53;
         }
         $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
         $127 = (($k$059$i) + 1)|0;
         if ($136) {
          break;
         }
         $126 = (($127) + ($jp$0$ph1365$i))|0;
         $128 = ($126>>>0)<($$lcssa344>>>0);
         if ($128) {
          $133 = $126;$k$059$i = $127;
         } else {
          $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
          break L49;
         }
        }
        $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
        $138 = (($137) + 1)|0;
        $139 = ($138>>>0)<($$lcssa344>>>0);
        if ($139) {
         $284 = $138;$jp$0$ph1365$i = $137;
        } else {
         $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
         break L49;
        }
       }
       $140 = ($$lcssa326&255)>($$lcssa329&255);
       $141 = (($$lcssa323) - ($ip$0$ph76$i))|0;
       if (!($140)) {
        $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
        break;
       }
       $124 = (($$lcssa323) + 1)|0;
       $125 = ($124>>>0)<($$lcssa344>>>0);
       if ($125) {
        $283 = $124;$jp$0$ph13$ph70$i = $$lcssa323;$p$0$ph$ph71$i = $141;
       } else {
        $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
        break L49;
       }
      }
      $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
      $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
      $144 = ($143>>>0)<($$lcssa344>>>0);
      if ($144) {
       $282 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
      } else {
       $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
       break;
      }
     }
     $285 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
     while(1) {
      $287 = $285;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
      while(1) {
       $286 = $287;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
       L68: while(1) {
        $152 = $286;$k$139$i = 1;
        while(1) {
         $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
         $149 = (($n) + ($148)|0);
         $150 = HEAP8[$149>>0]|0;
         $151 = (($n) + ($152)|0);
         $153 = HEAP8[$151>>0]|0;
         $154 = ($150<<24>>24)==($153<<24>>24);
         if (!($154)) {
          $$lcssa303 = $152;$$lcssa306 = $150;$$lcssa309 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
          break L68;
         }
         $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
         $146 = (($k$139$i) + 1)|0;
         if ($155) {
          break;
         }
         $145 = (($146) + ($jp$1$ph944$i))|0;
         $147 = ($145>>>0)<($$lcssa344>>>0);
         if ($147) {
          $152 = $145;$k$139$i = $146;
         } else {
          $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
          break L48;
         }
        }
        $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
        $157 = (($156) + 1)|0;
        $158 = ($157>>>0)<($$lcssa344>>>0);
        if ($158) {
         $286 = $157;$jp$1$ph944$i = $156;
        } else {
         $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
         break L48;
        }
       }
       $159 = ($$lcssa306&255)<($$lcssa309&255);
       $160 = (($$lcssa303) - ($ip$1$ph55$i))|0;
       if (!($159)) {
        $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
        break;
       }
       $164 = (($$lcssa303) + 1)|0;
       $165 = ($164>>>0)<($$lcssa344>>>0);
       if ($165) {
        $287 = $164;$jp$1$ph9$ph49$i = $$lcssa303;$p$1$ph$ph50$i = $160;
       } else {
        $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
        break L48;
       }
      }
      $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
      $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
      $163 = ($162>>>0)<($$lcssa344>>>0);
      if ($163) {
       $285 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
      } else {
       $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
       break;
      }
     }
    } else {
     $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
    }
   } while(0);
   $166 = (($ip$1$ph$lcssa$i) + 1)|0;
   $167 = (($ip$0$ph$lcssa147$i) + 1)|0;
   $168 = ($166>>>0)>($167>>>0);
   $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
   $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
   $169 = (($n) + ($p$1$p$0$i)|0);
   $170 = (($ip$1$ip$0$i) + 1)|0;
   $171 = (_memcmp($n,$169,$170)|0);
   $172 = ($171|0)==(0);
   if ($172) {
    $178 = (($$lcssa344) - ($p$1$p$0$i))|0;
    $179 = $$lcssa344 | 63;
    $180 = ($$lcssa344|0)==($p$1$p$0$i|0);
    if ($180) {
     $237 = $179;$p$3155$i = $$lcssa344;
    } else {
     $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
     L82: while(1) {
      $182 = $z$0$us$i;
      $183 = $$03$us$i;
      $184 = (($182) - ($183))|0;
      $185 = ($184>>>0)<($$lcssa344>>>0);
      do {
       if ($185) {
        $186 = (_memchr($z$0$us$i,0,$179)|0);
        $187 = ($186|0)==(0|0);
        if ($187) {
         $191 = (($z$0$us$i) + ($179)|0);
         $z$1$us$i = $191;
         break;
        } else {
         $188 = $186;
         $189 = (($188) - ($183))|0;
         $190 = ($189>>>0)<($$lcssa344>>>0);
         if ($190) {
          $$0$i = 0;
          break L46;
         } else {
          $z$1$us$i = $186;
          break;
         }
        }
       } else {
        $z$1$us$i = $z$0$us$i;
       }
      } while(0);
      $192 = (($$03$us$i) + ($l$080$i$lcssa343)|0);
      $193 = HEAP8[$192>>0]|0;
      $div$us$i = ($193&255) >>> 5;
      $194 = $div$us$i&255;
      $195 = (($byteset$i) + ($194<<2)|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $193 & 31;
      $198 = $197&255;
      $199 = 1 << $198;
      $200 = $199 & $196;
      $201 = ($200|0)==(0);
      if ($201) {
       $232 = (($$03$us$i) + ($$lcssa344)|0);
       $$03$us$i = $232;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
       continue;
      }
      $202 = $193&255;
      $203 = (($shift$i) + ($202<<2)|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = (($$lcssa344) - ($204))|0;
      $206 = ($$lcssa344|0)==($204|0);
      if (!($206)) {
       $207 = ($mem$0$us$i|0)!=(0);
       $208 = ($205>>>0)<($p$1$p$0$i>>>0);
       $or$cond5$us$i = $207 & $208;
       $k$2$us$i = $or$cond5$us$i ? $178 : $205;
       $209 = (($$03$us$i) + ($k$2$us$i)|0);
       $$03$us$i = $209;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
       continue;
      }
      $210 = ($170>>>0)>($mem$0$us$i>>>0);
      $211 = $210 ? $170 : $mem$0$us$i;
      $212 = (($n) + ($211)|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = ($213<<24>>24)==(0);
      L96: do {
       if ($214) {
        $k$4$us$i = $170;
       } else {
        $$pr$us$i = $213;$k$338$us$i = $211;
        while(1) {
         $215 = (($$03$us$i) + ($k$338$us$i)|0);
         $216 = HEAP8[$215>>0]|0;
         $217 = ($$pr$us$i<<24>>24)==($216<<24>>24);
         if (!($217)) {
          $k$338$us$i$lcssa = $k$338$us$i;
          break;
         }
         $220 = (($k$338$us$i) + 1)|0;
         $221 = (($n) + ($220)|0);
         $222 = HEAP8[$221>>0]|0;
         $223 = ($222<<24>>24)==(0);
         if ($223) {
          $k$4$us$i = $170;
          break L96;
         } else {
          $$pr$us$i = $222;$k$338$us$i = $220;
         }
        }
        $218 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
        $219 = (($$03$us$i) + ($218)|0);
        $$03$us$i = $219;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
        continue L82;
       }
      } while(0);
      while(1) {
       $224 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
       if (!($224)) {
        $$0$i = $$03$us$i;
        break L46;
       }
       $225 = (($k$4$us$i) + -1)|0;
       $226 = (($n) + ($225)|0);
       $227 = HEAP8[$226>>0]|0;
       $228 = (($$03$us$i) + ($225)|0);
       $229 = HEAP8[$228>>0]|0;
       $230 = ($227<<24>>24)==($229<<24>>24);
       if ($230) {
        $k$4$us$i = $225;
       } else {
        break;
       }
      }
      $231 = (($$03$us$i) + ($p$1$p$0$i)|0);
      $$03$us$i = $231;$mem$0$us$i = $178;$z$0$us$i = $z$1$us$i;
     }
    }
   } else {
    $173 = (($$lcssa344) - ($ip$1$ip$0$i))|0;
    $174 = (($173) + -1)|0;
    $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
    $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
    $176 = (($ip$1$ip$0$$i) + 1)|0;
    $177 = $$lcssa344 | 63;
    $237 = $177;$p$3155$i = $176;
   }
   $181 = (($n) + ($170)|0);
   $$03$i = $3;$z$0$i = $3;
   L106: while(1) {
    $233 = $z$0$i;
    $234 = $$03$i;
    $235 = (($233) - ($234))|0;
    $236 = ($235>>>0)<($$lcssa344>>>0);
    do {
     if ($236) {
      $238 = (_memchr($z$0$i,0,$237)|0);
      $239 = ($238|0)==(0|0);
      if ($239) {
       $243 = (($z$0$i) + ($237)|0);
       $z$1$i = $243;
       break;
      } else {
       $240 = $238;
       $241 = (($240) - ($234))|0;
       $242 = ($241>>>0)<($$lcssa344>>>0);
       if ($242) {
        $$0$i = 0;
        break L46;
       } else {
        $z$1$i = $238;
        break;
       }
      }
     } else {
      $z$1$i = $z$0$i;
     }
    } while(0);
    $244 = (($$03$i) + ($l$080$i$lcssa343)|0);
    $245 = HEAP8[$244>>0]|0;
    $div$i = ($245&255) >>> 5;
    $246 = $div$i&255;
    $247 = (($byteset$i) + ($246<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = $245 & 31;
    $250 = $249&255;
    $251 = 1 << $250;
    $252 = $251 & $248;
    $253 = ($252|0)==(0);
    if ($253) {
     $260 = (($$03$i) + ($$lcssa344)|0);
     $$03$i = $260;$z$0$i = $z$1$i;
     continue;
    }
    $254 = $245&255;
    $255 = (($shift$i) + ($254<<2)|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ($$lcssa344|0)==($256|0);
    if (!($257)) {
     $258 = (($$lcssa344) - ($256))|0;
     $259 = (($$03$i) + ($258)|0);
     $$03$i = $259;$z$0$i = $z$1$i;
     continue;
    }
    $261 = HEAP8[$181>>0]|0;
    $262 = ($261<<24>>24)==(0);
    L120: do {
     if ($262) {
      $k$4$i = $170;
     } else {
      $$pr$i = $261;$k$338$i = $170;
      while(1) {
       $263 = (($$03$i) + ($k$338$i)|0);
       $264 = HEAP8[$263>>0]|0;
       $265 = ($$pr$i<<24>>24)==($264<<24>>24);
       if (!($265)) {
        $k$338$i$lcssa = $k$338$i;
        break;
       }
       $266 = (($k$338$i) + 1)|0;
       $267 = (($n) + ($266)|0);
       $268 = HEAP8[$267>>0]|0;
       $269 = ($268<<24>>24)==(0);
       if ($269) {
        $k$4$i = $170;
        break L120;
       } else {
        $$pr$i = $268;$k$338$i = $266;
       }
      }
      $270 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
      $271 = (($$03$i) + ($270)|0);
      $$03$i = $271;$z$0$i = $z$1$i;
      continue L106;
     }
    } while(0);
    while(1) {
     $272 = ($k$4$i|0)==(0);
     if ($272) {
      $$0$i = $$03$i;
      break L46;
     }
     $273 = (($k$4$i) + -1)|0;
     $274 = (($n) + ($273)|0);
     $275 = HEAP8[$274>>0]|0;
     $276 = (($$03$i) + ($273)|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = ($275<<24>>24)==($277<<24>>24);
     if ($278) {
      $k$4$i = $273;
     } else {
      break;
     }
    }
    $279 = (($$03$i) + ($p$3155$i)|0);
    $$03$i = $279;$z$0$i = $z$1$i;
   }
  }
 } while(0);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre6$i = 0, $$pre6$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i9 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $pp$val1666 = 0, $sum = 0, $sum$i = 0, $tmp$i5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i5 = sp + 456|0;
 $ar$i = sp;
 $ar = sp + 228|0;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 7]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $$01162 = $head;$$02964 = $pshift;$$03865 = $trusty;$16 = $7;$33 = $pp$1$val;$i$01063 = 1;$pp$val1666 = $pp$val;
    while(1) {
     $10 = ($$03865|0)==(0);
     $11 = ($$02964|0)>(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($$01162) + ($0)|0);
      $13 = (($$02964) + -2)|0;
      $14 = (($lp) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $17 = (FUNCTION_TABLE_iii[$cmp & 7]($12,$16)|0);
      $18 = ($17|0)>(-1);
      if ($18) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
      $sum = (($15) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $19 = (($$01162) + ($$sum)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 7]($19,$16)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
     }
     $22 = (($i$01063) + 1)|0;
     $23 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$23>>2] = $16;
     $24 = (($pp$val1666) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $46 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $$lcssa = $28;
          break;
         }
        }
        $32 = ($$lcssa|0)==(0);
        if ($32) {
         label = 10;
        } else {
         $43 = $$lcssa;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $34 = ($33|0)==(0);
        if ($34) {
         $46 = 64;
         label = 15;
         break;
        }
        $35 = $33 & 1;
        $36 = ($35|0)==(0);
        if ($36) {
         $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        }
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$lcssa76 = $37;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $41 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $42 = ($$lcssa76|0)==(0);
        if ($42) {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        } else {
         $43 = $41;
        }
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $pp$val1666;$51 = $33;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$02964))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa49 = $16;$$02$lcssa51 = $54;$i$0$lcssa50 = $22;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($16) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 7]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $16;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $22;
      label = 18;
      break;
     } else {
      $$01162$phi = $16;$$02964 = $54;$$03865 = 0;$16 = $62;$33 = $53;$i$01063 = $22;$pp$val1666 = $52;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $66 = ($i$0$lcssa50|0)<(2);
 L30: do {
  if (!($66)) {
   $67 = (($ar) + ($i$0$lcssa50<<2)|0);
   HEAP32[$67>>2] = $tmp$i5;
   $68 = ($width|0)==(0);
   if (!($68)) {
    $$02$us$i10 = $width;$80 = $tmp$i5;
    while(1) {
     $78 = ($$02$us$i10>>>0)>(256);
     $70 = $78 ? 256 : $$02$us$i10;
     $79 = HEAP32[$ar>>2]|0;
     _memcpy(($80|0),($79|0),($70|0))|0;
     $76 = $79;$i$01$us$i8 = 0;
     while(1) {
      $72 = (($ar) + ($i$01$us$i8<<2)|0);
      $73 = (($i$01$us$i8) + 1)|0;
      $74 = (($ar) + ($73<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      _memcpy(($76|0),($75|0),($70|0))|0;
      $77 = (($76) + ($70)|0);
      HEAP32[$72>>2] = $77;
      $exitcond$i9 = ($73|0)==($i$0$lcssa50|0);
      if ($exitcond$i9) {
       break;
      } else {
       $76 = $75;$i$01$us$i8 = $73;
      }
     }
     $69 = ($$02$us$i10|0)==($70|0);
     if ($69) {
      break L30;
     }
     $71 = (($$02$us$i10) - ($70))|0;
     $$pre6$i6 = HEAP32[$67>>2]|0;
     $$02$us$i10 = $71;$80 = $$pre6$i6;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $81 = ($$02$lcssa51|0)>(1);
 L39: do {
  if ($81) {
   $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$87 = $$0$lcssa49;$i$04$i = 1;
   while(1) {
    $82 = (($$03$i) + ($0)|0);
    $83 = (($$012$i) + -2)|0;
    $84 = (($lp) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $sum$i = (($85) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $86 = (($$03$i) + ($$sum$i)|0);
    $88 = (FUNCTION_TABLE_iii[$cmp & 7]($87,$86)|0);
    $89 = ($88|0)>(-1);
    if ($89) {
     $90 = (FUNCTION_TABLE_iii[$cmp & 7]($87,$82)|0);
     $91 = ($90|0)>(-1);
     if ($91) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $92 = (FUNCTION_TABLE_iii[$cmp & 7]($86,$82)|0);
    $93 = ($92|0)>(-1);
    $94 = (($i$04$i) + 1)|0;
    $95 = (($ar$i) + ($i$04$i<<2)|0);
    if ($93) {
     HEAP32[$95>>2] = $86;
     $96 = (($$012$i) + -1)|0;
     $$0$be$i = $86;$$01$be$i = $96;
    } else {
     HEAP32[$95>>2] = $82;
     $$0$be$i = $82;$$01$be$i = $83;
    }
    $97 = ($$01$be$i|0)>(1);
    if (!($97)) {
     $i$0$lcssa$i = $94;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$87 = $$pre$i;$i$04$i = $94;
   }
   $98 = ($i$0$lcssa$i|0)<(2);
   if ($98) {
    $113 = $tmp$i5;
   } else {
    $99 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$99>>2] = $tmp$i5;
    $100 = ($width|0)==(0);
    if ($100) {
     $113 = $tmp$i5;
    } else {
     $$02$us$i = $width;$112 = $tmp$i5;
     while(1) {
      $110 = ($$02$us$i>>>0)>(256);
      $102 = $110 ? 256 : $$02$us$i;
      $111 = HEAP32[$ar$i>>2]|0;
      _memcpy(($112|0),($111|0),($102|0))|0;
      $108 = $111;$i$01$us$i = 0;
      while(1) {
       $104 = (($ar$i) + ($i$01$us$i<<2)|0);
       $105 = (($i$01$us$i) + 1)|0;
       $106 = (($ar$i) + ($105<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       _memcpy(($108|0),($107|0),($102|0))|0;
       $109 = (($108) + ($102)|0);
       HEAP32[$104>>2] = $109;
       $exitcond$i = ($105|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $108 = $107;$i$01$us$i = $105;
       }
      }
      $101 = ($$02$us$i|0)==($102|0);
      if ($101) {
       $113 = $tmp$i5;
       break L39;
      }
      $103 = (($$02$us$i) - ($102))|0;
      $$pre6$i = HEAP32[$99>>2]|0;
      $$02$us$i = $103;$112 = $$pre6$i;
     }
    }
   }
  } else {
   $113 = $tmp$i5;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $282 = 0;$283 = 0;
  tempRet0 = ($282);
  return ($283|0);
 }
 $3 = ((($f)) + 4|0);
 $4 = ((($f)) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = ((($6)) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa135 = $13;
   break;
  }
 }
 $16 = ($$lcssa135|0)==(45);
 do {
  if ((($$lcssa135|0) == 43) | (($$lcssa135|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = ((($18)) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa135;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = ((($29)) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$123 = 8;$c$124 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = ((($39)) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (60912 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = ((($52)) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    if ($51) {
     $282 = 0;$283 = 0;
     tempRet0 = ($282);
     return ($283|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = ((($55)) + -1|0);
    HEAP32[$3>>2] = $56;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   } else {
    $$123 = 16;$c$124 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (60912 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = ((($63)) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $282 = 0;$283 = 0;
    tempRet0 = ($282);
    return ($283|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$082 = 0;
    while(1) {
     $69 = ($x$082*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = ((($72)) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $82 = $80 & $81;
     if ($82) {
      $71 = $79;$x$082 = $70;
     } else {
      $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $284 = $$lcssa134;$285 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $284 = 0;$285 = 0;$c$2$lcssa = $c$1;
   }
   $83 = (($c$2$lcssa) + -48)|0;
   $84 = ($83>>>0)<(10);
   if ($84) {
    $85 = $284;$86 = $285;$89 = $83;$c$371 = $c$2$lcssa;
    while(1) {
     $87 = (___muldi3(($85|0),($86|0),10,0)|0);
     $88 = tempRet0;
     $90 = ($89|0)<(0);
     $91 = $90 << 31 >> 31;
     $92 = $89 ^ -1;
     $93 = $91 ^ -1;
     $94 = ($88>>>0)>($93>>>0);
     $95 = ($87>>>0)>($92>>>0);
     $96 = ($88|0)==($93|0);
     $97 = $96 & $95;
     $98 = $94 | $97;
     if ($98) {
      $$lcssa = $89;$286 = $85;$287 = $86;$c$3$lcssa = $c$371;
      break;
     }
     $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
     $100 = tempRet0;
     $101 = HEAP32[$3>>2]|0;
     $102 = HEAP32[$4>>2]|0;
     $103 = ($101>>>0)<($102>>>0);
     if ($103) {
      $104 = ((($101)) + 1|0);
      HEAP32[$3>>2] = $104;
      $105 = HEAP8[$101>>0]|0;
      $106 = $105&255;
      $c$3$be = $106;
     } else {
      $107 = (___shgetc($f)|0);
      $c$3$be = $107;
     }
     $108 = (($c$3$be) + -48)|0;
     $109 = ($108>>>0)<(10);
     $110 = ($100>>>0)<(429496729);
     $111 = ($99>>>0)<(2576980378);
     $112 = ($100|0)==(429496729);
     $113 = $112 & $111;
     $114 = $110 | $113;
     $or$cond7 = $109 & $114;
     if ($or$cond7) {
      $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
     } else {
      $$lcssa = $108;$286 = $99;$287 = $100;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $115 = ($$lcssa>>>0)>(9);
    if ($115) {
     $255 = $287;$257 = $286;
    } else {
     $$122 = 10;$288 = $286;$289 = $287;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $255 = $285;$257 = $284;
   }
  } else {
   $$123 = $$1;$c$124 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $116 = (($$123) + -1)|0;
   $117 = $116 & $$123;
   $118 = ($117|0)==(0);
   if ($118) {
    $123 = ($$123*23)|0;
    $124 = $123 >>> 5;
    $125 = $124 & 7;
    $126 = (61176 + ($125)|0);
    $127 = HEAP8[$126>>0]|0;
    $128 = $127 << 24 >> 24;
    $$sum1445 = (($c$124) + 1)|0;
    $129 = (60912 + ($$sum1445)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = ($131>>>0)<($$123>>>0);
    if ($132) {
     $135 = $131;$x$146 = 0;
     while(1) {
      $133 = $x$146 << $128;
      $134 = $135 | $133;
      $136 = HEAP32[$3>>2]|0;
      $137 = HEAP32[$4>>2]|0;
      $138 = ($136>>>0)<($137>>>0);
      if ($138) {
       $139 = ((($136)) + 1|0);
       HEAP32[$3>>2] = $139;
       $140 = HEAP8[$136>>0]|0;
       $141 = $140&255;
       $c$4$be = $141;
      } else {
       $142 = (___shgetc($f)|0);
       $c$4$be = $142;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $143 = (60912 + ($$sum14)|0);
      $144 = HEAP8[$143>>0]|0;
      $145 = $144&255;
      $146 = ($145>>>0)<($$123>>>0);
      $147 = ($134>>>0)<(134217728);
      $148 = $147 & $146;
      if ($148) {
       $135 = $145;$x$146 = $134;
      } else {
       $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
    }
    $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
    $150 = tempRet0;
    $151 = $152&255;
    $153 = ($151>>>0)>=($$123>>>0);
    $155 = ($154>>>0)>($150>>>0);
    $157 = ($156>>>0)>($149>>>0);
    $158 = ($154|0)==($150|0);
    $159 = $158 & $157;
    $160 = $155 | $159;
    $or$cond40 = $153 | $160;
    if ($or$cond40) {
     $$122 = $$123;$288 = $156;$289 = $154;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $161 = $156;$162 = $154;$166 = $152;
    }
    while(1) {
     $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
     $164 = tempRet0;
     $165 = $166&255;
     $167 = $165 | $163;
     $168 = HEAP32[$3>>2]|0;
     $169 = HEAP32[$4>>2]|0;
     $170 = ($168>>>0)<($169>>>0);
     if ($170) {
      $171 = ((($168)) + 1|0);
      HEAP32[$3>>2] = $171;
      $172 = HEAP8[$168>>0]|0;
      $173 = $172&255;
      $c$5$be = $173;
     } else {
      $174 = (___shgetc($f)|0);
      $c$5$be = $174;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $175 = (60912 + ($$sum15)|0);
     $176 = HEAP8[$175>>0]|0;
     $177 = $176&255;
     $178 = ($177>>>0)>=($$123>>>0);
     $179 = ($164>>>0)>($150>>>0);
     $180 = ($167>>>0)>($149>>>0);
     $181 = ($164|0)==($150|0);
     $182 = $181 & $180;
     $183 = $179 | $182;
     $or$cond = $178 | $183;
     if ($or$cond) {
      $$122 = $$123;$288 = $167;$289 = $164;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $161 = $167;$162 = $164;$166 = $176;
     }
    }
   }
   $$sum1865 = (($c$124) + 1)|0;
   $119 = (60912 + ($$sum1865)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = ($121>>>0)<($$123>>>0);
   if ($122) {
    $186 = $121;$x$266 = 0;
    while(1) {
     $184 = Math_imul($x$266, $$123)|0;
     $185 = (($186) + ($184))|0;
     $187 = HEAP32[$3>>2]|0;
     $188 = HEAP32[$4>>2]|0;
     $189 = ($187>>>0)<($188>>>0);
     if ($189) {
      $190 = ((($187)) + 1|0);
      HEAP32[$3>>2] = $190;
      $191 = HEAP8[$187>>0]|0;
      $192 = $191&255;
      $c$6$be = $192;
     } else {
      $193 = (___shgetc($f)|0);
      $c$6$be = $193;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $194 = (60912 + ($$sum18)|0);
     $195 = HEAP8[$194>>0]|0;
     $196 = $195&255;
     $197 = ($196>>>0)<($$123>>>0);
     $198 = ($185>>>0)<(119304647);
     $199 = $198 & $197;
     if ($199) {
      $186 = $196;$x$266 = $185;
     } else {
      $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $201 = $$lcssa133;$290 = $$lcssa132;$291 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $201 = $120;$290 = 0;$291 = 0;$c$6$lcssa = $c$124;
   }
   $200 = $201&255;
   $202 = ($200>>>0)<($$123>>>0);
   if ($202) {
    $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
    $204 = tempRet0;
    $205 = $291;$207 = $290;$215 = $201;$c$753 = $c$6$lcssa;
    while(1) {
     $206 = ($205>>>0)>($204>>>0);
     $208 = ($207>>>0)>($203>>>0);
     $209 = ($205|0)==($204|0);
     $210 = $209 & $208;
     $211 = $206 | $210;
     if ($211) {
      $$122 = $$123;$288 = $207;$289 = $205;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
     $213 = tempRet0;
     $214 = $215&255;
     $216 = $214 ^ -1;
     $217 = ($213>>>0)>(4294967295);
     $218 = ($212>>>0)>($216>>>0);
     $219 = ($213|0)==(-1);
     $220 = $219 & $218;
     $221 = $217 | $220;
     if ($221) {
      $$122 = $$123;$288 = $207;$289 = $205;$c$8 = $c$753;
      label = 72;
      break L69;
     }
     $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
     $223 = tempRet0;
     $224 = HEAP32[$3>>2]|0;
     $225 = HEAP32[$4>>2]|0;
     $226 = ($224>>>0)<($225>>>0);
     if ($226) {
      $227 = ((($224)) + 1|0);
      HEAP32[$3>>2] = $227;
      $228 = HEAP8[$224>>0]|0;
      $229 = $228&255;
      $c$7$be = $229;
     } else {
      $230 = (___shgetc($f)|0);
      $c$7$be = $230;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $231 = (60912 + ($$sum19)|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = ($233>>>0)<($$123>>>0);
     if ($234) {
      $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
     } else {
      $$122 = $$123;$288 = $222;$289 = $223;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$122 = $$123;$288 = $290;$289 = $291;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $235 = (60912 + ($$sum16)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = ($237>>>0)<($$122>>>0);
  if ($238) {
   while(1) {
    $239 = HEAP32[$3>>2]|0;
    $240 = HEAP32[$4>>2]|0;
    $241 = ($239>>>0)<($240>>>0);
    if ($241) {
     $242 = ((($239)) + 1|0);
     HEAP32[$3>>2] = $242;
     $243 = HEAP8[$239>>0]|0;
     $244 = $243&255;
     $c$9$be = $244;
    } else {
     $245 = (___shgetc($f)|0);
     $c$9$be = $245;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $246 = (60912 + ($$sum17)|0);
    $247 = HEAP8[$246>>0]|0;
    $248 = $247&255;
    $249 = ($248>>>0)<($$122>>>0);
    if (!($249)) {
     break;
    }
   }
   $250 = (___errno_location()|0);
   HEAP32[$250>>2] = 34;
   $255 = $1;$257 = $0;
  } else {
   $255 = $289;$257 = $288;
  }
 }
 $251 = HEAP32[$4>>2]|0;
 $252 = ($251|0)==(0|0);
 if (!($252)) {
  $253 = HEAP32[$3>>2]|0;
  $254 = ((($253)) + -1|0);
  HEAP32[$3>>2] = $254;
 }
 $256 = ($255>>>0)<($1>>>0);
 $258 = ($257>>>0)<($0>>>0);
 $259 = ($255|0)==($1|0);
 $260 = $259 & $258;
 $261 = $256 | $260;
 if (!($261)) {
  $262 = $0 & 1;
  $263 = ($262|0)!=(0);
  $264 = (0)!=(0);
  $265 = $263 | $264;
  $266 = ($neg$0|0)!=(0);
  $or$cond12 = $265 | $266;
  if (!($or$cond12)) {
   $267 = (___errno_location()|0);
   HEAP32[$267>>2] = 34;
   $268 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $269 = tempRet0;
   $282 = $269;$283 = $268;
   tempRet0 = ($282);
   return ($283|0);
  }
  $270 = ($255>>>0)>($1>>>0);
  $271 = ($257>>>0)>($0>>>0);
  $272 = ($255|0)==($1|0);
  $273 = $272 & $271;
  $274 = $270 | $273;
  if ($274) {
   $275 = (___errno_location()|0);
   HEAP32[$275>>2] = 34;
   $282 = $1;$283 = $0;
   tempRet0 = ($282);
   return ($283|0);
  }
 }
 $276 = ($neg$0|0)<(0);
 $277 = $276 << 31 >> 31;
 $278 = $257 ^ $neg$0;
 $279 = $255 ^ $277;
 $280 = (_i64Subtract(($278|0),($279|0),($neg$0|0),($277|0))|0);
 $281 = tempRet0;
 $282 = $281;$283 = $280;
 tempRet0 = ($282);
 return ($283|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i25 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3121$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa288 = 0;
 var $$lcssa289 = 0, $$lcssa308 = 0, $$lcssa308$lcssa = 0, $$lcssa309 = 0, $$lcssa309$lcssa = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa333 = 0, $$lcssa50$i = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted = 0, $$promoted$i = 0;
 var $$promoted185 = 0, $$sink$off0$us$i = 0, $$sink$off0$us93$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0;
 var $276 = 0.0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0;
 var $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0;
 var $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0;
 var $672 = 0.0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0.0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0.0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa177$i = 0, $a$0101$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0;
 var $a$3$i$lcssa300 = 0, $a$3$i301 = 0, $a$3$ph$i = 0, $a$3$ph183$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i23 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge$i26 = 0, $brmerge187 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$185 = 0, $c$2 = 0;
 var $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0103$i = 0, $carry1$0$us$i = 0, $carry1$0$us89$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us94$i = 0, $carry1$1$us94$i$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0;
 var $e2$0$us$i = 0, $e2$0$us84$i = 0, $e2$1$i = 0, $e2$1$i298 = 0, $e2$1$ph$i = 0, $e2$1$ph182$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa294 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa331 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0;
 var $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3117$i = 0, $gotdig$3117$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1118$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$084 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0;
 var $j$0$lcssa$i = 0, $j$0120$i = 0, $j$0120$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$3110$i = 0, $k$0$lcssa$i = 0, $k$0119$i = 0, $k$0119$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4102$i = 0, $k$5$in$us$i = 0, $k$5$in$us88$i = 0, $k$5$us$i = 0;
 var $k$5$us90$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us96$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0116$i = 0, $lnz$0116$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$us$i = 0;
 var $or$cond17$us95$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond216$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9$i = 0, $or$cond9$not = 0, $rp$0$lcssa178$i = 0, $rp$0100$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0;
 var $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0;
 var $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i22 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph37$i = 0, $z$1$us$i = 0, $z$1$us85$i = 0, $z$2$us$i = 0, $z$2$us87$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0;
 var $z$3$us97$i = 0, $z$3$us97$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = ((($f)) + 4|0);
 $1 = ((($f)) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = ((($2)) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa333 = $9;
   break;
  }
 }
 $12 = ($$lcssa333|0)==(45);
 do {
  if ((($$lcssa333|0) == 43) | (($$lcssa333|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($16)) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa333;$sign$0 = 1;
  }
 } while(0);
 $c$185 = $c$0;$i$084 = 0;
 while(1) {
  $23 = $c$185 | 32;
  $24 = (61192 + ($i$084)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$185;$i$0$lcssa = $i$084;
   break;
  }
  $28 = ($i$084>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$185;
   }
  } while(0);
  $36 = (($i$084) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$185 = $c$2;$i$084 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $39 & $38;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   do {
    if ($51) {
     $52 = $c$1$lcssa | 32;
     $53 = ($52|0)==(110);
     if ($53) {
      $54 = HEAP32[$0>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = ($54>>>0)<($55>>>0);
      if ($56) {
       $57 = ((($54)) + 1|0);
       HEAP32[$0>>2] = $57;
       $58 = HEAP8[$54>>0]|0;
       $59 = $58&255;
       $c$4 = $59;
      } else {
       $60 = (___shgetc($f)|0);
       $c$4 = $60;
      }
      $61 = $c$4 | 32;
      $62 = ($61|0)==(97);
      if (!($62)) {
       break;
      }
      $712 = HEAP32[$0>>2]|0;
      $713 = HEAP32[$1>>2]|0;
      $714 = ($712>>>0)<($713>>>0);
      if ($714) {
       $716 = ((($712)) + 1|0);
       HEAP32[$0>>2] = $716;
       $717 = HEAP8[$712>>0]|0;
       $718 = $717&255;
       $c$4$1 = $718;
      } else {
       $715 = (___shgetc($f)|0);
       $c$4$1 = $715;
      }
      $719 = $c$4$1 | 32;
      $720 = ($719|0)==(110);
      if (!($720)) {
       break;
      }
      $63 = HEAP32[$0>>2]|0;
      $64 = HEAP32[$1>>2]|0;
      $65 = ($63>>>0)<($64>>>0);
      if ($65) {
       $66 = ((($63)) + 1|0);
       HEAP32[$0>>2] = $66;
       $67 = HEAP8[$63>>0]|0;
       $68 = $67&255;
       $70 = $68;
      } else {
       $69 = (___shgetc($f)|0);
       $70 = $69;
      }
      $71 = ($70|0)==(40);
      if ($71) {
       $i$4 = 1;
      } else {
       $72 = HEAP32[$1>>2]|0;
       $73 = ($72|0)==(0|0);
       if ($73) {
        $$0 = nan;
        STACKTOP = sp;return (+$$0);
       }
       $74 = HEAP32[$0>>2]|0;
       $75 = ((($74)) + -1|0);
       HEAP32[$0>>2] = $75;
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      while(1) {
       $76 = HEAP32[$0>>2]|0;
       $77 = HEAP32[$1>>2]|0;
       $78 = ($76>>>0)<($77>>>0);
       if ($78) {
        $79 = ((($76)) + 1|0);
        HEAP32[$0>>2] = $79;
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $84 = $81;
       } else {
        $82 = (___shgetc($f)|0);
        $84 = $82;
       }
       $83 = (($84) + -48)|0;
       $85 = ($83>>>0)<(10);
       $86 = (($84) + -65)|0;
       $87 = ($86>>>0)<(26);
       $or$cond = $85 | $87;
       if (!($or$cond)) {
        $88 = (($84) + -97)|0;
        $89 = ($88>>>0)<(26);
        $90 = ($84|0)==(95);
        $or$cond7 = $90 | $89;
        if (!($or$cond7)) {
         $$lcssa289 = $84;$i$4$lcssa = $i$4;
         break;
        }
       }
       $102 = (($i$4) + 1)|0;
       $i$4 = $102;
      }
      $91 = ($$lcssa289|0)==(41);
      if ($91) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $92 = HEAP32[$1>>2]|0;
      $93 = ($92|0)==(0|0);
      if (!($93)) {
       $94 = HEAP32[$0>>2]|0;
       $95 = ((($94)) + -1|0);
       HEAP32[$0>>2] = $95;
      }
      if (!($39)) {
       $97 = (___errno_location()|0);
       HEAP32[$97>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       STACKTOP = sp;return (+$$0);
      }
      $96 = ($i$4$lcssa|0)==(0);
      $brmerge187 = $96 | $93;
      if ($brmerge187) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $$promoted185 = HEAP32[$0>>2]|0;
      $$in = $i$4$lcssa;$100 = $$promoted185;
      while(1) {
       $98 = (($$in) + -1)|0;
       $99 = ((($100)) + -1|0);
       $101 = ($98|0)==(0);
       if ($101) {
        $$lcssa288 = $99;
        break;
       } else {
        $$in = $98;$100 = $99;
       }
      }
      HEAP32[$0>>2] = $$lcssa288;
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $108 = ($c$1$lcssa|0)==(48);
     do {
      if ($108) {
       $109 = HEAP32[$0>>2]|0;
       $110 = HEAP32[$1>>2]|0;
       $111 = ($109>>>0)<($110>>>0);
       if ($111) {
        $112 = ((($109)) + 1|0);
        HEAP32[$0>>2] = $112;
        $113 = HEAP8[$109>>0]|0;
        $114 = $113&255;
        $117 = $114;
       } else {
        $115 = (___shgetc($f)|0);
        $117 = $115;
       }
       $116 = $117 | 32;
       $118 = ($116|0)==(120);
       if (!($118)) {
        $320 = HEAP32[$1>>2]|0;
        $321 = ($320|0)==(0|0);
        if ($321) {
         $c$6 = 48;
         break;
        }
        $322 = HEAP32[$0>>2]|0;
        $323 = ((($322)) + -1|0);
        HEAP32[$0>>2] = $323;
        $c$6 = 48;
        break;
       }
       $119 = HEAP32[$0>>2]|0;
       $120 = HEAP32[$1>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$0>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $c$0$i = $124;$gotdig$0$i = 0;
       } else {
        $125 = (___shgetc($f)|0);
        $c$0$i = $125;$gotdig$0$i = 0;
       }
       while(1) {
        if ((($c$0$i|0) == 46)) {
         $gotdig$0$i$lcssa294 = $gotdig$0$i;
         label = 71;
         break;
        } else if (!((($c$0$i|0) == 48))) {
         $162 = 0;$164 = 0;$721 = 0;$722 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         break;
        }
        $126 = HEAP32[$0>>2]|0;
        $127 = HEAP32[$1>>2]|0;
        $128 = ($126>>>0)<($127>>>0);
        if ($128) {
         $129 = ((($126)) + 1|0);
         HEAP32[$0>>2] = $129;
         $130 = HEAP8[$126>>0]|0;
         $131 = $130&255;
         $c$0$i = $131;$gotdig$0$i = 1;
         continue;
        } else {
         $132 = (___shgetc($f)|0);
         $c$0$i = $132;$gotdig$0$i = 1;
         continue;
        }
       }
       if ((label|0) == 71) {
        $133 = HEAP32[$0>>2]|0;
        $134 = HEAP32[$1>>2]|0;
        $135 = ($133>>>0)<($134>>>0);
        if ($135) {
         $136 = ((($133)) + 1|0);
         HEAP32[$0>>2] = $136;
         $137 = HEAP8[$133>>0]|0;
         $138 = $137&255;
         $c$1$ph$i = $138;
        } else {
         $139 = (___shgetc($f)|0);
         $c$1$ph$i = $139;
        }
        $140 = ($c$1$ph$i|0)==(48);
        if ($140) {
         $148 = 0;$149 = 0;
         while(1) {
          $141 = HEAP32[$0>>2]|0;
          $142 = HEAP32[$1>>2]|0;
          $143 = ($141>>>0)<($142>>>0);
          if ($143) {
           $144 = ((($141)) + 1|0);
           HEAP32[$0>>2] = $144;
           $145 = HEAP8[$141>>0]|0;
           $146 = $145&255;
           $152 = $146;
          } else {
           $147 = (___shgetc($f)|0);
           $152 = $147;
          }
          $150 = (_i64Add(($148|0),($149|0),-1,-1)|0);
          $151 = tempRet0;
          $153 = ($152|0)==(48);
          if ($153) {
           $148 = $150;$149 = $151;
          } else {
           $162 = 0;$164 = 0;$721 = $150;$722 = $151;$c$2$i = $152;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break;
          }
         }
        } else {
         $162 = 0;$164 = 0;$721 = 0;$722 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa294;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
       while(1) {
        $154 = (($c$2$i) + -48)|0;
        $155 = ($154>>>0)<(10);
        $$pre$i = $c$2$i | 32;
        if ($155) {
         label = 83;
        } else {
         $156 = (($$pre$i) + -97)|0;
         $157 = ($156>>>0)<(6);
         $158 = ($c$2$i|0)==(46);
         $or$cond6$i = $158 | $157;
         if (!($or$cond6$i)) {
          $206 = $721;$207 = $164;$209 = $722;$210 = $162;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break;
         }
         if ($158) {
          $159 = ($gotrad$0$i|0)==(0);
          if ($159) {
           $723 = $164;$724 = $162;$725 = $164;$726 = $162;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
          } else {
           $206 = $721;$207 = $164;$209 = $722;$210 = $162;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
         } else {
          label = 83;
         }
        }
        if ((label|0) == 83) {
         label = 0;
         $160 = ($c$2$i|0)>(57);
         $161 = (($$pre$i) + -87)|0;
         $d$0$i = $160 ? $161 : $154;
         $163 = ($162|0)<(0);
         $165 = ($164>>>0)<(8);
         $166 = ($162|0)==(0);
         $167 = $166 & $165;
         $168 = $163 | $167;
         do {
          if ($168) {
           $169 = $x$0$i << 4;
           $170 = (($d$0$i) + ($169))|0;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $170;$y$1$i = $y$0$i;
          } else {
           $171 = ($162|0)<(0);
           $172 = ($164>>>0)<(14);
           $173 = ($162|0)==(0);
           $174 = $173 & $172;
           $175 = $171 | $174;
           if ($175) {
            $176 = (+($d$0$i|0));
            $177 = $scale$0$i * 0.0625;
            $178 = $177 * $176;
            $179 = $y$0$i + $178;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $177;$x$1$i = $x$0$i;$y$1$i = $179;
            break;
           }
           $180 = ($d$0$i|0)==(0);
           $181 = ($gottail$0$i|0)!=(0);
           $or$cond$i = $181 | $180;
           if ($or$cond$i) {
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           } else {
            $182 = $scale$0$i * 0.5;
            $183 = $y$0$i + $182;
            $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $183;
           }
          }
         } while(0);
         $184 = (_i64Add(($164|0),($162|0),1,0)|0);
         $185 = tempRet0;
         $723 = $721;$724 = $722;$725 = $184;$726 = $185;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
        }
        $186 = HEAP32[$0>>2]|0;
        $187 = HEAP32[$1>>2]|0;
        $188 = ($186>>>0)<($187>>>0);
        if ($188) {
         $189 = ((($186)) + 1|0);
         HEAP32[$0>>2] = $189;
         $190 = HEAP8[$186>>0]|0;
         $191 = $190&255;
         $162 = $726;$164 = $725;$721 = $723;$722 = $724;$c$2$i = $191;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        } else {
         $192 = (___shgetc($f)|0);
         $162 = $726;$164 = $725;$721 = $723;$722 = $724;$c$2$i = $192;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        }
       }
       $193 = ($gotdig$2$i$lcssa|0)==(0);
       if ($193) {
        $194 = HEAP32[$1>>2]|0;
        $195 = ($194|0)==(0|0);
        if (!($195)) {
         $196 = HEAP32[$0>>2]|0;
         $197 = ((($196)) + -1|0);
         HEAP32[$0>>2] = $197;
        }
        $198 = ($pok|0)==(0);
        if ($198) {
         ___shlim($f,0);
        } else {
         if (!($195)) {
          $199 = HEAP32[$0>>2]|0;
          $200 = ((($199)) + -1|0);
          HEAP32[$0>>2] = $200;
          $201 = ($gotrad$0$i$lcssa|0)==(0);
          if (!($201)) {
           $202 = ((($199)) + -2|0);
           HEAP32[$0>>2] = $202;
          }
         }
        }
        $203 = (+($sign$0|0));
        $204 = $203 * 0.0;
        $$0 = $204;
        STACKTOP = sp;return (+$$0);
       }
       $205 = ($gotrad$0$i$lcssa|0)==(0);
       $208 = $205 ? $207 : $206;
       $211 = $205 ? $210 : $209;
       $212 = ($210|0)<(0);
       $213 = ($207>>>0)<(8);
       $214 = ($210|0)==(0);
       $215 = $214 & $213;
       $216 = $212 | $215;
       if ($216) {
        $218 = $207;$219 = $210;$x$324$i = $x$0$i$lcssa;
        while(1) {
         $217 = $x$324$i << 4;
         $220 = (_i64Add(($218|0),($219|0),1,0)|0);
         $221 = tempRet0;
         $222 = ($221|0)<(0);
         $223 = ($220>>>0)<(8);
         $224 = ($221|0)==(0);
         $225 = $224 & $223;
         $226 = $222 | $225;
         if ($226) {
          $218 = $220;$219 = $221;$x$324$i = $217;
         } else {
          $x$3$lcssa$i = $217;
          break;
         }
        }
       } else {
        $x$3$lcssa$i = $x$0$i$lcssa;
       }
       $227 = $c$2$lcssa$i | 32;
       $228 = ($227|0)==(112);
       do {
        if ($228) {
         $229 = (_scanexp($f,$pok)|0);
         $230 = tempRet0;
         $231 = ($229|0)==(0);
         $232 = ($230|0)==(-2147483648);
         $233 = $231 & $232;
         if ($233) {
          $234 = ($pok|0)==(0);
          if ($234) {
           ___shlim($f,0);
           $$0 = 0.0;
           STACKTOP = sp;return (+$$0);
          } else {
           $235 = HEAP32[$1>>2]|0;
           $236 = ($235|0)==(0|0);
           if ($236) {
            $247 = 0;$248 = 0;
            break;
           }
           $237 = HEAP32[$0>>2]|0;
           $238 = ((($237)) + -1|0);
           HEAP32[$0>>2] = $238;
           $247 = 0;$248 = 0;
           break;
          }
         } else {
          $247 = $229;$248 = $230;
         }
        } else {
         $239 = HEAP32[$1>>2]|0;
         $240 = ($239|0)==(0|0);
         if ($240) {
          $247 = 0;$248 = 0;
         } else {
          $241 = HEAP32[$0>>2]|0;
          $242 = ((($241)) + -1|0);
          HEAP32[$0>>2] = $242;
          $247 = 0;$248 = 0;
         }
        }
       } while(0);
       $243 = (_bitshift64Shl(($208|0),($211|0),2)|0);
       $244 = tempRet0;
       $245 = (_i64Add(($243|0),($244|0),-32,-1)|0);
       $246 = tempRet0;
       $249 = (_i64Add(($245|0),($246|0),($247|0),($248|0))|0);
       $250 = tempRet0;
       $251 = ($x$3$lcssa$i|0)==(0);
       if ($251) {
        $252 = (+($sign$0|0));
        $253 = $252 * 0.0;
        $$0 = $253;
        STACKTOP = sp;return (+$$0);
       }
       $254 = (0 - ($emin$0$ph))|0;
       $255 = ($250|0)>(0);
       $256 = ($249>>>0)>($254>>>0);
       $257 = ($250|0)==(0);
       $258 = $257 & $256;
       $259 = $255 | $258;
       if ($259) {
        $260 = (___errno_location()|0);
        HEAP32[$260>>2] = 34;
        $261 = (+($sign$0|0));
        $262 = $261 * 1.7976931348623157E+308;
        $263 = $262 * 1.7976931348623157E+308;
        $$0 = $263;
        STACKTOP = sp;return (+$$0);
       }
       $264 = (($emin$0$ph) + -106)|0;
       $265 = ($264|0)<(0);
       $266 = $265 << 31 >> 31;
       $267 = ($250|0)<($266|0);
       $268 = ($249>>>0)<($264>>>0);
       $269 = ($250|0)==($266|0);
       $270 = $269 & $268;
       $271 = $267 | $270;
       if ($271) {
        $273 = (___errno_location()|0);
        HEAP32[$273>>2] = 34;
        $274 = (+($sign$0|0));
        $275 = $274 * 2.2250738585072014E-308;
        $276 = $275 * 2.2250738585072014E-308;
        $$0 = $276;
        STACKTOP = sp;return (+$$0);
       }
       $272 = ($x$3$lcssa$i|0)>(-1);
       if ($272) {
        $282 = $249;$283 = $250;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
        while(1) {
         $277 = !($y$320$i >= 0.5);
         $278 = $x$419$i << 1;
         $279 = $y$320$i + -1.0;
         $280 = $277&1;
         $281 = $280 | $278;
         $x$5$i = $281 ^ 1;
         $$pn$i = $277 ? $y$320$i : $279;
         $y$4$i = $y$320$i + $$pn$i;
         $284 = (_i64Add(($282|0),($283|0),-1,-1)|0);
         $285 = tempRet0;
         $286 = ($281|0)>(-1);
         if ($286) {
          $282 = $284;$283 = $285;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
         } else {
          $291 = $284;$292 = $285;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $291 = $249;$292 = $250;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
       }
       $287 = ($emin$0$ph|0)<(0);
       $288 = $287 << 31 >> 31;
       $289 = (_i64Subtract(32,0,($emin$0$ph|0),($288|0))|0);
       $290 = tempRet0;
       $293 = (_i64Add(($291|0),($292|0),($289|0),($290|0))|0);
       $294 = tempRet0;
       $295 = (0)>($294|0);
       $296 = ($bits$0$ph>>>0)>($293>>>0);
       $297 = (0)==($294|0);
       $298 = $297 & $296;
       $299 = $295 | $298;
       if ($299) {
        $300 = ($293|0)<(0);
        if ($300) {
         $$0710$i = 0;
         label = 124;
        } else {
         $$07$i = $293;
         label = 122;
        }
       } else {
        $$07$i = $bits$0$ph;
        label = 122;
       }
       do {
        if ((label|0) == 122) {
         $301 = ($$07$i|0)<(53);
         if ($301) {
          $$0710$i = $$07$i;
          label = 124;
          break;
         }
         $$pre41$i = (+($sign$0|0));
         $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
        }
       } while(0);
       if ((label|0) == 124) {
        $302 = (84 - ($$0710$i))|0;
        $303 = (+_scalbn(1.0,$302));
        $304 = (+($sign$0|0));
        $305 = (+_copysignl($303,$304));
        $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $304;$bias$0$i = $305;
       }
       $306 = ($$0711$i|0)<(32);
       $307 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $306;
       $308 = $x$4$lcssa$i & 1;
       $309 = ($308|0)==(0);
       $or$cond9$i = $309 & $or$cond4$i;
       $310 = $or$cond9$i&1;
       $x$6$i = (($310) + ($x$4$lcssa$i))|0;
       $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
       $311 = (+($x$6$i>>>0));
       $312 = $$pre$phi42$iZ2D * $311;
       $313 = $bias$0$i + $312;
       $314 = $$pre$phi42$iZ2D * $y$5$i;
       $315 = $314 + $313;
       $316 = $315 - $bias$0$i;
       $317 = $316 != 0.0;
       if (!($317)) {
        $318 = (___errno_location()|0);
        HEAP32[$318>>2] = 34;
       }
       $319 = (+_scalbnl($316,$291));
       $$0 = $319;
       STACKTOP = sp;return (+$$0);
      } else {
       $c$6 = $c$1$lcssa;
      }
     } while(0);
     $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
     $324 = (0 - ($sum$i))|0;
     $$09$i = $c$6;$gotdig$0$i12 = 0;
     while(1) {
      if ((($$09$i|0) == 46)) {
       $gotdig$0$i12$lcssa331 = $gotdig$0$i12;
       label = 135;
       break;
      } else if (!((($$09$i|0) == 48))) {
       $$2$i = $$09$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
       break;
      }
      $325 = HEAP32[$0>>2]|0;
      $326 = HEAP32[$1>>2]|0;
      $327 = ($325>>>0)<($326>>>0);
      if ($327) {
       $328 = ((($325)) + 1|0);
       HEAP32[$0>>2] = $328;
       $329 = HEAP8[$325>>0]|0;
       $330 = $329&255;
       $$09$i = $330;$gotdig$0$i12 = 1;
       continue;
      } else {
       $331 = (___shgetc($f)|0);
       $$09$i = $331;$gotdig$0$i12 = 1;
       continue;
      }
     }
     if ((label|0) == 135) {
      $332 = HEAP32[$0>>2]|0;
      $333 = HEAP32[$1>>2]|0;
      $334 = ($332>>>0)<($333>>>0);
      if ($334) {
       $335 = ((($332)) + 1|0);
       HEAP32[$0>>2] = $335;
       $336 = HEAP8[$332>>0]|0;
       $337 = $336&255;
       $$1$ph$i = $337;
      } else {
       $338 = (___shgetc($f)|0);
       $$1$ph$i = $338;
      }
      $339 = ($$1$ph$i|0)==(48);
      if ($339) {
       $340 = 0;$341 = 0;
       while(1) {
        $342 = (_i64Add(($340|0),($341|0),-1,-1)|0);
        $343 = tempRet0;
        $344 = HEAP32[$0>>2]|0;
        $345 = HEAP32[$1>>2]|0;
        $346 = ($344>>>0)<($345>>>0);
        if ($346) {
         $347 = ((($344)) + 1|0);
         HEAP32[$0>>2] = $347;
         $348 = HEAP8[$344>>0]|0;
         $349 = $348&255;
         $$1$be$i = $349;
        } else {
         $350 = (___shgetc($f)|0);
         $$1$be$i = $350;
        }
        $351 = ($$1$be$i|0)==(48);
        if ($351) {
         $340 = $342;$341 = $343;
        } else {
         $$2$i = $$1$be$i;$727 = $342;$728 = $343;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
         break;
        }
       }
      } else {
       $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa331;$gotrad$0$i14 = 1;
      }
     }
     HEAP32[$x$i>>2] = 0;
     $352 = (($$2$i) + -48)|0;
     $353 = ($352>>>0)<(10);
     $354 = ($$2$i|0)==(46);
     $355 = $354 | $353;
     L214: do {
      if ($355) {
       $356 = ((($x$i)) + 496|0);
       $$3121$i = $$2$i;$359 = 0;$360 = 0;$729 = $354;$730 = $352;$731 = $727;$732 = $728;$gotdig$3117$i = $gotdig$2$i13;$gotrad$1118$i = $gotrad$0$i14;$j$0120$i = 0;$k$0119$i = 0;$lnz$0116$i = 0;
       L216: while(1) {
        do {
         if ($729) {
          $cond$i = ($gotrad$1118$i|0)==(0);
          if ($cond$i) {
           $733 = $359;$734 = $360;$735 = $359;$736 = $360;$gotdig$4$i = $gotdig$3117$i;$gotrad$2$i = 1;$j$2$i = $j$0120$i;$k$2$i = $k$0119$i;$lnz$2$i = $lnz$0116$i;
          } else {
           $737 = $731;$738 = $732;$739 = $359;$740 = $360;$gotdig$3117$i$lcssa = $gotdig$3117$i;$j$0120$i$lcssa = $j$0120$i;$k$0119$i$lcssa = $k$0119$i;$lnz$0116$i$lcssa = $lnz$0116$i;
           break L216;
          }
         } else {
          $358 = ($k$0119$i|0)<(125);
          $361 = (_i64Add(($359|0),($360|0),1,0)|0);
          $362 = tempRet0;
          $363 = ($$3121$i|0)!=(48);
          if (!($358)) {
           if (!($363)) {
            $733 = $731;$734 = $732;$735 = $361;$736 = $362;$gotdig$4$i = $gotdig$3117$i;$gotrad$2$i = $gotrad$1118$i;$j$2$i = $j$0120$i;$k$2$i = $k$0119$i;$lnz$2$i = $lnz$0116$i;
            break;
           }
           $373 = HEAP32[$356>>2]|0;
           $374 = $373 | 1;
           HEAP32[$356>>2] = $374;
           $733 = $731;$734 = $732;$735 = $361;$736 = $362;$gotdig$4$i = $gotdig$3117$i;$gotrad$2$i = $gotrad$1118$i;$j$2$i = $j$0120$i;$k$2$i = $k$0119$i;$lnz$2$i = $lnz$0116$i;
           break;
          }
          $$lnz$0$i = $363 ? $361 : $lnz$0116$i;
          $364 = ($j$0120$i|0)==(0);
          $365 = (($x$i) + ($k$0119$i<<2)|0);
          if ($364) {
           $storemerge$i = $730;
          } else {
           $366 = HEAP32[$365>>2]|0;
           $367 = ($366*10)|0;
           $368 = (($$3121$i) + -48)|0;
           $369 = (($368) + ($367))|0;
           $storemerge$i = $369;
          }
          HEAP32[$365>>2] = $storemerge$i;
          $370 = (($j$0120$i) + 1)|0;
          $371 = ($370|0)==(9);
          $372 = $371&1;
          $$k$0$i = (($372) + ($k$0119$i))|0;
          $$11$i = $371 ? 0 : $370;
          $733 = $731;$734 = $732;$735 = $361;$736 = $362;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1118$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
         }
        } while(0);
        $375 = HEAP32[$0>>2]|0;
        $376 = HEAP32[$1>>2]|0;
        $377 = ($375>>>0)<($376>>>0);
        if ($377) {
         $378 = ((($375)) + 1|0);
         HEAP32[$0>>2] = $378;
         $379 = HEAP8[$375>>0]|0;
         $380 = $379&255;
         $$3$be$i = $380;
        } else {
         $381 = (___shgetc($f)|0);
         $$3$be$i = $381;
        }
        $382 = (($$3$be$i) + -48)|0;
        $383 = ($382>>>0)<(10);
        $384 = ($$3$be$i|0)==(46);
        $385 = $384 | $383;
        if ($385) {
         $$3121$i = $$3$be$i;$359 = $735;$360 = $736;$729 = $384;$730 = $382;$731 = $733;$732 = $734;$gotdig$3117$i = $gotdig$4$i;$gotrad$1118$i = $gotrad$2$i;$j$0120$i = $j$2$i;$k$0119$i = $k$2$i;$lnz$0116$i = $lnz$2$i;
        } else {
         $$3$lcssa$i = $$3$be$i;$387 = $733;$388 = $735;$390 = $734;$391 = $736;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
         label = 158;
         break L214;
        }
       }
       $357 = ($gotdig$3117$i$lcssa|0)!=(0);
       $741 = $739;$742 = $740;$743 = $737;$744 = $738;$745 = $357;$j$069$i = $j$0120$i$lcssa;$k$065$i = $k$0119$i$lcssa;$lnz$059$i = $lnz$0116$i$lcssa;
       label = 166;
      } else {
       $$3$lcssa$i = $$2$i;$387 = $727;$388 = 0;$390 = $728;$391 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
       label = 158;
      }
     } while(0);
     do {
      if ((label|0) == 158) {
       $386 = ($gotrad$1$lcssa$i|0)==(0);
       $389 = $386 ? $388 : $387;
       $392 = $386 ? $391 : $390;
       $393 = ($gotdig$3$lcssa$i|0)!=(0);
       $394 = $$3$lcssa$i | 32;
       $395 = ($394|0)==(101);
       $or$cond13$i = $395 & $393;
       if (!($or$cond13$i)) {
        $410 = ($$3$lcssa$i|0)>(-1);
        if ($410) {
         $741 = $388;$742 = $391;$743 = $389;$744 = $392;$745 = $393;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
         label = 166;
         break;
        } else {
         $746 = $388;$747 = $391;$748 = $393;$749 = $389;$750 = $392;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
         label = 168;
         break;
        }
       }
       $396 = (_scanexp($f,$pok)|0);
       $397 = tempRet0;
       $398 = ($396|0)==(0);
       $399 = ($397|0)==(-2147483648);
       $400 = $398 & $399;
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0$i25 = 0.0;
         break;
        }
        $402 = HEAP32[$1>>2]|0;
        $403 = ($402|0)==(0|0);
        if ($403) {
         $406 = 0;$407 = 0;
        } else {
         $404 = HEAP32[$0>>2]|0;
         $405 = ((($404)) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
        }
       } else {
        $406 = $396;$407 = $397;
       }
       $408 = (_i64Add(($406|0),($407|0),($389|0),($392|0))|0);
       $409 = tempRet0;
       $420 = $408;$422 = $388;$423 = $409;$425 = $391;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
       label = 170;
      }
     } while(0);
     if ((label|0) == 166) {
      $411 = HEAP32[$1>>2]|0;
      $412 = ($411|0)==(0|0);
      if ($412) {
       $746 = $741;$747 = $742;$748 = $745;$749 = $743;$750 = $744;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
       label = 168;
      } else {
       $413 = HEAP32[$0>>2]|0;
       $414 = ((($413)) + -1|0);
       HEAP32[$0>>2] = $414;
       if ($745) {
        $420 = $743;$422 = $741;$423 = $744;$425 = $742;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
        label = 170;
       } else {
        label = 169;
       }
      }
     }
     if ((label|0) == 168) {
      if ($748) {
       $420 = $749;$422 = $746;$423 = $750;$425 = $747;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
       label = 170;
      } else {
       label = 169;
      }
     }
     do {
      if ((label|0) == 169) {
       $415 = (___errno_location()|0);
       HEAP32[$415>>2] = 22;
       ___shlim($f,0);
       $$0$i25 = 0.0;
      }
      else if ((label|0) == 170) {
       $416 = HEAP32[$x$i>>2]|0;
       $417 = ($416|0)==(0);
       if ($417) {
        $418 = (+($sign$0|0));
        $419 = $418 * 0.0;
        $$0$i25 = $419;
        break;
       }
       $421 = ($420|0)==($422|0);
       $424 = ($423|0)==($425|0);
       $426 = $421 & $424;
       $427 = ($425|0)<(0);
       $428 = ($422>>>0)<(10);
       $429 = ($425|0)==(0);
       $430 = $429 & $428;
       $431 = $427 | $430;
       $or$cond$i16 = $431 & $426;
       if ($or$cond$i16) {
        $432 = ($bits$0$ph>>>0)>(30);
        $433 = $416 >>> $bits$0$ph;
        $434 = ($433|0)==(0);
        $or$cond15$i = $432 | $434;
        if ($or$cond15$i) {
         $435 = (+($sign$0|0));
         $436 = (+($416>>>0));
         $437 = $435 * $436;
         $$0$i25 = $437;
         break;
        }
       }
       $438 = (($emin$0$ph|0) / -2)&-1;
       $439 = ($438|0)<(0);
       $440 = $439 << 31 >> 31;
       $441 = ($423|0)>($440|0);
       $442 = ($420>>>0)>($438>>>0);
       $443 = ($423|0)==($440|0);
       $444 = $443 & $442;
       $445 = $441 | $444;
       if ($445) {
        $446 = (___errno_location()|0);
        HEAP32[$446>>2] = 34;
        $447 = (+($sign$0|0));
        $448 = $447 * 1.7976931348623157E+308;
        $449 = $448 * 1.7976931348623157E+308;
        $$0$i25 = $449;
        break;
       }
       $450 = (($emin$0$ph) + -106)|0;
       $451 = ($450|0)<(0);
       $452 = $451 << 31 >> 31;
       $453 = ($423|0)<($452|0);
       $454 = ($420>>>0)<($450>>>0);
       $455 = ($423|0)==($452|0);
       $456 = $455 & $454;
       $457 = $453 | $456;
       if ($457) {
        $458 = (___errno_location()|0);
        HEAP32[$458>>2] = 34;
        $459 = (+($sign$0|0));
        $460 = $459 * 2.2250738585072014E-308;
        $461 = $460 * 2.2250738585072014E-308;
        $$0$i25 = $461;
        break;
       }
       $462 = ($j$067$i|0)==(0);
       if ($462) {
        $k$3$i = $k$063$i;
       } else {
        $463 = ($j$067$i|0)<(9);
        if ($463) {
         $464 = (($x$i) + ($k$063$i<<2)|0);
         $$promoted$i = HEAP32[$464>>2]|0;
         $466 = $$promoted$i;$j$3110$i = $j$067$i;
         while(1) {
          $465 = ($466*10)|0;
          $467 = (($j$3110$i) + 1)|0;
          $exitcond$i = ($467|0)==(9);
          if ($exitcond$i) {
           $$lcssa323 = $465;
           break;
          } else {
           $466 = $465;$j$3110$i = $467;
          }
         }
         HEAP32[$464>>2] = $$lcssa323;
        }
        $468 = (($k$063$i) + 1)|0;
        $k$3$i = $468;
       }
       $469 = ($lnz$057$i|0)<(9);
       if ($469) {
        $470 = ($lnz$057$i|0)<=($420|0);
        $471 = ($420|0)<(18);
        $or$cond3$i = $470 & $471;
        if ($or$cond3$i) {
         $472 = ($420|0)==(9);
         if ($472) {
          $473 = (+($sign$0|0));
          $474 = HEAP32[$x$i>>2]|0;
          $475 = (+($474>>>0));
          $476 = $473 * $475;
          $$0$i25 = $476;
          break;
         }
         $477 = ($420|0)<(9);
         if ($477) {
          $478 = (+($sign$0|0));
          $479 = HEAP32[$x$i>>2]|0;
          $480 = (+($479>>>0));
          $481 = $478 * $480;
          $482 = (8 - ($420))|0;
          $483 = (61208 + ($482<<2)|0);
          $484 = HEAP32[$483>>2]|0;
          $485 = (+($484|0));
          $486 = $481 / $485;
          $$0$i25 = $486;
          break;
         }
         $$neg32$i = (($bits$0$ph) + 27)|0;
         $487 = Math_imul($420, -3)|0;
         $488 = (($$neg32$i) + ($487))|0;
         $489 = ($488|0)>(30);
         $$pre$i17 = HEAP32[$x$i>>2]|0;
         $490 = $$pre$i17 >>> $488;
         $491 = ($490|0)==(0);
         $or$cond216$i = $489 | $491;
         if ($or$cond216$i) {
          $492 = (+($sign$0|0));
          $493 = (+($$pre$i17>>>0));
          $494 = $492 * $493;
          $495 = (($420) + -10)|0;
          $496 = (61208 + ($495<<2)|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = (+($497|0));
          $499 = $494 * $498;
          $$0$i25 = $499;
          break;
         }
        }
       }
       $500 = (($420|0) % 9)&-1;
       $501 = ($500|0)==(0);
       if ($501) {
        $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $420;$z$1$ph37$i = $k$3$i;
       } else {
        $502 = ($420|0)>(-1);
        $503 = (($500) + 9)|0;
        $504 = $502 ? $500 : $503;
        $505 = (8 - ($504))|0;
        $506 = (61208 + ($505<<2)|0);
        $507 = HEAP32[$506>>2]|0;
        $508 = ($k$3$i|0)==(0);
        if ($508) {
         $a$0$lcssa177$i = 0;$rp$0$lcssa178$i = $420;$z$0$i = 0;
        } else {
         $509 = (1000000000 / ($507|0))&-1;
         $a$0101$i = 0;$carry$0103$i = 0;$k$4102$i = 0;$rp$0100$i = $420;
         while(1) {
          $510 = (($x$i) + ($k$4102$i<<2)|0);
          $511 = HEAP32[$510>>2]|0;
          $512 = (($511>>>0) % ($507>>>0))&-1;
          $513 = (($511>>>0) / ($507>>>0))&-1;
          $514 = (($513) + ($carry$0103$i))|0;
          HEAP32[$510>>2] = $514;
          $515 = Math_imul($512, $509)|0;
          $516 = ($k$4102$i|0)==($a$0101$i|0);
          $517 = ($514|0)==(0);
          $or$cond16$i = $516 & $517;
          $518 = (($k$4102$i) + 1)|0;
          $519 = $518 & 127;
          $520 = (($rp$0100$i) + -9)|0;
          $rp$1$i18 = $or$cond16$i ? $520 : $rp$0100$i;
          $a$1$i = $or$cond16$i ? $519 : $a$0101$i;
          $521 = ($518|0)==($k$3$i|0);
          if ($521) {
           $$lcssa322 = $515;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
           break;
          } else {
           $a$0101$i = $a$1$i;$carry$0103$i = $515;$k$4102$i = $518;$rp$0100$i = $rp$1$i18;
          }
         }
         $522 = ($$lcssa322|0)==(0);
         if ($522) {
          $a$0$lcssa177$i = $a$1$i$lcssa;$rp$0$lcssa178$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
         } else {
          $523 = (($k$3$i) + 1)|0;
          $524 = (($x$i) + ($k$3$i<<2)|0);
          HEAP32[$524>>2] = $$lcssa322;
          $a$0$lcssa177$i = $a$1$i$lcssa;$rp$0$lcssa178$i = $rp$1$i18$lcssa;$z$0$i = $523;
         }
        }
        $525 = (9 - ($504))|0;
        $526 = (($525) + ($rp$0$lcssa178$i))|0;
        $a$2$ph38$i = $a$0$lcssa177$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $526;$z$1$ph37$i = $z$0$i;
       }
       L295: while(1) {
        $527 = ($rp$2$ph36$i|0)<(18);
        $528 = (($x$i) + ($a$2$ph38$i<<2)|0);
        if ($527) {
         $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph37$i;
         while(1) {
          $530 = (($z$1$us$i) + 127)|0;
          $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
          while(1) {
           $k$5$us$i = $k$5$in$us$i & 127;
           $531 = (($x$i) + ($k$5$us$i<<2)|0);
           $532 = HEAP32[$531>>2]|0;
           $533 = (_bitshift64Shl(($532|0),0,29)|0);
           $534 = tempRet0;
           $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
           $536 = tempRet0;
           $537 = ($536>>>0)>(0);
           $538 = ($535>>>0)>(1000000000);
           $539 = ($536|0)==(0);
           $540 = $539 & $538;
           $541 = $537 | $540;
           if ($541) {
            $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
            $543 = tempRet0;
            $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
            $545 = tempRet0;
            $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
           } else {
            $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
           }
           HEAP32[$531>>2] = $$sink$off0$us$i;
           $546 = (($z$2$us$i) + 127)|0;
           $547 = $546 & 127;
           $548 = ($k$5$us$i|0)!=($547|0);
           $549 = ($k$5$us$i|0)==($a$2$ph38$i|0);
           $or$cond17$us$i = $548 | $549;
           $550 = ($$sink$off0$us$i|0)==(0);
           $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
           $z$3$us$i = $or$cond17$us$i ? $z$2$us$i : $k$5$z$2$us$i;
           $551 = (($k$5$us$i) + -1)|0;
           if ($549) {
            $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
            break;
           } else {
            $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
           }
          }
          $552 = (($e2$0$us$i) + -29)|0;
          $553 = ($carry1$1$us$i$lcssa|0)==(0);
          if ($553) {
           $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i$lcssa;
          } else {
           $$lcssa50$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
           break;
          }
         }
        } else {
         $529 = ($rp$2$ph36$i|0)==(18);
         if ($529) {
          $e2$0$us84$i = $e2$0$ph$i;$z$1$us85$i = $z$1$ph37$i;
         } else {
          $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$ph37$i;
          break;
         }
         while(1) {
          $554 = HEAP32[$528>>2]|0;
          $555 = ($554>>>0)<(9007199);
          if (!($555)) {
           $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$us84$i;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$us85$i;
           break L295;
          }
          $556 = (($z$1$us85$i) + 127)|0;
          $carry1$0$us89$i = 0;$k$5$in$us88$i = $556;$z$2$us87$i = $z$1$us85$i;
          while(1) {
           $k$5$us90$i = $k$5$in$us88$i & 127;
           $557 = (($x$i) + ($k$5$us90$i<<2)|0);
           $558 = HEAP32[$557>>2]|0;
           $559 = (_bitshift64Shl(($558|0),0,29)|0);
           $560 = tempRet0;
           $561 = (_i64Add(($559|0),($560|0),($carry1$0$us89$i|0),0)|0);
           $562 = tempRet0;
           $563 = ($562>>>0)>(0);
           $564 = ($561>>>0)>(1000000000);
           $565 = ($562|0)==(0);
           $566 = $565 & $564;
           $567 = $563 | $566;
           if ($567) {
            $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
            $569 = tempRet0;
            $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
            $571 = tempRet0;
            $$sink$off0$us93$i = $570;$carry1$1$us94$i = $568;
           } else {
            $$sink$off0$us93$i = $561;$carry1$1$us94$i = 0;
           }
           HEAP32[$557>>2] = $$sink$off0$us93$i;
           $572 = (($z$2$us87$i) + 127)|0;
           $573 = $572 & 127;
           $574 = ($k$5$us90$i|0)!=($573|0);
           $575 = ($k$5$us90$i|0)==($a$2$ph38$i|0);
           $or$cond17$us95$i = $574 | $575;
           $576 = ($$sink$off0$us93$i|0)==(0);
           $k$5$z$2$us96$i = $576 ? $k$5$us90$i : $z$2$us87$i;
           $z$3$us97$i = $or$cond17$us95$i ? $z$2$us87$i : $k$5$z$2$us96$i;
           $577 = (($k$5$us90$i) + -1)|0;
           if ($575) {
            $carry1$1$us94$i$lcssa = $carry1$1$us94$i;$z$3$us97$i$lcssa = $z$3$us97$i;
            break;
           } else {
            $carry1$0$us89$i = $carry1$1$us94$i;$k$5$in$us88$i = $577;$z$2$us87$i = $z$3$us97$i;
           }
          }
          $578 = (($e2$0$us84$i) + -29)|0;
          $579 = ($carry1$1$us94$i$lcssa|0)==(0);
          if ($579) {
           $e2$0$us84$i = $578;$z$1$us85$i = $z$3$us97$i$lcssa;
          } else {
           $$lcssa50$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us94$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us97$i$lcssa;
           break;
          }
         }
        }
        $580 = (($rp$2$ph36$i) + 9)|0;
        $581 = (($a$2$ph38$i) + 127)|0;
        $582 = $581 & 127;
        $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
        if ($583) {
         $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
         $585 = $584 & 127;
         $586 = (($x$i) + ($585<<2)|0);
         $587 = HEAP32[$586>>2]|0;
         $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
         $589 = $588 & 127;
         $590 = (($x$i) + ($589<<2)|0);
         $591 = HEAP32[$590>>2]|0;
         $592 = $591 | $587;
         HEAP32[$590>>2] = $592;
         $z$4$i = $585;
        } else {
         $z$4$i = $z$3$lcssa$lcssa$i;
        }
        $593 = (($x$i) + ($582<<2)|0);
        HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
        $a$2$ph38$i = $582;$e2$0$ph$i = $$lcssa50$i;$rp$2$ph36$i = $580;$z$1$ph37$i = $z$4$i;
       }
       L320: while(1) {
        $624 = (($z$5$ph$i) + 1)|0;
        $621 = $624 & 127;
        $625 = (($z$5$ph$i) + 127)|0;
        $626 = $625 & 127;
        $627 = (($x$i) + ($626<<2)|0);
        $a$3$ph183$i = $a$3$ph$i;$e2$1$ph182$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
        while(1) {
         $628 = ($rp$3$ph$i|0)==(18);
         $629 = ($rp$3$ph$i|0)>(27);
         $$18$i = $629 ? 9 : 1;
         $$not$i = $628 ^ 1;
         $a$3$i = $a$3$ph183$i;$e2$1$i = $e2$1$ph182$i;
         while(1) {
          $594 = $a$3$i & 127;
          $595 = ($594|0)==($z$5$ph$i|0);
          do {
           if ($595) {
            label = 220;
           } else {
            $596 = (($x$i) + ($594<<2)|0);
            $597 = HEAP32[$596>>2]|0;
            $598 = ($597>>>0)<(9007199);
            if ($598) {
             label = 220;
             break;
            }
            $599 = ($597>>>0)>(9007199);
            if ($599) {
             break;
            }
            $600 = (($a$3$i) + 1)|0;
            $601 = $600 & 127;
            $602 = ($601|0)==($z$5$ph$i|0);
            if ($602) {
             label = 220;
             break;
            }
            $708 = (($x$i) + ($601<<2)|0);
            $709 = HEAP32[$708>>2]|0;
            $710 = ($709>>>0)<(254740991);
            if ($710) {
             label = 220;
             break;
            }
            $711 = ($709>>>0)>(254740991);
            $brmerge$i26 = $711 | $$not$i;
            if (!($brmerge$i26)) {
             $635 = $594;$a$3$i301 = $a$3$i;$e2$1$i298 = $e2$1$i;$z$7$i = $z$5$ph$i;
             break L320;
            }
           }
          } while(0);
          if ((label|0) == 220) {
           label = 0;
           if ($628) {
            label = 221;
            break L320;
           }
          }
          $603 = (($e2$1$i) + ($$18$i))|0;
          $604 = ($a$3$i|0)==($z$5$ph$i|0);
          if ($604) {
           $a$3$i = $z$5$ph$i;$e2$1$i = $603;
          } else {
           $$lcssa308 = $603;$a$3$i$lcssa300 = $a$3$i;
           break;
          }
         }
         $605 = 1 << $$18$i;
         $606 = (($605) + -1)|0;
         $607 = 1000000000 >>> $$18$i;
         $a$478$i = $a$3$i$lcssa300;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa300;$rp$477$i = $rp$3$ph$i;
         while(1) {
          $608 = (($x$i) + ($k$679$i<<2)|0);
          $609 = HEAP32[$608>>2]|0;
          $610 = $609 & $606;
          $611 = $609 >>> $$18$i;
          $612 = (($611) + ($carry3$081$i))|0;
          HEAP32[$608>>2] = $612;
          $613 = Math_imul($610, $607)|0;
          $614 = ($k$679$i|0)==($a$478$i|0);
          $615 = ($612|0)==(0);
          $or$cond19$i = $614 & $615;
          $616 = (($k$679$i) + 1)|0;
          $617 = $616 & 127;
          $618 = (($rp$477$i) + -9)|0;
          $rp$5$i = $or$cond19$i ? $618 : $rp$477$i;
          $a$5$i = $or$cond19$i ? $617 : $a$478$i;
          $619 = ($617|0)==($z$5$ph$i|0);
          if ($619) {
           $$lcssa309 = $613;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
           break;
          } else {
           $a$478$i = $a$5$i;$carry3$081$i = $613;$k$679$i = $617;$rp$477$i = $rp$5$i;
          }
         }
         $620 = ($$lcssa309|0)==(0);
         if ($620) {
          $a$3$ph183$i = $a$5$i$lcssa;$e2$1$ph182$i = $$lcssa308;$rp$3$ph$i = $rp$5$i$lcssa;
          continue;
         }
         $622 = ($621|0)==($a$5$i$lcssa|0);
         if (!($622)) {
          $$lcssa308$lcssa = $$lcssa308;$$lcssa309$lcssa = $$lcssa309;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
          break;
         }
         $630 = HEAP32[$627>>2]|0;
         $631 = $630 | 1;
         HEAP32[$627>>2] = $631;
         $a$3$ph183$i = $a$5$i$lcssa;$e2$1$ph182$i = $$lcssa308;$rp$3$ph$i = $rp$5$i$lcssa;
        }
        $623 = (($x$i) + ($z$5$ph$i<<2)|0);
        HEAP32[$623>>2] = $$lcssa309$lcssa;
        $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa308$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $621;
       }
       if ((label|0) == 221) {
        if ($595) {
         $632 = (($621) + -1)|0;
         $633 = (($x$i) + ($632<<2)|0);
         HEAP32[$633>>2] = 0;
         $635 = $z$5$ph$i;$a$3$i301 = $a$3$i;$e2$1$i298 = $e2$1$i;$z$7$i = $621;
        } else {
         $635 = $594;$a$3$i301 = $a$3$i;$e2$1$i298 = $e2$1$i;$z$7$i = $z$5$ph$i;
        }
       }
       $634 = (($x$i) + ($635<<2)|0);
       $636 = HEAP32[$634>>2]|0;
       $637 = (+($636>>>0));
       $638 = (($a$3$i301) + 1)|0;
       $639 = $638 & 127;
       $640 = ($639|0)==($z$7$i|0);
       if ($640) {
        $697 = (($a$3$i301) + 2)|0;
        $698 = $697 & 127;
        $699 = (($698) + -1)|0;
        $700 = (($x$i) + ($699<<2)|0);
        HEAP32[$700>>2] = 0;
        $z$7$1$i = $698;
       } else {
        $z$7$1$i = $z$7$i;
       }
       $701 = $637 * 1.0E+9;
       $702 = (($x$i) + ($639<<2)|0);
       $703 = HEAP32[$702>>2]|0;
       $704 = (+($703>>>0));
       $705 = $701 + $704;
       $661 = (+($sign$0|0));
       $643 = $661 * $705;
       $681 = (($e2$1$i298) + 53)|0;
       $687 = (($681) - ($emin$0$ph))|0;
       $688 = ($687|0)<($bits$0$ph|0);
       $706 = ($687|0)<(0);
       $$$i = $706 ? 0 : $687;
       $denormal$0$i = $688&1;
       $$010$i = $688 ? $$$i : $bits$0$ph;
       $707 = ($$010$i|0)<(53);
       if ($707) {
        $641 = (105 - ($$010$i))|0;
        $642 = (+_scalbn(1.0,$641));
        $644 = (+_copysignl($642,$643));
        $645 = (53 - ($$010$i))|0;
        $646 = (+_scalbn(1.0,$645));
        $647 = (+_fmodl($643,$646));
        $648 = $643 - $647;
        $649 = $644 + $648;
        $bias$0$i23 = $644;$frac$0$i = $647;$y$1$i22 = $649;
       } else {
        $bias$0$i23 = 0.0;$frac$0$i = 0.0;$y$1$i22 = $643;
       }
       $650 = (($a$3$i301) + 2)|0;
       $651 = $650 & 127;
       $652 = ($651|0)==($z$7$1$i|0);
       do {
        if ($652) {
         $frac$2$i = $frac$0$i;
        } else {
         $653 = (($x$i) + ($651<<2)|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($654>>>0)<(500000000);
         do {
          if ($655) {
           $656 = ($654|0)==(0);
           if ($656) {
            $657 = (($a$3$i301) + 3)|0;
            $658 = $657 & 127;
            $659 = ($658|0)==($z$7$1$i|0);
            if ($659) {
             $frac$1$i = $frac$0$i;
             break;
            }
           }
           $660 = $661 * 0.25;
           $662 = $660 + $frac$0$i;
           $frac$1$i = $662;
          } else {
           $663 = ($654>>>0)>(500000000);
           if ($663) {
            $664 = $661 * 0.75;
            $665 = $664 + $frac$0$i;
            $frac$1$i = $665;
            break;
           }
           $666 = (($a$3$i301) + 3)|0;
           $667 = $666 & 127;
           $668 = ($667|0)==($z$7$1$i|0);
           if ($668) {
            $669 = $661 * 0.5;
            $670 = $669 + $frac$0$i;
            $frac$1$i = $670;
            break;
           } else {
            $671 = $661 * 0.75;
            $672 = $671 + $frac$0$i;
            $frac$1$i = $672;
            break;
           }
          }
         } while(0);
         $673 = (53 - ($$010$i))|0;
         $674 = ($673|0)>(1);
         if (!($674)) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $675 = (+_fmodl($frac$1$i,1.0));
         $676 = $675 != 0.0;
         if ($676) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $677 = $frac$1$i + 1.0;
         $frac$2$i = $677;
        }
       } while(0);
       $678 = $y$1$i22 + $frac$2$i;
       $679 = $678 - $bias$0$i23;
       $680 = $681 & 2147483647;
       $682 = (-2 - ($sum$i))|0;
       $683 = ($680|0)>($682|0);
       do {
        if ($683) {
         $684 = (+Math_abs((+$679)));
         $685 = !($684 >= 9007199254740992.0);
         if ($685) {
          $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i298;$y$2$i24 = $679;
         } else {
          $686 = ($$010$i|0)==($687|0);
          $or$cond20$i = $688 & $686;
          $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
          $689 = $679 * 0.5;
          $690 = (($e2$1$i298) + 1)|0;
          $denormal$2$i = $denormal$1$i;$e2$2$i = $690;$y$2$i24 = $689;
         }
         $691 = (($e2$2$i) + 50)|0;
         $692 = ($691|0)>($324|0);
         if (!($692)) {
          $693 = ($denormal$2$i|0)!=(0);
          $694 = $frac$2$i != 0.0;
          $or$cond8$i = $694 & $693;
          if (!($or$cond8$i)) {
           $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
           break;
          }
         }
         $695 = (___errno_location()|0);
         HEAP32[$695>>2] = 34;
         $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        } else {
         $e2$3$i = $e2$1$i298;$y$3$i = $679;
        }
       } while(0);
       $696 = (+_scalbnl($y$3$i,$e2$3$i));
       $$0$i25 = $696;
      }
     } while(0);
     $$0 = $$0$i25;
     STACKTOP = sp;return (+$$0);
    }
   } while(0);
   $103 = HEAP32[$1>>2]|0;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    $105 = HEAP32[$0>>2]|0;
    $106 = ((($105)) + -1|0);
    HEAP32[$0>>2] = $106;
   }
   $107 = (___errno_location()|0);
   HEAP32[$107>>2] = 22;
   ___shlim($f,0);
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = ((($43)) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $$promoted = HEAP32[$0>>2]|0;
   $46 = $$promoted;$i$1 = $i$0$lcssa;
   while(1) {
    $45 = ((($46)) + -1|0);
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $46 = $45;$i$1 = $47;
    } else {
     $$lcssa = $45;
     break;
    }
   }
   HEAP32[$0>>2] = $$lcssa;
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
  return;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
  return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
    return ($$0|0);
   }
   $40 = $6&255;
   HEAP8[$36>>0] = $40;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = ((($f)) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    $35 = $x * 0.0;
    $$x = $34 ? $35 : $x;
    return (+$$x);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L23: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L23;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $156;$120 = $155;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = ((($s)) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = ((($s)) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = ((($s)) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = ((($s)) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = ((($f)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = ((($f)) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa10 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = ((($f)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1]($f,$s,$i$0$lcssa10)|0);
   $26 = ($25>>>0)<($i$0$lcssa10>>>0);
   if ($26) {
    $$0 = $i$0$lcssa10;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa10)|0);
    $28 = (($l) - ($i$0$lcssa10))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($f)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = ((($f)) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = ((($f)) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = ((($f)) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = ((($internal_buf)) + 80|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = ((($f)) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=61240; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = ((($f)) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = ((($f)) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = ((($f)) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = ((($f)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($f)) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f$i)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f$i)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = ((($f$i)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)!=(0);
 $15 = (($s) + ($12)|0);
 $16 = $14 ? $15 : $s;
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = ((($f$i)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f$i)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = ((($s)) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = ((($f$i)) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = ((($f$i)) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-2147483648,0)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return ($6|0);
 }
 $9 = ((($f$i)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
   tempRet0 = ($98);
   return ($99|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = ((($31)) + -1|0);
  HEAP32[$0>>2] = $32;
  $98 = -2147483648;$99 = 0;
  tempRet0 = ($98);
  return ($99|0);
 } else {
  $c$112 = $c$0;$x$013 = 0;
 }
 while(1) {
  $33 = ($x$013*10)|0;
  $34 = (($c$112) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = ((($36)) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $46 = $44 & $45;
  if ($46) {
   $c$112 = $c$1$be;$x$013 = $35;
  } else {
   $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $47 = ($$lcssa22|0)<(0);
 $48 = $47 << 31 >> 31;
 $49 = (($c$1$be$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
  while(1) {
   $55 = (___muldi3(($53|0),($54|0),10,0)|0);
   $56 = tempRet0;
   $57 = ($c$27|0)<(0);
   $58 = $57 << 31 >> 31;
   $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
   $60 = tempRet0;
   $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
   $62 = tempRet0;
   $63 = HEAP32[$0>>2]|0;
   $64 = HEAP32[$2>>2]|0;
   $65 = ($63>>>0)<($64>>>0);
   if ($65) {
    $66 = ((($63)) + 1|0);
    HEAP32[$0>>2] = $66;
    $67 = HEAP8[$63>>0]|0;
    $68 = $67&255;
    $c$2$be = $68;
   } else {
    $69 = (___shgetc($f)|0);
    $c$2$be = $69;
   }
   $70 = (($c$2$be) + -48)|0;
   $71 = ($70>>>0)<(10);
   $72 = ($62|0)<(21474836);
   $73 = ($61>>>0)<(2061584302);
   $74 = ($62|0)==(21474836);
   $75 = $74 & $73;
   $76 = $72 | $75;
   $77 = $71 & $76;
   if ($77) {
    $53 = $61;$54 = $62;$c$27 = $c$2$be;
   } else {
    $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
 }
 $51 = (($c$2$lcssa) + -48)|0;
 $52 = ($51>>>0)<(10);
 if ($52) {
  while(1) {
   $78 = HEAP32[$0>>2]|0;
   $79 = HEAP32[$2>>2]|0;
   $80 = ($78>>>0)<($79>>>0);
   if ($80) {
    $81 = ((($78)) + 1|0);
    HEAP32[$0>>2] = $81;
    $82 = HEAP8[$78>>0]|0;
    $83 = $82&255;
    $c$3$be = $83;
   } else {
    $84 = (___shgetc($f)|0);
    $c$3$be = $84;
   }
   $85 = (($c$3$be) + -48)|0;
   $86 = ($85>>>0)<(10);
   if (!($86)) {
    break;
   }
  }
 }
 $87 = HEAP32[$2>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $89 = HEAP32[$0>>2]|0;
  $90 = ((($89)) + -1|0);
  HEAP32[$0>>2] = $90;
 }
 $91 = ($neg$0|0)!=(0);
 $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
 $95 = tempRet0;
 $96 = $91 ? $94 : $92;
 $97 = $91 ? $95 : $93;
 $98 = $97;$99 = $96;
 tempRet0 = ($98);
 return ($99|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0;
 var $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0;
 var $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$100 = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$24 = 0, $$25 = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0;
 var $$412184$i = 0, $$5196$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us303$i = 0, $$a$3$us304$i = 0, $$a$3305$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa275$i = 0, $$lcssa443 = 0, $$lcssa448 = 0, $$lcssa449 = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa452 = 0, $$lcssa454 = 0, $$lcssa455 = 0;
 var $$lcssa461 = 0, $$lcssa465 = 0, $$lcssa467 = 0, $$lcssa470 = 0, $$lcssa471 = 0, $$lcssa474 = 0.0, $$lcssa475 = 0, $$lcssa478 = 0, $$lcssa482 = 0, $$mask$i = 0, $$mask$i38 = 0, $$mask1$i = 0, $$mask1$i37 = 0, $$neg151$i = 0, $$neg152$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0;
 var $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi302$iZ2D = 0, $$pre272 = 0, $$pre300$i = 0, $$pre301$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
 var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
 var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
 var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
 var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
 var $1148 = 0, $1149 = 0.0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0.0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1164$phi = 0;
 var $1165 = 0, $1165$phi = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0.0;
 var $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0.0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0;
 var $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0;
 var $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0;
 var $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0;
 var $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0;
 var $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0, $expanded110 = 0, $expanded112 = 0, $expanded113 = 0;
 var $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0, $expanded138 = 0, $expanded140 = 0, $expanded141 = 0;
 var $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0, $expanded166 = 0, $expanded168 = 0, $expanded169 = 0;
 var $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0, $expanded194 = 0, $expanded196 = 0, $expanded197 = 0;
 var $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0, $expanded70 = 0, $expanded71 = 0, $expanded73 = 0;
 var $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0, $expanded98 = 0, $expanded99 = 0, $fl$0115 = 0;
 var $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt87$lcssa = 0, $fmt87167 = 0, $fmt88 = 0, $fmt89 = 0, $fmt90 = 0, $fmt92 = 0, $fmt92$lcssa446 = 0, $fmt93 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0;
 var $i$1$lcssa$i = 0, $i$1191 = 0, $i$1222$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2209$i = 0, $i$3164 = 0, $i$3205$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i32 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i28 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i31 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0;
 var $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i52$i = 0, $or$cond$i57 = 0, $or$cond$i59$i = 0, $or$cond$i64 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i79 = 0, $or$cond$i81 = 0, $or$cond$i93$i = 0, $or$cond15 = 0;
 var $or$cond19 = 0, $or$cond22 = 0, $or$cond29$i = 0, $or$cond331 = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0;
 var $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0;
 var $s9$1192$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa447 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0;
 var $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0168 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0;
 var $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = ((($buf)) + 40|0);
 $3 = $2;
 $4 = ((($buf)) + 39|0);
 $5 = ((($wc)) + 4|0);
 $6 = $wc;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $1164 = 0;$1165 = 0;$cnt$0 = 0;$fmt89 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt89>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1166 = $22;$fmt88 = $fmt89;
  }
  while(1) {
   if ((($1166<<24>>24) == 37)) {
    $fmt87167 = $fmt88;$z$0168 = $fmt88;
    label = 9;
    break;
   } else if ((($1166<<24>>24) == 0)) {
    $fmt87$lcssa = $fmt88;$z$0$lcssa = $fmt88;
    break;
   }
   $24 = ((($fmt88)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1166 = $$pre;$fmt88 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt87167)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt87$lcssa = $fmt87167;$z$0$lcssa = $z$0168;
      break L12;
     }
     $28 = ((($z$0168)) + 1|0);
     $29 = ((($fmt87167)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt87167 = $29;$z$0168 = $28;
      label = 9;
     } else {
      $fmt87$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt89;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt89,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt89|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1165$phi = $1165;$1164$phi = $1164;$cnt$0 = $cnt$1;$fmt89 = $fmt87$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1165 = $1165$phi;$1164 = $1164$phi;
   continue;
  }
  $36 = ((($fmt87$lcssa)) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = ((($fmt87$lcssa)) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   $42 = ((($fmt87$lcssa)) + 3|0);
   $$100 = $41 ? $42 : $36;
   $$l10n$0 = $41 ? 1 : $l10n$0;
   $isdigittmp$ = $41 ? $isdigittmp : -1;
   $$pre272 = HEAP8[$$100>>0]|0;
   $44 = $$pre272;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L24: do {
   if ($46) {
    $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $62 = $53;$fl$0115 = $fl$0175;$storemerge8113 = $storemerge8174;
      break L24;
     }
     $52 = $53 << 24 >> 24;
     $54 = (($52) + -32)|0;
     $55 = 1 << $54;
     $56 = $55 | $fl$0175;
     $57 = ((($storemerge8174)) + 1|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58 << 24 >> 24;
     $60 = $59 & -32;
     $61 = ($60|0)==(32);
     if ($61) {
      $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
     } else {
      $62 = $58;$fl$0115 = $56;$storemerge8113 = $57;
      break;
     }
    }
   } else {
    $62 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
   }
  } while(0);
  $63 = ($62<<24>>24)==(42);
  do {
   if ($63) {
    $64 = ((($storemerge8113)) + 1|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $isdigittmp11 = (($66) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $67 = ((($storemerge8113)) + 2|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)==(36);
     if ($69) {
      $70 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$70>>2] = 10;
      $71 = HEAP8[$64>>0]|0;
      $72 = $71 << 24 >> 24;
      $73 = (($72) + -48)|0;
      $74 = (($nl_arg) + ($73<<3)|0);
      $75 = $74;
      $76 = $75;
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 4)|0;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($storemerge8113)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $82 = ($l10n$1|0)==(0);
     if (!($82)) {
      $$0 = -1;
      label = 363;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0115;$fmt90 = $64;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $83 = $arglist_current;
     $84 = ((0) + 4|0);
     $expanded64 = $84;
     $expanded = (($expanded64) - 1)|0;
     $85 = (($83) + ($expanded))|0;
     $86 = ((0) + 4|0);
     $expanded68 = $86;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $87 = $85 & $expanded66;
     $88 = $87;
     $89 = HEAP32[$88>>2]|0;
     $arglist_next = ((($88)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $64;$w$0 = $89;
    }
    $90 = ($w$0|0)<(0);
    if ($90) {
     $91 = $fl$0115 | 8192;
     $92 = (0 - ($w$0))|0;
     $fl$1 = $91;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $92;
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $93 = $62 << 24 >> 24;
    $isdigittmp1$i = (($93) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $97 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $94 = ($i$03$i*10)|0;
      $95 = (($94) + ($isdigittmp4$i))|0;
      $96 = ((($97)) + 1|0);
      $98 = HEAP8[$96>>0]|0;
      $99 = $98 << 24 >> 24;
      $isdigittmp$i = (($99) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $97 = $96;$i$03$i = $95;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $95;$$lcssa443 = $96;
       break;
      }
     }
     $100 = ($$lcssa|0)<(0);
     if ($100) {
      $$0 = -1;
      label = 363;
      break L1;
     } else {
      $fl$1 = $fl$0115;$fmt90 = $$lcssa443;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$0115;$fmt90 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $101 = HEAP8[$fmt90>>0]|0;
  $102 = ($101<<24>>24)==(46);
  L45: do {
   if ($102) {
    $103 = ((($fmt90)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = ($104<<24>>24)==(42);
    if (!($105)) {
     $132 = $104 << 24 >> 24;
     $isdigittmp1$i27 = (($132) + -48)|0;
     $isdigit2$i28 = ($isdigittmp1$i27>>>0)<(10);
     if ($isdigit2$i28) {
      $136 = $103;$i$03$i30 = 0;$isdigittmp4$i29 = $isdigittmp1$i27;
     } else {
      $fmt93 = $103;$p$0 = 0;
      break;
     }
     while(1) {
      $133 = ($i$03$i30*10)|0;
      $134 = (($133) + ($isdigittmp4$i29))|0;
      $135 = ((($136)) + 1|0);
      $137 = HEAP8[$135>>0]|0;
      $138 = $137 << 24 >> 24;
      $isdigittmp$i31 = (($138) + -48)|0;
      $isdigit$i32 = ($isdigittmp$i31>>>0)<(10);
      if ($isdigit$i32) {
       $136 = $135;$i$03$i30 = $134;$isdigittmp4$i29 = $isdigittmp$i31;
      } else {
       $fmt93 = $135;$p$0 = $134;
       break L45;
      }
     }
    }
    $106 = ((($fmt90)) + 2|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $isdigittmp9 = (($108) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $109 = ((($fmt90)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = ($110<<24>>24)==(36);
     if ($111) {
      $112 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$112>>2] = 10;
      $113 = HEAP8[$106>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = (($114) + -48)|0;
      $116 = (($nl_arg) + ($115<<3)|0);
      $117 = $116;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($fmt90)) + 4|0);
      $fmt93 = $123;$p$0 = $119;
      break;
     }
    }
    $124 = ($l10n$3|0)==(0);
    if (!($124)) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $125 = $arglist_current2;
     $126 = ((0) + 4|0);
     $expanded71 = $126;
     $expanded70 = (($expanded71) - 1)|0;
     $127 = (($125) + ($expanded70))|0;
     $128 = ((0) + 4|0);
     $expanded75 = $128;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $129 = $127 & $expanded73;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $arglist_next3 = ((($130)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt93 = $106;$p$0 = $131;
    } else {
     $fmt93 = $106;$p$0 = 0;
    }
   } else {
    $fmt93 = $fmt90;$p$0 = -1;
   }
  } while(0);
  $fmt92 = $fmt93;$st$0 = 0;
  while(1) {
   $139 = HEAP8[$fmt92>>0]|0;
   $140 = $139 << 24 >> 24;
   $141 = (($140) + -65)|0;
   $142 = ($141>>>0)>(57);
   if ($142) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $143 = ((($fmt92)) + 1|0);
   $144 = ((61352 + (($st$0*58)|0)|0) + ($141)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = (($146) + -1)|0;
   $148 = ($147>>>0)<(8);
   if ($148) {
    $fmt92 = $143;$st$0 = $146;
   } else {
    $$lcssa448 = $143;$$lcssa449 = $145;$$lcssa450 = $146;$fmt92$lcssa446 = $fmt92;$st$0$lcssa447 = $st$0;
    break;
   }
  }
  $149 = ($$lcssa449<<24>>24)==(0);
  if ($149) {
   $$0 = -1;
   label = 363;
   break;
  }
  $150 = ($$lcssa449<<24>>24)==(19);
  $151 = ($argpos$0|0)>(-1);
  L64: do {
   if ($150) {
    if ($151) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $1167 = $1164;$1168 = $1165;
     label = 62;
    }
   } else {
    if ($151) {
     $152 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$152>>2] = $$lcssa450;
     $153 = (($nl_arg) + ($argpos$0<<3)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($153)) + 4|0);
     $156 = HEAP32[$155>>2]|0;
     $1167 = $156;$1168 = $154;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 363;
     break L1;
    }
    $157 = ($$lcssa449&255)>(20);
    if ($157) {
     $259 = $1165;$286 = $1164;
    } else {
     do {
      switch ($$lcssa450|0) {
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $232 = $arglist_current29;
       $233 = ((0) + 8|0);
       $expanded134 = $233;
       $expanded133 = (($expanded134) - 1)|0;
       $234 = (($232) + ($expanded133))|0;
       $235 = ((0) + 8|0);
       $expanded138 = $235;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $236 = $234 & $expanded136;
       $237 = $236;
       $238 = +HEAPF64[$237>>3];
       $arglist_next30 = ((($237)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $238;$239 = HEAP32[tempDoublePtr>>2]|0;
       $240 = HEAP32[tempDoublePtr+4>>2]|0;
       $259 = $239;$286 = $240;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $225 = $arglist_current26;
       $226 = ((0) + 4|0);
       $expanded127 = $226;
       $expanded126 = (($expanded127) - 1)|0;
       $227 = (($225) + ($expanded126))|0;
       $228 = ((0) + 4|0);
       $expanded131 = $228;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $229 = $227 & $expanded129;
       $230 = $229;
       $231 = HEAP32[$230>>2]|0;
       $arglist_next27 = ((($230)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i38 = $231 & 255;
       $259 = $$mask$i38;$286 = 0;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $213 = $arglist_current23;
       $214 = ((0) + 4|0);
       $expanded120 = $214;
       $expanded119 = (($expanded120) - 1)|0;
       $215 = (($213) + ($expanded119))|0;
       $216 = ((0) + 4|0);
       $expanded124 = $216;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $217 = $215 & $expanded122;
       $218 = $217;
       $219 = HEAP32[$218>>2]|0;
       $arglist_next24 = ((($218)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $220 = $219&255;
       $221 = $220 << 24 >> 24;
       $222 = ($221|0)<(0);
       $223 = $222 << 31 >> 31;
       $sext = $219 << 24;
       $224 = $sext >> 24;
       $259 = $224;$286 = $223;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $206 = $arglist_current20;
       $207 = ((0) + 4|0);
       $expanded113 = $207;
       $expanded112 = (($expanded113) - 1)|0;
       $208 = (($206) + ($expanded112))|0;
       $209 = ((0) + 4|0);
       $expanded117 = $209;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $210 = $208 & $expanded115;
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $arglist_next21 = ((($211)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i37 = $212 & 65535;
       $259 = $$mask1$i37;$286 = 0;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $194 = $arglist_current17;
       $195 = ((0) + 4|0);
       $expanded106 = $195;
       $expanded105 = (($expanded106) - 1)|0;
       $196 = (($194) + ($expanded105))|0;
       $197 = ((0) + 4|0);
       $expanded110 = $197;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $198 = $196 & $expanded108;
       $199 = $198;
       $200 = HEAP32[$199>>2]|0;
       $arglist_next18 = ((($199)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $201 = $200&65535;
       $202 = $201 << 16 >> 16;
       $203 = ($202|0)<(0);
       $204 = $203 << 31 >> 31;
       $sext101 = $200 << 16;
       $205 = $sext101 >> 16;
       $259 = $205;$286 = $204;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $182 = $arglist_current14;
       $183 = ((0) + 8|0);
       $expanded99 = $183;
       $expanded98 = (($expanded99) - 1)|0;
       $184 = (($182) + ($expanded98))|0;
       $185 = ((0) + 8|0);
       $expanded103 = $185;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $186 = $184 & $expanded101;
       $187 = $186;
       $188 = $187;
       $189 = $188;
       $190 = HEAP32[$189>>2]|0;
       $191 = (($188) + 4)|0;
       $192 = $191;
       $193 = HEAP32[$192>>2]|0;
       $arglist_next15 = ((($187)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $259 = $190;$286 = $193;
       break L64;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $166 = $arglist_current8;
       $167 = ((0) + 4|0);
       $expanded85 = $167;
       $expanded84 = (($expanded85) - 1)|0;
       $168 = (($166) + ($expanded84))|0;
       $169 = ((0) + 4|0);
       $expanded89 = $169;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $170 = $168 & $expanded87;
       $171 = $170;
       $172 = HEAP32[$171>>2]|0;
       $arglist_next9 = ((($171)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $173 = ($172|0)<(0);
       $174 = $173 << 31 >> 31;
       $259 = $172;$286 = $174;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $175 = $arglist_current11;
       $176 = ((0) + 4|0);
       $expanded92 = $176;
       $expanded91 = (($expanded92) - 1)|0;
       $177 = (($175) + ($expanded91))|0;
       $178 = ((0) + 4|0);
       $expanded96 = $178;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $179 = $177 & $expanded94;
       $180 = $179;
       $181 = HEAP32[$180>>2]|0;
       $arglist_next12 = ((($180)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $259 = $181;$286 = 0;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = $arglist_current5;
       $159 = ((0) + 4|0);
       $expanded78 = $159;
       $expanded77 = (($expanded78) - 1)|0;
       $160 = (($158) + ($expanded77))|0;
       $161 = ((0) + 4|0);
       $expanded82 = $161;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $162 = $160 & $expanded80;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $arglist_next6 = ((($163)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $165 = $164;
       $259 = $165;$286 = $1164;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $241 = $arglist_current32;
       $242 = ((0) + 8|0);
       $expanded141 = $242;
       $expanded140 = (($expanded141) - 1)|0;
       $243 = (($241) + ($expanded140))|0;
       $244 = ((0) + 8|0);
       $expanded145 = $244;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $245 = $243 & $expanded143;
       $246 = $245;
       $247 = +HEAPF64[$246>>3];
       $arglist_next33 = ((($246)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $247;$248 = HEAP32[tempDoublePtr>>2]|0;
       $249 = HEAP32[tempDoublePtr+4>>2]|0;
       $259 = $248;$286 = $249;
       break L64;
       break;
      }
      default: {
       $259 = $1165;$286 = $1164;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $259 = $1168;$286 = $1167;
   } else {
    $1164 = $1167;$1165 = $1168;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $250 = HEAP8[$fmt92$lcssa446>>0]|0;
  $251 = $250 << 24 >> 24;
  $252 = ($st$0$lcssa447|0)!=(0);
  $253 = $251 & 15;
  $254 = ($253|0)==(3);
  $or$cond15 = $252 & $254;
  $255 = $251 & -33;
  $t$0 = $or$cond15 ? $255 : $251;
  $256 = $fl$1 & 8192;
  $257 = ($256|0)==(0);
  $258 = $fl$1 & -65537;
  $fl$1$ = $257 ? $fl$1 : $258;
  L86: do {
   switch ($t$0|0) {
   case 115:  {
    $377 = $259;
    $378 = ($259|0)!=(0);
    $379 = $378 ? $377 : 61848;
    $a$1 = $379;
    label = 94;
    break;
   }
   case 109:  {
    $374 = (___errno_location()|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (_strerror(($375|0))|0);
    $a$1 = $376;
    label = 94;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $259;HEAP32[tempDoublePtr+4>>2] = $286;$425 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $426 = ($286|0)<(0);
    if ($426) {
     $427 = -$425;
     $$07$i = $427;$pl$0$i = 1;$prefix$0$i = 61856;
    } else {
     $428 = $fl$1$ & 2048;
     $429 = ($428|0)==(0);
     if ($429) {
      $430 = $fl$1$ & 1;
      $431 = ($430|0)==(0);
      $$$i = $431 ? (61857) : (61862);
      $$07$i = $425;$pl$0$i = $430;$prefix$0$i = $$$i;
     } else {
      $$07$i = $425;$pl$0$i = 1;$prefix$0$i = (61859);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$432 = HEAP32[tempDoublePtr>>2]|0;
    $433 = HEAP32[tempDoublePtr+4>>2]|0;
    $434 = $433 & 2146435072;
    $435 = ($434>>>0)<(2146435072);
    $436 = (0)<(0);
    $437 = ($434|0)==(2146435072);
    $438 = $437 & $436;
    $439 = $435 | $438;
    do {
     if ($439) {
      $466 = (+_frexpl($$07$i,$e2$i));
      $467 = $466 * 2.0;
      $468 = $467 != 0.0;
      if ($468) {
       $469 = HEAP32[$e2$i>>2]|0;
       $470 = (($469) + -1)|0;
       HEAP32[$e2$i>>2] = $470;
      }
      $471 = $t$0 | 32;
      $472 = ($471|0)==(97);
      if ($472) {
       $473 = $t$0 & 32;
       $474 = ($473|0)==(0);
       $475 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $474 ? $prefix$0$i : $475;
       $476 = $pl$0$i | 2;
       $477 = ($p$0>>>0)>(11);
       $478 = (12 - ($p$0))|0;
       $479 = ($478|0)==(0);
       $480 = $477 | $479;
       do {
        if ($480) {
         $$1$i = $467;
        } else {
         $re$1179$i = $478;$round$0178$i = 8.0;
         while(1) {
          $481 = (($re$1179$i) + -1)|0;
          $482 = $round$0178$i * 16.0;
          $483 = ($481|0)==(0);
          if ($483) {
           $$lcssa474 = $482;
           break;
          } else {
           $re$1179$i = $481;$round$0178$i = $482;
          }
         }
         $484 = HEAP8[$prefix$0$$i>>0]|0;
         $485 = ($484<<24>>24)==(45);
         if ($485) {
          $486 = -$467;
          $487 = $486 - $$lcssa474;
          $488 = $$lcssa474 + $487;
          $489 = -$488;
          $$1$i = $489;
          break;
         } else {
          $490 = $467 + $$lcssa474;
          $491 = $490 - $$lcssa474;
          $$1$i = $491;
          break;
         }
        }
       } while(0);
       $492 = HEAP32[$e2$i>>2]|0;
       $493 = ($492|0)<(0);
       $494 = (0 - ($492))|0;
       $495 = $493 ? $494 : $492;
       $496 = ($495|0)<(0);
       if ($496) {
        $497 = ($495|0)<(0);
        $498 = $497 << 31 >> 31;
        $$05$i$i = $7;$499 = $495;$500 = $498;
        while(1) {
         $501 = (___uremdi3(($499|0),($500|0),10,0)|0);
         $502 = tempRet0;
         $503 = $501 | 48;
         $504 = $503&255;
         $505 = ((($$05$i$i)) + -1|0);
         HEAP8[$505>>0] = $504;
         $506 = (___udivdi3(($499|0),($500|0),10,0)|0);
         $507 = tempRet0;
         $508 = ($500>>>0)>(9);
         $509 = ($499>>>0)>(4294967295);
         $510 = ($500|0)==(9);
         $511 = $510 & $509;
         $512 = $508 | $511;
         if ($512) {
          $$05$i$i = $505;$499 = $506;$500 = $507;
         } else {
          $$lcssa475 = $505;$1177 = $506;$1178 = $507;
          break;
         }
        }
        $$0$lcssa$i48$i = $$lcssa475;$$01$lcssa$off0$i$i = $1177;
       } else {
        $$0$lcssa$i48$i = $7;$$01$lcssa$off0$i$i = $495;
       }
       $513 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($513) {
        $$1$lcssa$i$i = $$0$lcssa$i48$i;
       } else {
        $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $514 = (($y$03$i$i>>>0) % 10)&-1;
         $515 = $514 | 48;
         $516 = $515&255;
         $517 = ((($$12$i$i)) + -1|0);
         HEAP8[$517>>0] = $516;
         $518 = (($y$03$i$i>>>0) / 10)&-1;
         $519 = ($y$03$i$i>>>0)<(10);
         if ($519) {
          $$1$lcssa$i$i = $517;
          break;
         } else {
          $$12$i$i = $517;$y$03$i$i = $518;
         }
        }
       }
       $520 = ($$1$lcssa$i$i|0)==($7|0);
       if ($520) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $521 = HEAP32[$e2$i>>2]|0;
       $522 = $521 >> 31;
       $523 = $522 & 2;
       $524 = (($523) + 43)|0;
       $525 = $524&255;
       $526 = ((($estr$0$i)) + -1|0);
       HEAP8[$526>>0] = $525;
       $527 = (($t$0) + 15)|0;
       $528 = $527&255;
       $529 = ((($estr$0$i)) + -2|0);
       HEAP8[$529>>0] = $528;
       $530 = $fl$1$ & 8;
       $531 = ($530|0)==(0);
       if ($531) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $532 = (~~(($$2$us$us$i)));
          $533 = (61816 + ($532)|0);
          $534 = HEAP8[$533>>0]|0;
          $535 = $534&255;
          $536 = $535 | $473;
          $537 = $536&255;
          $538 = ((($s$0$us$us$i)) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $537;
          $539 = (+($532|0));
          $540 = $$2$us$us$i - $539;
          $541 = $540 * 16.0;
          $542 = $538;
          $543 = (($542) - ($0))|0;
          $544 = ($543|0)!=(1);
          $notlhs$us$us$i = $541 == 0.0;
          $or$cond$i79 = $544 | $notlhs$us$us$i;
          if ($or$cond$i79) {
           $s$1$us$us$i = $538;
          } else {
           $545 = ((($s$0$us$us$i)) + 2|0);
           HEAP8[$538>>0] = 46;
           $s$1$us$us$i = $545;
          }
          $546 = $541 != 0.0;
          if ($546) {
           $$2$us$us$i = $541;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $547 = (~~(($$2$us$i)));
          $548 = (61816 + ($547)|0);
          $549 = HEAP8[$548>>0]|0;
          $550 = $549&255;
          $551 = $550 | $473;
          $552 = $551&255;
          $553 = ((($s$0$us$i)) + 1|0);
          HEAP8[$s$0$us$i>>0] = $552;
          $554 = (+($547|0));
          $555 = $$2$us$i - $554;
          $556 = $555 * 16.0;
          $557 = $553;
          $558 = (($557) - ($0))|0;
          $559 = ($558|0)==(1);
          if ($559) {
           $560 = ((($s$0$us$i)) + 2|0);
           HEAP8[$553>>0] = 46;
           $s$1$us$i = $560;
          } else {
           $s$1$us$i = $553;
          }
          $561 = $556 != 0.0;
          if ($561) {
           $$2$us$i = $556;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $562 = (~~(($$2$i)));
         $563 = (61816 + ($562)|0);
         $564 = HEAP8[$563>>0]|0;
         $565 = $564&255;
         $566 = $565 | $473;
         $567 = $566&255;
         $568 = ((($s$0$i)) + 1|0);
         HEAP8[$s$0$i>>0] = $567;
         $569 = (+($562|0));
         $570 = $$2$i - $569;
         $571 = $570 * 16.0;
         $572 = $568;
         $573 = (($572) - ($0))|0;
         $574 = ($573|0)==(1);
         if ($574) {
          $575 = ((($s$0$i)) + 2|0);
          HEAP8[$568>>0] = 46;
          $s$1$i = $575;
         } else {
          $s$1$i = $568;
         }
         $576 = $571 != 0.0;
         if ($576) {
          $$2$i = $571;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $577 = ($p$0|0)!=(0);
       $$pre300$i = $s$1$lcssa$i;
       $578 = (($11) + ($$pre300$i))|0;
       $579 = ($578|0)<($p$0|0);
       $or$cond331 = $577 & $579;
       $580 = $529;
       $581 = (($12) + ($p$0))|0;
       $582 = (($581) - ($580))|0;
       $583 = $529;
       $584 = (($10) - ($583))|0;
       $585 = (($584) + ($$pre300$i))|0;
       $l$0$i = $or$cond331 ? $582 : $585;
       $586 = (($l$0$i) + ($476))|0;
       $587 = $fl$1$ & 73728;
       $588 = ($587|0)==(0);
       $589 = ($w$1|0)>($586|0);
       $or$cond$i52$i = $588 & $589;
       if ($or$cond$i52$i) {
        $590 = (($w$1) - ($586))|0;
        $591 = ($590>>>0)>(256);
        $592 = $591 ? 256 : $590;
        _memset(($pad$i|0),32,($592|0))|0;
        $593 = ($590>>>0)>(255);
        if ($593) {
         $$01$i54$i = $590;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $594 = (($$01$i54$i) + -256)|0;
          $595 = ($594>>>0)>(255);
          if ($595) {
           $$01$i54$i = $594;
          } else {
           break;
          }
         }
         $596 = $590 & 255;
         $$0$lcssa$i56$i = $596;
        } else {
         $$0$lcssa$i56$i = $590;
        }
        (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$476,$f)|0);
       $597 = ($587|0)==(65536);
       $or$cond$i59$i = $597 & $589;
       if ($or$cond$i59$i) {
        $598 = (($w$1) - ($586))|0;
        $599 = ($598>>>0)>(256);
        $600 = $599 ? 256 : $598;
        _memset(($pad$i|0),48,($600|0))|0;
        $601 = ($598>>>0)>(255);
        if ($601) {
         $$01$i61$i = $598;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $602 = (($$01$i61$i) + -256)|0;
          $603 = ($602>>>0)>(255);
          if ($603) {
           $$01$i61$i = $602;
          } else {
           break;
          }
         }
         $604 = $598 & 255;
         $$0$lcssa$i63$i = $604;
        } else {
         $$0$lcssa$i63$i = $598;
        }
        (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
       }
       $605 = (($$pre300$i) - ($0))|0;
       (___fwritex($buf$i,$605,$f)|0);
       $606 = $529;
       $607 = (($9) - ($606))|0;
       $608 = (($l$0$i) - ($607))|0;
       $609 = (($608) - ($605))|0;
       $610 = ($609|0)>(0);
       if ($610) {
        $611 = ($609>>>0)>(256);
        $612 = $611 ? 256 : $609;
        _memset(($pad$i|0),48,($612|0))|0;
        $613 = ($609>>>0)>(255);
        if ($613) {
         $$01$i67$i = $609;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $614 = (($$01$i67$i) + -256)|0;
          $615 = ($614>>>0)>(255);
          if ($615) {
           $$01$i67$i = $614;
          } else {
           break;
          }
         }
         $616 = $609 & 255;
         $$0$lcssa$i69$i = $616;
        } else {
         $$0$lcssa$i69$i = $609;
        }
        (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
       }
       (___fwritex($529,$607,$f)|0);
       $617 = ($587|0)==(8192);
       $or$cond$i72$i = $617 & $589;
       if ($or$cond$i72$i) {
        $618 = (($w$1) - ($586))|0;
        $619 = ($618>>>0)>(256);
        $620 = $619 ? 256 : $618;
        _memset(($pad$i|0),32,($620|0))|0;
        $621 = ($618>>>0)>(255);
        if ($621) {
         $$01$i74$i = $618;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $622 = (($$01$i74$i) + -256)|0;
          $623 = ($622>>>0)>(255);
          if ($623) {
           $$01$i74$i = $622;
          } else {
           break;
          }
         }
         $624 = $618 & 255;
         $$0$lcssa$i76$i = $624;
        } else {
         $$0$lcssa$i76$i = $618;
        }
        (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
       }
       $w$$i = $589 ? $w$1 : $586;
       $$0$i = $w$$i;
       break;
      }
      $625 = ($p$0|0)<(0);
      $$p$i = $625 ? 6 : $p$0;
      if ($468) {
       $626 = $467 * 268435456.0;
       $627 = HEAP32[$e2$i>>2]|0;
       $628 = (($627) + -28)|0;
       HEAP32[$e2$i>>2] = $628;
       $$3$i = $626;$629 = $628;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $467;$629 = $$pre$i;
      }
      $630 = ($629|0)<(0);
      $$31$i = $630 ? $big$i : $13;
      $631 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $632 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $632;
       $633 = ((($z$0$i)) + 4|0);
       $634 = (+($632>>>0));
       $635 = $$4$i - $634;
       $636 = $635 * 1.0E+9;
       $637 = $636 != 0.0;
       if ($637) {
        $$4$i = $636;$z$0$i = $633;
       } else {
        $$lcssa451 = $633;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $638 = ($$pr$i|0)>(0);
      if ($638) {
       $639 = $$pr$i;$a$1253$i = $$31$i;$z$1252$i = $$lcssa451;
       while(1) {
        $640 = ($639|0)>(29);
        $641 = $640 ? 29 : $639;
        $d$0245$i = ((($z$1252$i)) + -4|0);
        $642 = ($d$0245$i>>>0)<($a$1253$i>>>0);
        do {
         if ($642) {
          $a$2$ph$i = $a$1253$i;
         } else {
          $carry$0246$i = 0;$d$0247$i = $d$0245$i;
          while(1) {
           $643 = HEAP32[$d$0247$i>>2]|0;
           $644 = (_bitshift64Shl(($643|0),0,($641|0))|0);
           $645 = tempRet0;
           $646 = (_i64Add(($644|0),($645|0),($carry$0246$i|0),0)|0);
           $647 = tempRet0;
           $648 = (___uremdi3(($646|0),($647|0),1000000000,0)|0);
           $649 = tempRet0;
           HEAP32[$d$0247$i>>2] = $648;
           $650 = (___udivdi3(($646|0),($647|0),1000000000,0)|0);
           $651 = tempRet0;
           $d$0$i = ((($d$0247$i)) + -4|0);
           $652 = ($d$0$i>>>0)<($a$1253$i>>>0);
           if ($652) {
            $$lcssa452 = $650;
            break;
           } else {
            $carry$0246$i = $650;$d$0247$i = $d$0$i;
           }
          }
          $653 = ($$lcssa452|0)==(0);
          if ($653) {
           $a$2$ph$i = $a$1253$i;
           break;
          }
          $654 = ((($a$1253$i)) + -4|0);
          HEAP32[$654>>2] = $$lcssa452;
          $a$2$ph$i = $654;
         }
        } while(0);
        $z$2$i = $z$1252$i;
        while(1) {
         $655 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($655)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $656 = ((($z$2$i)) + -4|0);
         $657 = HEAP32[$656>>2]|0;
         $658 = ($657|0)==(0);
         if ($658) {
          $z$2$i = $656;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $659 = HEAP32[$e2$i>>2]|0;
        $660 = (($659) - ($641))|0;
        HEAP32[$e2$i>>2] = $660;
        $661 = ($660|0)>(0);
        if ($661) {
         $639 = $660;$a$1253$i = $a$2$ph$i;$z$1252$i = $z$2$i$lcssa;
        } else {
         $$pr146$i = $660;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa451;
      }
      $662 = ($$pr146$i|0)<(0);
      L197: do {
       if ($662) {
        $663 = (($$p$i) + 25)|0;
        $664 = (($663|0) / 9)&-1;
        $665 = (($664) + 1)|0;
        $666 = ($471|0)==(102);
        if (!($666)) {
         $699 = $$pr146$i;$a$3240$i = $a$1$lcssa$i;$z$3239$i = $z$1$lcssa$i;
         while(1) {
          $698 = (0 - ($699))|0;
          $700 = ($698|0)>(9);
          $701 = $700 ? 9 : $698;
          $702 = ($a$3240$i>>>0)<($z$3239$i>>>0);
          do {
           if ($702) {
            $706 = 1 << $701;
            $707 = (($706) + -1)|0;
            $708 = 1000000000 >>> $701;
            $carry3$0234$i = 0;$d$1233$i = $a$3240$i;
            while(1) {
             $709 = HEAP32[$d$1233$i>>2]|0;
             $710 = $709 & $707;
             $711 = $709 >>> $701;
             $712 = (($711) + ($carry3$0234$i))|0;
             HEAP32[$d$1233$i>>2] = $712;
             $713 = Math_imul($710, $708)|0;
             $714 = ((($d$1233$i)) + 4|0);
             $715 = ($714>>>0)<($z$3239$i>>>0);
             if ($715) {
              $carry3$0234$i = $713;$d$1233$i = $714;
             } else {
              $$lcssa454 = $713;
              break;
             }
            }
            $716 = HEAP32[$a$3240$i>>2]|0;
            $717 = ($716|0)==(0);
            $718 = ((($a$3240$i)) + 4|0);
            $$a$3$i = $717 ? $718 : $a$3240$i;
            $719 = ($$lcssa454|0)==(0);
            if ($719) {
             $$a$3306$i = $$a$3$i;$z$4$i = $z$3239$i;
             break;
            }
            $720 = ((($z$3239$i)) + 4|0);
            HEAP32[$z$3239$i>>2] = $$lcssa454;
            $$a$3306$i = $$a$3$i;$z$4$i = $720;
           } else {
            $703 = HEAP32[$a$3240$i>>2]|0;
            $704 = ($703|0)==(0);
            $705 = ((($a$3240$i)) + 4|0);
            $$a$3305$i = $704 ? $705 : $a$3240$i;
            $$a$3306$i = $$a$3305$i;$z$4$i = $z$3239$i;
           }
          } while(0);
          $721 = $z$4$i;
          $722 = $$a$3306$i;
          $723 = (($721) - ($722))|0;
          $724 = $723 >> 2;
          $725 = ($724|0)>($665|0);
          $726 = (($$a$3306$i) + ($665<<2)|0);
          $$z$4$i = $725 ? $726 : $z$4$i;
          $727 = HEAP32[$e2$i>>2]|0;
          $728 = (($727) + ($701))|0;
          HEAP32[$e2$i>>2] = $728;
          $729 = ($728|0)<(0);
          if ($729) {
           $699 = $728;$a$3240$i = $$a$3306$i;$z$3239$i = $$z$4$i;
          } else {
           $a$3$lcssa$i = $$a$3306$i;$z$3$lcssa$i = $$z$4$i;
           break L197;
          }
         }
        }
        $667 = (($$31$i) + ($665<<2)|0);
        $669 = $$pr146$i;$a$3240$us$i = $a$1$lcssa$i;$z$3239$us$i = $z$1$lcssa$i;
        while(1) {
         $668 = (0 - ($669))|0;
         $670 = ($668|0)>(9);
         $671 = $670 ? 9 : $668;
         $672 = ($a$3240$us$i>>>0)<($z$3239$us$i>>>0);
         do {
          if ($672) {
           $697 = 1 << $671;
           $690 = (($697) + -1)|0;
           $694 = 1000000000 >>> $671;
           $carry3$0234$us$i = 0;$d$1233$us$i = $a$3240$us$i;
           while(1) {
            $688 = HEAP32[$d$1233$us$i>>2]|0;
            $689 = $688 & $690;
            $691 = $688 >>> $671;
            $692 = (($691) + ($carry3$0234$us$i))|0;
            HEAP32[$d$1233$us$i>>2] = $692;
            $693 = Math_imul($689, $694)|0;
            $695 = ((($d$1233$us$i)) + 4|0);
            $696 = ($695>>>0)<($z$3239$us$i>>>0);
            if ($696) {
             $carry3$0234$us$i = $693;$d$1233$us$i = $695;
            } else {
             $$lcssa455 = $693;
             break;
            }
           }
           $676 = HEAP32[$a$3240$us$i>>2]|0;
           $677 = ($676|0)==(0);
           $678 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us$i = $677 ? $678 : $a$3240$us$i;
           $679 = ($$lcssa455|0)==(0);
           if ($679) {
            $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $z$3239$us$i;
            break;
           }
           $680 = ((($z$3239$us$i)) + 4|0);
           HEAP32[$z$3239$us$i>>2] = $$lcssa455;
           $$a$3$us304$i = $$a$3$us$i;$z$4$us$i = $680;
          } else {
           $673 = HEAP32[$a$3240$us$i>>2]|0;
           $674 = ($673|0)==(0);
           $675 = ((($a$3240$us$i)) + 4|0);
           $$a$3$us303$i = $674 ? $675 : $a$3240$us$i;
           $$a$3$us304$i = $$a$3$us303$i;$z$4$us$i = $z$3239$us$i;
          }
         } while(0);
         $681 = $z$4$us$i;
         $682 = (($681) - ($631))|0;
         $683 = $682 >> 2;
         $684 = ($683|0)>($665|0);
         $$z$4$us$i = $684 ? $667 : $z$4$us$i;
         $685 = HEAP32[$e2$i>>2]|0;
         $686 = (($685) + ($671))|0;
         HEAP32[$e2$i>>2] = $686;
         $687 = ($686|0)<(0);
         if ($687) {
          $669 = $686;$a$3240$us$i = $$a$3$us304$i;$z$3239$us$i = $$z$4$us$i;
         } else {
          $a$3$lcssa$i = $$a$3$us304$i;$z$3$lcssa$i = $$z$4$us$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $730 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($730) {
        $731 = $a$3$lcssa$i;
        $732 = (($631) - ($731))|0;
        $733 = $732 >> 2;
        $734 = ($733*9)|0;
        $735 = HEAP32[$a$3$lcssa$i>>2]|0;
        $736 = ($735>>>0)<(10);
        if ($736) {
         $e$1$i = $734;
         break;
        } else {
         $e$0229$i = $734;$i$0228$i = 10;
        }
        while(1) {
         $737 = ($i$0228$i*10)|0;
         $738 = (($e$0229$i) + 1)|0;
         $739 = ($735>>>0)<($737>>>0);
         if ($739) {
          $e$1$i = $738;
          break;
         } else {
          $e$0229$i = $738;$i$0228$i = $737;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $740 = ($471|0)!=(102);
      $741 = $740 ? $e$1$i : 0;
      $742 = (($$p$i) - ($741))|0;
      $743 = ($471|0)==(103);
      $744 = ($$p$i|0)!=(0);
      $745 = $744 & $743;
      $$neg151$i = $745 << 31 >> 31;
      $746 = (($742) + ($$neg151$i))|0;
      $747 = $z$3$lcssa$i;
      $748 = (($747) - ($631))|0;
      $749 = $748 >> 2;
      $750 = ($749*9)|0;
      $751 = (($750) + -9)|0;
      $752 = ($746|0)<($751|0);
      if ($752) {
       $753 = (($746) + 9216)|0;
       $754 = (($753|0) / 9)&-1;
       $$sum$i = (($754) + -1023)|0;
       $755 = (($$31$i) + ($$sum$i<<2)|0);
       $756 = (($753|0) % 9)&-1;
       $j$0221$i = (($756) + 1)|0;
       $757 = ($j$0221$i|0)<(9);
       if ($757) {
        $i$1222$i = 10;$j$0223$i = $j$0221$i;
        while(1) {
         $758 = ($i$1222$i*10)|0;
         $j$0$i = (($j$0223$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $758;
          break;
         } else {
          $i$1222$i = $758;$j$0223$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $759 = HEAP32[$755>>2]|0;
       $760 = (($759>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $761 = ($760|0)==(0);
       if ($761) {
        $$sum15$i = (($754) + -1022)|0;
        $762 = (($$31$i) + ($$sum15$i<<2)|0);
        $763 = ($762|0)==($z$3$lcssa$i|0);
        if ($763) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $755;$e$3$i = $e$1$i;
        } else {
         label = 221;
        }
       } else {
        label = 221;
       }
       do {
        if ((label|0) == 221) {
         label = 0;
         $764 = (($759>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $765 = $764 & 1;
         $766 = ($765|0)==(0);
         $$20$i = $766 ? 9007199254740992.0 : 9007199254740994.0;
         $767 = (($i$1$lcssa$i|0) / 2)&-1;
         $768 = ($760>>>0)<($767>>>0);
         do {
          if ($768) {
           $small$0$i = 0.5;
          } else {
           $769 = ($760|0)==($767|0);
           if ($769) {
            $$sum16$i = (($754) + -1022)|0;
            $770 = (($$31$i) + ($$sum16$i<<2)|0);
            $771 = ($770|0)==($z$3$lcssa$i|0);
            if ($771) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $772 = ($pl$0$i|0)==(0);
         do {
          if ($772) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $773 = HEAP8[$prefix$0$i>>0]|0;
           $774 = ($773<<24>>24)==(45);
           if (!($774)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $775 = -$$20$i;
           $776 = -$small$0$i;
           $round6$1$i = $775;$small$1$i = $776;
          }
         } while(0);
         $777 = (($759) - ($760))|0;
         HEAP32[$755>>2] = $777;
         $778 = $round6$1$i + $small$1$i;
         $779 = $778 != $round6$1$i;
         if (!($779)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $755;$e$3$i = $e$1$i;
          break;
         }
         $780 = (($777) + ($i$1$lcssa$i))|0;
         HEAP32[$755>>2] = $780;
         $781 = ($780>>>0)>(999999999);
         if ($781) {
          $a$5215$i = $a$3$lcssa$i;$d$2214$i = $755;
          while(1) {
           $782 = ((($d$2214$i)) + -4|0);
           HEAP32[$d$2214$i>>2] = 0;
           $783 = ($782>>>0)<($a$5215$i>>>0);
           if ($783) {
            $784 = ((($a$5215$i)) + -4|0);
            HEAP32[$784>>2] = 0;
            $a$6$i = $784;
           } else {
            $a$6$i = $a$5215$i;
           }
           $785 = HEAP32[$782>>2]|0;
           $786 = (($785) + 1)|0;
           HEAP32[$782>>2] = $786;
           $787 = ($786>>>0)>(999999999);
           if ($787) {
            $a$5215$i = $a$6$i;$d$2214$i = $782;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $782;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $755;
         }
         $788 = $a$5$lcssa$i;
         $789 = (($631) - ($788))|0;
         $790 = $789 >> 2;
         $791 = ($790*9)|0;
         $792 = HEAP32[$a$5$lcssa$i>>2]|0;
         $793 = ($792>>>0)<(10);
         if ($793) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $791;
          break;
         } else {
          $e$2210$i = $791;$i$2209$i = 10;
         }
         while(1) {
          $794 = ($i$2209$i*10)|0;
          $795 = (($e$2210$i) + 1)|0;
          $796 = ($792>>>0)<($794>>>0);
          if ($796) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $795;
           break;
          } else {
           $e$2210$i = $795;$i$2209$i = $794;
          }
         }
        }
       } while(0);
       $797 = ((($d$3$i)) + 4|0);
       $798 = ($z$3$lcssa$i>>>0)>($797>>>0);
       $$z$3$i = $798 ? $797 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $799 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $800 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($800)) {
        $$lcssa275$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $801 = ((($z$6$i)) + -4|0);
       $802 = HEAP32[$801>>2]|0;
       $803 = ($802|0)==(0);
       if ($803) {
        $z$6$i = $801;
       } else {
        $$lcssa275$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($743) {
        $804 = $744&1;
        $805 = $804 ^ 1;
        $$p$$i = (($805) + ($$p$i))|0;
        $806 = ($$p$$i|0)>($e$4$ph$i|0);
        $807 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $806 & $807;
        if ($or$cond6$i) {
         $808 = (($t$0) + -1)|0;
         $$neg152$i = (($$p$$i) + -1)|0;
         $809 = (($$neg152$i) - ($e$4$ph$i))|0;
         $$013$i = $808;$$210$i = $809;
        } else {
         $810 = (($t$0) + -2)|0;
         $811 = (($$p$$i) + -1)|0;
         $$013$i = $810;$$210$i = $811;
        }
        $812 = $fl$1$ & 8;
        $813 = ($812|0)==(0);
        if (!($813)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi302$iZ2D = $812;
         break;
        }
        do {
         if ($$lcssa275$i) {
          $814 = ((($z$6$i$lcssa)) + -4|0);
          $815 = HEAP32[$814>>2]|0;
          $816 = ($815|0)==(0);
          if ($816) {
           $j$2$i = 9;
           break;
          }
          $817 = (($815>>>0) % 10)&-1;
          $818 = ($817|0)==(0);
          if ($818) {
           $i$3205$i = 10;$j$1206$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $819 = ($i$3205$i*10)|0;
           $820 = (($j$1206$i) + 1)|0;
           $821 = (($815>>>0) % ($819>>>0))&-1;
           $822 = ($821|0)==(0);
           if ($822) {
            $i$3205$i = $819;$j$1206$i = $820;
           } else {
            $j$2$i = $820;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $823 = $$013$i | 32;
        $824 = ($823|0)==(102);
        $825 = $z$6$i$lcssa;
        $826 = (($825) - ($631))|0;
        $827 = $826 >> 2;
        $828 = ($827*9)|0;
        $829 = (($828) + -9)|0;
        if ($824) {
         $830 = (($829) - ($j$2$i))|0;
         $831 = ($830|0)<(0);
         $$21$i = $831 ? 0 : $830;
         $832 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $832 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi302$iZ2D = 0;
         break;
        } else {
         $833 = (($829) + ($e$4$ph$i))|0;
         $834 = (($833) - ($j$2$i))|0;
         $835 = ($834|0)<(0);
         $$23$i = $835 ? 0 : $834;
         $836 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $836 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi302$iZ2D = 0;
         break;
        }
       } else {
        $$pre301$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi302$iZ2D = $$pre301$i;
       }
      } while(0);
      $837 = $$311$i | $$pre$phi302$iZ2D;
      $838 = ($837|0)!=(0);
      $839 = $838&1;
      $840 = $$114$i | 32;
      $841 = ($840|0)==(102);
      if ($841) {
       $842 = ($e$4$ph$i|0)>(0);
       $843 = $842 ? $e$4$ph$i : 0;
       $$pn$i = $843;$estr$2$i = 0;
      } else {
       $844 = ($e$4$ph$i|0)<(0);
       $845 = $844 ? $799 : $e$4$ph$i;
       $846 = ($845|0)<(0);
       if ($846) {
        $847 = ($845|0)<(0);
        $848 = $847 << 31 >> 31;
        $$05$i79$i = $7;$849 = $845;$850 = $848;
        while(1) {
         $851 = (___uremdi3(($849|0),($850|0),10,0)|0);
         $852 = tempRet0;
         $853 = $851 | 48;
         $854 = $853&255;
         $855 = ((($$05$i79$i)) + -1|0);
         HEAP8[$855>>0] = $854;
         $856 = (___udivdi3(($849|0),($850|0),10,0)|0);
         $857 = tempRet0;
         $858 = ($850>>>0)>(9);
         $859 = ($849>>>0)>(4294967295);
         $860 = ($850|0)==(9);
         $861 = $860 & $859;
         $862 = $858 | $861;
         if ($862) {
          $$05$i79$i = $855;$849 = $856;$850 = $857;
         } else {
          $$lcssa461 = $855;$1179 = $856;$1180 = $857;
          break;
         }
        }
        $$0$lcssa$i84$i = $$lcssa461;$$01$lcssa$off0$i85$i = $1179;
       } else {
        $$0$lcssa$i84$i = $7;$$01$lcssa$off0$i85$i = $845;
       }
       $863 = ($$01$lcssa$off0$i85$i|0)==(0);
       if ($863) {
        $estr$1$ph$i = $$0$lcssa$i84$i;
       } else {
        $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
        while(1) {
         $864 = (($y$03$i86$i>>>0) % 10)&-1;
         $865 = $864 | 48;
         $866 = $865&255;
         $867 = ((($$12$i87$i)) + -1|0);
         HEAP8[$867>>0] = $866;
         $868 = (($y$03$i86$i>>>0) / 10)&-1;
         $869 = ($y$03$i86$i>>>0)<(10);
         if ($869) {
          $estr$1$ph$i = $867;
          break;
         } else {
          $$12$i87$i = $867;$y$03$i86$i = $868;
         }
        }
       }
       $870 = $estr$1$ph$i;
       $871 = (($9) - ($870))|0;
       $872 = ($871|0)<(2);
       if ($872) {
        $estr$1201$i = $estr$1$ph$i;
        while(1) {
         $873 = ((($estr$1201$i)) + -1|0);
         HEAP8[$873>>0] = 48;
         $874 = $873;
         $875 = (($9) - ($874))|0;
         $876 = ($875|0)<(2);
         if ($876) {
          $estr$1201$i = $873;
         } else {
          $estr$1$lcssa$i = $873;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $877 = $e$4$ph$i >> 31;
       $878 = $877 & 2;
       $879 = (($878) + 43)|0;
       $880 = $879&255;
       $881 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$881>>0] = $880;
       $882 = $$114$i&255;
       $883 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$883>>0] = $882;
       $884 = $883;
       $885 = (($9) - ($884))|0;
       $$pn$i = $885;$estr$2$i = $883;
      }
      $886 = (($pl$0$i) + 1)|0;
      $887 = (($886) + ($$311$i))|0;
      $l$1$i = (($887) + ($839))|0;
      $888 = (($l$1$i) + ($$pn$i))|0;
      $889 = $fl$1$ & 73728;
      $890 = ($889|0)==(0);
      $891 = ($w$1|0)>($888|0);
      $or$cond$i93$i = $890 & $891;
      if ($or$cond$i93$i) {
       $892 = (($w$1) - ($888))|0;
       $893 = ($892>>>0)>(256);
       $894 = $893 ? 256 : $892;
       _memset(($pad$i|0),32,($894|0))|0;
       $895 = ($892>>>0)>(255);
       if ($895) {
        $$01$i95$i = $892;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $896 = (($$01$i95$i) + -256)|0;
         $897 = ($896>>>0)>(255);
         if ($897) {
          $$01$i95$i = $896;
         } else {
          break;
         }
        }
        $898 = $892 & 255;
        $$0$lcssa$i97$i = $898;
       } else {
        $$0$lcssa$i97$i = $892;
       }
       (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $899 = ($889|0)==(65536);
      $or$cond$i100$i = $899 & $891;
      if ($or$cond$i100$i) {
       $900 = (($w$1) - ($888))|0;
       $901 = ($900>>>0)>(256);
       $902 = $901 ? 256 : $900;
       _memset(($pad$i|0),48,($902|0))|0;
       $903 = ($900>>>0)>(255);
       if ($903) {
        $$01$i102$i = $900;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $904 = (($$01$i102$i) + -256)|0;
         $905 = ($904>>>0)>(255);
         if ($905) {
          $$01$i102$i = $904;
         } else {
          break;
         }
        }
        $906 = $900 & 255;
        $$0$lcssa$i104$i = $906;
       } else {
        $$0$lcssa$i104$i = $900;
       }
       (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
      }
      if ($841) {
       $907 = ($a$8$ph$i>>>0)>($$31$i>>>0);
       $r$0$a$8$i = $907 ? $$31$i : $a$8$ph$i;
       $d$4191$i = $r$0$a$8$i;
       while(1) {
        $908 = HEAP32[$d$4191$i>>2]|0;
        $909 = ($908|0)==(0);
        if ($909) {
         $$1$lcssa$i112$i = $14;
        } else {
         $$12$i110$i = $14;$y$03$i109$i = $908;
         while(1) {
          $910 = (($y$03$i109$i>>>0) % 10)&-1;
          $911 = $910 | 48;
          $912 = $911&255;
          $913 = ((($$12$i110$i)) + -1|0);
          HEAP8[$913>>0] = $912;
          $914 = (($y$03$i109$i>>>0) / 10)&-1;
          $915 = ($y$03$i109$i>>>0)<(10);
          if ($915) {
           $$1$lcssa$i112$i = $913;
           break;
          } else {
           $$12$i110$i = $913;$y$03$i109$i = $914;
          }
         }
        }
        $916 = ($d$4191$i|0)==($r$0$a$8$i|0);
        do {
         if ($916) {
          $920 = ($$1$lcssa$i112$i|0)==($14|0);
          if (!($920)) {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $917 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
          if ($917) {
           $s7$0188$i = $$1$lcssa$i112$i;
          } else {
           $s7$1$i = $$1$lcssa$i112$i;
           break;
          }
          while(1) {
           $918 = ((($s7$0188$i)) + -1|0);
           HEAP8[$918>>0] = 48;
           $919 = ($918>>>0)>($buf$i>>>0);
           if ($919) {
            $s7$0188$i = $918;
           } else {
            $s7$1$i = $918;
            break;
           }
          }
         }
        } while(0);
        $921 = $s7$1$i;
        $922 = (($15) - ($921))|0;
        (___fwritex($s7$1$i,$922,$f)|0);
        $923 = ((($d$4191$i)) + 4|0);
        $924 = ($923>>>0)>($$31$i>>>0);
        if ($924) {
         $$lcssa470 = $923;
         break;
        } else {
         $d$4191$i = $923;
        }
       }
       $925 = ($837|0)==(0);
       if (!($925)) {
        (___fwritex(61912,1,$f)|0);
       }
       $926 = ($$lcssa470>>>0)<($z$6$i$lcssa>>>0);
       $927 = ($$311$i|0)>(0);
       $928 = $927 & $926;
       if ($928) {
        $$412184$i = $$311$i;$d$5183$i = $$lcssa470;
        while(1) {
         $929 = HEAP32[$d$5183$i>>2]|0;
         $930 = ($929|0)==(0);
         if ($930) {
          $s8$0180$i = $14;
          label = 289;
         } else {
          $$12$i119$i = $14;$y$03$i118$i = $929;
          while(1) {
           $931 = (($y$03$i118$i>>>0) % 10)&-1;
           $932 = $931 | 48;
           $933 = $932&255;
           $934 = ((($$12$i119$i)) + -1|0);
           HEAP8[$934>>0] = $933;
           $935 = (($y$03$i118$i>>>0) / 10)&-1;
           $936 = ($y$03$i118$i>>>0)<(10);
           if ($936) {
            $$lcssa471 = $934;
            break;
           } else {
            $$12$i119$i = $934;$y$03$i118$i = $935;
           }
          }
          $937 = ($$lcssa471>>>0)>($buf$i>>>0);
          if ($937) {
           $s8$0180$i = $$lcssa471;
           label = 289;
          } else {
           $s8$0$lcssa$i = $$lcssa471;
          }
         }
         if ((label|0) == 289) {
          while(1) {
           label = 0;
           $938 = ((($s8$0180$i)) + -1|0);
           HEAP8[$938>>0] = 48;
           $939 = ($938>>>0)>($buf$i>>>0);
           if ($939) {
            $s8$0180$i = $938;
            label = 289;
           } else {
            $s8$0$lcssa$i = $938;
            break;
           }
          }
         }
         $940 = ($$412184$i|0)>(9);
         $941 = $940 ? 9 : $$412184$i;
         (___fwritex($s8$0$lcssa$i,$941,$f)|0);
         $942 = ((($d$5183$i)) + 4|0);
         $943 = (($$412184$i) + -9)|0;
         $944 = ($942>>>0)<($z$6$i$lcssa>>>0);
         $945 = $940 & $944;
         if ($945) {
          $$412184$i = $943;$d$5183$i = $942;
         } else {
          $$412$lcssa$i = $943;
          break;
         }
        }
       } else {
        $$412$lcssa$i = $$311$i;
       }
       $946 = ($$412$lcssa$i|0)>(0);
       if ($946) {
        $947 = ($$412$lcssa$i>>>0)>(256);
        $948 = $947 ? 256 : $$412$lcssa$i;
        _memset(($pad$i|0),48,($948|0))|0;
        $949 = ($$412$lcssa$i>>>0)>(255);
        if ($949) {
         $$01$i126$i = $$412$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $950 = (($$01$i126$i) + -256)|0;
          $951 = ($950>>>0)>(255);
          if ($951) {
           $$01$i126$i = $950;
          } else {
           break;
          }
         }
         $952 = $$412$lcssa$i & 255;
         $$0$lcssa$i128$i = $952;
        } else {
         $$0$lcssa$i128$i = $$412$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
       }
      } else {
       $953 = ((($a$8$ph$i)) + 4|0);
       $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $953;
       $954 = ($$311$i|0)>(-1);
       do {
        if ($954) {
         $955 = ($$pre$phi302$iZ2D|0)==(0);
         $$5196$i = $$311$i;$d$6195$i = $a$8$ph$i;
         while(1) {
          $956 = HEAP32[$d$6195$i>>2]|0;
          $957 = ($956|0)==(0);
          if ($957) {
           label = 303;
          } else {
           $$12$i134$i = $14;$y$03$i133$i = $956;
           while(1) {
            $958 = (($y$03$i133$i>>>0) % 10)&-1;
            $959 = $958 | 48;
            $960 = $959&255;
            $961 = ((($$12$i134$i)) + -1|0);
            HEAP8[$961>>0] = $960;
            $962 = (($y$03$i133$i>>>0) / 10)&-1;
            $963 = ($y$03$i133$i>>>0)<(10);
            if ($963) {
             $$12$i134$i$lcssa = $$12$i134$i;$$lcssa465 = $961;
             break;
            } else {
             $$12$i134$i = $961;$y$03$i133$i = $962;
            }
           }
           $964 = ($$lcssa465|0)==($14|0);
           if ($964) {
            label = 303;
           } else {
            $1181 = $$12$i134$i$lcssa;$s9$0$i = $$lcssa465;
           }
          }
          if ((label|0) == 303) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1181 = $14;$s9$0$i = $16;
          }
          $965 = ($d$6195$i|0)==($a$8$ph$i|0);
          do {
           if ($965) {
            (___fwritex($s9$0$i,1,$f)|0);
            $969 = ($$5196$i|0)<(1);
            $or$cond29$i = $955 & $969;
            if ($or$cond29$i) {
             $s9$2$i = $1181;
             break;
            }
            (___fwritex(61912,1,$f)|0);
            $s9$2$i = $1181;
           } else {
            $966 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($966) {
             $s9$1192$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $967 = ((($s9$1192$i)) + -1|0);
             HEAP8[$967>>0] = 48;
             $968 = ($967>>>0)>($buf$i>>>0);
             if ($968) {
              $s9$1192$i = $967;
             } else {
              $s9$2$i = $967;
              break;
             }
            }
           }
          } while(0);
          $970 = $s9$2$i;
          $971 = (($15) - ($970))|0;
          $972 = ($$5196$i|0)>($971|0);
          $973 = $972 ? $971 : $$5196$i;
          (___fwritex($s9$2$i,$973,$f)|0);
          $974 = (($$5196$i) - ($971))|0;
          $975 = ((($d$6195$i)) + 4|0);
          $976 = ($975>>>0)<($z$6$$i>>>0);
          $977 = ($974|0)>(-1);
          $978 = $976 & $977;
          if ($978) {
           $$5196$i = $974;$d$6195$i = $975;
          } else {
           $$lcssa467 = $974;
           break;
          }
         }
         $979 = ($$lcssa467|0)>(0);
         if (!($979)) {
          break;
         }
         $980 = ($$lcssa467>>>0)>(256);
         $981 = $980 ? 256 : $$lcssa467;
         _memset(($pad$i|0),48,($981|0))|0;
         $982 = ($$lcssa467>>>0)>(255);
         if ($982) {
          $$01$i141$i = $$lcssa467;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $983 = (($$01$i141$i) + -256)|0;
           $984 = ($983>>>0)>(255);
           if ($984) {
            $$01$i141$i = $983;
           } else {
            break;
           }
          }
          $985 = $$lcssa467 & 255;
          $$0$lcssa$i143$i = $985;
         } else {
          $$0$lcssa$i143$i = $$lcssa467;
         }
         (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
        } else {
        }
       } while(0);
       $986 = $estr$2$i;
       $987 = (($9) - ($986))|0;
       (___fwritex($estr$2$i,$987,$f)|0);
      }
      $988 = ($889|0)==(8192);
      $or$cond$i$i = $988 & $891;
      if ($or$cond$i$i) {
       $989 = (($w$1) - ($888))|0;
       $990 = ($989>>>0)>(256);
       $991 = $990 ? 256 : $989;
       _memset(($pad$i|0),32,($991|0))|0;
       $992 = ($989>>>0)>(255);
       if ($992) {
        $$01$i$i = $989;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $993 = (($$01$i$i) + -256)|0;
         $994 = ($993>>>0)>(255);
         if ($994) {
          $$01$i$i = $993;
         } else {
          break;
         }
        }
        $995 = $989 & 255;
        $$0$lcssa$i$i = $995;
       } else {
        $$0$lcssa$i$i = $989;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$30$i = $891 ? $w$1 : $888;
      $$0$i = $w$30$i;
     } else {
      $440 = $t$0 & 32;
      $441 = ($440|0)!=(0);
      $442 = $441 ? 61880 : 61888;
      $443 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $444 = $441 ? 61896 : 61904;
      $pl$1$i = $443 ? 0 : $pl$0$i;
      $s1$0$i = $443 ? $444 : $442;
      $445 = (($pl$1$i) + 3)|0;
      $446 = $fl$1$ & 8192;
      $447 = ($446|0)==(0);
      $448 = ($w$1|0)>($445|0);
      $or$cond$i35$i = $447 & $448;
      if ($or$cond$i35$i) {
       $449 = (($w$1) - ($445))|0;
       $450 = ($449>>>0)>(256);
       $451 = $450 ? 256 : $449;
       _memset(($pad$i|0),32,($451|0))|0;
       $452 = ($449>>>0)>(255);
       if ($452) {
        $$01$i37$i = $449;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $453 = (($$01$i37$i) + -256)|0;
         $454 = ($453>>>0)>(255);
         if ($454) {
          $$01$i37$i = $453;
         } else {
          break;
         }
        }
        $455 = $449 & 255;
        $$0$lcssa$i39$i = $455;
       } else {
        $$0$lcssa$i39$i = $449;
       }
       (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $456 = $fl$1$ & 73728;
      $457 = ($456|0)==(8192);
      $or$cond$i42$i = $457 & $448;
      if ($or$cond$i42$i) {
       $458 = (($w$1) - ($445))|0;
       $459 = ($458>>>0)>(256);
       $460 = $459 ? 256 : $458;
       _memset(($pad$i|0),32,($460|0))|0;
       $461 = ($458>>>0)>(255);
       if ($461) {
        $$01$i44$i = $458;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $462 = (($$01$i44$i) + -256)|0;
         $463 = ($462>>>0)>(255);
         if ($463) {
          $$01$i44$i = $462;
         } else {
          break;
         }
        }
        $464 = $458 & 255;
        $$0$lcssa$i46$i = $464;
       } else {
        $$0$lcssa$i46$i = $458;
       }
       (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
      }
      $465 = $448 ? $w$1 : $445;
      $$0$i = $465;
     }
    } while(0);
    $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 83:  {
    $386 = $259;
    $387 = ($p$0|0)==(0);
    if ($387) {
     $1175 = $259;$1176 = $386;$i$0$lcssa275 = 0;
     label = 102;
    } else {
     $1173 = $386;$1174 = $259;$p$4274 = $p$0;
     label = 97;
    }
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $259;
    HEAP32[$5>>2] = 0;
    $1173 = $wc;$1174 = $6;$p$4274 = -1;
    label = 97;
    break;
   }
   case 99:  {
    $373 = $259&255;
    HEAP8[$4>>0] = $373;
    $1169 = $286;$1170 = $259;$a$2 = $4;$fl$6 = $258;$p$5 = 1;$pl$2 = 0;$prefix$2 = 61832;$z$2 = $2;
    break;
   }
   case 117:  {
    $331 = $286;$333 = $259;$pl$0 = 0;$prefix$0 = 61832;
    label = 84;
    break;
   }
   case 111:  {
    $307 = ($259|0)==(0);
    $308 = ($286|0)==(0);
    $309 = $307 & $308;
    if ($309) {
     $$0$lcssa$i51 = $2;
    } else {
     $$03$i48 = $2;$311 = $259;$315 = $286;
     while(1) {
      $310 = $311 & 7;
      $312 = $310 | 48;
      $313 = $312&255;
      $314 = ((($$03$i48)) + -1|0);
      HEAP8[$314>>0] = $313;
      $316 = (_bitshift64Lshr(($311|0),($315|0),3)|0);
      $317 = tempRet0;
      $318 = ($316|0)==(0);
      $319 = ($317|0)==(0);
      $320 = $318 & $319;
      if ($320) {
       $$0$lcssa$i51 = $314;
       break;
      } else {
       $$03$i48 = $314;$311 = $316;$315 = $317;
      }
     }
    }
    $321 = $fl$1$ & 8;
    $322 = ($321|0)==(0);
    $or$cond19 = $322 | $309;
    $$24 = $or$cond19 ? 61832 : (61837);
    $323 = $or$cond19&1;
    $$25 = $323 ^ 1;
    $361 = $259;$363 = $286;$a$0 = $$0$lcssa$i51;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$25;$prefix$1 = $$24;
    label = 89;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 112:  {
    $281 = ($p$0>>>0)>(8);
    $282 = $281 ? $p$0 : 8;
    $283 = $fl$1$ | 8;
    $fl$3 = $283;$p$1 = $282;$t$1 = 120;
    label = 73;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa447|0) {
    case 7:  {
     $274 = ($cnt$1|0)<(0);
     $275 = $274 << 31 >> 31;
     $276 = $259;
     $277 = $276;
     $278 = $277;
     HEAP32[$278>>2] = $cnt$1;
     $279 = (($277) + 4)|0;
     $280 = $279;
     HEAP32[$280>>2] = $275;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $273 = $259;
     HEAP32[$273>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $271 = $cnt$1&255;
     $272 = $259;
     HEAP8[$272>>0] = $271;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $269 = $cnt$1&65535;
     $270 = $259;
     HEAP16[$270>>1] = $269;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $261 = $259;
     HEAP32[$261>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $262 = ($cnt$1|0)<(0);
     $263 = $262 << 31 >> 31;
     $264 = $259;
     $265 = $264;
     $266 = $265;
     HEAP32[$266>>2] = $cnt$1;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $263;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $260 = $259;
     HEAP32[$260>>2] = $cnt$1;
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1164 = $286;$1165 = $259;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 105: case 100:  {
    $324 = ($286|0)<(0);
    if ($324) {
     $325 = (_i64Subtract(0,0,($259|0),($286|0))|0);
     $326 = tempRet0;
     $331 = $326;$333 = $325;$pl$0 = 1;$prefix$0 = 61832;
     label = 84;
     break L86;
    }
    $327 = $fl$1$ & 2048;
    $328 = ($327|0)==(0);
    if ($328) {
     $329 = $fl$1$ & 1;
     $330 = ($329|0)==(0);
     $$ = $330 ? 61832 : (61834);
     $331 = $286;$333 = $259;$pl$0 = $329;$prefix$0 = $$;
     label = 84;
    } else {
     $331 = $286;$333 = $259;$pl$0 = 1;$prefix$0 = (61833);
     label = 84;
    }
    break;
   }
   default: {
    $1169 = $286;$1170 = $259;$a$2 = $fmt89;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 61832;$z$2 = $2;
   }
   }
  } while(0);
  if ((label|0) == 73) {
   label = 0;
   $284 = $t$1 & 32;
   $285 = ($259|0)==(0);
   $287 = ($286|0)==(0);
   $288 = $285 & $287;
   if ($288) {
    $361 = $259;$363 = $286;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 61832;
    label = 89;
   } else {
    $$012$i = $2;$290 = $259;$297 = $286;
    while(1) {
     $289 = $290 & 15;
     $291 = (61816 + ($289)|0);
     $292 = HEAP8[$291>>0]|0;
     $293 = $292&255;
     $294 = $293 | $284;
     $295 = $294&255;
     $296 = ((($$012$i)) + -1|0);
     HEAP8[$296>>0] = $295;
     $298 = (_bitshift64Lshr(($290|0),($297|0),4)|0);
     $299 = tempRet0;
     $300 = ($298|0)==(0);
     $301 = ($299|0)==(0);
     $302 = $300 & $301;
     if ($302) {
      $$lcssa482 = $296;
      break;
     } else {
      $$012$i = $296;$290 = $298;$297 = $299;
     }
    }
    $303 = $fl$3 & 8;
    $304 = ($303|0)==(0);
    if ($304) {
     $361 = $259;$363 = $286;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 61832;
     label = 89;
    } else {
     $305 = $t$1 >> 4;
     $306 = (61832 + ($305)|0);
     $361 = $259;$363 = $286;$a$0 = $$lcssa482;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $306;
     label = 89;
    }
   }
  }
  else if ((label|0) == 84) {
   label = 0;
   $332 = ($331>>>0)>(0);
   $334 = ($333>>>0)>(4294967295);
   $335 = ($331|0)==(0);
   $336 = $335 & $334;
   $337 = $332 | $336;
   if ($337) {
    $$05$i = $2;$338 = $333;$339 = $331;
    while(1) {
     $340 = (___uremdi3(($338|0),($339|0),10,0)|0);
     $341 = tempRet0;
     $342 = $340 | 48;
     $343 = $342&255;
     $344 = ((($$05$i)) + -1|0);
     HEAP8[$344>>0] = $343;
     $345 = (___udivdi3(($338|0),($339|0),10,0)|0);
     $346 = tempRet0;
     $347 = ($339>>>0)>(9);
     $348 = ($338>>>0)>(4294967295);
     $349 = ($339|0)==(9);
     $350 = $349 & $348;
     $351 = $347 | $350;
     if ($351) {
      $$05$i = $344;$338 = $345;$339 = $346;
     } else {
      $$lcssa478 = $344;$1171 = $345;$1172 = $346;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa478;$$01$lcssa$off0$i = $1171;
   } else {
    $$0$lcssa$i53 = $2;$$01$lcssa$off0$i = $333;
   }
   $352 = ($$01$lcssa$off0$i|0)==(0);
   if ($352) {
    $361 = $333;$363 = $331;$a$0 = $$0$lcssa$i53;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;$y$03$i = $$01$lcssa$off0$i;
    while(1) {
     $353 = (($y$03$i>>>0) % 10)&-1;
     $354 = $353 | 48;
     $355 = $354&255;
     $356 = ((($$12$i)) + -1|0);
     HEAP8[$356>>0] = $355;
     $357 = (($y$03$i>>>0) / 10)&-1;
     $358 = ($y$03$i>>>0)<(10);
     if ($358) {
      $361 = $333;$363 = $331;$a$0 = $356;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $356;$y$03$i = $357;
     }
    }
   }
  }
  else if ((label|0) == 94) {
   label = 0;
   $380 = (_memchr($a$1,0,$p$0)|0);
   $381 = ($380|0)==(0|0);
   $382 = $380;
   $383 = $a$1;
   $384 = (($382) - ($383))|0;
   $385 = (($a$1) + ($p$0)|0);
   $z$1 = $381 ? $385 : $380;
   $p$3 = $381 ? $p$0 : $384;
   $1169 = $286;$1170 = $259;$a$2 = $a$1;$fl$6 = $258;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 61832;$z$2 = $z$1;
  }
  else if ((label|0) == 97) {
   label = 0;
   $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1173;
   while(1) {
    $388 = HEAP32[$ws$0181>>2]|0;
    $389 = ($388|0)==(0);
    if ($389) {
     $i$0$lcssa = $i$0180;$l$2 = $l$1179;
     break;
    }
    $390 = (_wctomb($mb,$388)|0);
    $391 = ($390|0)<(0);
    $392 = (($p$4274) - ($i$0180))|0;
    $393 = ($390>>>0)>($392>>>0);
    $or$cond22 = $391 | $393;
    if ($or$cond22) {
     $i$0$lcssa = $i$0180;$l$2 = $390;
     break;
    }
    $394 = ((($ws$0181)) + 4|0);
    $395 = (($390) + ($i$0180))|0;
    $396 = ($p$4274>>>0)>($395>>>0);
    if ($396) {
     $i$0180 = $395;$l$1179 = $390;$ws$0181 = $394;
    } else {
     $i$0$lcssa = $395;$l$2 = $390;
     break;
    }
   }
   $397 = ($l$2|0)<(0);
   if ($397) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1175 = $1174;$1176 = $1173;$i$0$lcssa275 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label|0) == 89) {
   label = 0;
   $359 = ($p$2|0)>(-1);
   $360 = $fl$4 & -65537;
   $$fl$4 = $359 ? $360 : $fl$4;
   $362 = ($361|0)!=(0);
   $364 = ($363|0)!=(0);
   $365 = $362 | $364;
   $366 = ($p$2|0)!=(0);
   $or$cond = $365 | $366;
   if ($or$cond) {
    $367 = $a$0;
    $368 = (($3) - ($367))|0;
    $369 = $365&1;
    $370 = $369 ^ 1;
    $371 = (($370) + ($368))|0;
    $372 = ($p$2|0)>($371|0);
    $p$2$ = $372 ? $p$2 : $371;
    $1169 = $363;$1170 = $361;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1169 = $363;$1170 = $361;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 102) {
   label = 0;
   $398 = $fl$1$ & 73728;
   $399 = ($398|0)==(0);
   $400 = ($w$1|0)>($i$0$lcssa275|0);
   $or$cond$i64 = $399 & $400;
   if ($or$cond$i64) {
    $401 = (($w$1) - ($i$0$lcssa275))|0;
    $402 = ($401>>>0)>(256);
    $403 = $402 ? 256 : $401;
    _memset(($pad$i|0),32,($403|0))|0;
    $404 = ($401>>>0)>(255);
    if ($404) {
     $$01$i66 = $401;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $405 = (($$01$i66) + -256)|0;
      $406 = ($405>>>0)>(255);
      if ($406) {
       $$01$i66 = $405;
      } else {
       break;
      }
     }
     $407 = $401 & 255;
     $$0$lcssa$i68 = $407;
    } else {
     $$0$lcssa$i68 = $401;
    }
    (___fwritex($pad$i,$$0$lcssa$i68,$f)|0);
   }
   $408 = ($i$0$lcssa275|0)==(0);
   L463: do {
    if (!($408)) {
     $i$1191 = 0;$ws$1192 = $1176;
     while(1) {
      $409 = HEAP32[$ws$1192>>2]|0;
      $410 = ($409|0)==(0);
      if ($410) {
       break L463;
      }
      $411 = (_wctomb($mb,$409)|0);
      $412 = (($411) + ($i$1191))|0;
      $413 = ($412|0)>($i$0$lcssa275|0);
      if ($413) {
       break L463;
      }
      $414 = ((($ws$1192)) + 4|0);
      (___fwritex($mb,$411,$f)|0);
      $415 = ($412>>>0)<($i$0$lcssa275>>>0);
      if ($415) {
       $i$1191 = $412;$ws$1192 = $414;
      } else {
       break;
      }
     }
    }
   } while(0);
   $416 = ($398|0)==(8192);
   $or$cond$i71 = $416 & $400;
   if ($or$cond$i71) {
    $417 = (($w$1) - ($i$0$lcssa275))|0;
    $418 = ($417>>>0)>(256);
    $419 = $418 ? 256 : $417;
    _memset(($pad$i|0),32,($419|0))|0;
    $420 = ($417>>>0)>(255);
    if ($420) {
     $$01$i73 = $417;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $421 = (($$01$i73) + -256)|0;
      $422 = ($421>>>0)>(255);
      if ($422) {
       $$01$i73 = $421;
      } else {
       break;
      }
     }
     $423 = $417 & 255;
     $$0$lcssa$i75 = $423;
    } else {
     $$0$lcssa$i75 = $417;
    }
    (___fwritex($pad$i,$$0$lcssa$i75,$f)|0);
   }
   $424 = $400 ? $w$1 : $i$0$lcssa275;
   $1164 = $286;$1165 = $1175;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $424;$l10n$0 = $l10n$3;
   continue;
  }
  $996 = $z$2;
  $997 = $a$2;
  $998 = (($996) - ($997))|0;
  $999 = ($p$5|0)<($998|0);
  $$p$5 = $999 ? $998 : $p$5;
  $1000 = (($pl$2) + ($$p$5))|0;
  $1001 = ($w$1|0)<($1000|0);
  $w$2 = $1001 ? $1000 : $w$1;
  $1002 = $fl$6 & 73728;
  $1003 = ($1002|0)==(0);
  $1004 = ($w$2|0)>($1000|0);
  $or$cond$i81 = $1003 & $1004;
  if ($or$cond$i81) {
   $1005 = (($w$2) - ($1000))|0;
   $1006 = ($1005>>>0)>(256);
   $1007 = $1006 ? 256 : $1005;
   _memset(($pad$i|0),32,($1007|0))|0;
   $1008 = ($1005>>>0)>(255);
   if ($1008) {
    $$01$i83 = $1005;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1009 = (($$01$i83) + -256)|0;
     $1010 = ($1009>>>0)>(255);
     if ($1010) {
      $$01$i83 = $1009;
     } else {
      break;
     }
    }
    $1011 = $1005 & 255;
    $$0$lcssa$i85 = $1011;
   } else {
    $$0$lcssa$i85 = $1005;
   }
   (___fwritex($pad$i,$$0$lcssa$i85,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1012 = ($1002|0)==(65536);
  $or$cond$i57 = $1012 & $1004;
  if ($or$cond$i57) {
   $1013 = (($w$2) - ($1000))|0;
   $1014 = ($1013>>>0)>(256);
   $1015 = $1014 ? 256 : $1013;
   _memset(($pad$i|0),48,($1015|0))|0;
   $1016 = ($1013>>>0)>(255);
   if ($1016) {
    $$01$i59 = $1013;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1017 = (($$01$i59) + -256)|0;
     $1018 = ($1017>>>0)>(255);
     if ($1018) {
      $$01$i59 = $1017;
     } else {
      break;
     }
    }
    $1019 = $1013 & 255;
    $$0$lcssa$i61 = $1019;
   } else {
    $$0$lcssa$i61 = $1013;
   }
   (___fwritex($pad$i,$$0$lcssa$i61,$f)|0);
  }
  $1020 = ($$p$5|0)>($998|0);
  if ($1020) {
   $1021 = (($$p$5) - ($998))|0;
   $1022 = ($1021>>>0)>(256);
   $1023 = $1022 ? 256 : $1021;
   _memset(($pad$i|0),48,($1023|0))|0;
   $1024 = ($1021>>>0)>(255);
   if ($1024) {
    $$01$i44 = $1021;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1025 = (($$01$i44) + -256)|0;
     $1026 = ($1025>>>0)>(255);
     if ($1026) {
      $$01$i44 = $1025;
     } else {
      break;
     }
    }
    $1027 = $1021 & 255;
    $$0$lcssa$i46 = $1027;
   } else {
    $$0$lcssa$i46 = $1021;
   }
   (___fwritex($pad$i,$$0$lcssa$i46,$f)|0);
  }
  (___fwritex($a$2,$998,$f)|0);
  $1028 = ($1002|0)==(8192);
  $or$cond$i = $1028 & $1004;
  if ($or$cond$i) {
   $1029 = (($w$2) - ($1000))|0;
   $1030 = ($1029>>>0)>(256);
   $1031 = $1030 ? 256 : $1029;
   _memset(($pad$i|0),32,($1031|0))|0;
   $1032 = ($1029>>>0)>(255);
   if ($1032) {
    $$01$i = $1029;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1033 = (($$01$i) + -256)|0;
     $1034 = ($1033>>>0)>(255);
     if ($1034) {
      $$01$i = $1033;
     } else {
      break;
     }
    }
    $1035 = $1029 & 255;
    $$0$lcssa$i = $1035;
   } else {
    $$0$lcssa$i = $1029;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1164 = $1169;$1165 = $1170;$cnt$0 = $cnt$1;$fmt89 = $$lcssa448;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $1036 = ($f|0)==(0|0);
  if (!($1036)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1037 = ($l10n$0$lcssa|0)==(0);
  if ($1037) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2166 = 1;
  }
  while(1) {
   $1038 = (($nl_type) + ($i$2166<<2)|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = ($1039|0)==(0);
   if ($1040) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $1042 = (($nl_arg) + ($i$2166<<3)|0);
   $1043 = ($1039>>>0)>(20);
   L522: do {
    if (!($1043)) {
     do {
      switch ($1039|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1044 = $arglist_current35;
       $1045 = ((0) + 4|0);
       $expanded148 = $1045;
       $expanded147 = (($expanded148) - 1)|0;
       $1046 = (($1044) + ($expanded147))|0;
       $1047 = ((0) + 4|0);
       $expanded152 = $1047;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1048 = $1046 & $expanded150;
       $1049 = $1048;
       $1050 = HEAP32[$1049>>2]|0;
       $arglist_next36 = ((($1049)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1042>>2] = $1050;
       break L522;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1051 = $arglist_current38;
       $1052 = ((0) + 4|0);
       $expanded155 = $1052;
       $expanded154 = (($expanded155) - 1)|0;
       $1053 = (($1051) + ($expanded154))|0;
       $1054 = ((0) + 4|0);
       $expanded159 = $1054;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1055 = $1053 & $expanded157;
       $1056 = $1055;
       $1057 = HEAP32[$1056>>2]|0;
       $arglist_next39 = ((($1056)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1058 = ($1057|0)<(0);
       $1059 = $1058 << 31 >> 31;
       $1060 = $1042;
       $1061 = $1060;
       HEAP32[$1061>>2] = $1057;
       $1062 = (($1060) + 4)|0;
       $1063 = $1062;
       HEAP32[$1063>>2] = $1059;
       break L522;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1064 = $arglist_current41;
       $1065 = ((0) + 4|0);
       $expanded162 = $1065;
       $expanded161 = (($expanded162) - 1)|0;
       $1066 = (($1064) + ($expanded161))|0;
       $1067 = ((0) + 4|0);
       $expanded166 = $1067;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1068 = $1066 & $expanded164;
       $1069 = $1068;
       $1070 = HEAP32[$1069>>2]|0;
       $arglist_next42 = ((($1069)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1071 = $1042;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1070;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = 0;
       break L522;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current44;
       $1076 = ((0) + 8|0);
       $expanded169 = $1076;
       $expanded168 = (($expanded169) - 1)|0;
       $1077 = (($1075) + ($expanded168))|0;
       $1078 = ((0) + 8|0);
       $expanded173 = $1078;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1079 = $1077 & $expanded171;
       $1080 = $1079;
       $1081 = $1080;
       $1082 = $1081;
       $1083 = HEAP32[$1082>>2]|0;
       $1084 = (($1081) + 4)|0;
       $1085 = $1084;
       $1086 = HEAP32[$1085>>2]|0;
       $arglist_next45 = ((($1080)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1087 = $1042;
       $1088 = $1087;
       HEAP32[$1088>>2] = $1083;
       $1089 = (($1087) + 4)|0;
       $1090 = $1089;
       HEAP32[$1090>>2] = $1086;
       break L522;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1091 = $arglist_current47;
       $1092 = ((0) + 4|0);
       $expanded176 = $1092;
       $expanded175 = (($expanded176) - 1)|0;
       $1093 = (($1091) + ($expanded175))|0;
       $1094 = ((0) + 4|0);
       $expanded180 = $1094;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1095 = $1093 & $expanded178;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next48 = ((($1096)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1098 = $1097&65535;
       $1099 = $1098 << 16 >> 16;
       $1100 = ($1099|0)<(0);
       $1101 = $1100 << 31 >> 31;
       $1102 = $1042;
       $1103 = $1102;
       HEAP32[$1103>>2] = $1099;
       $1104 = (($1102) + 4)|0;
       $1105 = $1104;
       HEAP32[$1105>>2] = $1101;
       break L522;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1106 = $arglist_current50;
       $1107 = ((0) + 4|0);
       $expanded183 = $1107;
       $expanded182 = (($expanded183) - 1)|0;
       $1108 = (($1106) + ($expanded182))|0;
       $1109 = ((0) + 4|0);
       $expanded187 = $1109;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1110 = $1108 & $expanded185;
       $1111 = $1110;
       $1112 = HEAP32[$1111>>2]|0;
       $arglist_next51 = ((($1111)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1112 & 65535;
       $1113 = $1042;
       $1114 = $1113;
       HEAP32[$1114>>2] = $$mask1$i;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = 0;
       break L522;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current53;
       $1118 = ((0) + 4|0);
       $expanded190 = $1118;
       $expanded189 = (($expanded190) - 1)|0;
       $1119 = (($1117) + ($expanded189))|0;
       $1120 = ((0) + 4|0);
       $expanded194 = $1120;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1121 = $1119 & $expanded192;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next54 = ((($1122)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1124 = $1123&255;
       $1125 = $1124 << 24 >> 24;
       $1126 = ($1125|0)<(0);
       $1127 = $1126 << 31 >> 31;
       $1128 = $1042;
       $1129 = $1128;
       HEAP32[$1129>>2] = $1125;
       $1130 = (($1128) + 4)|0;
       $1131 = $1130;
       HEAP32[$1131>>2] = $1127;
       break L522;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1132 = $arglist_current56;
       $1133 = ((0) + 4|0);
       $expanded197 = $1133;
       $expanded196 = (($expanded197) - 1)|0;
       $1134 = (($1132) + ($expanded196))|0;
       $1135 = ((0) + 4|0);
       $expanded201 = $1135;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1136 = $1134 & $expanded199;
       $1137 = $1136;
       $1138 = HEAP32[$1137>>2]|0;
       $arglist_next57 = ((($1137)) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1138 & 255;
       $1139 = $1042;
       $1140 = $1139;
       HEAP32[$1140>>2] = $$mask$i;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = 0;
       break L522;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current59;
       $1144 = ((0) + 8|0);
       $expanded204 = $1144;
       $expanded203 = (($expanded204) - 1)|0;
       $1145 = (($1143) + ($expanded203))|0;
       $1146 = ((0) + 8|0);
       $expanded208 = $1146;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1147 = $1145 & $expanded206;
       $1148 = $1147;
       $1149 = +HEAPF64[$1148>>3];
       $arglist_next60 = ((($1148)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1042>>3] = $1149;
       break L522;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1150 = $arglist_current62;
       $1151 = ((0) + 8|0);
       $expanded211 = $1151;
       $expanded210 = (($expanded211) - 1)|0;
       $1152 = (($1150) + ($expanded210))|0;
       $1153 = ((0) + 8|0);
       $expanded215 = $1153;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1154 = $1152 & $expanded213;
       $1155 = $1154;
       $1156 = +HEAPF64[$1155>>3];
       $arglist_next63 = ((($1155)) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1042>>3] = $1156;
       break L522;
       break;
      }
      default: {
       break L522;
      }
      }
     } while(0);
    }
   } while(0);
   $1157 = (($i$2166) + 1)|0;
   $1158 = ($1157|0)<(10);
   if ($1158) {
    $i$2166 = $1157;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
  $1041 = ($i$2166$lcssa|0)<(10);
  if ($1041) {
   $i$3164 = $i$2166$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1161 = (($nl_type) + ($i$3164<<2)|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = ($1162|0)==(0);
   $1159 = (($i$3164) + 1)|0;
   if (!($1163)) {
    $$0 = -1;
    label = 363;
    break;
   }
   $1160 = ($1159|0)<(10);
   if ($1160) {
    $i$3164 = $1159;
   } else {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label|0) == 363) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 363) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[61920>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (61960 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (61960 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[61920>>2] = $22;
     } else {
      $23 = HEAP32[(61936)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(61928)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (61960 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (61960 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[61920>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(61936)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(61928)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(61940)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (61960 + ($92<<2)|0);
      $94 = HEAP32[61920>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[61920>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (61960 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (61960 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(61936)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(61928)>>2] = $81;
     HEAP32[(61940)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(61924)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (62224 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(61936)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (62224 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(61924)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(61924)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(61936)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(61936)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(61936)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(61928)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(61940)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (61960 + ($229<<2)|0);
       $231 = HEAP32[61920>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[61920>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (61960 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (61960 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(61936)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(61928)>>2] = $rsize$0$i$lcssa;
      HEAP32[(61940)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(61924)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (62224 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L9: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L9;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (62224 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(61928)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(61936)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (62224 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(61924)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(61924)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(61936)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(61936)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(61936)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L85: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (61960 + ($424<<2)|0);
          $426 = HEAP32[61920>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[61920>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (61960 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (61960 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(61936)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (62224 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(61924)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(61924)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L102: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L102;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(61936)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L85;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(61936)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(61928)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(61940)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(61940)>>2] = $514;
   HEAP32[(61928)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(61928)>>2] = 0;
   HEAP32[(61940)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(61932)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(61932)>>2] = $528;
  $529 = HEAP32[(61944)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(61944)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[62392>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(62400)>>2] = $538;
    HEAP32[(62396)>>2] = $538;
    HEAP32[(62404)>>2] = -1;
    HEAP32[(62408)>>2] = -1;
    HEAP32[(62412)>>2] = 0;
    HEAP32[(62364)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[62392>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(62400)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(62360)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(62352)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(62364)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(61944)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (62368);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(61932)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(62396)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(62352)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(62360)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(62400)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(62364)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(62364)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(62352)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(62352)>>2] = $632;
  $633 = HEAP32[(62356)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(62356)>>2] = $632;
  }
  $635 = HEAP32[(61944)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(61936)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(61936)>>2] = $tbase$255$i;
    }
    HEAP32[(62368)>>2] = $tbase$255$i;
    HEAP32[(62372)>>2] = $tsize$254$i;
    HEAP32[(62380)>>2] = 0;
    $640 = HEAP32[62392>>2]|0;
    HEAP32[(61956)>>2] = $640;
    HEAP32[(61952)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (61960 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (61960 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (61960 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(61944)>>2] = $654;
    HEAP32[(61932)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(62408)>>2]|0;
    HEAP32[(61948)>>2] = $659;
   } else {
    $sp$084$i = (62368);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(61932)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(61944)>>2] = $684;
       HEAP32[(61932)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(62408)>>2]|0;
       HEAP32[(61948)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(61936)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(61936)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (62368);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (62368);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(61932)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(61932)>>2] = $730;
        HEAP32[(61944)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(61940)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(61928)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(61928)>>2] = $736;
         HEAP32[(61940)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L331: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (61960 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[61920>>2]|0;
            $763 = $762 & $761;
            HEAP32[61920>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (62224 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(61924)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(61924)>>2] = $806;
             break L331;
            } else {
             $807 = HEAP32[(61936)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L331;
             }
            }
           } while(0);
           $814 = HEAP32[(61936)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(61936)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (61960 + ($840<<2)|0);
         $842 = HEAP32[61920>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[61920>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (61960 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (61960 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(61936)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (62224 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(61924)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(61924)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L417: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L417;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(61936)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(61936)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (62368);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(61944)>>2] = $953;
    HEAP32[(61932)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(62408)>>2]|0;
    HEAP32[(61948)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(62368)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(62368)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(62368)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(62368)+12>>2]|0;
    HEAP32[(62368)>>2] = $tbase$255$i;
    HEAP32[(62372)>>2] = $tsize$254$i;
    HEAP32[(62380)>>2] = 0;
    HEAP32[(62376)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (61960 + ($977<<2)|0);
      $979 = HEAP32[61920>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[61920>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (61960 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (61960 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(61936)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (62224 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(61924)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(61924)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(61936)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(61936)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(61932)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(61932)>>2] = $1062;
   $1063 = HEAP32[(61944)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(61944)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(61936)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(61940)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(61928)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (61960 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[61920>>2]|0;
     $36 = $35 & $34;
     HEAP32[61920>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (62224 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(61924)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(61924)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(61936)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(61936)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(61936)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(61944)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(61932)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(61932)>>2] = $120;
   HEAP32[(61944)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(61940)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(61940)>>2] = 0;
   HEAP32[(61928)>>2] = 0;
   return;
  }
  $125 = HEAP32[(61940)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(61928)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(61928)>>2] = $128;
   HEAP32[(61940)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (61960 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(61936)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[61920>>2]|0;
     $152 = $151 & $150;
     HEAP32[61920>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(61936)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(61936)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(61936)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (62224 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(61924)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(61924)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(61936)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(61936)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(61936)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(61940)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(61928)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (61960 + ($233<<2)|0);
  $235 = HEAP32[61920>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[61920>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (61960 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (61960 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(61936)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (62224 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(61924)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(61924)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L201: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L201;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(61936)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(61936)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(61952)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(61952)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (62376);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(61952)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write];
var FUNCTION_TABLE_viiiii = [b1,_qh_printvridge,_qh_printvnorm,b1];
var FUNCTION_TABLE_iii = [b2,_qh_compare_facetvisit,_qh_compare_facetarea,_qh_compare_facetmerge,_qh_intcompare,_qh_compareangle,_qh_comparemerge,_qh_comparevisit];

  return { _run_qhull: _run_qhull, _saveSetjmp: _saveSetjmp, _strcat: _strcat, _free: _free, _testSetjmp: _testSetjmp, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__run_qhull = asm["_run_qhull"]; asm["_run_qhull"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__run_qhull.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _run_qhull = Module["_run_qhull"] = asm["_run_qhull"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}




// var bits = require("bit-twiddle");

var run_qhull = cwrap('run_qhull', 'pointer', ['pointer', 'number', 'number', 'pointer']);

var QHULL_POINT_BUFFER = _malloc(16 * 4096);
var QHULL_POINT_BUFFER_SIZE = 16* 4096;
var FACET_COUNT_POINTER = _malloc(4);

function executeQHull(points, options) {
  if(points.length === 0) {
    return [];
  }
  if(!options) {
    options = {};
  }
  
  //Reallocate buffers
  var dimension = points[0].length;
  var count = points.length;
  var size = dimension * count;
  if(size * 8 > QHULL_POINT_BUFFER_SIZE) {
    _free(QHULL_POINT_BUFFER);
    var v = size * 8;
    v--;
    v |= v >> 1;
    v |= v >> 2;
    v |= v >> 4;
    v |= v >> 8;
    v |= v >> 16;
    v++;
    QHULL_POINT_BUFFER_SIZE = 8 * v;
    // QHULL_POINT_BUFFER_SIZE = bits.nextPow(size * 8);
    QHULL_POINT_BUFFER = _malloc(QHULL_POINT_BUFFER_SIZE);
  }
  
  //Copy points into buffer
  var offset = QHULL_POINT_BUFFER >>> 3;
  for(var i=0; i<count; ++i) {
    var p = points[i];
    for(var j=0; j<dimension; ++j) {
      Module.HEAPF64[offset++] = p[j];
    }
  }
  
  //Call the library
  var facets = run_qhull(QHULL_POINT_BUFFER, count, dimension, FACET_COUNT_POINTER);
  
  //Unbox facets back into native JS
  var facet_count = Module.HEAP32[FACET_COUNT_POINTER>>2];
  var result = new Array(facet_count);
  var cur_ptr = facets>>2;
  for(var i=0; i<facet_count; ++i) {
    var c_facet = [];
    while(true) {
      var idx = Module.HEAP32[cur_ptr++];
      if(idx < 0) {
        break;
      }
      c_facet.push(idx);
    }
    result[i] = c_facet;
  }
  
  return result;
}

// module.exports = executeQHull;
